"
" DO NOT EDIT
" This file is generated by generate-omnifunc-dictionary.py
"

fun! vex#omnifuncdata#Load() abort

let contexts = {}

" CONTEXT: surface 
let c = {}
let c['Cf'] = [{'word':'Cf','kind':'v','menu':'vector'}]
let c['Of'] = [{'word':'Of','kind':'v','menu':'vector'}]
let c['Af'] = [{'word':'Af','kind':'v','menu':'float'}]
let c['P'] = [{'word':'P','kind':'v','menu':'vector'}]
let c['Pz'] = [{'word':'Pz','kind':'v','menu':'float'}]
let c['I'] = [{'word':'I','kind':'v','menu':'vector'}]
let c['dPds'] = [{'word':'dPds','kind':'v','menu':'vector'}]
let c['dPdt'] = [{'word':'dPdt','kind':'v','menu':'vector'}]
let c['N'] = [{'word':'N','kind':'v','menu':'vector'}]
let c['Ng'] = [{'word':'Ng','kind':'v','menu':'vector'}]
let c['Cl'] = [{'word':'Cl','kind':'v','menu':'vector'}]
let c['L'] = [{'word':'L','kind':'v','menu':'vector'}]
let c['Eye'] = [{'word':'Eye','kind':'v','menu':'vector'}]
let c['s'] = [{'word':'s','kind':'v','menu':'float'}]
let c['t'] = [{'word':'t','kind':'v','menu':'float'}]
let c['Time'] = [{'word':'Time','kind':'v','menu':'float'}]
let c['dPdz'] = [{'word':'dPdz','kind':'v','menu':'float'}]
let c['F'] = [{'word':'F','kind':'v','menu':'bsdf'}]
let c['SID'] = [{'word':'SID','kind':'v','menu':'int'}]
let f = []
call add(f,{'word':'Du','kind':'f','menu':'float(const float)'})
call add(f,{'word':'Du','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'Du','kind':'f','menu':'vector(const vector)'})
let c['Du'] = f
let f = []
call add(f,{'word':'Dv','kind':'f','menu':'float(const float)'})
call add(f,{'word':'Dv','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'Dv','kind':'f','menu':'vector(const vector)'})
let c['Dv'] = f
let f = []
call add(f,{'word':'Dw','kind':'f','menu':'float(const float)'})
call add(f,{'word':'Dw','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'Dw','kind':'f','menu':'vector(const vector)'})
let c['Dw'] = f
let f = []
let c['__jumplight'] = f
let f = []
let c['__nextgather'] = f
let f = []
let c['__nextlight'] = f
let f = []
let c['__ptexture_shift_coord'] = f
let f = []
let c['__resetlights'] = f
let f = []
let c['__testactivelight'] = f
let f = []
let c['_export'] = f
let f = []
call add(f,{'word':'abs','kind':'f','menu':'float(const float)'})
call add(f,{'word':'abs','kind':'f','menu':'int(const int)'})
call add(f,{'word':'abs','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'abs','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'abs','kind':'f','menu':'vector(const vector)'})
let c['abs'] = f
let f = []
call add(f,{'word':'acos','kind':'f','menu':'float(const float)'})
call add(f,{'word':'acos','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'acos','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'acos','kind':'f','menu':'vector(const vector)'})
let c['acos'] = f
let f = []
let c['add'] = f
let f = []
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix2)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix3)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const float)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector4)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector2)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix2[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix3[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const float[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const int[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector4[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const string[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector2[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector[])'})
let c['addattrib'] = f
let f = []
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
let c['adddetailattrib'] = f
let f = []
call add(f,{'word':'addpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'addpoint','kind':'f','menu':'int(const int,const vector)'})
let c['addpoint'] = f
let f = []
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
let c['addpointattrib'] = f
let f = []
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,const int)'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,const int,const int)'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int,const int,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int[],int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int[],int[])'})
let c['addprim'] = f
let f = []
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
let c['addprimattrib'] = f
let f = []
call add(f,{'word':'addvariablename','kind':'f','menu':'int(const int,const string,const string)'})
let c['addvariablename'] = f
let f = []
call add(f,{'word':'addvertex','kind':'f','menu':'int(const int,const int,const int)'})
let c['addvertex'] = f
let f = []
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
let c['addvertexattrib'] = f
let f = []
call add(f,{'word':'addvisualizer','kind':'f','menu':'int(const int,const string)'})
let c['addvisualizer'] = f
let f = []
call add(f,{'word':'agentaddclip','kind':'f','menu':'int(const int,const int,const string,const string,const int)'})
let c['agentaddclip'] = f
let f = []
call add(f,{'word':'agentclipcatalog','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agentclipcatalog','kind':'f','menu':'string[](const string,const int)'})
let c['agentclipcatalog'] = f
let f = []
call add(f,{'word':'agentclipchannel','kind':'f','menu':'int(const int,const int,const string,const string)'})
call add(f,{'word':'agentclipchannel','kind':'f','menu':'int(const string,const int,const string,const string)'})
let c['agentclipchannel'] = f
let f = []
call add(f,{'word':'agentclipchannelnames','kind':'f','menu':'string[](const int,const int,const string)'})
call add(f,{'word':'agentclipchannelnames','kind':'f','menu':'string[](const string,const int,const string)'})
let c['agentclipchannelnames'] = f
let f = []
call add(f,{'word':'agentcliplength','kind':'f','menu':'float(const int,const int,const string)'})
call add(f,{'word':'agentcliplength','kind':'f','menu':'float(const string,const int,const string)'})
let c['agentcliplength'] = f
let f = []
call add(f,{'word':'agentclipnames','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agentclipnames','kind':'f','menu':'string[](const string,const int)'})
let c['agentclipnames'] = f
let f = []
call add(f,{'word':'agentclipsample','kind':'f','menu':'float(const int,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsample','kind':'f','menu':'float(const int,const int,const string,const float,const string)'})
call add(f,{'word':'agentclipsample','kind':'f','menu':'float(const string,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsample','kind':'f','menu':'float(const string,const int,const string,const float,const string)'})
let c['agentclipsample'] = f
let f = []
call add(f,{'word':'agentclipsamplelocal','kind':'f','menu':'matrix(const int,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsamplelocal','kind':'f','menu':'matrix(const string,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsamplelocal','kind':'f','menu':'matrix[](const int,const int,const string,const float)'})
call add(f,{'word':'agentclipsamplelocal','kind':'f','menu':'matrix[](const string,const int,const string,const float)'})
let c['agentclipsamplelocal'] = f
let f = []
call add(f,{'word':'agentclipsamplerate','kind':'f','menu':'float(const int,const int,const string)'})
call add(f,{'word':'agentclipsamplerate','kind':'f','menu':'float(const string,const int,const string)'})
let c['agentclipsamplerate'] = f
let f = []
call add(f,{'word':'agentclipsampleworld','kind':'f','menu':'matrix(const int,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsampleworld','kind':'f','menu':'matrix(const string,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsampleworld','kind':'f','menu':'matrix[](const int,const int,const string,const float)'})
call add(f,{'word':'agentclipsampleworld','kind':'f','menu':'matrix[](const string,const int,const string,const float)'})
let c['agentclipsampleworld'] = f
let f = []
call add(f,{'word':'agentcliptimes','kind':'f','menu':'float[](const int,const int)'})
call add(f,{'word':'agentcliptimes','kind':'f','menu':'float[](const string,const int)'})
let c['agentcliptimes'] = f
let f = []
call add(f,{'word':'agentcliptransformgroups','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agentcliptransformgroups','kind':'f','menu':'string[](const string,const int)'})
let c['agentcliptransformgroups'] = f
let f = []
call add(f,{'word':'agentclipweights','kind':'f','menu':'float[](const int,const int)'})
call add(f,{'word':'agentclipweights','kind':'f','menu':'float[](const string,const int)'})
let c['agentclipweights'] = f
let f = []
call add(f,{'word':'agentcollisionlayer','kind':'f','menu':'string(const int,const int)'})
call add(f,{'word':'agentcollisionlayer','kind':'f','menu':'string(const string,const int)'})
let c['agentcollisionlayer'] = f
let f = []
call add(f,{'word':'agentcurrentlayer','kind':'f','menu':'string(const int,const int)'})
call add(f,{'word':'agentcurrentlayer','kind':'f','menu':'string(const string,const int)'})
let c['agentcurrentlayer'] = f
let f = []
call add(f,{'word':'agentfindtransformgroup','kind':'f','menu':'int(const int,const int,const string)'})
call add(f,{'word':'agentfindtransformgroup','kind':'f','menu':'int(const string,const int,const string)'})
let c['agentfindtransformgroup'] = f
let f = []
call add(f,{'word':'agentlayerbindings','kind':'f','menu':'int[](const int,const int,const string,const string)'})
call add(f,{'word':'agentlayerbindings','kind':'f','menu':'int[](const string,const int,const string,const string)'})
let c['agentlayerbindings'] = f
let f = []
call add(f,{'word':'agentlayers','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agentlayers','kind':'f','menu':'string[](const string,const int)'})
let c['agentlayers'] = f
let f = []
call add(f,{'word':'agentlayershapes','kind':'f','menu':'string[](const int,const int,const string,const int)'})
call add(f,{'word':'agentlayershapes','kind':'f','menu':'string[](const int,const int,const string,const string)'})
call add(f,{'word':'agentlayershapes','kind':'f','menu':'string[](const string,const int,const string,const int)'})
call add(f,{'word':'agentlayershapes','kind':'f','menu':'string[](const string,const int,const string,const string)'})
let c['agentlayershapes'] = f
let f = []
call add(f,{'word':'agentlocaltransform','kind':'f','menu':'matrix(const int,const int,const int)'})
call add(f,{'word':'agentlocaltransform','kind':'f','menu':'matrix(const string,const int,const int)'})
let c['agentlocaltransform'] = f
let f = []
call add(f,{'word':'agentlocaltransforms','kind':'f','menu':'matrix[](const int,const int)'})
call add(f,{'word':'agentlocaltransforms','kind':'f','menu':'matrix[](const string,const int)'})
let c['agentlocaltransforms'] = f
let f = []
call add(f,{'word':'agentrigchildren','kind':'f','menu':'int[](const int,const int,const int)'})
call add(f,{'word':'agentrigchildren','kind':'f','menu':'int[](const string,const int,const int)'})
let c['agentrigchildren'] = f
let f = []
call add(f,{'word':'agentrigfind','kind':'f','menu':'int(const int,const int,const string)'})
call add(f,{'word':'agentrigfind','kind':'f','menu':'int(const string,const int,const string)'})
let c['agentrigfind'] = f
let f = []
call add(f,{'word':'agentrigparent','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'agentrigparent','kind':'f','menu':'int(const string,const int,const int)'})
let c['agentrigparent'] = f
let f = []
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const int,const int,const int,const int[],const matrix[],const int,const int)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const int,const int,const int,const int[],const matrix[],const int,const int,const float,const int)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const int,const int,const int,const int[],const matrix[],const int,const int,const float,const int,const float[],const int[],const int[])'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const int,const int,const int,const int[],const matrix[],const int,const int,const float,const int,const float[],const int[],const int[],const string,const string,const string)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const string,const int,const int,const int[],const matrix[],const int,const int)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const string,const int,const int,const int[],const matrix[],const int,const int,const float,const int)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const string,const int,const int,const int[],const matrix[],const int,const int,const float,const int,const float[],const int[],const int[])'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const string,const int,const int,const int[],const matrix[],const int,const int,const float,const int,const float[],const int[],const int[],const string,const string,const string)'})
let c['agentsolvefbik'] = f
let f = []
call add(f,{'word':'agenttransformcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'agenttransformcount','kind':'f','menu':'int(const string,const int)'})
let c['agenttransformcount'] = f
let f = []
call add(f,{'word':'agenttransformgroupmember','kind':'f','menu':'int(const int,const int,const int,const int)'})
call add(f,{'word':'agenttransformgroupmember','kind':'f','menu':'int(const int,const int,const string,const int)'})
call add(f,{'word':'agenttransformgroupmember','kind':'f','menu':'int(const string,const int,const int,const int)'})
call add(f,{'word':'agenttransformgroupmember','kind':'f','menu':'int(const string,const int,const string,const int)'})
let c['agenttransformgroupmember'] = f
let f = []
call add(f,{'word':'agenttransformgroups','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agenttransformgroups','kind':'f','menu':'string[](const string,const int)'})
let c['agenttransformgroups'] = f
let f = []
call add(f,{'word':'agenttransformgroupweight','kind':'f','menu':'float(const int,const int,const int,const int)'})
call add(f,{'word':'agenttransformgroupweight','kind':'f','menu':'float(const string,const int,const int,const int)'})
let c['agenttransformgroupweight'] = f
let f = []
call add(f,{'word':'agenttransformnames','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agenttransformnames','kind':'f','menu':'string[](const string,const int)'})
let c['agenttransformnames'] = f
let f = []
call add(f,{'word':'agenttransformtolocal','kind':'f','menu':'int(const int,const int,export matrix[])'})
call add(f,{'word':'agenttransformtolocal','kind':'f','menu':'int(const string,const int,export matrix[])'})
let c['agenttransformtolocal'] = f
let f = []
call add(f,{'word':'agenttransformtoworld','kind':'f','menu':'int(const int,const int,export matrix[])'})
call add(f,{'word':'agenttransformtoworld','kind':'f','menu':'int(const string,const int,export matrix[])'})
let c['agenttransformtoworld'] = f
let f = []
call add(f,{'word':'agentworldtransform','kind':'f','menu':'matrix(const int,const int,const int)'})
call add(f,{'word':'agentworldtransform','kind':'f','menu':'matrix(const string,const int,const int)'})
let c['agentworldtransform'] = f
let f = []
call add(f,{'word':'agentworldtransforms','kind':'f','menu':'matrix[](const int,const int)'})
call add(f,{'word':'agentworldtransforms','kind':'f','menu':'matrix[](const string,const int)'})
let c['agentworldtransforms'] = f
let f = []
call add(f,{'word':'albedo','kind':'f','menu':'vector(const bsdf,const int)'})
call add(f,{'word':'albedo','kind':'f','menu':'vector(const bsdf,const vector,const int)'})
call add(f,{'word':'albedo','kind':'f','menu':'vector(const bsdf,const vector)'})
call add(f,{'word':'albedo','kind':'f','menu':'vector(const bsdf)'})
let c['albedo'] = f
let f = []
call add(f,{'word':'ambient','kind':'f','menu':'vector()'})
let c['ambient'] = f
let f = []
let c['and'] = f
let f = []
call add(f,{'word':'anoise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'anoise','kind':'f','menu':'float(const vector,const int,const float,const float)'})
call add(f,{'word':'anoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'anoise','kind':'f','menu':'float(const vector,const int,const int,const int,const int,const float,const float)'})
call add(f,{'word':'anoise','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'anoise','kind':'f','menu':'vector(const vector,const int,const float,const float)'})
call add(f,{'word':'anoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
call add(f,{'word':'anoise','kind':'f','menu':'vector(const vector,const int,const int,const int,const int,const float,const float)'})
let c['anoise'] = f
let f = []
call add(f,{'word':'append','kind':'f','menu':'void(export string,const string)'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix2[],const matrix2)'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix2[],const matrix2[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix3[],const matrix3)'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix3[],const matrix3[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix[],const matrix)'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix[],const matrix[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export float[],const float)'})
call add(f,{'word':'append','kind':'f','menu':'void(export float[],const float[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export int[],const int)'})
call add(f,{'word':'append','kind':'f','menu':'void(export int[],const int[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector4[],const vector4)'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector4[],const vector4[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export string[],const string)'})
call add(f,{'word':'append','kind':'f','menu':'void(export string[],const string[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector2[],const vector2)'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector2[],const vector2[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector[],const vector)'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector[],const vector[])'})
let c['append'] = f
let f = []
call add(f,{'word':'area','kind':'f','menu':'float(const vector)'})
let c['area'] = f
let f = []
call add(f,{'word':'argsort','kind':'f','menu':'int[](const float[])'})
call add(f,{'word':'argsort','kind':'f','menu':'int[](const int[])'})
call add(f,{'word':'argsort','kind':'f','menu':'int[](const string[])'})
let c['argsort'] = f
let f = []
call add(f,{'word':'array','kind':'f','menu':'matrix2[]()'})
call add(f,{'word':'array','kind':'f','menu':'matrix3[]()'})
call add(f,{'word':'array','kind':'f','menu':'matrix[]()'})
call add(f,{'word':'array','kind':'f','menu':'float[]()'})
call add(f,{'word':'array','kind':'f','menu':'int[]()'})
call add(f,{'word':'array','kind':'f','menu':'vector4[]()'})
call add(f,{'word':'array','kind':'f','menu':'string[]()'})
call add(f,{'word':'array','kind':'f','menu':'vector2[]()'})
call add(f,{'word':'array','kind':'f','menu':'vector[]()'})
let c['array'] = f
let f = []
call add(f,{'word':'arraylength','kind':'f','menu':'int(const matrix3)'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const matrix)'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const vector4)'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const vector)'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const matrix3[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const matrix[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const bsdf[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const light[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const lpeaccumulator[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const material[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const float[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const vector4[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const string[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const vector[])'})
let c['arraylength'] = f
let f = []
call add(f,{'word':'ashikhmin','kind':'f','menu':'bsdf(const float,const float,const vector,const vector)'})
call add(f,{'word':'ashikhmin','kind':'f','menu':'bsdf(const vector,const float,const float,const vector,const vector)'})
let c['ashikhmin'] = f
let f = []
call add(f,{'word':'asin','kind':'f','menu':'float(const float)'})
call add(f,{'word':'asin','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'asin','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'asin','kind':'f','menu':'vector(const vector)'})
let c['asin'] = f
let f = []
call add(f,{'word':'assert_enabled','kind':'f','menu':'int()'})
let c['assert_enabled'] = f
let f = []
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,float,const matrix2)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,float,const matrix2)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,float,float,float,float,float,float,const matrix3)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,float,float,float,float,float,float,const matrix3)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,const matrix)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,const matrix)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,float,const vector4)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,float,const vector4)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,const vector)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,const vector)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,const vector2)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,const vector2)'})
let c['assign'] = f
let f = []
call add(f,{'word':'atan','kind':'f','menu':'float(const float)'})
call add(f,{'word':'atan','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'atan','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'atan','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'atan','kind':'f','menu':'vector(const vector)'})
let c['atan'] = f
let f = []
call add(f,{'word':'atan2','kind':'f','menu':'float(const float,const float)'})
let c['atan2'] = f
let f = []
call add(f,{'word':'atof','kind':'f','menu':'float(const string)'})
let c['atof'] = f
let f = []
call add(f,{'word':'atoi','kind':'f','menu':'int(const string)'})
let c['atoi'] = f
let f = []
call add(f,{'word':'atten','kind':'f','menu':'float(const float,const float)'})
let c['atten'] = f
let f = []
call add(f,{'word':'attrib','kind':'f','menu':'matrix2(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix2(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix3(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix3(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'float(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'float(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector4(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector4(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'string(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'string(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector2(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector2(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix2[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix2[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix3[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix3[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'float[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'float[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'int[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'int[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector4[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector4[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'string[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'string[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector2[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector2[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector[](const string,const string,const string,const int)'})
let c['attrib'] = f
let f = []
call add(f,{'word':'attribclass','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'attribclass','kind':'f','menu':'string(const string,const string)'})
let c['attribclass'] = f
let f = []
call add(f,{'word':'attribdataid','kind':'f','menu':'int[](const int,const string,const string)'})
call add(f,{'word':'attribdataid','kind':'f','menu':'int[](const string,const string,const string)'})
let c['attribdataid'] = f
let f = []
call add(f,{'word':'attribsize','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'attribsize','kind':'f','menu':'int(const string,const string,const string)'})
let c['attribsize'] = f
let f = []
call add(f,{'word':'attribtype','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'attribtype','kind':'f','menu':'int(const string,const string,const string)'})
let c['attribtype'] = f
let f = []
call add(f,{'word':'attribtypeinfo','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'attribtypeinfo','kind':'f','menu':'string(const string,const string,const string)'})
let c['attribtypeinfo'] = f
let f = []
call add(f,{'word':'avg','kind':'f','menu':'float(const float)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'avg','kind':'f','menu':'int(const int)'})
call add(f,{'word':'avg','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'avg','kind':'f','menu':'vector4(const vector4,const vector4)'})
call add(f,{'word':'avg','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'avg','kind':'f','menu':'vector2(const vector2,const vector2)'})
call add(f,{'word':'avg','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'avg','kind':'f','menu':'vector(const vector,const vector)'})
call add(f,{'word':'avg','kind':'f','menu':'vector(const vector[])'})
let c['avg'] = f
let f = []
let c['band'] = f
let f = []
let c['bgather'] = f
let f = []
call add(f,{'word':'blackbody','kind':'f','menu':'vector(const float,const float)'})
let c['blackbody'] = f
let f = []
let c['blight'] = f
let f = []
call add(f,{'word':'blinn','kind':'f','menu':'bsdf(const float)'})
call add(f,{'word':'blinn','kind':'f','menu':'bsdf(const vector,const float)'})
call add(f,{'word':'blinn','kind':'f','menu':'vector(const vector,const vector,const float)'})
let c['blinn'] = f
let f = []
call add(f,{'word':'blinnBRDF','kind':'f','menu':'float(const vector,const vector,const vector,const float)'})
let c['blinnBRDF'] = f
let f = []
let c['bnot'] = f
let f = []
let c['bor'] = f
let f = []
call add(f,{'word':'bouncelabel','kind':'f','menu':'string(const int)'})
let c['bouncelabel'] = f
let f = []
call add(f,{'word':'bouncemask','kind':'f','menu':'int(const string)'})
let c['bouncemask'] = f
let f = []
let c['br'] = f
let f = []
let c['break'] = f
let f = []
call add(f,{'word':'bumpmap','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmap','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmap','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmap','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmap'] = f
let f = []
call add(f,{'word':'bumpmapA','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapA','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapA','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapA','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapA'] = f
let f = []
call add(f,{'word':'bumpmapB','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapB','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapB','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapB','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapB'] = f
let f = []
call add(f,{'word':'bumpmapG','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapG','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapG','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapG','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapG'] = f
let f = []
call add(f,{'word':'bumpmapL','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapL','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapL','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapL','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapL'] = f
let f = []
call add(f,{'word':'bumpmapR','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapR','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapR','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapR','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapR'] = f
let f = []
let c['bwhile'] = f
let f = []
let c['bxor'] = f
let f = []
call add(f,{'word':'cbrt','kind':'f','menu':'float(const float)'})
call add(f,{'word':'cbrt','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'cbrt','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'cbrt','kind':'f','menu':'vector(const vector)'})
let c['cbrt'] = f
let f = []
call add(f,{'word':'ceil','kind':'f','menu':'float(const float)'})
call add(f,{'word':'ceil','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'ceil','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'ceil','kind':'f','menu':'vector(const vector)'})
let c['ceil'] = f
let f = []
call add(f,{'word':'ch','kind':'f','menu':'float(const int,const int,const int)'})
call add(f,{'word':'ch','kind':'f','menu':'float(const int,const int,const int,const float)'})
call add(f,{'word':'ch','kind':'f','menu':'float(const string)'})
call add(f,{'word':'ch','kind':'f','menu':'float(const string,const float)'})
call add(f,{'word':'ch','kind':'f','menu':'string(const string)'})
call add(f,{'word':'ch','kind':'f','menu':'string(const string,const float)'})
let c['ch'] = f
let f = []
call add(f,{'word':'ch2','kind':'f','menu':'matrix2(const string)'})
call add(f,{'word':'ch2','kind':'f','menu':'matrix2(const string,const float)'})
let c['ch2'] = f
let f = []
call add(f,{'word':'ch3','kind':'f','menu':'matrix3(const string)'})
call add(f,{'word':'ch3','kind':'f','menu':'matrix3(const string,const float)'})
let c['ch3'] = f
let f = []
call add(f,{'word':'ch4','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'ch4','kind':'f','menu':'matrix(const string,const float)'})
let c['ch4'] = f
let f = []
call add(f,{'word':'chexpr','kind':'f','menu':'float(const string,const string)'})
let c['chexpr'] = f
let f = []
call add(f,{'word':'chexprf','kind':'f','menu':'float(const string,const string,const float)'})
let c['chexprf'] = f
let f = []
call add(f,{'word':'chexprt','kind':'f','menu':'float(const string,const string,const float)'})
let c['chexprt'] = f
let f = []
call add(f,{'word':'chf','kind':'f','menu':'float(const int,const int,const int)'})
call add(f,{'word':'chf','kind':'f','menu':'float(const int,const int,const int,const float)'})
call add(f,{'word':'chf','kind':'f','menu':'float(const string)'})
call add(f,{'word':'chf','kind':'f','menu':'float(const string,const float)'})
let c['chf'] = f
let f = []
call add(f,{'word':'chi','kind':'f','menu':'int(const string)'})
call add(f,{'word':'chi','kind':'f','menu':'int(const string,const float)'})
let c['chi'] = f
let f = []
call add(f,{'word':'chid','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'chid','kind':'f','menu':'void(const string,int,int,int)'})
call add(f,{'word':'chid','kind':'f','menu':'int(const string,int,int)'})
call add(f,{'word':'chid','kind':'f','menu':'void(const string,const string,int,int,int)'})
call add(f,{'word':'chid','kind':'f','menu':'int(const string,const string,int,int)'})
let c['chid'] = f
let f = []
call add(f,{'word':'chop','kind':'f','menu':'matrix(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'matrix(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'matrix(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'float(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'float(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'float(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector4(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector4(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector4(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector2(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector2(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector2(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector(const string,const string,const int)'})
let c['chop'] = f
let f = []
call add(f,{'word':'choplocal','kind':'f','menu':'matrix(const string,const int,const float)'})
call add(f,{'word':'choplocal','kind':'f','menu':'matrix(const string,const int,const int)'})
call add(f,{'word':'choplocal','kind':'f','menu':'matrix(const string,const string,const float)'})
call add(f,{'word':'choplocal','kind':'f','menu':'matrix(const string,const string,const int)'})
let c['choplocal'] = f
let f = []
call add(f,{'word':'choplocalt','kind':'f','menu':'matrix(const string,const int,const float,const float)'})
call add(f,{'word':'choplocalt','kind':'f','menu':'matrix(const string,const int,const int,const float)'})
call add(f,{'word':'choplocalt','kind':'f','menu':'matrix(const string,const string,const float,const float)'})
call add(f,{'word':'choplocalt','kind':'f','menu':'matrix(const string,const string,const int,const float)'})
let c['choplocalt'] = f
let f = []
call add(f,{'word':'chopt','kind':'f','menu':'matrix(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'matrix(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'matrix(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'matrix(const string,const string,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'float(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'float(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'float(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'float(const string,const string,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector4(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector4(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector4(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector4(const string,const string,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector2(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector2(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector2(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector2(const string,const string,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector(const string,const string,const int,const float)'})
let c['chopt'] = f
let f = []
call add(f,{'word':'chp','kind':'f','menu':'vector4(const string)'})
call add(f,{'word':'chp','kind':'f','menu':'vector4(const string,const float)'})
let c['chp'] = f
let f = []
call add(f,{'word':'chr','kind':'f','menu':'string(const int)'})
let c['chr'] = f
let f = []
call add(f,{'word':'chramp','kind':'f','menu':'float(const string,const float)'})
call add(f,{'word':'chramp','kind':'f','menu':'float(const string,const float,const float)'})
call add(f,{'word':'chramp','kind':'f','menu':'vector(const string,const float)'})
call add(f,{'word':'chramp','kind':'f','menu':'vector(const string,const float,const float)'})
let c['chramp'] = f
let f = []
call add(f,{'word':'chs','kind':'f','menu':'string(const string)'})
call add(f,{'word':'chs','kind':'f','menu':'string(const string,const float)'})
let c['chs'] = f
let f = []
call add(f,{'word':'chsraw','kind':'f','menu':'string(const string)'})
let c['chsraw'] = f
let f = []
call add(f,{'word':'chu','kind':'f','menu':'vector2(const string)'})
call add(f,{'word':'chu','kind':'f','menu':'vector2(const string,const float)'})
let c['chu'] = f
let f = []
call add(f,{'word':'chv','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'chv','kind':'f','menu':'vector(const int,const int,const float)'})
call add(f,{'word':'chv','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'chv','kind':'f','menu':'vector(const string,const float)'})
let c['chv'] = f
let f = []
call add(f,{'word':'ckspline','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'ckspline','kind':'f','menu':'vector4(const float,const vector4,const float)'})
call add(f,{'word':'ckspline','kind':'f','menu':'vector(const float,const vector,const float)'})
let c['ckspline'] = f
let f = []
call add(f,{'word':'clamp','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'clamp','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'clamp','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'clamp','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'clamp','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['clamp'] = f
let f = []
call add(f,{'word':'clip','kind':'f','menu':'void(int,export vector,export vector,const vector4)'})
call add(f,{'word':'clip','kind':'f','menu':'int(export vector,export vector,const vector4)'})
call add(f,{'word':'clip','kind':'f','menu':'void(int,export vector,export vector,const vector,const vector)'})
call add(f,{'word':'clip','kind':'f','menu':'int(export vector,export vector,const vector,const vector)'})
let c['clip'] = f
let f = []
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const float,const float)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const float,const float,const float,const float,const float,const float,const float,const float,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const vector)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const float,const float)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const float,const float,const float,const float,const float,const float,const float,const float,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector,const int)'})
let c['colormap'] = f
let f = []
call add(f,{'word':'computenormal','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'computenormal','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['computenormal'] = f
let f = []
call add(f,{'word':'concat','kind':'f','menu':'string(const string,const string)'})
let c['concat'] = f
let f = []
call add(f,{'word':'cone','kind':'f','menu':'bsdf(const vector,const float)'})
call add(f,{'word':'cone','kind':'f','menu':'bsdf(const vector,const vector,const float)'})
let c['cone'] = f
let f = []
call add(f,{'word':'cos','kind':'f','menu':'float(const float)'})
call add(f,{'word':'cos','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'cos','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'cos','kind':'f','menu':'vector(const vector)'})
let c['cos'] = f
let f = []
call add(f,{'word':'cosh','kind':'f','menu':'float(const float)'})
call add(f,{'word':'cosh','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'cosh','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'cosh','kind':'f','menu':'vector(const vector)'})
let c['cosh'] = f
let f = []
call add(f,{'word':'cout','kind':'f','menu':'void()'})
let c['cout'] = f
let f = []
call add(f,{'word':'cracktransform','kind':'f','menu':'void(const int,const int,const vector,const matrix,vector,vector,vector)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'vector(const int,const int,const vector,const matrix,vector,vector)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'void(const int,const int,const vector,const vector,const matrix,vector,vector,vector,vector)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'vector(const int,const int,const vector,const vector,const matrix,vector,vector,vector)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'vector(const int,const int,const int,const vector,const matrix)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'vector(const int,const int,const int,const vector,const vector,const matrix)'})
let c['cracktransform'] = f
let f = []
call add(f,{'word':'create_cdf','kind':'f','menu':'float[](const float[])'})
let c['create_cdf'] = f
let f = []
call add(f,{'word':'create_pdf','kind':'f','menu':'float[](const float[])'})
let c['create_pdf'] = f
let f = []
call add(f,{'word':'cross','kind':'f','menu':'vector(const vector,const vector)'})
let c['cross'] = f
let f = []
call add(f,{'word':'cspline','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'cspline','kind':'f','menu':'vector4(const float,const vector4)'})
call add(f,{'word':'cspline','kind':'f','menu':'vector(const float,const vector)'})
let c['cspline'] = f
let f = []
call add(f,{'word':'ctransform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'ctransform','kind':'f','menu':'vector(const string,const vector)'})
let c['ctransform'] = f
let f = []
call add(f,{'word':'curlnoise','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'curlnoise','kind':'f','menu':'vector(const vector)'})
let c['curlnoise'] = f
let f = []
call add(f,{'word':'curlnoise2d','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'curlnoise2d','kind':'f','menu':'vector(const vector)'})
let c['curlnoise2d'] = f
let f = []
call add(f,{'word':'curlxnoise','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'curlxnoise','kind':'f','menu':'vector(const vector)'})
let c['curlxnoise'] = f
let f = []
call add(f,{'word':'curlxnoise2d','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'curlxnoise2d','kind':'f','menu':'vector(const vector)'})
let c['curlxnoise2d'] = f
let f = []
call add(f,{'word':'cvex_bsdf','kind':'f','menu':'bsdf(const string,const string)'})
let c['cvex_bsdf'] = f
let f = []
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,const float,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,const float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,const float,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,const float,float,float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,const float,int,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,const float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,int,float,float,float,float,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,float,float,float,float,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,int,float,float,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,float,float,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector4,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector4,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector4,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector4,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector4,int,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector4,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector2,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector2,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector2,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector2,float,float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector2,int,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector2,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector,int,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector,int,float,float,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector,float,float,const int,const int,const int)'})
let c['cwnoise'] = f
let f = []
call add(f,{'word':'decode','kind':'f','menu':'string(const string)'})
let c['decode'] = f
let f = []
call add(f,{'word':'degrees','kind':'f','menu':'float(const float)'})
call add(f,{'word':'degrees','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'degrees','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'degrees','kind':'f','menu':'vector(const vector)'})
let c['degrees'] = f
let f = []
call add(f,{'word':'depthmap','kind':'f','menu':'float(const string,const float,const float)'})
call add(f,{'word':'depthmap','kind':'f','menu':'float(const string,const vector)'})
let c['depthmap'] = f
let f = []
call add(f,{'word':'detail','kind':'f','menu':'matrix2(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'float(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'float(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'int(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'string(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'float[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'float[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'int[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector[](const string,const string,const int)'})
let c['detail'] = f
let f = []
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix2(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix2(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix3(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix3(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'float(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'float(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'int(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'int(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector4(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector4(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'string(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'string(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector2(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector2(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix2[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix2[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix3[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix3[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'float[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'float[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'int[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'int[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector4[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector4[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'string[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'string[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector2[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector2[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector[](const string,const string,const int,int)'})
let c['detailattrib'] = f
let f = []
call add(f,{'word':'detailattribsize','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'detailattribsize','kind':'f','menu':'int(const string,const string)'})
let c['detailattribsize'] = f
let f = []
call add(f,{'word':'detailattribtype','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'detailattribtype','kind':'f','menu':'int(const string,const string)'})
let c['detailattribtype'] = f
let f = []
call add(f,{'word':'detailattribtypeinfo','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'detailattribtypeinfo','kind':'f','menu':'string(const string,const string)'})
let c['detailattribtypeinfo'] = f
let f = []
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix2(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix2(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix3(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix3(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'float(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'float(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'int(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector4(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector4(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'string(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector2(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector2(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix2[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix2[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix3[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix3[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'float[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'float[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'int[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector4[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector4[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector2[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector2[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector[](const string,const string)'})
let c['detailintrinsic'] = f
let f = []
call add(f,{'word':'determinant','kind':'f','menu':'float(const matrix2)'})
call add(f,{'word':'determinant','kind':'f','menu':'float(const matrix3)'})
call add(f,{'word':'determinant','kind':'f','menu':'float(const matrix)'})
let c['determinant'] = f
let f = []
call add(f,{'word':'diagonalizesymmetric','kind':'f','menu':'matrix3(const matrix3,vector)'})
let c['diagonalizesymmetric'] = f
let f = []
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf(const float)'})
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf(const vector,const float)'})
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf(const vector,const vector,const float)'})
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf(const vector,const vector)'})
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf(const vector)'})
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf()'})
call add(f,{'word':'diffuse','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'diffuse','kind':'f','menu':'vector(const vector,const vector,const float)'})
let c['diffuse'] = f
let f = []
call add(f,{'word':'diffuseBRDF','kind':'f','menu':'float(const vector,const vector)'})
call add(f,{'word':'diffuseBRDF','kind':'f','menu':'float(const vector,const vector,const vector,const float)'})
let c['diffuseBRDF'] = f
let f = []
call add(f,{'word':'dihedral','kind':'f','menu':'matrix3(const vector,const vector)'})
call add(f,{'word':'dihedral','kind':'f','menu':'vector4(const vector,const vector)'})
let c['dihedral'] = f
let f = []
call add(f,{'word':'dimport','kind':'f','menu':'int(const string,export matrix2)'})
call add(f,{'word':'dimport','kind':'f','menu':'int(const string,export matrix3)'})
call add(f,{'word':'dimport','kind':'f','menu':'int(const string,export matrix)'})
call add(f,{'word':'dimport','kind':'f','menu':'int(const string,export float)'})
call add(f,{'word':'dimport','kind':'f','menu':'int(const string,export int)'})
call add(f,{'word':'dimport','kind':'f','menu':'int(const string,export vector4)'})
call add(f,{'word':'dimport','kind':'f','menu':'int(const string,export string)'})
call add(f,{'word':'dimport','kind':'f','menu':'int(const string,export vector2)'})
call add(f,{'word':'dimport','kind':'f','menu':'int(const string,export vector)'})
let c['dimport'] = f
let f = []
call add(f,{'word':'distance','kind':'f','menu':'float(const vector4,const vector4)'})
call add(f,{'word':'distance','kind':'f','menu':'float(const vector2,const vector2)'})
call add(f,{'word':'distance','kind':'f','menu':'float(const vector,const vector)'})
let c['distance'] = f
let f = []
call add(f,{'word':'distance2','kind':'f','menu':'float(const vector4,const vector4)'})
call add(f,{'word':'distance2','kind':'f','menu':'float(const vector2,const vector2)'})
call add(f,{'word':'distance2','kind':'f','menu':'float(const vector,const vector)'})
let c['distance2'] = f
let f = []
let c['div'] = f
let f = []
call add(f,{'word':'dot','kind':'f','menu':'float(const vector4,const vector4)'})
call add(f,{'word':'dot','kind':'f','menu':'float(const vector4,const vector)'})
call add(f,{'word':'dot','kind':'f','menu':'float(const vector2,const vector2)'})
call add(f,{'word':'dot','kind':'f','menu':'float(const vector,const vector4)'})
call add(f,{'word':'dot','kind':'f','menu':'float(const vector,const vector)'})
let c['dot'] = f
let f = []
call add(f,{'word':'dsmpixel','kind':'f','menu':'int(const string,const string,const int,const int,float[])'})
call add(f,{'word':'dsmpixel','kind':'f','menu':'int(const string,const string,const int,const int,vector4[])'})
call add(f,{'word':'dsmpixel','kind':'f','menu':'int(const string,const string,const int,const int,vector[])'})
let c['dsmpixel'] = f
let f = []
call add(f,{'word':'efit','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
call add(f,{'word':'efit','kind':'f','menu':'vector4(const vector4,const vector4,const vector4,const float,const float)'})
call add(f,{'word':'efit','kind':'f','menu':'vector4(const vector4,const vector4,const vector4,const vector4,const vector4)'})
call add(f,{'word':'efit','kind':'f','menu':'vector2(const vector2,const vector2,const vector2,const float,const float)'})
call add(f,{'word':'efit','kind':'f','menu':'vector2(const vector2,const vector2,const vector2,const vector2,const vector2)'})
call add(f,{'word':'efit','kind':'f','menu':'vector(const vector,const vector,const vector,const float,const float)'})
call add(f,{'word':'efit','kind':'f','menu':'vector(const vector,const vector,const vector,const vector,const vector)'})
let c['efit'] = f
let f = []
call add(f,{'word':'eigenvalues','kind':'f','menu':'void(int,const matrix3,vector,vector)'})
call add(f,{'word':'eigenvalues','kind':'f','menu':'int(const matrix3,vector,vector)'})
let c['eigenvalues'] = f
let f = []
let c['else'] = f
let f = []
call add(f,{'word':'encode','kind':'f','menu':'string(const string)'})
let c['encode'] = f
let f = []
let c['endel'] = f
let f = []
let c['endif'] = f
let f = []
let c['endnotif'] = f
let f = []
call add(f,{'word':'endswith','kind':'f','menu':'int(const string,const string)'})
let c['endswith'] = f
let f = []
call add(f,{'word':'environment','kind':'f','menu':'vector4(const string,const vector)'})
call add(f,{'word':'environment','kind':'f','menu':'vector4(const string,const vector,const float)'})
call add(f,{'word':'environment','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'environment','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'environment','kind':'f','menu':'vector(const string,const vector,const float)'})
call add(f,{'word':'environment','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector)'})
let c['environment'] = f
let f = []
let c['eq'] = f
let f = []
call add(f,{'word':'erf','kind':'f','menu':'float(const float)'})
call add(f,{'word':'erf','kind':'f','menu':'vector2(const vector2)'})
let c['erf'] = f
let f = []
call add(f,{'word':'erf_inv','kind':'f','menu':'float(const float)'})
let c['erf_inv'] = f
let f = []
call add(f,{'word':'erfc','kind':'f','menu':'float(const float)'})
let c['erfc'] = f
let f = []
call add(f,{'word':'error','kind':'f','menu':'void(const string)'})
let c['error'] = f
let f = []
call add(f,{'word':'eulertoquaternion','kind':'f','menu':'vector4(const vector,const int)'})
let c['eulertoquaternion'] = f
let f = []
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,float,const int)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,const int)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,const vector,float,const int)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,const vector,const int)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,const vector)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector)'})
let c['eval_bsdf'] = f
let f = []
call add(f,{'word':'exp','kind':'f','menu':'float(const float)'})
call add(f,{'word':'exp','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'exp','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'exp','kind':'f','menu':'vector(const vector)'})
let c['exp'] = f
let f = []
call add(f,{'word':'expand_udim','kind':'f','menu':'string(const float,const float,const string)'})
let c['expand_udim'] = f
let f = []
call add(f,{'word':'expandedgegroup','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'expandedgegroup','kind':'f','menu':'int[](const string,const string)'})
let c['expandedgegroup'] = f
let f = []
call add(f,{'word':'expandpointgroup','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'expandpointgroup','kind':'f','menu':'int[](const string,const string)'})
let c['expandpointgroup'] = f
let f = []
call add(f,{'word':'expandprimgroup','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'expandprimgroup','kind':'f','menu':'int[](const string,const string)'})
let c['expandprimgroup'] = f
let f = []
call add(f,{'word':'expandvertexgroup','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'expandvertexgroup','kind':'f','menu':'int[](const string,const string)'})
let c['expandvertexgroup'] = f
let f = []
call add(f,{'word':'fastshadow','kind':'f','menu':'float(const vector,const vector,const float)'})
let c['fastshadow'] = f
let f = []
call add(f,{'word':'filamentsample','kind':'f','menu':'vector(const int,const vector)'})
call add(f,{'word':'filamentsample','kind':'f','menu':'vector(const string,const vector)'})
let c['filamentsample'] = f
let f = []
call add(f,{'word':'file_stat','kind':'f','menu':'int(const string,int[])'})
let c['file_stat'] = f
let f = []
call add(f,{'word':'filtershadow','kind':'f','menu':'vector(const vector,const vector,const float)'})
let c['filtershadow'] = f
let f = []
call add(f,{'word':'filterstep','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'filterstep','kind':'f','menu':'float(const float,const float,const float)'})
let c['filterstep'] = f
let f = []
call add(f,{'word':'find','kind':'f','menu':'int(const string,const string)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string,const string,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix2[],const matrix2)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix2[],const matrix2,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix2[],const matrix2,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix3[],const matrix3)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix3[],const matrix3,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix3[],const matrix3,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix[],const matrix)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix[],const matrix,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix[],const matrix,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const float[],const float)'})
call add(f,{'word':'find','kind':'f','menu':'int(const float[],const float,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const float[],const float,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const int[],const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const int[],const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const int[],const int,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector4[],const vector4)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector4[],const vector4,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector4[],const vector4,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string[],const string)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string[],const string,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string[],const string,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector2[],const vector2)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector2[],const vector2,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector2[],const vector2,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector[],const vector)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector[],const vector,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector[],const vector,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string,const string)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string,const string,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix2[],const matrix2)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix2[],const matrix2,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix2[],const matrix2,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix3[],const matrix3)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix3[],const matrix3,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix3[],const matrix3,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix[],const matrix)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix[],const matrix,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix[],const matrix,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const float[],const float)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const float[],const float,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const float[],const float,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const int[],const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const int[],const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const int[],const int,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector4[],const vector4)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector4[],const vector4,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector4[],const vector4,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string[],const string)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string[],const string,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string[],const string,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector2[],const vector2)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector2[],const vector2,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector2[],const vector2,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector[],const vector)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector[],const vector,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector[],const vector,const int,const int)'})
let c['find'] = f
let f = []
call add(f,{'word':'findattribval','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const int,const string,const string,const int,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const int,const string,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const string,const string,const string,const int,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const string,const string,const string,const string)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const string,const string,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int[](const int,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int[](const int,const string,const string,const string)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int[](const string,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int[](const string,const string,const string,const string)'})
let c['findattribval'] = f
let f = []
call add(f,{'word':'findattribvalcount','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'findattribvalcount','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'findattribvalcount','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'findattribvalcount','kind':'f','menu':'int(const string,const string,const string,const string)'})
let c['findattribvalcount'] = f
let f = []
call add(f,{'word':'fit','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
call add(f,{'word':'fit','kind':'f','menu':'vector4(const vector4,const vector4,const vector4,const vector4,const vector4)'})
call add(f,{'word':'fit','kind':'f','menu':'vector2(const vector2,const vector2,const vector2,const vector2,const vector2)'})
call add(f,{'word':'fit','kind':'f','menu':'vector(const vector,const vector,const vector,const vector,const vector)'})
let c['fit'] = f
let f = []
call add(f,{'word':'fit01','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'fit01','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'fit01','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'fit01','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['fit01'] = f
let f = []
call add(f,{'word':'fit10','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'fit10','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'fit10','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'fit10','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['fit10'] = f
let f = []
call add(f,{'word':'fit11','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'fit11','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'fit11','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'fit11','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['fit11'] = f
let f = []
call add(f,{'word':'floor','kind':'f','menu':'float(const float)'})
call add(f,{'word':'floor','kind':'f','menu':'int(const float)'})
call add(f,{'word':'floor','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'floor','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'floor','kind':'f','menu':'vector(const vector)'})
let c['floor'] = f
let f = []
call add(f,{'word':'flownoise','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'float(const vector4,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'float(const vector,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'vector(const float,const float,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'vector(const vector4,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'vector(const vector,const float)'})
let c['flownoise'] = f
let f = []
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const float,const float,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const vector4,const int,const int,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const vector4,const vector4,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const vector,const int,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const vector,const vector,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const float,const float,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const vector4,const int,const int,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const vector4,const vector4,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const vector,const int,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const vector,const vector,const float)'})
let c['flowpnoise'] = f
let f = []
call add(f,{'word':'frac','kind':'f','menu':'float(const float)'})
call add(f,{'word':'frac','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'frac','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'frac','kind':'f','menu':'vector(const vector)'})
let c['frac'] = f
let f = []
call add(f,{'word':'fresnel','kind':'f','menu':'void(const vector,const vector,const float,float,float)'})
call add(f,{'word':'fresnel','kind':'f','menu':'float(const vector,const vector,const float,float)'})
call add(f,{'word':'fresnel','kind':'f','menu':'void(const vector,const vector,const float,float,float,vector,vector)'})
call add(f,{'word':'fresnel','kind':'f','menu':'float(const vector,const vector,const float,float,vector,vector)'})
let c['fresnel'] = f
let f = []
call add(f,{'word':'fromNDC','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'fromNDC','kind':'f','menu':'vector(const vector)'})
let c['fromNDC'] = f
let f = []
call add(f,{'word':'frontface','kind':'f','menu':'vector(const vector,const vector)'})
call add(f,{'word':'frontface','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['frontface'] = f
let f = []
call add(f,{'word':'fuzzify','kind':'f','menu':'float(const string[],const float[],const float[],const float,const float,const float)'})
let c['fuzzify'] = f
let f = []
call add(f,{'word':'fuzzy_and','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_and','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_and'] = f
let f = []
call add(f,{'word':'fuzzy_defuzz_centroid','kind':'f','menu':'float(const float[],const float,const float)'})
let c['fuzzy_defuzz_centroid'] = f
let f = []
call add(f,{'word':'fuzzy_nand','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_nand','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_nand'] = f
let f = []
call add(f,{'word':'fuzzy_nor','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_nor','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_nor'] = f
let f = []
call add(f,{'word':'fuzzy_not','kind':'f','menu':'float(const float)'})
call add(f,{'word':'fuzzy_not','kind':'f','menu':'int(const int)'})
let c['fuzzy_not'] = f
let f = []
call add(f,{'word':'fuzzy_nxor','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_nxor','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_nxor'] = f
let f = []
call add(f,{'word':'fuzzy_or','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_or','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_or'] = f
let f = []
call add(f,{'word':'fuzzy_xor','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_xor','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_xor'] = f
let f = []
let c['ge'] = f
let f = []
call add(f,{'word':'geoself','kind':'f','menu':'int()'})
let c['geoself'] = f
let f = []
call add(f,{'word':'geounwrap','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'geounwrap','kind':'f','menu':'string(const string,const string)'})
let c['geounwrap'] = f
let f = []
call add(f,{'word':'getattrib','kind':'f','menu':'matrix2(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix2(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix3(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix3(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'float(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'float(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'int(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'int(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector4(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector4(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'string(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'string(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector2(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector2(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix2[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix2[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix3[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix3[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'float[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'float[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'int[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'int[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector4[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector4[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'string[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'string[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector2[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector2[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector[](const string,const string,const string,const int,int)'})
let c['getattrib'] = f
let f = []
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,matrix3,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,matrix,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,float,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,int,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,vector4,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,string,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,vector,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,float[],const string,const string,const int,const int)'})
let c['getattribute'] = f
let f = []
call add(f,{'word':'getbbox','kind':'f','menu':'void(const int,const string,vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(const int,const string,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'void(const int,vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(const int,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'void(const string,const string,vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(const string,const string,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'void(const string,vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(const string,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'void(vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(vector)'})
let c['getbbox'] = f
let f = []
call add(f,{'word':'getbbox_center','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getbbox_center','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getbbox_center','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getbbox_center','kind':'f','menu':'vector(const string,const string)'})
let c['getbbox_center'] = f
let f = []
call add(f,{'word':'getbbox_max','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getbbox_max','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getbbox_max','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getbbox_max','kind':'f','menu':'vector(const string,const string)'})
let c['getbbox_max'] = f
let f = []
call add(f,{'word':'getbbox_min','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getbbox_min','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getbbox_min','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getbbox_min','kind':'f','menu':'vector(const string,const string)'})
let c['getbbox_min'] = f
let f = []
call add(f,{'word':'getbbox_size','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getbbox_size','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getbbox_size','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getbbox_size','kind':'f','menu':'vector(const string,const string)'})
let c['getbbox_size'] = f
let f = []
call add(f,{'word':'getblurP','kind':'f','menu':'vector(const float)'})
let c['getblurP'] = f
let f = []
call add(f,{'word':'getbounces','kind':'f','menu':'int(const bsdf)'})
let c['getbounces'] = f
let f = []
call add(f,{'word':'getbounds','kind':'f','menu':'int(const string,const string,vector,vector)'})
call add(f,{'word':'getbounds','kind':'f','menu':'int(const string,vector,vector)'})
let c['getbounds'] = f
let f = []
call add(f,{'word':'getcomp','kind':'f','menu':'matrix2(const matrix2[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'matrix3(const matrix3[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'matrix(const matrix[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'bsdf(const bsdf[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'light(const light[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'lpeaccumulator(const lpeaccumulator[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'material(const material[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const matrix2,const int,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const matrix3,const int,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const matrix,const int,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const vector4,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const vector2,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const vector,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const float[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'int(const int[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'vector4(const vector4[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'string(const string,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'string(const string[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'vector2(const vector2[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'vector(const vector[],const int)'})
let c['getcomp'] = f
let f = []
call add(f,{'word':'getcomponents','kind':'f','menu':'string[]()'})
let c['getcomponents'] = f
let f = []
call add(f,{'word':'getderiv','kind':'f','menu':'void(const float,const string,const int,const float,const float,float,float)'})
call add(f,{'word':'getderiv','kind':'f','menu':'float(const float,const string,const int,const float,const float,float)'})
call add(f,{'word':'getderiv','kind':'f','menu':'void(const vector4,const string,const int,const float,const float,vector4,vector4)'})
call add(f,{'word':'getderiv','kind':'f','menu':'vector4(const vector4,const string,const int,const float,const float,vector4)'})
call add(f,{'word':'getderiv','kind':'f','menu':'void(const vector,const string,const int,const float,const float,vector,vector)'})
call add(f,{'word':'getderiv','kind':'f','menu':'vector(const vector,const string,const int,const float,const float,vector)'})
let c['getderiv'] = f
let f = []
let c['getelem'] = f
let f = []
call add(f,{'word':'getfogname','kind':'f','menu':'string()'})
let c['getfogname'] = f
let f = []
call add(f,{'word':'getglobalraylevel','kind':'f','menu':'int()'})
let c['getglobalraylevel'] = f
let f = []
call add(f,{'word':'getgroupid','kind':'f','menu':'int()'})
let c['getgroupid'] = f
let f = []
call add(f,{'word':'getlight','kind':'f','menu':'light(const int)'})
let c['getlight'] = f
let f = []
call add(f,{'word':'getlightid','kind':'f','menu':'int(const string)'})
let c['getlightid'] = f
let f = []
call add(f,{'word':'getlightname','kind':'f','menu':'string()'})
call add(f,{'word':'getlightname','kind':'f','menu':'string(const int)'})
let c['getlightname'] = f
let f = []
call add(f,{'word':'getlights','kind':'f','menu':'int[]()'})
call add(f,{'word':'getlights','kind':'f','menu':'int[](const material,const vector)'})
call add(f,{'word':'getlights','kind':'f','menu':'int[](const vector)'})
let c['getlights'] = f
let f = []
call add(f,{'word':'getlightscope','kind':'f','menu':'void(const material,string,string)'})
call add(f,{'word':'getlightscope','kind':'f','menu':'string(const material,string)'})
let c['getlightscope'] = f
let f = []
call add(f,{'word':'getlocalcurvature','kind':'f','menu':'vector(const float,const float)'})
let c['getlocalcurvature'] = f
let f = []
call add(f,{'word':'getmaterial','kind':'f','menu':'material()'})
let c['getmaterial'] = f
let f = []
call add(f,{'word':'getmaterialid','kind':'f','menu':'int()'})
let c['getmaterialid'] = f
let f = []
call add(f,{'word':'getobjectid','kind':'f','menu':'int()'})
let c['getobjectid'] = f
let f = []
call add(f,{'word':'getobjectname','kind':'f','menu':'string()'})
let c['getobjectname'] = f
let f = []
call add(f,{'word':'getpackedtransform','kind':'f','menu':'matrix(const int,const int)'})
let c['getpackedtransform'] = f
let f = []
call add(f,{'word':'getphotonlight','kind':'f','menu':'int()'})
let c['getphotonlight'] = f
let f = []
call add(f,{'word':'getpointbbox','kind':'f','menu':'void(const int,const string,vector,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'vector(const int,const string,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'void(const int,vector,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'vector(const int,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'void(const string,const string,vector,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'vector(const string,const string,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'void(const string,vector,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'vector(const string,vector)'})
let c['getpointbbox'] = f
let f = []
call add(f,{'word':'getpointbbox_center','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getpointbbox_center','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getpointbbox_center','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getpointbbox_center','kind':'f','menu':'vector(const string,const string)'})
let c['getpointbbox_center'] = f
let f = []
call add(f,{'word':'getpointbbox_max','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getpointbbox_max','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getpointbbox_max','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getpointbbox_max','kind':'f','menu':'vector(const string,const string)'})
let c['getpointbbox_max'] = f
let f = []
call add(f,{'word':'getpointbbox_min','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getpointbbox_min','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getpointbbox_min','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getpointbbox_min','kind':'f','menu':'vector(const string,const string)'})
let c['getpointbbox_min'] = f
let f = []
call add(f,{'word':'getpointbbox_size','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getpointbbox_size','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getpointbbox_size','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getpointbbox_size','kind':'f','menu':'vector(const string,const string)'})
let c['getpointbbox_size'] = f
let f = []
call add(f,{'word':'getprimid','kind':'f','menu':'int()'})
let c['getprimid'] = f
let f = []
call add(f,{'word':'getptextureid','kind':'f','menu':'int()'})
let c['getptextureid'] = f
let f = []
call add(f,{'word':'getraylevel','kind':'f','menu':'int()'})
let c['getraylevel'] = f
let f = []
call add(f,{'word':'getrayweight','kind':'f','menu':'float()'})
let c['getrayweight'] = f
let f = []
call add(f,{'word':'getsamplestore','kind':'f','menu':'int(const string,const vector,float)'})
call add(f,{'word':'getsamplestore','kind':'f','menu':'int(const string,const vector,int)'})
call add(f,{'word':'getsamplestore','kind':'f','menu':'int(const string,const vector,vector4)'})
call add(f,{'word':'getsamplestore','kind':'f','menu':'int(const string,const vector,vector)'})
let c['getsamplestore'] = f
let f = []
call add(f,{'word':'getscope','kind':'f','menu':'void(const material,const string,string,string)'})
call add(f,{'word':'getscope','kind':'f','menu':'string(const material,const string,string)'})
let c['getscope'] = f
let f = []
call add(f,{'word':'getsmoothP','kind':'f','menu':'int(vector,const vector)'})
call add(f,{'word':'getsmoothP','kind':'f','menu':'vector()'})
let c['getsmoothP'] = f
let f = []
call add(f,{'word':'getspace','kind':'f','menu':'matrix(const string,const string)'})
let c['getspace'] = f
let f = []
call add(f,{'word':'getuvtangents','kind':'f','menu':'void(const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'getuvtangents','kind':'f','menu':'vector(const string,const vector,const vector,vector)'})
call add(f,{'word':'getuvtangents','kind':'f','menu':'void(const string,const vector,const vector,vector,vector,vector)'})
call add(f,{'word':'getuvtangents','kind':'f','menu':'vector(const string,const vector,const vector,vector,vector)'})
let c['getuvtangents'] = f
let f = []
call add(f,{'word':'gradient','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'gradient','kind':'f','menu':'vector(const vector,const float)'})
let c['gradient'] = f
let f = []
call add(f,{'word':'gradient3d','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['gradient3d'] = f
let f = []
let c['gt'] = f
let f = []
call add(f,{'word':'hair','kind':'f','menu':'bsdf(const vector,const vector,const float,const float,const float,const float,const float)'})
call add(f,{'word':'hair','kind':'f','menu':'bsdf(const vector,const vector,const float,const float,const float)'})
call add(f,{'word':'hair','kind':'f','menu':'bsdf(const vector,const vector,const float,const float)'})
let c['hair'] = f
let f = []
call add(f,{'word':'has_udim','kind':'f','menu':'int(const string)'})
let c['has_udim'] = f
let f = []
call add(f,{'word':'hasattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'hasattrib','kind':'f','menu':'int(const string,const string,const string)'})
let c['hasattrib'] = f
let f = []
call add(f,{'word':'hasdetailattrib','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'hasdetailattrib','kind':'f','menu':'int(const string,const string)'})
let c['hasdetailattrib'] = f
let f = []
call add(f,{'word':'haslight','kind':'f','menu':'int(const material,const vector,const int)'})
let c['haslight'] = f
let f = []
call add(f,{'word':'haspointattrib','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'haspointattrib','kind':'f','menu':'int(const string,const string)'})
let c['haspointattrib'] = f
let f = []
call add(f,{'word':'hasprimattrib','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'hasprimattrib','kind':'f','menu':'int(const string,const string)'})
let c['hasprimattrib'] = f
let f = []
call add(f,{'word':'hasvertexattrib','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'hasvertexattrib','kind':'f','menu':'int(const string,const string)'})
let c['hasvertexattrib'] = f
let f = []
call add(f,{'word':'hedge_dstpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_dstpoint','kind':'f','menu':'int(const string,const int)'})
let c['hedge_dstpoint'] = f
let f = []
call add(f,{'word':'hedge_dstvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_dstvertex','kind':'f','menu':'int(const string,const int)'})
let c['hedge_dstvertex'] = f
let f = []
call add(f,{'word':'hedge_equivcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_equivcount','kind':'f','menu':'int(const string,const int)'})
let c['hedge_equivcount'] = f
let f = []
call add(f,{'word':'hedge_isequiv','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'hedge_isequiv','kind':'f','menu':'int(const string,const int,const int)'})
let c['hedge_isequiv'] = f
let f = []
call add(f,{'word':'hedge_isprimary','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_isprimary','kind':'f','menu':'int(const string,const int)'})
let c['hedge_isprimary'] = f
let f = []
call add(f,{'word':'hedge_isvalid','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_isvalid','kind':'f','menu':'int(const string,const int)'})
let c['hedge_isvalid'] = f
let f = []
call add(f,{'word':'hedge_next','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_next','kind':'f','menu':'int(const string,const int)'})
let c['hedge_next'] = f
let f = []
call add(f,{'word':'hedge_nextequiv','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_nextequiv','kind':'f','menu':'int(const string,const int)'})
let c['hedge_nextequiv'] = f
let f = []
call add(f,{'word':'hedge_postdstpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_postdstpoint','kind':'f','menu':'int(const string,const int)'})
let c['hedge_postdstpoint'] = f
let f = []
call add(f,{'word':'hedge_postdstvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_postdstvertex','kind':'f','menu':'int(const string,const int)'})
let c['hedge_postdstvertex'] = f
let f = []
call add(f,{'word':'hedge_presrcpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_presrcpoint','kind':'f','menu':'int(const string,const int)'})
let c['hedge_presrcpoint'] = f
let f = []
call add(f,{'word':'hedge_presrcvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_presrcvertex','kind':'f','menu':'int(const string,const int)'})
let c['hedge_presrcvertex'] = f
let f = []
call add(f,{'word':'hedge_prev','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_prev','kind':'f','menu':'int(const string,const int)'})
let c['hedge_prev'] = f
let f = []
call add(f,{'word':'hedge_prim','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_prim','kind':'f','menu':'int(const string,const int)'})
let c['hedge_prim'] = f
let f = []
call add(f,{'word':'hedge_primary','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_primary','kind':'f','menu':'int(const string,const int)'})
let c['hedge_primary'] = f
let f = []
call add(f,{'word':'hedge_srcpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_srcpoint','kind':'f','menu':'int(const string,const int)'})
let c['hedge_srcpoint'] = f
let f = []
call add(f,{'word':'hedge_srcvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_srcvertex','kind':'f','menu':'int(const string,const int)'})
let c['hedge_srcvertex'] = f
let f = []
call add(f,{'word':'henyeygreenstein','kind':'f','menu':'bsdf(const float)'})
let c['henyeygreenstein'] = f
let f = []
call add(f,{'word':'hscript_noise','kind':'f','menu':'float(const vector)'})
let c['hscript_noise'] = f
let f = []
call add(f,{'word':'hscript_rand','kind':'f','menu':'float(const float)'})
call add(f,{'word':'hscript_rand','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'hscript_rand','kind':'f','menu':'vector(const float)'})
let c['hscript_rand'] = f
let f = []
call add(f,{'word':'hscript_snoise','kind':'f','menu':'float(const vector)'})
let c['hscript_snoise'] = f
let f = []
call add(f,{'word':'hscript_sturb','kind':'f','menu':'float(const vector,const int)'})
let c['hscript_sturb'] = f
let f = []
call add(f,{'word':'hscript_turb','kind':'f','menu':'float(const vector,const int)'})
let c['hscript_turb'] = f
let f = []
call add(f,{'word':'hsvtorgb','kind':'f','menu':'vector(const float,const float,const float)'})
call add(f,{'word':'hsvtorgb','kind':'f','menu':'vector(const vector)'})
let c['hsvtorgb'] = f
let f = []
call add(f,{'word':'ident','kind':'f','menu':'matrix2()'})
call add(f,{'word':'ident','kind':'f','menu':'matrix3()'})
call add(f,{'word':'ident','kind':'f','menu':'matrix()'})
let c['ident'] = f
let f = []
call add(f,{'word':'idtopoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'idtopoint','kind':'f','menu':'int(const string,const int)'})
let c['idtopoint'] = f
let f = []
call add(f,{'word':'idtoprim','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'idtoprim','kind':'f','menu':'int(const string,const int)'})
let c['idtoprim'] = f
let f = []
let c['if'] = f
let f = []
call add(f,{'word':'importance_light','kind':'f','menu':'float(const int)'})
let c['importance_light'] = f
let f = []
call add(f,{'word':'inedgegroup','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'inedgegroup','kind':'f','menu':'int(const string,const string,const int,const int)'})
let c['inedgegroup'] = f
let f = []
call add(f,{'word':'inpointgroup','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'inpointgroup','kind':'f','menu':'int(const string,const string,const int)'})
let c['inpointgroup'] = f
let f = []
call add(f,{'word':'inprimgroup','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'inprimgroup','kind':'f','menu':'int(const string,const string,const int)'})
let c['inprimgroup'] = f
let f = []
call add(f,{'word':'insert','kind':'f','menu':'void(export string,const int,const string)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix2[],const int,const matrix2)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix2[],const int,const matrix2[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix3[],const int,const matrix3)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix3[],const int,const matrix3[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix[],const int,const matrix)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix[],const int,const matrix[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export float[],const int,const float)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export float[],const int,const float[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export int[],const int,const int)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export int[],const int,const int[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector4[],const int,const vector4)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector4[],const int,const vector4[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export string[],const int,const string)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export string[],const int,const string[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector2[],const int,const vector2)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector2[],const int,const vector2[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector[],const int,const vector)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector[],const int,const vector[])'})
let c['insert'] = f
let f = []
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector4,const vector4)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector4,const vector4,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector4,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector4,const vector,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector)'})
let c['instance'] = f
let f = []
call add(f,{'word':'integrate3d','kind':'f','menu':'float(const string,const string,const vector,const vector)'})
call add(f,{'word':'integrate3d','kind':'f','menu':'vector4(const string,const string,const vector,const vector)'})
call add(f,{'word':'integrate3d','kind':'f','menu':'vector(const string,const string,const vector,const vector)'})
let c['integrate3d'] = f
let f = []
call add(f,{'word':'integrate3dClip','kind':'f','menu':'int(const string,const string,export vector,export vector,const float)'})
let c['integrate3dClip'] = f
let f = []
call add(f,{'word':'interpolate','kind':'f','menu':'bsdf(const bsdf,const float,const float)'})
call add(f,{'word':'interpolate','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'interpolate','kind':'f','menu':'vector4(const vector4,const float,const float)'})
call add(f,{'word':'interpolate','kind':'f','menu':'vector(const vector,const float,const float)'})
let c['interpolate'] = f
let f = []
call add(f,{'word':'intersect','kind':'f','menu':'int(const int,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const int,const vector,const vector,vector,float,float)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const int,const vector,const vector,vector,vector)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const string,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const string,const vector,const vector,vector,float,float)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const string,const vector,const vector,vector,vector)'})
let c['intersect'] = f
let f = []
call add(f,{'word':'intersect3d','kind':'f','menu':'int(const string,const string,const vector,const vector,const float)'})
let c['intersect3d'] = f
let f = []
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const int,const string,const vector,const vector,vector[],int[],vector[])'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const int,const string,const vector,const vector,vector[],int[],vector[],const float,const float)'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const int,const vector,const vector,vector[],int[],vector[])'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const int,const vector,const vector,vector[],int[],vector[],const float,const float)'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const string,const string,const vector,const vector,vector[],int[],vector[])'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const string,const string,const vector,const vector,vector[],int[],vector[],const float,const float)'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const string,const vector,const vector,vector[],int[],vector[])'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const string,const vector,const vector,vector[],int[],vector[],const float,const float)'})
let c['intersect_all'] = f
let f = []
call add(f,{'word':'intersect_lights','kind':'f','menu':'int(const int[],const vector,const vector,const float,int,float,vector,float)'})
let c['intersect_lights'] = f
let f = []
call add(f,{'word':'invert','kind':'f','menu':'matrix2(const matrix2)'})
call add(f,{'word':'invert','kind':'f','menu':'matrix3(const matrix3)'})
call add(f,{'word':'invert','kind':'f','menu':'matrix(const matrix)'})
let c['invert'] = f
let f = []
call add(f,{'word':'invertexgroup','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'invertexgroup','kind':'f','menu':'int(const string,const string,const int)'})
let c['invertexgroup'] = f
let f = []
call add(f,{'word':'irradiance','kind':'f','menu':'vector(const vector,const vector)'})
let c['irradiance'] = f
let f = []
call add(f,{'word':'isalpha','kind':'f','menu':'int(const string)'})
let c['isalpha'] = f
let f = []
call add(f,{'word':'isbound','kind':'f','menu':'int(const string)'})
let c['isbound'] = f
let f = []
call add(f,{'word':'isdigit','kind':'f','menu':'int(const string)'})
let c['isdigit'] = f
let f = []
call add(f,{'word':'isfinite','kind':'f','menu':'int(const float)'})
let c['isfinite'] = f
let f = []
call add(f,{'word':'islpeactive','kind':'f','menu':'int()'})
let c['islpeactive'] = f
let f = []
call add(f,{'word':'isnan','kind':'f','menu':'int(const float)'})
let c['isnan'] = f
let f = []
call add(f,{'word':'isotropic','kind':'f','menu':'bsdf()'})
let c['isotropic'] = f
let f = []
call add(f,{'word':'israytracing','kind':'f','menu':'int()'})
let c['israytracing'] = f
let f = []
call add(f,{'word':'isshadowray','kind':'f','menu':'int()'})
let c['isshadowray'] = f
let f = []
call add(f,{'word':'isuvrendering','kind':'f','menu':'int()'})
let c['isuvrendering'] = f
let f = []
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(const string,const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export matrix2[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export matrix3[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export matrix[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export float[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export int[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export vector4[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export string[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export vector2[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export vector[],const int)'})
let c['isvalidindex'] = f
let f = []
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix2)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix3)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const bsdf)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const light)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const lpeaccumulator)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const material)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const float)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const int)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector4)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const string)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector2)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix2[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix3[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const bsdf[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const light[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const lpeaccumulator[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const material[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const float[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector4[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const string[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector2[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector[])'})
let c['isvarying'] = f
let f = []
call add(f,{'word':'itoa','kind':'f','menu':'string(const int)'})
let c['itoa'] = f
let f = []
call add(f,{'word':'join','kind':'f','menu':'string(const string[],const string)'})
let c['join'] = f
let f = []
let c['jump'] = f
let f = []
call add(f,{'word':'kspline','kind':'f','menu':'float(const string,const float,const float,const float)'})
call add(f,{'word':'kspline','kind':'f','menu':'vector4(const string,const float,const vector4,const float)'})
call add(f,{'word':'kspline','kind':'f','menu':'vector(const string,const float,const vector,const float)'})
let c['kspline'] = f
let f = []
let c['le'] = f
let f = []
call add(f,{'word':'len','kind':'f','menu':'int(const matrix2)'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix3)'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix)'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector4)'})
call add(f,{'word':'len','kind':'f','menu':'int(const string)'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector2)'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector)'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix2[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix3[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const bsdf[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const light[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const lpeaccumulator[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const material[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const float[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector4[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const string[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector2[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector[])'})
let c['len'] = f
let f = []
call add(f,{'word':'length','kind':'f','menu':'float(const float)'})
call add(f,{'word':'length','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'length','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'length','kind':'f','menu':'float(const vector)'})
let c['length'] = f
let f = []
call add(f,{'word':'length2','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'length2','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'length2','kind':'f','menu':'float(const vector)'})
let c['length2'] = f
let f = []
call add(f,{'word':'lerp','kind':'f','menu':'bsdf(const bsdf,const bsdf,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector4(const vector4,const vector4,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector2(const vector2,const vector2,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector(const vector,const vector,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['lerp'] = f
let f = []
call add(f,{'word':'lightbounces','kind':'f','menu':'int(const light)'})
let c['lightbounces'] = f
let f = []
call add(f,{'word':'lightid','kind':'f','menu':'int(const light)'})
let c['lightid'] = f
let f = []
call add(f,{'word':'limit_sample_space','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'limit_sample_space','kind':'f','menu':'float(const float,const float,const float)'})
let c['limit_sample_space'] = f
let f = []
call add(f,{'word':'limport','kind':'f','menu':'int(const string,export matrix2)'})
call add(f,{'word':'limport','kind':'f','menu':'int(const string,export matrix3)'})
call add(f,{'word':'limport','kind':'f','menu':'int(const string,export matrix)'})
call add(f,{'word':'limport','kind':'f','menu':'int(const string,export float)'})
call add(f,{'word':'limport','kind':'f','menu':'int(const string,export int)'})
call add(f,{'word':'limport','kind':'f','menu':'int(const string,export vector4)'})
call add(f,{'word':'limport','kind':'f','menu':'int(const string,export string)'})
call add(f,{'word':'limport','kind':'f','menu':'int(const string,export vector2)'})
call add(f,{'word':'limport','kind':'f','menu':'int(const string,export vector)'})
let c['limport'] = f
let f = []
call add(f,{'word':'lkspline','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'lkspline','kind':'f','menu':'vector4(const float,const vector4,const float)'})
call add(f,{'word':'lkspline','kind':'f','menu':'vector(const float,const vector,const float)'})
let c['lkspline'] = f
let f = []
call add(f,{'word':'log','kind':'f','menu':'float(const float)'})
call add(f,{'word':'log','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'log','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'log','kind':'f','menu':'vector(const vector)'})
let c['log'] = f
let f = []
call add(f,{'word':'log10','kind':'f','menu':'float(const float)'})
call add(f,{'word':'log10','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'log10','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'log10','kind':'f','menu':'vector(const vector)'})
let c['log10'] = f
let f = []
call add(f,{'word':'lookat','kind':'f','menu':'matrix3(const vector,const vector)'})
call add(f,{'word':'lookat','kind':'f','menu':'matrix3(const vector,const vector,const float)'})
call add(f,{'word':'lookat','kind':'f','menu':'matrix3(const vector,const vector,const vector)'})
call add(f,{'word':'lookat','kind':'f','menu':'vector(const vector,const vector,const float,const int)'})
call add(f,{'word':'lookat','kind':'f','menu':'vector(const vector,const vector,const vector,const int)'})
let c['lookat'] = f
let f = []
let c['loop'] = f
let f = []
call add(f,{'word':'lspline','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'lspline','kind':'f','menu':'vector4(const float,const vector4)'})
call add(f,{'word':'lspline','kind':'f','menu':'vector(const float,const vector)'})
let c['lspline'] = f
let f = []
call add(f,{'word':'lstrip','kind':'f','menu':'string(const string)'})
call add(f,{'word':'lstrip','kind':'f','menu':'string(const string,const string)'})
let c['lstrip'] = f
let f = []
let c['lt'] = f
let f = []
call add(f,{'word':'luminance','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'luminance','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'luminance','kind':'f','menu':'float(const vector)'})
let c['luminance'] = f
let f = []
call add(f,{'word':'makebasis','kind':'f','menu':'void(vector,vector,const vector)'})
call add(f,{'word':'makebasis','kind':'f','menu':'vector(vector,const vector)'})
call add(f,{'word':'makebasis','kind':'f','menu':'void(export vector,export vector,const vector,const vector)'})
let c['makebasis'] = f
let f = []
call add(f,{'word':'maketransform','kind':'f','menu':'matrix3(const int,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix3(const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const int,const int,const vector,const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const int,const int,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const int,const int,const vector,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const int,const int,const vector,const vector,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const vector,const vector,const vector)'})
let c['maketransform'] = f
let f = []
call add(f,{'word':'mask_bsdf','kind':'f','menu':'bsdf(const bsdf,const int)'})
let c['mask_bsdf'] = f
let f = []
call add(f,{'word':'match','kind':'f','menu':'int(const string,const string)'})
let c['match'] = f
let f = []
call add(f,{'word':'matchvex_blinn','kind':'f','menu':'bsdf(const float)'})
call add(f,{'word':'matchvex_blinn','kind':'f','menu':'bsdf(const vector,const float)'})
let c['matchvex_blinn'] = f
let f = []
call add(f,{'word':'matchvex_specular','kind':'f','menu':'bsdf(const float)'})
call add(f,{'word':'matchvex_specular','kind':'f','menu':'bsdf(const vector,const float)'})
let c['matchvex_specular'] = f
let f = []
call add(f,{'word':'max','kind':'f','menu':'float(const float)'})
call add(f,{'word':'max','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'max','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'max','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'max','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'max','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'max','kind':'f','menu':'int(const int)'})
call add(f,{'word':'max','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'max','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'max','kind':'f','menu':'vector4(const vector4,const vector4)'})
call add(f,{'word':'max','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'max','kind':'f','menu':'vector2(const vector2,const vector2)'})
call add(f,{'word':'max','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'max','kind':'f','menu':'vector(const vector,const vector)'})
call add(f,{'word':'max','kind':'f','menu':'vector(const vector[])'})
let c['max'] = f
let f = []
let c['measured'] = f
let f = []
let c['merge'] = f
let f = []
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,matrix2)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,matrix3)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,matrix)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,float)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,int)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,vector4)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,vector2)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'matrix3[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'matrix[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'float[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'vector4[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'vector[](const string,const string,const vector)'})
let c['metaimport'] = f
let f = []
call add(f,{'word':'metamarch','kind':'f','menu':'int(export int,const string,export vector,export vector,const float)'})
let c['metamarch'] = f
let f = []
call add(f,{'word':'metanext','kind':'f','menu':'int(const int)'})
let c['metanext'] = f
let f = []
call add(f,{'word':'metastart','kind':'f','menu':'int(const string,const vector)'})
let c['metastart'] = f
let f = []
call add(f,{'word':'metaweight','kind':'f','menu':'float(const string,const vector)'})
let c['metaweight'] = f
let f = []
call add(f,{'word':'min','kind':'f','menu':'float(const float)'})
call add(f,{'word':'min','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'min','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'min','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'min','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'min','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'min','kind':'f','menu':'int(const int)'})
call add(f,{'word':'min','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'min','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'min','kind':'f','menu':'vector4(const vector4,const vector4)'})
call add(f,{'word':'min','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'min','kind':'f','menu':'vector2(const vector2,const vector2)'})
call add(f,{'word':'min','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'min','kind':'f','menu':'vector(const vector,const vector)'})
call add(f,{'word':'min','kind':'f','menu':'vector(const vector[])'})
let c['min'] = f
let f = []
call add(f,{'word':'minpos','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const int,const string,const vector,const float)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const int,const vector)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const int,const vector,const float)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const string,const string,const vector,const float)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const string,const vector,const float)'})
let c['minpos'] = f
let f = []
let c['mod'] = f
let f = []
let c['mul'] = f
let f = []
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,const float,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,const float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,const float,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,const float,float,float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,const float,int,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,const float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,int,float,float,float,float,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,float,float,float,float,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,int,float,float,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,float,float,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector4,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector4,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector4,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector4,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector4,int,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector4,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector2,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector2,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector2,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector2,float,float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector2,int,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector2,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector,int,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector,int,float,float,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector,float,float,const int,const int,const int)'})
let c['mwnoise'] = f
let f = []
call add(f,{'word':'nametopoint','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nametopoint','kind':'f','menu':'int(const string,const string)'})
let c['nametopoint'] = f
let f = []
call add(f,{'word':'nametoprim','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nametoprim','kind':'f','menu':'int(const string,const string)'})
let c['nametoprim'] = f
let f = []
call add(f,{'word':'nbouncetypes','kind':'f','menu':'int()'})
let c['nbouncetypes'] = f
let f = []
let c['ne'] = f
let f = []
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const int,const string,const vector,const float)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const int,const vector)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const int,const vector,const float)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const string,const string,const vector)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const string,const string,const vector,const float)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const string,const vector)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const string,const vector,const float)'})
let c['nearpoint'] = f
let f = []
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const int,const string,const vector,const float)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const int,const string,const vector,const float,const int)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const int,const vector,const float)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const int,const vector,const float,const int)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const string,const string,const vector,const float)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const string,const string,const vector,const float,const int)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const string,const vector,const float)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const string,const vector,const float,const int)'})
let c['nearpoints'] = f
let f = []
call add(f,{'word':'nedgesgroup','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nedgesgroup','kind':'f','menu':'int(const string,const string)'})
let c['nedgesgroup'] = f
let f = []
let c['neg'] = f
let f = []
call add(f,{'word':'neighbour','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'neighbour','kind':'f','menu':'int(const string,const int,const int)'})
let c['neighbour'] = f
let f = []
call add(f,{'word':'neighbourcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'neighbourcount','kind':'f','menu':'int(const string,const int)'})
let c['neighbourcount'] = f
let f = []
call add(f,{'word':'neighbours','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'neighbours','kind':'f','menu':'int[](const string,const int)'})
let c['neighbours'] = f
let f = []
call add(f,{'word':'newsampler','kind':'f','menu':'int()'})
call add(f,{'word':'newsampler','kind':'f','menu':'int(const int)'})
let c['newsampler'] = f
let f = []
call add(f,{'word':'nextsample','kind':'f','menu':'void(export int,float,float)'})
call add(f,{'word':'nextsample','kind':'f','menu':'float(export int,float)'})
call add(f,{'word':'nextsample','kind':'f','menu':'void(export int,vector)'})
call add(f,{'word':'nextsample','kind':'f','menu':'vector(export int)'})
let c['nextsample'] = f
let f = []
let c['ngather'] = f
let f = []
let c['nlight'] = f
let f = []
call add(f,{'word':'noise','kind':'f','menu':'float(const float)'})
call add(f,{'word':'noise','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'noise','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'noise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'noise','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'noise','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'noise','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'noise','kind':'f','menu':'vector(const vector)'})
let c['noise'] = f
let f = []
call add(f,{'word':'noised','kind':'f','menu':'void(const float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'float(const float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const float,const float,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'float(const float,const float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const float,const float,vector,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'vector(const float,const float,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const float,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'vector(const float,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const vector4,float,float,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'float(const vector4,float,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const vector4,vector,vector,vector,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'vector(const vector4,vector,vector,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const vector,float,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'float(const vector,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const vector,vector,vector,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'vector(const vector,vector,vector,vector)'})
let c['noised'] = f
let f = []
let c['nop'] = f
let f = []
call add(f,{'word':'normal_bsdf','kind':'f','menu':'vector(const bsdf)'})
let c['normal_bsdf'] = f
let f = []
call add(f,{'word':'normalize','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'normalize','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'normalize','kind':'f','menu':'vector(const vector)'})
let c['normalize'] = f
let f = []
let c['not'] = f
let f = []
let c['notif'] = f
let f = []
call add(f,{'word':'npoints','kind':'f','menu':'int(const int)'})
call add(f,{'word':'npoints','kind':'f','menu':'int(const string)'})
let c['npoints'] = f
let f = []
call add(f,{'word':'npointsgroup','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'npointsgroup','kind':'f','menu':'int(const string,const string)'})
let c['npointsgroup'] = f
let f = []
call add(f,{'word':'nprimitives','kind':'f','menu':'int(const int)'})
call add(f,{'word':'nprimitives','kind':'f','menu':'int(const string)'})
let c['nprimitives'] = f
let f = []
call add(f,{'word':'nprimitivesgroup','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nprimitivesgroup','kind':'f','menu':'int(const string,const string)'})
let c['nprimitivesgroup'] = f
let f = []
call add(f,{'word':'nrandom','kind':'f','menu':'float()'})
call add(f,{'word':'nrandom','kind':'f','menu':'void(float,float)'})
call add(f,{'word':'nrandom','kind':'f','menu':'float(float)'})
call add(f,{'word':'nrandom','kind':'f','menu':'vector4()'})
call add(f,{'word':'nrandom','kind':'f','menu':'vector()'})
let c['nrandom'] = f
let f = []
call add(f,{'word':'ntransform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'ntransform','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'ntransform','kind':'f','menu':'vector(const vector,const matrix)'})
let c['ntransform'] = f
let f = []
call add(f,{'word':'nuniqueval','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'nuniqueval','kind':'f','menu':'int(const string,const string,const string)'})
let c['nuniqueval'] = f
let f = []
call add(f,{'word':'nvertices','kind':'f','menu':'int(const int)'})
call add(f,{'word':'nvertices','kind':'f','menu':'int(const string)'})
let c['nvertices'] = f
let f = []
call add(f,{'word':'nverticesgroup','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nverticesgroup','kind':'f','menu':'int(const string,const string)'})
let c['nverticesgroup'] = f
let f = []
call add(f,{'word':'occlusion','kind':'f','menu':'void(float,vector,const vector,const vector)'})
call add(f,{'word':'occlusion','kind':'f','menu':'float(vector,const vector,const vector)'})
call add(f,{'word':'occlusion','kind':'f','menu':'vector(const vector,const vector)'})
let c['occlusion'] = f
let f = []
call add(f,{'word':'ocean_sample','kind':'f','menu':'vector(const string,const int,const int,const int,const float,const float,const int,const int,const vector)'})
let c['ocean_sample'] = f
let f = []
call add(f,{'word':'ocio_activedisplays','kind':'f','menu':'string[]()'})
let c['ocio_activedisplays'] = f
let f = []
call add(f,{'word':'ocio_activeviews','kind':'f','menu':'string[]()'})
let c['ocio_activeviews'] = f
let f = []
call add(f,{'word':'ocio_import','kind':'f','menu':'int(const string,const string,int)'})
call add(f,{'word':'ocio_import','kind':'f','menu':'int(const string,const string,string)'})
call add(f,{'word':'ocio_import','kind':'f','menu':'int(const string,const string,vector)'})
let c['ocio_import'] = f
let f = []
call add(f,{'word':'ocio_roles','kind':'f','menu':'string[]()'})
let c['ocio_roles'] = f
let f = []
call add(f,{'word':'ocio_spaces','kind':'f','menu':'string[]()'})
let c['ocio_spaces'] = f
let f = []
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector4(const string,const vector4)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector4(const string,const string,const vector4)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector4(const string,const string,const string,const vector4)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector(const string,const string,const string,const vector)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector(const string,const vector)'})
let c['ocio_transform'] = f
let f = []
call add(f,{'word':'onoise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'onoise','kind':'f','menu':'float(const vector,const int,const float,const float)'})
call add(f,{'word':'onoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'onoise','kind':'f','menu':'float(const vector,const int,const int,const int,const int,const float,const float)'})
call add(f,{'word':'onoise','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'onoise','kind':'f','menu':'vector(const vector,const int,const float,const float)'})
call add(f,{'word':'onoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
call add(f,{'word':'onoise','kind':'f','menu':'vector(const vector,const int,const int,const int,const int,const float,const float)'})
let c['onoise'] = f
let f = []
call add(f,{'word':'opdigits','kind':'f','menu':'int()'})
call add(f,{'word':'opdigits','kind':'f','menu':'int(const string)'})
let c['opdigits'] = f
let f = []
call add(f,{'word':'opend','kind':'f','menu':'void(const int)'})
let c['opend'] = f
let f = []
call add(f,{'word':'opfullpath','kind':'f','menu':'string(const string)'})
let c['opfullpath'] = f
let f = []
call add(f,{'word':'opid','kind':'f','menu':'int(const int)'})
call add(f,{'word':'opid','kind':'f','menu':'int(const string)'})
let c['opid'] = f
let f = []
call add(f,{'word':'opparentbonetransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'opparentbonetransform','kind':'f','menu':'matrix(const string,const float)'})
let c['opparentbonetransform'] = f
let f = []
call add(f,{'word':'opparenttransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'opparenttransform','kind':'f','menu':'matrix(const string,const float)'})
let c['opparenttransform'] = f
let f = []
call add(f,{'word':'opparmtransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'opparmtransform','kind':'f','menu':'matrix(const string,const float)'})
let c['opparmtransform'] = f
let f = []
call add(f,{'word':'oppreconstrainttransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'oppreconstrainttransform','kind':'f','menu':'matrix(const string,const float)'})
let c['oppreconstrainttransform'] = f
let f = []
call add(f,{'word':'oppretransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'oppretransform','kind':'f','menu':'matrix(const string,const float)'})
let c['oppretransform'] = f
let f = []
call add(f,{'word':'opstart','kind':'f','menu':'int(const string)'})
let c['opstart'] = f
let f = []
call add(f,{'word':'optransform','kind':'f','menu':'matrix(const int)'})
call add(f,{'word':'optransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'optransform','kind':'f','menu':'matrix(const string,const float)'})
let c['optransform'] = f
let f = []
let c['or'] = f
let f = []
call add(f,{'word':'ord','kind':'f','menu':'int(const string)'})
let c['ord'] = f
let f = []
call add(f,{'word':'orthographic','kind':'f','menu':'matrix(const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'orthographic','kind':'f','menu':'matrix(const float,const float,const float,const float,const float,const float,const vector4)'})
let c['orthographic'] = f
let f = []
call add(f,{'word':'osd_facecount','kind':'f','menu':'int(const int)'})
call add(f,{'word':'osd_facecount','kind':'f','menu':'int(const string)'})
let c['osd_facecount'] = f
let f = []
call add(f,{'word':'osd_firstpatch','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'osd_firstpatch','kind':'f','menu':'int(const string,const int)'})
let c['osd_firstpatch'] = f
let f = []
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix2)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix3)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,float)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector4)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector2)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,float[])'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix2)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix3)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,float)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector4)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector2)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,float[])'})
let c['osd_limitsurface'] = f
let f = []
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix2)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix3)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,float)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector4)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector2)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,float[])'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix2)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix3)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,float)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector4)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector2)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,float[])'})
let c['osd_limitsurfacevertex'] = f
let f = []
call add(f,{'word':'osd_lookupface','kind':'f','menu':'int(const int,const int,const float,const float,int,float,float)'})
call add(f,{'word':'osd_lookupface','kind':'f','menu':'int(const int,const int,const float,const float,int,float,float,const string)'})
call add(f,{'word':'osd_lookupface','kind':'f','menu':'int(const string,const int,const float,const float,int,float,float)'})
call add(f,{'word':'osd_lookupface','kind':'f','menu':'int(const string,const int,const float,const float,int,float,float,const string)'})
let c['osd_lookupface'] = f
let f = []
call add(f,{'word':'osd_lookuppatch','kind':'f','menu':'int(const int,const int,const float,const float,int,float,float)'})
call add(f,{'word':'osd_lookuppatch','kind':'f','menu':'int(const int,const int,const float,const float,int,float,float,const string)'})
call add(f,{'word':'osd_lookuppatch','kind':'f','menu':'int(const string,const int,const float,const float,int,float,float)'})
call add(f,{'word':'osd_lookuppatch','kind':'f','menu':'int(const string,const int,const float,const float,int,float,float,const string)'})
let c['osd_lookuppatch'] = f
let f = []
call add(f,{'word':'osd_patchcount','kind':'f','menu':'int(const int)'})
call add(f,{'word':'osd_patchcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'osd_patchcount','kind':'f','menu':'int(const string)'})
call add(f,{'word':'osd_patchcount','kind':'f','menu':'int(const string,const int)'})
let c['osd_patchcount'] = f
let f = []
call add(f,{'word':'osd_patches','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'osd_patches','kind':'f','menu':'int[](const string,const int)'})
let c['osd_patches'] = f
let f = []
call add(f,{'word':'outerproduct','kind':'f','menu':'matrix2(const vector2,const vector2)'})
call add(f,{'word':'outerproduct','kind':'f','menu':'matrix3(const vector,const vector)'})
call add(f,{'word':'outerproduct','kind':'f','menu':'matrix(const vector4,const vector4)'})
let c['outerproduct'] = f
let f = []
call add(f,{'word':'ow_nspace','kind':'f','menu':'vector(const vector)'})
let c['ow_nspace'] = f
let f = []
call add(f,{'word':'ow_space','kind':'f','menu':'matrix()'})
call add(f,{'word':'ow_space','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'ow_space','kind':'f','menu':'vector(const vector)'})
let c['ow_space'] = f
let f = []
call add(f,{'word':'ow_vspace','kind':'f','menu':'vector(const vector)'})
let c['ow_vspace'] = f
let f = []
call add(f,{'word':'pack_inttosafefloat','kind':'f','menu':'float(const int)'})
let c['pack_inttosafefloat'] = f
let f = []
call add(f,{'word':'packedtransform','kind':'f','menu':'void(const int,const int,const matrix)'})
let c['packedtransform'] = f
let f = []
call add(f,{'word':'pathtrace','kind':'f','menu':'vector(const vector,const vector)'})
let c['pathtrace'] = f
let f = []
call add(f,{'word':'pcclose','kind':'f','menu':'void(export int)'})
let c['pcclose'] = f
let f = []
call add(f,{'word':'pcconvex','kind':'f','menu':'float(const int,const string,const vector)'})
let c['pcconvex'] = f
let f = []
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const vector,const float)'})
let c['pcexport'] = f
let f = []
call add(f,{'word':'pcfarthest','kind':'f','menu':'float(const int)'})
let c['pcfarthest'] = f
let f = []
call add(f,{'word':'pcfilter','kind':'f','menu':'matrix3(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'float(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'vector4(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'vector(const int,const string)'})
let c['pcfilter'] = f
let f = []
call add(f,{'word':'pcfind','kind':'f','menu':'int[](const int,const string,const string,const vector,const float,const int)'})
call add(f,{'word':'pcfind','kind':'f','menu':'int[](const int,const string,const vector,const float,const int)'})
call add(f,{'word':'pcfind','kind':'f','menu':'int[](const string,const string,const string,const vector,const float,const int)'})
call add(f,{'word':'pcfind','kind':'f','menu':'int[](const string,const string,const vector,const float,const int)'})
let c['pcfind'] = f
let f = []
call add(f,{'word':'pcfind_radius','kind':'f','menu':'int[](const int,const string,const string,const float,const vector,const float,const int)'})
call add(f,{'word':'pcfind_radius','kind':'f','menu':'int[](const int,const string,const string,const string,const float,const vector,const float,const int)'})
call add(f,{'word':'pcfind_radius','kind':'f','menu':'int[](const string,const string,const string,const float,const vector,const float,const int)'})
call add(f,{'word':'pcfind_radius','kind':'f','menu':'int[](const string,const string,const string,const string,const float,const vector,const float,const int)'})
let c['pcfind_radius'] = f
let f = []
call add(f,{'word':'pcgenerate','kind':'f','menu':'int(const string,const int)'})
let c['pcgenerate'] = f
let f = []
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,matrix3)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,matrix)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,float)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,int)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,vector4)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,string)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,vector)'})
let c['pcimport'] = f
let f = []
call add(f,{'word':'pcimportbyidx3','kind':'f','menu':'matrix3(const int,const string,const int)'})
let c['pcimportbyidx3'] = f
let f = []
call add(f,{'word':'pcimportbyidx4','kind':'f','menu':'matrix(const int,const string,const int)'})
let c['pcimportbyidx4'] = f
let f = []
call add(f,{'word':'pcimportbyidxf','kind':'f','menu':'float(const int,const string,const int)'})
let c['pcimportbyidxf'] = f
let f = []
call add(f,{'word':'pcimportbyidxi','kind':'f','menu':'int(const int,const string,const int)'})
let c['pcimportbyidxi'] = f
let f = []
call add(f,{'word':'pcimportbyidxp','kind':'f','menu':'vector4(const int,const string,const int)'})
let c['pcimportbyidxp'] = f
let f = []
call add(f,{'word':'pcimportbyidxs','kind':'f','menu':'string(const int,const string,const int)'})
let c['pcimportbyidxs'] = f
let f = []
call add(f,{'word':'pcimportbyidxv','kind':'f','menu':'vector(const int,const string,const int)'})
let c['pcimportbyidxv'] = f
let f = []
call add(f,{'word':'pciterate','kind':'f','menu':'int(const int)'})
let c['pciterate'] = f
let f = []
call add(f,{'word':'pcnumfound','kind':'f','menu':'int(const int)'})
let c['pcnumfound'] = f
let f = []
call add(f,{'word':'pcopen','kind':'f','menu':'int(const int,const string,const vector,const float,const int)'})
call add(f,{'word':'pcopen','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'pcopen','kind':'f','menu':'int(const string,const string,const vector,const float,const int)'})
call add(f,{'word':'pcopen','kind':'f','menu':'int(const string,const string,const vector,const string,const vector,const float,const int)'})
let c['pcopen'] = f
let f = []
call add(f,{'word':'pcopenlod','kind':'f','menu':'int(const string,const string,const vector,const int)'})
let c['pcopenlod'] = f
let f = []
call add(f,{'word':'pcsampleleaf','kind':'f','menu':'void(const int,const float)'})
let c['pcsampleleaf'] = f
let f = []
call add(f,{'word':'pcsize','kind':'f','menu':'int(const int)'})
let c['pcsize'] = f
let f = []
call add(f,{'word':'pcunshaded','kind':'f','menu':'int(const int,const string)'})
let c['pcunshaded'] = f
let f = []
call add(f,{'word':'pcwrite','kind':'f','menu':'int(const string)'})
let c['pcwrite'] = f
let f = []
call add(f,{'word':'perspective','kind':'f','menu':'matrix(const float,const float,const float,const float,const float)'})
call add(f,{'word':'perspective','kind':'f','menu':'matrix(const float,const float,const float,const float,const float,const vector4)'})
let c['perspective'] = f
let f = []
call add(f,{'word':'pgfind','kind':'f','menu':'int[](const int,const string,const vector,const float,const int,const float)'})
call add(f,{'word':'pgfind','kind':'f','menu':'int[](const int,const vector,const float,const int,const float)'})
call add(f,{'word':'pgfind','kind':'f','menu':'int[](const string,const string,const vector,const float,const int,const float)'})
call add(f,{'word':'pgfind','kind':'f','menu':'int[](const string,const vector,const float,const int,const float)'})
let c['pgfind'] = f
let f = []
call add(f,{'word':'phong','kind':'f','menu':'bsdf(const float)'})
call add(f,{'word':'phong','kind':'f','menu':'bsdf(const vector,const float)'})
call add(f,{'word':'phong','kind':'f','menu':'vector(const vector,const vector,const float)'})
let c['phong'] = f
let f = []
call add(f,{'word':'phongBRDF','kind':'f','menu':'float(const vector,const vector,const vector,const float)'})
let c['phongBRDF'] = f
let f = []
call add(f,{'word':'phonglobe','kind':'f','menu':'bsdf(const vector,const float,const float,const vector,const vector)'})
call add(f,{'word':'phonglobe','kind':'f','menu':'bsdf(const vector,const float)'})
call add(f,{'word':'phonglobe','kind':'f','menu':'bsdf(const vector,const vector,const float,const float,const vector,const vector)'})
call add(f,{'word':'phonglobe','kind':'f','menu':'bsdf(const vector,const vector,const float)'})
let c['phonglobe'] = f
let f = []
call add(f,{'word':'photonmap','kind':'f','menu':'vector(const string,const vector,const vector)'})
call add(f,{'word':'photonmap','kind':'f','menu':'void(const string,const vector,const vector,vector,float)'})
call add(f,{'word':'photonmap','kind':'f','menu':'vector(const string,const vector,const vector,float)'})
let c['photonmap'] = f
let f = []
call add(f,{'word':'planepointdistance','kind':'f','menu':'float(const vector,const vector,const vector,vector)'})
let c['planepointdistance'] = f
let f = []
call add(f,{'word':'planesphereintersect','kind':'f','menu':'int(const vector,const vector,const vector,const float,vector,float,float)'})
let c['planesphereintersect'] = f
let f = []
call add(f,{'word':'pluralize','kind':'f','menu':'string(const string)'})
let c['pluralize'] = f
let f = []
call add(f,{'word':'pnoise','kind':'f','menu':'float(const float,const float,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const float,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const vector4,const vector4)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const vector,const vector)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const float,const float,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const float,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const vector4,const vector4)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const vector,const vector)'})
let c['pnoise'] = f
let f = []
call add(f,{'word':'point','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector[](const string,const string,const int)'})
let c['point'] = f
let f = []
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix2(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix2(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix3(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix3(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'float(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'float(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'int(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'int(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector4(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector4(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'string(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'string(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector2(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector2(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix2[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix2[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix3[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix3[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'float[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'float[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'int[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'int[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector4[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector4[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'string[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'string[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector2[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector2[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector[](const string,const string,const int,int)'})
let c['pointattrib'] = f
let f = []
call add(f,{'word':'pointattribsize','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'pointattribsize','kind':'f','menu':'int(const string,const string)'})
let c['pointattribsize'] = f
let f = []
call add(f,{'word':'pointattribtype','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'pointattribtype','kind':'f','menu':'int(const string,const string)'})
let c['pointattribtype'] = f
let f = []
call add(f,{'word':'pointattribtypeinfo','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'pointattribtypeinfo','kind':'f','menu':'string(const string,const string)'})
let c['pointattribtypeinfo'] = f
let f = []
call add(f,{'word':'pointedge','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'pointedge','kind':'f','menu':'int(const string,const int,const int)'})
let c['pointedge'] = f
let f = []
call add(f,{'word':'pointhedge','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'pointhedge','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'pointhedge','kind':'f','menu':'int(const string,const int)'})
call add(f,{'word':'pointhedge','kind':'f','menu':'int(const string,const int,const int)'})
let c['pointhedge'] = f
let f = []
call add(f,{'word':'pointhedgenext','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'pointhedgenext','kind':'f','menu':'int(const string,const int)'})
let c['pointhedgenext'] = f
let f = []
call add(f,{'word':'pointprims','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'pointprims','kind':'f','menu':'int[](const string,const int)'})
let c['pointprims'] = f
let f = []
call add(f,{'word':'pointvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'pointvertex','kind':'f','menu':'int(const string,const int)'})
let c['pointvertex'] = f
let f = []
call add(f,{'word':'pointvertices','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'pointvertices','kind':'f','menu':'int[](const string,const int)'})
let c['pointvertices'] = f
let f = []
call add(f,{'word':'polardecomp','kind':'f','menu':'matrix3(const matrix3)'})
let c['polardecomp'] = f
let f = []
call add(f,{'word':'polyneighbours','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'polyneighbours','kind':'f','menu':'int[](const string,const int)'})
let c['polyneighbours'] = f
let f = []
call add(f,{'word':'pop','kind':'f','menu':'matrix2(export matrix2[])'})
call add(f,{'word':'pop','kind':'f','menu':'matrix2(export matrix2[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'matrix3(export matrix3[])'})
call add(f,{'word':'pop','kind':'f','menu':'matrix3(export matrix3[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'matrix(export matrix[])'})
call add(f,{'word':'pop','kind':'f','menu':'matrix(export matrix[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'bsdf(export bsdf[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'light(export light[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'lpeaccumulator(export lpeaccumulator[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'material(export material[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'bsdf(export bsdf[])'})
call add(f,{'word':'pop','kind':'f','menu':'light(export light[])'})
call add(f,{'word':'pop','kind':'f','menu':'lpeaccumulator(export lpeaccumulator[])'})
call add(f,{'word':'pop','kind':'f','menu':'material(export material[])'})
call add(f,{'word':'pop','kind':'f','menu':'float(export float[])'})
call add(f,{'word':'pop','kind':'f','menu':'float(export float[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'int(export int[])'})
call add(f,{'word':'pop','kind':'f','menu':'int(export int[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'vector4(export vector4[])'})
call add(f,{'word':'pop','kind':'f','menu':'vector4(export vector4[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'string(export string[])'})
call add(f,{'word':'pop','kind':'f','menu':'string(export string[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'vector2(export vector2[])'})
call add(f,{'word':'pop','kind':'f','menu':'vector2(export vector2[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'vector(export vector[])'})
call add(f,{'word':'pop','kind':'f','menu':'vector(export vector[],const int)'})
let c['pop'] = f
let f = []
let c['popinline'] = f
let f = []
call add(f,{'word':'pow','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'pow','kind':'f','menu':'vector4(const vector4,const float)'})
call add(f,{'word':'pow','kind':'f','menu':'vector2(const vector2,const float)'})
call add(f,{'word':'pow','kind':'f','menu':'vector(const vector,const float)'})
let c['pow'] = f
let f = []
call add(f,{'word':'predicate_incircle','kind':'f','menu':'float(const vector2,const vector2,const vector2,const vector2)'})
let c['predicate_incircle'] = f
let f = []
call add(f,{'word':'predicate_insphere','kind':'f','menu':'float(const vector,const vector,const vector,const vector,const vector)'})
let c['predicate_insphere'] = f
let f = []
call add(f,{'word':'predicate_orient2d','kind':'f','menu':'float(const vector2,const vector2,const vector2)'})
let c['predicate_orient2d'] = f
let f = []
call add(f,{'word':'predicate_orient3d','kind':'f','menu':'float(const vector,const vector,const vector,const vector)'})
let c['predicate_orient3d'] = f
let f = []
call add(f,{'word':'prerotate','kind':'f','menu':'void(export matrix3,const float,const vector)'})
call add(f,{'word':'prerotate','kind':'f','menu':'void(export matrix3,const vector,const int)'})
call add(f,{'word':'prerotate','kind':'f','menu':'void(export matrix,const float,const vector)'})
call add(f,{'word':'prerotate','kind':'f','menu':'void(export matrix,const vector,const int)'})
let c['prerotate'] = f
let f = []
call add(f,{'word':'prescale','kind':'f','menu':'void(export matrix3,const vector)'})
call add(f,{'word':'prescale','kind':'f','menu':'void(export matrix,const vector)'})
let c['prescale'] = f
let f = []
call add(f,{'word':'pretranslate','kind':'f','menu':'void(export matrix,const vector)'})
let c['pretranslate'] = f
let f = []
call add(f,{'word':'prim','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector[](const string,const string,const int)'})
let c['prim'] = f
let f = []
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix2,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix3,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix3,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,float,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,float,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,int,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,int,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector4,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector4,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector2,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix2[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix3[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,float[],const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,float[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,int[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector4[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector2[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector[],const string,const int,const vector)'})
let c['prim_attribute'] = f
let f = []
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const int,const int,const float,const float)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const int,const int,const float,const float,const float)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const string,const int,const float,const float)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const string,const int,const float,const float,const float)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const string,const int,const vector)'})
let c['prim_normal'] = f
let f = []
call add(f,{'word':'primarclen','kind':'f','menu':'float(const string,const vector2,const vector2,const int)'})
call add(f,{'word':'primarclen','kind':'f','menu':'float(const string,const vector2,const vector2,const int,const int)'})
let c['primarclen'] = f
let f = []
call add(f,{'word':'primattrib','kind':'f','menu':'matrix2(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix2(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix3(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix3(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'float(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'float(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'int(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'int(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector4(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector4(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'string(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'string(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector2(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector2(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix2[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix2[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix3[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix3[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'float[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'float[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'int[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'int[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector4[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector4[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'string[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'string[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector2[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector2[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector[](const string,const string,const int,int)'})
let c['primattrib'] = f
let f = []
call add(f,{'word':'primattribsize','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'primattribsize','kind':'f','menu':'int(const string,const string)'})
let c['primattribsize'] = f
let f = []
call add(f,{'word':'primattribtype','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'primattribtype','kind':'f','menu':'int(const string,const string)'})
let c['primattribtype'] = f
let f = []
call add(f,{'word':'primattribtypeinfo','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'primattribtypeinfo','kind':'f','menu':'string(const string,const string)'})
let c['primattribtypeinfo'] = f
let f = []
call add(f,{'word':'primduv','kind':'f','menu':'vector(const string,const int,const vector2,const int,const int)'})
let c['primduv'] = f
let f = []
call add(f,{'word':'primfind','kind':'f','menu':'int[](const int,const string,const vector,const vector)'})
call add(f,{'word':'primfind','kind':'f','menu':'int[](const int,const vector,const vector)'})
call add(f,{'word':'primfind','kind':'f','menu':'int[](const string,const string,const vector,const vector)'})
call add(f,{'word':'primfind','kind':'f','menu':'int[](const string,const vector,const vector)'})
let c['primfind'] = f
let f = []
call add(f,{'word':'primhedge','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'primhedge','kind':'f','menu':'int(const string,const int)'})
let c['primhedge'] = f
let f = []
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector[](const string,const string,const int)'})
let c['primintrinsic'] = f
let f = []
call add(f,{'word':'primpoint','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'primpoint','kind':'f','menu':'int(const string,const int,const int)'})
let c['primpoint'] = f
let f = []
call add(f,{'word':'primpoints','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'primpoints','kind':'f','menu':'int[](const string,const int)'})
let c['primpoints'] = f
let f = []
call add(f,{'word':'primuv','kind':'f','menu':'matrix2(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix2(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix3(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix3(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'float(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'float(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'int(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'int(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector4(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector4(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector2(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector2(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix2[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix2[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix3[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix3[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'float[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'float[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'int[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'int[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector4[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector4[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector2[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector2[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector[](const string,const string,const int,const vector)'})
let c['primuv'] = f
let f = []
call add(f,{'word':'primuvconvert','kind':'f','menu':'vector2(const string,const vector2,const int,const int)'})
call add(f,{'word':'primuvconvert','kind':'f','menu':'vector2(const string,const vector2,const int,const int,const float)'})
let c['primuvconvert'] = f
let f = []
call add(f,{'word':'primvertex','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'primvertex','kind':'f','menu':'int(const string,const int,const int)'})
let c['primvertex'] = f
let f = []
call add(f,{'word':'primvertexcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'primvertexcount','kind':'f','menu':'int(const string,const int)'})
let c['primvertexcount'] = f
let f = []
call add(f,{'word':'primvertices','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'primvertices','kind':'f','menu':'int[](const string,const int)'})
let c['primvertices'] = f
let f = []
call add(f,{'word':'print_once','kind':'f','menu':'void(const string)'})
let c['print_once'] = f
let f = []
call add(f,{'word':'printf','kind':'f','menu':'void(const string)'})
let c['printf'] = f
let f = []
call add(f,{'word':'product','kind':'f','menu':'float(const float)'})
call add(f,{'word':'product','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'product','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'product','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'product','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'product','kind':'f','menu':'int(const int)'})
call add(f,{'word':'product','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'product','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'product','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'product','kind':'f','menu':'vector(const vector[])'})
let c['product'] = f
let f = []
call add(f,{'word':'ptexture','kind':'f','menu':'matrix3(const string,const int)'})
call add(f,{'word':'ptexture','kind':'f','menu':'matrix3(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'matrix3(const string,const int,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'matrix(const string,const int)'})
call add(f,{'word':'ptexture','kind':'f','menu':'matrix(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'matrix(const string,const int,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'float(const string,const int)'})
call add(f,{'word':'ptexture','kind':'f','menu':'float(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'float(const string,const int,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector4(const string,const int)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector4(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector4(const string,const int,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector(const string,const int)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector(const string,const int,const float,const float,const float,const float,const float,const float)'})
let c['ptexture'] = f
let f = []
call add(f,{'word':'ptlined','kind':'f','menu':'float(const vector,const vector,const vector)'})
let c['ptlined'] = f
let f = []
call add(f,{'word':'ptransform','kind':'f','menu':'vector4(const vector4,const matrix)'})
call add(f,{'word':'ptransform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'ptransform','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'ptransform','kind':'f','menu':'vector(const vector,const matrix)'})
let c['ptransform'] = f
let f = []
call add(f,{'word':'push','kind':'f','menu':'void(export matrix2[],const matrix2)'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix2[],const matrix2[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix3[],const matrix3)'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix3[],const matrix3[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix[],const matrix)'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix[],const matrix[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export bsdf[],const bsdf)'})
call add(f,{'word':'push','kind':'f','menu':'void(export light[],const light)'})
call add(f,{'word':'push','kind':'f','menu':'void(export lpeaccumulator[],const lpeaccumulator)'})
call add(f,{'word':'push','kind':'f','menu':'void(export material[],const material)'})
call add(f,{'word':'push','kind':'f','menu':'void(export bsdf[],const bsdf[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export light[],const light[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export lpeaccumulator[],const lpeaccumulator[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export material[],const material[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export float[],const float)'})
call add(f,{'word':'push','kind':'f','menu':'void(export float[],const float[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export int[],const int)'})
call add(f,{'word':'push','kind':'f','menu':'void(export int[],const int[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector4[],const vector4)'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector4[],const vector4[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export string[],const string)'})
call add(f,{'word':'push','kind':'f','menu':'void(export string[],const string[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector2[],const vector2)'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector2[],const vector2[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector[],const vector)'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector[],const vector[])'})
let c['push'] = f
let f = []
let c['pushinline'] = f
let f = []
call add(f,{'word':'pxnoise','kind':'f','menu':'float(const float,const float,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'float(const float,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'float(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'vector(const float,const float,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'vector(const float,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'vector(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
let c['pxnoise'] = f
let f = []
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const float,const float,const int,const int,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'float(const float,const float,const int,const int,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const float,const float,const int,const int,vector,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'vector(const float,const float,const int,const int,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const float,const int,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'float(const float,const int,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const float,const int,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'vector(const float,const int,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const vector4,const int,const int,const int,const int,float,float,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'float(const vector4,const int,const int,const int,const int,float,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const vector4,const int,const int,const int,const int,vector,vector,vector,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'vector(const vector4,const int,const int,const int,const int,vector,vector,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const vector,const int,const int,const int,float,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'float(const vector,const int,const int,const int,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const vector,const int,const int,const int,vector,vector,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'vector(const vector,const int,const int,const int,vector,vector,vector)'})
let c['pxnoised'] = f
let f = []
call add(f,{'word':'qconvert','kind':'f','menu':'matrix3(const vector4)'})
call add(f,{'word':'qconvert','kind':'f','menu':'vector(const vector4)'})
let c['qconvert'] = f
let f = []
call add(f,{'word':'qdistance','kind':'f','menu':'float(const vector4,const vector4)'})
let c['qdistance'] = f
let f = []
call add(f,{'word':'qinvert','kind':'f','menu':'vector4(const vector4)'})
let c['qinvert'] = f
let f = []
call add(f,{'word':'qmultiply','kind':'f','menu':'vector4(const vector4,const vector4)'})
let c['qmultiply'] = f
let f = []
call add(f,{'word':'qrotate','kind':'f','menu':'vector(const vector4,const vector)'})
let c['qrotate'] = f
let f = []
call add(f,{'word':'quaternion','kind':'f','menu':'vector4(const matrix3)'})
call add(f,{'word':'quaternion','kind':'f','menu':'vector4(const float,const vector)'})
call add(f,{'word':'quaternion','kind':'f','menu':'vector4(const vector)'})
let c['quaternion'] = f
let f = []
call add(f,{'word':'quaterniontoeuler','kind':'f','menu':'vector(const vector4,const int)'})
let c['quaterniontoeuler'] = f
let f = []
call add(f,{'word':'radians','kind':'f','menu':'float(const float)'})
call add(f,{'word':'radians','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'radians','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'radians','kind':'f','menu':'vector(const vector)'})
let c['radians'] = f
let f = []
call add(f,{'word':'rand','kind':'f','menu':'float(const float)'})
call add(f,{'word':'rand','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'rand','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'rand','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'rand','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const float,const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const vector2)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const vector)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const float,const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const vector4)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const vector)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const vector2)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const vector)'})
let c['rand'] = f
let f = []
call add(f,{'word':'random','kind':'f','menu':'float(const float)'})
call add(f,{'word':'random','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'random','kind':'f','menu':'float(const int)'})
call add(f,{'word':'random','kind':'f','menu':'float(const int,const int)'})
call add(f,{'word':'random','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'random','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const float,const float)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const int,const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const vector)'})
call add(f,{'word':'random','kind':'f','menu':'vector2(const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const vector)'})
let c['random'] = f
let f = []
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const float)'})
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const float,const float)'})
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const vector4)'})
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const vector2)'})
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const vector)'})
let c['random_fhash'] = f
let f = []
let c['random_hash'] = f
let f = []
call add(f,{'word':'random_ihash','kind':'f','menu':'int(const int)'})
let c['random_ihash'] = f
let f = []
call add(f,{'word':'random_poisson','kind':'f','menu':'int(const int,const float)'})
call add(f,{'word':'random_poisson','kind':'f','menu':'int(const int,const float,const int,const int)'})
let c['random_poisson'] = f
let f = []
call add(f,{'word':'random_shash','kind':'f','menu':'int(const string)'})
let c['random_shash'] = f
let f = []
call add(f,{'word':'random_sobol','kind':'f','menu':'float(const float,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'float(const int,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'float(const vector4,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'float(const vector,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector4(const float,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector4(const int,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector4(const vector4,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector4(const vector,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector(const float,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector(const vector4,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector(const vector,const int)'})
let c['random_sobol'] = f
let f = []
call add(f,{'word':'randomf','kind':'f','menu':'float(const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'randomf','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector4(const float,const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector4(const vector)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector(const vector)'})
let c['randomf'] = f
let f = []
call add(f,{'word':'rawbumpmap','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmap','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmap','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmap','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmap'] = f
let f = []
call add(f,{'word':'rawbumpmapA','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapA','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapA','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapA','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapA'] = f
let f = []
call add(f,{'word':'rawbumpmapB','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapB','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapB','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapB','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapB'] = f
let f = []
call add(f,{'word':'rawbumpmapG','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapG','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapG','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapG','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapG'] = f
let f = []
call add(f,{'word':'rawbumpmapL','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapL','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapL','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapL','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapL'] = f
let f = []
call add(f,{'word':'rawbumpmapR','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapR','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapR','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapR','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapR'] = f
let f = []
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const float,const float)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const float,const float,const float,const float,const float,const float,const float,const float,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const vector)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const float,const float)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const float,const float,const float,const float,const float,const float,const float,const float,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector,const int)'})
let c['rawcolormap'] = f
let f = []
call add(f,{'word':'rayhittest','kind':'f','menu':'float(const vector,const vector,const float)'})
call add(f,{'word':'rayhittest','kind':'f','menu':'float(const vector,const vector,vector,vector,const float)'})
let c['rayhittest'] = f
let f = []
call add(f,{'word':'rayimport','kind':'f','menu':'int(const string,export matrix2)'})
call add(f,{'word':'rayimport','kind':'f','menu':'int(const string,export matrix3)'})
call add(f,{'word':'rayimport','kind':'f','menu':'int(const string,export matrix)'})
call add(f,{'word':'rayimport','kind':'f','menu':'int(const string,export float)'})
call add(f,{'word':'rayimport','kind':'f','menu':'int(const string,export int)'})
call add(f,{'word':'rayimport','kind':'f','menu':'int(const string,export vector4)'})
call add(f,{'word':'rayimport','kind':'f','menu':'int(const string,export string)'})
call add(f,{'word':'rayimport','kind':'f','menu':'int(const string,export vector2)'})
call add(f,{'word':'rayimport','kind':'f','menu':'int(const string,export vector)'})
let c['rayimport'] = f
let f = []
call add(f,{'word':'re_find','kind':'f','menu':'int(const string,const string)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(const string,const string,const int,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(int[],int[],const string,const string)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(int[],int[],const string,const string,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(int[],int[],const string,const string,const int,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'string(const string,const string)'})
call add(f,{'word':'re_find','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'string(const string,const string,const int,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'re_find','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'string[](const string,const string,const int,const int)'})
let c['re_find'] = f
let f = []
call add(f,{'word':'re_findall','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'re_findall','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'re_findall','kind':'f','menu':'string[](const string,const string,const int,const int)'})
let c['re_findall'] = f
let f = []
call add(f,{'word':'re_match','kind':'f','menu':'int(const string,const string)'})
let c['re_match'] = f
let f = []
call add(f,{'word':'re_replace','kind':'f','menu':'string(const string,const string,const string)'})
call add(f,{'word':'re_replace','kind':'f','menu':'string(const string,const string,const string,const int)'})
let c['re_replace'] = f
let f = []
call add(f,{'word':'re_split','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'re_split','kind':'f','menu':'string[](const string,const string,const int)'})
let c['re_split'] = f
let f = []
call add(f,{'word':'reflect','kind':'f','menu':'vector(const vector,const vector)'})
let c['reflect'] = f
let f = []
call add(f,{'word':'reflectlight','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'reflectlight','kind':'f','menu':'vector(const vector,const vector,const float,const float)'})
call add(f,{'word':'reflectlight','kind':'f','menu':'vector(const vector,const vector,const vector,const float,const float)'})
let c['reflectlight'] = f
let f = []
call add(f,{'word':'refract','kind':'f','menu':'vector(const vector,const vector,const float)'})
let c['refract'] = f
let f = []
call add(f,{'word':'refractlight','kind':'f','menu':'void(vector,vector,float,const vector,const vector,const float,const float)'})
call add(f,{'word':'refractlight','kind':'f','menu':'vector(vector,float,const vector,const vector,const float,const float)'})
call add(f,{'word':'refractlight','kind':'f','menu':'void(vector,vector,float,const vector,const vector,const vector,const float,const float,const float)'})
call add(f,{'word':'refractlight','kind':'f','menu':'vector(vector,float,const vector,const vector,const vector,const float,const float,const float)'})
let c['refractlight'] = f
let f = []
call add(f,{'word':'relativepath','kind':'f','menu':'string(const string,const string)'})
let c['relativepath'] = f
let f = []
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const int,const vector)'})
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const vector)'})
let c['relbbox'] = f
let f = []
call add(f,{'word':'relpointbbox','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'relpointbbox','kind':'f','menu':'vector(const int,const vector)'})
call add(f,{'word':'relpointbbox','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'relpointbbox','kind':'f','menu':'vector(const string,const vector)'})
let c['relpointbbox'] = f
let f = []
call add(f,{'word':'removeindex','kind':'f','menu':'matrix2(export matrix2[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'matrix3(export matrix3[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'matrix(export matrix[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'float(export float[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'int(export int[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'vector4(export vector4[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'string(export string[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'vector2(export vector2[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'vector(export vector[],const int)'})
let c['removeindex'] = f
let f = []
call add(f,{'word':'removepoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'removepoint','kind':'f','menu':'int(const int,const int,const int)'})
let c['removepoint'] = f
let f = []
call add(f,{'word':'removeprim','kind':'f','menu':'int(const int,const int,const int)'})
let c['removeprim'] = f
let f = []
call add(f,{'word':'removevalue','kind':'f','menu':'int(export matrix2[],const matrix2)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export matrix3[],const matrix3)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export matrix[],const matrix)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export float[],const float)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export int[],const int)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export vector4[],const vector4)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export string[],const string)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export vector2[],const vector2)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export vector[],const vector)'})
let c['removevalue'] = f
let f = []
call add(f,{'word':'renderstate','kind':'f','menu':'int(const material,const string,export matrix3)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const material,const string,export matrix)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const material,const string,export float)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const material,const string,export int)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const material,const string,export vector4)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const material,const string,export string)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const material,const string,export vector)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const string,export matrix3)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const string,export matrix)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const string,export float)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const string,export int)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const string,export vector4)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const string,export string)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const string,export vector)'})
let c['renderstate'] = f
let f = []
call add(f,{'word':'reorder','kind':'f','menu':'string(const string,const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'matrix2[](const matrix2[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'matrix3[](const matrix3[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'matrix[](const matrix[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'float[](const float[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'int[](const int[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'vector4[](const vector4[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'string[](const string[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'vector2[](const vector2[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'vector[](const vector[],const int[])'})
let c['reorder'] = f
let f = []
call add(f,{'word':'resample_linear','kind':'f','menu':'float[](const float[],const int)'})
call add(f,{'word':'resample_linear','kind':'f','menu':'vector4[](const vector4[],const int)'})
call add(f,{'word':'resample_linear','kind':'f','menu':'vector2[](const vector2[],const int)'})
call add(f,{'word':'resample_linear','kind':'f','menu':'vector[](const vector[],const int)'})
let c['resample_linear'] = f
let f = []
call add(f,{'word':'resize','kind':'f','menu':'void(export matrix2[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export matrix3[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export matrix[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export bsdf[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export light[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export lpeaccumulator[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export material[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export float[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export int[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export vector4[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export string[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export vector2[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export vector[],const int)'})
let c['resize'] = f
let f = []
call add(f,{'word':'resolvemissedray','kind':'f','menu':'vector(const vector,const float,const int)'})
let c['resolvemissedray'] = f
let f = []
let c['returninline'] = f
let f = []
call add(f,{'word':'reverse','kind':'f','menu':'string(const string)'})
call add(f,{'word':'reverse','kind':'f','menu':'matrix2[](const matrix2[])'})
call add(f,{'word':'reverse','kind':'f','menu':'matrix3[](const matrix3[])'})
call add(f,{'word':'reverse','kind':'f','menu':'matrix[](const matrix[])'})
call add(f,{'word':'reverse','kind':'f','menu':'float[](const float[])'})
call add(f,{'word':'reverse','kind':'f','menu':'int[](const int[])'})
call add(f,{'word':'reverse','kind':'f','menu':'vector4[](const vector4[])'})
call add(f,{'word':'reverse','kind':'f','menu':'string[](const string[])'})
call add(f,{'word':'reverse','kind':'f','menu':'vector2[](const vector2[])'})
call add(f,{'word':'reverse','kind':'f','menu':'vector[](const vector[])'})
let c['reverse'] = f
let f = []
call add(f,{'word':'rgbtohsv','kind':'f','menu':'vector(const float,const float,const float)'})
call add(f,{'word':'rgbtohsv','kind':'f','menu':'vector(const vector)'})
let c['rgbtohsv'] = f
let f = []
call add(f,{'word':'rgbtoxyz','kind':'f','menu':'vector(const vector)'})
let c['rgbtoxyz'] = f
let f = []
call add(f,{'word':'rint','kind':'f','menu':'float(const float)'})
call add(f,{'word':'rint','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'rint','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'rint','kind':'f','menu':'vector(const vector)'})
let c['rint'] = f
let f = []
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix2,const float)'})
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix3,const float,const vector)'})
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix3,const vector,const int)'})
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix,const float,const vector)'})
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix,const vector,const int)'})
let c['rotate'] = f
let f = []
call add(f,{'word':'rotate_x_to','kind':'f','menu':'vector4(const vector4,const vector4)'})
call add(f,{'word':'rotate_x_to','kind':'f','menu':'vector2(const vector2,const vector2)'})
call add(f,{'word':'rotate_x_to','kind':'f','menu':'vector(const vector,const vector)'})
let c['rotate_x_to'] = f
let f = []
call add(f,{'word':'rstrip','kind':'f','menu':'string(const string)'})
call add(f,{'word':'rstrip','kind':'f','menu':'string(const string,const string)'})
let c['rstrip'] = f
let f = []
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,const vector,int,vector,vector,float,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'int(const bsdf,const vector,const vector,vector,vector,float,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,vector,vector,float,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'vector(const bsdf,const vector,vector,float,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,vector,vector,float,int,const float,const float)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'vector(const bsdf,const vector,vector,float,int,const float,const float)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,vector,vector,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'vector(const bsdf,const vector,vector,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,vector,vector,int,const float,const float)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'vector(const bsdf,const vector,vector,int,const float,const float)'})
let c['sample_bsdf'] = f
let f = []
call add(f,{'word':'sample_cauchy','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'float(const float,const float,const float,const float)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'vector2(const float,const vector2)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'vector(const vector)'})
let c['sample_cauchy'] = f
let f = []
call add(f,{'word':'sample_cdf','kind':'f','menu':'int(const float[],const float)'})
call add(f,{'word':'sample_cdf','kind':'f','menu':'void(const float[],const float,int,float)'})
call add(f,{'word':'sample_cdf','kind':'f','menu':'int(const float[],const float,float)'})
call add(f,{'word':'sample_cdf','kind':'f','menu':'void(const float[],const float,int,float,float)'})
call add(f,{'word':'sample_cdf','kind':'f','menu':'int(const float[],const float,float,float)'})
let c['sample_cdf'] = f
let f = []
call add(f,{'word':'sample_circle_arc','kind':'f','menu':'vector2(const vector2,const float,const float)'})
let c['sample_circle_arc'] = f
let f = []
call add(f,{'word':'sample_circle_edge_uniform','kind':'f','menu':'vector2(const float)'})
let c['sample_circle_edge_uniform'] = f
let f = []
call add(f,{'word':'sample_circle_ring_uniform','kind':'f','menu':'vector2(const vector2,const float)'})
let c['sample_circle_ring_uniform'] = f
let f = []
call add(f,{'word':'sample_circle_slice','kind':'f','menu':'vector2(const vector2,const float,const vector2)'})
let c['sample_circle_slice'] = f
let f = []
call add(f,{'word':'sample_circle_uniform','kind':'f','menu':'vector2(const vector2)'})
let c['sample_circle_uniform'] = f
let f = []
call add(f,{'word':'sample_direction_cone','kind':'f','menu':'vector(const vector,const float,const vector2)'})
let c['sample_direction_cone'] = f
let f = []
call add(f,{'word':'sample_direction_uniform','kind':'f','menu':'vector(const vector2)'})
let c['sample_direction_uniform'] = f
let f = []
call add(f,{'word':'sample_discrete','kind':'f','menu':'int(const int,const float)'})
call add(f,{'word':'sample_discrete','kind':'f','menu':'int(const float[],const float)'})
let c['sample_discrete'] = f
let f = []
call add(f,{'word':'sample_exponential','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sample_exponential','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'sample_exponential','kind':'f','menu':'float(const float,const float,const float)'})
let c['sample_exponential'] = f
let f = []
call add(f,{'word':'sample_geometry','kind':'f','menu':'int(const vector,const vector,const float)'})
let c['sample_geometry'] = f
let f = []
call add(f,{'word':'sample_hemisphere','kind':'f','menu':'vector(const float,const vector2)'})
call add(f,{'word':'sample_hemisphere','kind':'f','menu':'vector(const vector2)'})
call add(f,{'word':'sample_hemisphere','kind':'f','menu':'vector(const vector,const float,const vector2)'})
call add(f,{'word':'sample_hemisphere','kind':'f','menu':'vector(const vector,const vector2)'})
let c['sample_hemisphere'] = f
let f = []
call add(f,{'word':'sample_hypersphere_cone','kind':'f','menu':'vector4(const vector4,const float,const vector4)'})
let c['sample_hypersphere_cone'] = f
let f = []
call add(f,{'word':'sample_hypersphere_uniform','kind':'f','menu':'vector4(const vector4)'})
let c['sample_hypersphere_uniform'] = f
let f = []
call add(f,{'word':'sample_light','kind':'f','menu':'int(const int,const vector,const vector,const float,vector,vector,float)'})
let c['sample_light'] = f
let f = []
call add(f,{'word':'sample_lognormal','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'sample_lognormal','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
let c['sample_lognormal'] = f
let f = []
call add(f,{'word':'sample_lognormal_by_median','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'sample_lognormal_by_median','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
let c['sample_lognormal_by_median'] = f
let f = []
call add(f,{'word':'sample_normal','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'vector(const vector)'})
let c['sample_normal'] = f
let f = []
call add(f,{'word':'sample_orientation_cone','kind':'f','menu':'vector4(const vector4,const float,const vector)'})
let c['sample_orientation_cone'] = f
let f = []
call add(f,{'word':'sample_orientation_uniform','kind':'f','menu':'vector4(const vector)'})
let c['sample_orientation_uniform'] = f
let f = []
call add(f,{'word':'sample_photon','kind':'f','menu':'int(const light,vector,vector,float,const float)'})
let c['sample_photon'] = f
let f = []
call add(f,{'word':'sample_sphere_cone','kind':'f','menu':'vector(const vector,const float,const vector)'})
let c['sample_sphere_cone'] = f
let f = []
call add(f,{'word':'sample_sphere_shell_uniform','kind':'f','menu':'vector(const vector,const float)'})
let c['sample_sphere_shell_uniform'] = f
let f = []
call add(f,{'word':'sample_sphere_uniform','kind':'f','menu':'vector(const vector)'})
let c['sample_sphere_uniform'] = f
let f = []
call add(f,{'word':'sampledisk','kind':'f','menu':'void(float,float,const float,const float)'})
call add(f,{'word':'sampledisk','kind':'f','menu':'float(float,const float,const float)'})
let c['sampledisk'] = f
let f = []
call add(f,{'word':'scale','kind':'f','menu':'void(export matrix2,const vector2)'})
call add(f,{'word':'scale','kind':'f','menu':'void(export matrix3,const vector)'})
call add(f,{'word':'scale','kind':'f','menu':'void(export matrix,const vector)'})
let c['scale'] = f
let f = []
call add(f,{'word':'scatter','kind':'f','menu':'int(const vector,const vector,const vector,const vector,const float,const float,vector,vector,vector)'})
let c['scatter'] = f
let f = []
call add(f,{'word':'select','kind':'f','menu':'matrix2(const int,const matrix2,const matrix2)'})
call add(f,{'word':'select','kind':'f','menu':'matrix3(const int,const matrix3,const matrix3)'})
call add(f,{'word':'select','kind':'f','menu':'matrix(const int,const matrix,const matrix)'})
call add(f,{'word':'select','kind':'f','menu':'bsdf(const int,const bsdf,const bsdf)'})
call add(f,{'word':'select','kind':'f','menu':'light(const int,const light,const light)'})
call add(f,{'word':'select','kind':'f','menu':'lpeaccumulator(const int,const lpeaccumulator,const lpeaccumulator)'})
call add(f,{'word':'select','kind':'f','menu':'material(const int,const material,const material)'})
call add(f,{'word':'select','kind':'f','menu':'float(const int,const float,const float)'})
call add(f,{'word':'select','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'select','kind':'f','menu':'vector4(const int,const vector4,const vector4)'})
call add(f,{'word':'select','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'select','kind':'f','menu':'vector2(const int,const vector2,const vector2)'})
call add(f,{'word':'select','kind':'f','menu':'vector(const int,const vector,const vector)'})
call add(f,{'word':'select','kind':'f','menu':'matrix2[](const int,const matrix2[],const matrix2[])'})
call add(f,{'word':'select','kind':'f','menu':'matrix3[](const int,const matrix3[],const matrix3[])'})
call add(f,{'word':'select','kind':'f','menu':'matrix[](const int,const matrix[],const matrix[])'})
call add(f,{'word':'select','kind':'f','menu':'bsdf[](const int,const bsdf[],const bsdf[])'})
call add(f,{'word':'select','kind':'f','menu':'light[](const int,const light[],const light[])'})
call add(f,{'word':'select','kind':'f','menu':'lpeaccumulator[](const int,const lpeaccumulator[],const lpeaccumulator[])'})
call add(f,{'word':'select','kind':'f','menu':'material[](const int,const material[],const material[])'})
call add(f,{'word':'select','kind':'f','menu':'float[](const int,const float[],const float[])'})
call add(f,{'word':'select','kind':'f','menu':'int[](const int,const int[],const int[])'})
call add(f,{'word':'select','kind':'f','menu':'vector4[](const int,const vector4[],const vector4[])'})
call add(f,{'word':'select','kind':'f','menu':'string[](const int,const string[],const string[])'})
call add(f,{'word':'select','kind':'f','menu':'vector2[](const int,const vector2[],const vector2[])'})
call add(f,{'word':'select','kind':'f','menu':'vector[](const int,const vector[],const vector[])'})
let c['select'] = f
let f = []
call add(f,{'word':'sensor_panorama_create','kind':'f','menu':'int(const float,const vector,const int,const float,const float,const string,const string,const string,const int)'})
let c['sensor_panorama_create'] = f
let f = []
call add(f,{'word':'sensor_panorama_getcolor','kind':'f','menu':'vector(const int,const vector)'})
let c['sensor_panorama_getcolor'] = f
let f = []
call add(f,{'word':'sensor_panorama_getcone','kind':'f','menu':'void(const int,const vector,const float,const vector,const vector,const float,const float,float,vector,vector,float)'})
call add(f,{'word':'sensor_panorama_getcone','kind':'f','menu':'float(const int,const vector,const float,const vector,const vector,const float,const float,vector,vector,float)'})
let c['sensor_panorama_getcone'] = f
let f = []
call add(f,{'word':'sensor_panorama_getdepth','kind':'f','menu':'float(const int,const vector)'})
let c['sensor_panorama_getdepth'] = f
let f = []
call add(f,{'word':'sensor_save','kind':'f','menu':'int(const int,const string,const string)'})
let c['sensor_save'] = f
let f = []
call add(f,{'word':'serialize','kind':'f','menu':'float[](const matrix2[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const matrix3[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const matrix[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const vector4[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const vector2[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const vector[])'})
let c['serialize'] = f
let f = []
call add(f,{'word':'set','kind':'f','menu':'matrix2(const matrix2)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const float,const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const int)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const vector2,const vector2)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const matrix2)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const float,const float,const float,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const int)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const vector,const vector,const vector)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const vector[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const matrix2)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const int)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const vector4,const vector4,const vector4,const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const vector4[])'})
call add(f,{'word':'set','kind':'f','menu':'bsdf(const bsdf)'})
call add(f,{'word':'set','kind':'f','menu':'light(const light)'})
call add(f,{'word':'set','kind':'f','menu':'lpeaccumulator(const lpeaccumulator)'})
call add(f,{'word':'set','kind':'f','menu':'material(const material)'})
call add(f,{'word':'set','kind':'f','menu':'float(const float)'})
call add(f,{'word':'set','kind':'f','menu':'float(const int)'})
call add(f,{'word':'set','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'set','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'int(const float)'})
call add(f,{'word':'set','kind':'f','menu':'int(const int)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const float,const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const int)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const vector2)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const vector)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'string(const string)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const int)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const vector)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const vector2)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix2[](const matrix2[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix2[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix3[](const matrix3[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix3[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix[](const matrix[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'bsdf[](const bsdf[])'})
call add(f,{'word':'set','kind':'f','menu':'light[](const light[])'})
call add(f,{'word':'set','kind':'f','menu':'lpeaccumulator[](const lpeaccumulator[])'})
call add(f,{'word':'set','kind':'f','menu':'material[](const material[])'})
call add(f,{'word':'set','kind':'f','menu':'float[](const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const float)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const vector)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'float[](const int[])'})
call add(f,{'word':'set','kind':'f','menu':'int[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'int[](const int[])'})
call add(f,{'word':'set','kind':'f','menu':'vector4[](const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'vector4[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'vector4[](const vector4[])'})
call add(f,{'word':'set','kind':'f','menu':'string[](const string[])'})
call add(f,{'word':'set','kind':'f','menu':'vector2[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'vector2[](const vector2[])'})
call add(f,{'word':'set','kind':'f','menu':'vector[](const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'vector[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'vector[](const vector[])'})
let c['set'] = f
let f = []
call add(f,{'word':'setagentclipnames','kind':'f','menu':'void(const int,const int,const string[])'})
let c['setagentclipnames'] = f
let f = []
call add(f,{'word':'setagentclips','kind':'f','menu':'int(const int,const int,const string[],const float[],const float[],const string[],const int[],const int[],const float[],const int[])'})
let c['setagentclips'] = f
let f = []
call add(f,{'word':'setagentcliptimes','kind':'f','menu':'void(const int,const int,const float[])'})
let c['setagentcliptimes'] = f
let f = []
call add(f,{'word':'setagentclipweights','kind':'f','menu':'void(const int,const int,const float[])'})
let c['setagentclipweights'] = f
let f = []
call add(f,{'word':'setagentcollisionlayer','kind':'f','menu':'void(const int,const int,const string)'})
let c['setagentcollisionlayer'] = f
let f = []
call add(f,{'word':'setagentcurrentlayer','kind':'f','menu':'void(const int,const int,const string)'})
let c['setagentcurrentlayer'] = f
let f = []
call add(f,{'word':'setagentlocaltransform','kind':'f','menu':'int(const int,const int,const matrix,const int)'})
let c['setagentlocaltransform'] = f
let f = []
call add(f,{'word':'setagentlocaltransforms','kind':'f','menu':'void(const int,const int,const matrix[])'})
let c['setagentlocaltransforms'] = f
let f = []
call add(f,{'word':'setagentworldtransform','kind':'f','menu':'int(const int,const int,const matrix,const int)'})
let c['setagentworldtransform'] = f
let f = []
call add(f,{'word':'setagentworldtransforms','kind':'f','menu':'void(const int,const int,const matrix[])'})
let c['setagentworldtransforms'] = f
let f = []
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix2)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix2,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix3)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix3,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const float)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const float,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const int)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const int,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector4)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector4,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const string,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector2)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector2,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix2[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix2[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix3[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix3[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const float[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const float[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const int[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const int[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector4[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector4[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const string[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const string[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector2[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector2[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector[],const string)'})
let c['setattrib'] = f
let f = []
call add(f,{'word':'setattribtypeinfo','kind':'f','menu':'int(const int,const string,const string,const string)'})
let c['setattribtypeinfo'] = f
let f = []
call add(f,{'word':'setcomp','kind':'f','menu':'void(export matrix2,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'matrix2(export matrix2[],const matrix2,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export matrix3,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'matrix3(export matrix3[],const matrix3,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export matrix,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'matrix(export matrix[],const matrix,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'bsdf(export bsdf[],const bsdf,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'light(export light[],const light,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'lpeaccumulator(export lpeaccumulator[],const lpeaccumulator,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'material(export material[],const material,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export matrix2,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export matrix3,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export matrix,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export vector4,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export vector2,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export vector,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export float[],const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'int(export int[],const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export vector4,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'vector4(export vector4[],const vector4,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'string(export string[],const string,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export vector2,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'vector2(export vector2[],const vector2,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export vector,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'vector(export vector[],const vector,const int)'})
let c['setcomp'] = f
let f = []
call add(f,{'word':'setcurrentlight','kind':'f','menu':'int(const int)'})
let c['setcurrentlight'] = f
let f = []
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix2[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix2[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix3[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix3[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector4[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector4[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector2[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector2[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector[],const string)'})
let c['setdetailattrib'] = f
let f = []
call add(f,{'word':'setedgegroup','kind':'f','menu':'int(const int,const string,const int,const int,const int)'})
let c['setedgegroup'] = f
let f = []
let c['setelem'] = f
let f = []
call add(f,{'word':'setpackedtransform','kind':'f','menu':'void(const int,const int,const matrix)'})
let c['setpackedtransform'] = f
let f = []
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const float)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const float,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector4)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector4,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const string,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector2)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector2,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const float[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const float[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const int[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const int[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector4[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector4[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const string[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const string[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector2[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector2[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector[],const string)'})
let c['setpointattrib'] = f
let f = []
call add(f,{'word':'setpointgroup','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setpointgroup','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
let c['setpointgroup'] = f
let f = []
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const float)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const float,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector4)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector4,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const string,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector2)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector2,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const float[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const float[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const int[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const int[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector4[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector4[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const string[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const string[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector2[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector2[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector[],const string)'})
let c['setprimattrib'] = f
let f = []
call add(f,{'word':'setprimgroup','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setprimgroup','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
let c['setprimgroup'] = f
let f = []
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix2)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix2,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix3)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix3,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const float)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const float,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector4)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector4,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const string,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector2)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector2,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix2[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix2[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix3[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix3[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const float[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const float[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const int[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const int[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector4[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector4[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const string[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const string[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector2[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector2[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector[],const string)'})
let c['setprimintrinsic'] = f
let f = []
call add(f,{'word':'setprimvertex','kind':'f','menu':'int(const int,const int,const int,const int)'})
let c['setprimvertex'] = f
let f = []
call add(f,{'word':'setsamplestore','kind':'f','menu':'int(const string,const vector,const float)'})
call add(f,{'word':'setsamplestore','kind':'f','menu':'int(const string,const vector,const int)'})
call add(f,{'word':'setsamplestore','kind':'f','menu':'int(const string,const vector,const vector4)'})
call add(f,{'word':'setsamplestore','kind':'f','menu':'int(const string,const vector,const vector)'})
let c['setsamplestore'] = f
let f = []
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix2)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix2,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix3)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix3,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const float)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const float,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const int)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const int,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector4)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector4,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector2)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector2,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix2[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix2[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix3[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix3[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const float[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const float[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const int[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const int[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector4[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector4[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector2[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector2[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector[],const string)'})
let c['setvertexattrib'] = f
let f = []
call add(f,{'word':'setvertexgroup','kind':'f','menu':'int(const int,const string,const int,const int,const int)'})
call add(f,{'word':'setvertexgroup','kind':'f','menu':'int(const int,const string,const int,const int,const int,const string)'})
let c['setvertexgroup'] = f
let f = []
call add(f,{'word':'setvertexpoint','kind':'f','menu':'int(const int,const int,const int,const int)'})
let c['setvertexpoint'] = f
let f = []
call add(f,{'word':'shadow','kind':'f','menu':'void(export vector)'})
call add(f,{'word':'shadow','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'shadow','kind':'f','menu':'void(export vector,const vector,const vector)'})
call add(f,{'word':'shadow','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['shadow'] = f
let f = []
call add(f,{'word':'shadow_light','kind':'f','menu':'vector(const int,const vector,const vector,const float)'})
let c['shadow_light'] = f
let f = []
call add(f,{'word':'shadowmap','kind':'f','menu':'float(const string,const vector,const float,const float,const float)'})
call add(f,{'word':'shadowmap','kind':'f','menu':'vector(const string,const vector,const float,const float,const float)'})
call add(f,{'word':'shadowmap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector,const float,const float,const float)'})
let c['shadowmap'] = f
let f = []
call add(f,{'word':'shimport','kind':'f','menu':'int(const string,export matrix2)'})
call add(f,{'word':'shimport','kind':'f','menu':'int(const string,export matrix3)'})
call add(f,{'word':'shimport','kind':'f','menu':'int(const string,export matrix)'})
call add(f,{'word':'shimport','kind':'f','menu':'int(const string,export float)'})
call add(f,{'word':'shimport','kind':'f','menu':'int(const string,export int)'})
call add(f,{'word':'shimport','kind':'f','menu':'int(const string,export vector4)'})
call add(f,{'word':'shimport','kind':'f','menu':'int(const string,export string)'})
call add(f,{'word':'shimport','kind':'f','menu':'int(const string,export vector2)'})
call add(f,{'word':'shimport','kind':'f','menu':'int(const string,export vector)'})
let c['shimport'] = f
let f = []
call add(f,{'word':'shl','kind':'f','menu':'int(const int,const int)'})
let c['shl'] = f
let f = []
call add(f,{'word':'shr','kind':'f','menu':'int(const int,const int)'})
let c['shr'] = f
let f = []
call add(f,{'word':'shrz','kind':'f','menu':'int(const int,const int)'})
let c['shrz'] = f
let f = []
call add(f,{'word':'sign','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sign','kind':'f','menu':'int(const int)'})
call add(f,{'word':'sign','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sign','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sign','kind':'f','menu':'vector(const vector)'})
let c['sign'] = f
let f = []
call add(f,{'word':'sin','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sin','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sin','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sin','kind':'f','menu':'vector(const vector)'})
let c['sin'] = f
let f = []
call add(f,{'word':'sinh','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sinh','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sinh','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sinh','kind':'f','menu':'vector(const vector)'})
let c['sinh'] = f
let f = []
call add(f,{'word':'sleep','kind':'f','menu':'void(const int)'})
let c['sleep'] = f
let f = []
call add(f,{'word':'slerp','kind':'f','menu':'vector4(const vector4,const vector4,const float)'})
call add(f,{'word':'slerp','kind':'f','menu':'vector4(const vector4[],const float[])'})
let c['slerp'] = f
let f = []
call add(f,{'word':'slice','kind':'f','menu':'string(const string,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string(const string,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string(const string,const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix2[](const matrix2[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix2[](const matrix2[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix2[](const matrix2[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix3[](const matrix3[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix3[](const matrix3[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix3[](const matrix3[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix[](const matrix[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix[](const matrix[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix[](const matrix[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'float[](const float[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'float[](const float[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'float[](const float[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'int[](const int[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'int[](const int[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'int[](const int[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector4[](const vector4[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector4[](const vector4[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector4[](const vector4[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string[](const string[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string[](const string[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string[](const string[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector2[](const vector2[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector2[](const vector2[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector2[](const vector2[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector[](const vector[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector[](const vector[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector[](const vector[],const int,const int,const int,const int,const int,const int)'})
let c['slice'] = f
let f = []
call add(f,{'word':'slideframe','kind':'f','menu':'vector(const vector,const vector,const vector,const vector,const vector)'})
let c['slideframe'] = f
let f = []
call add(f,{'word':'smooth','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'smooth','kind':'f','menu':'float(const float,const float,const float,const float)'})
let c['smooth'] = f
let f = []
call add(f,{'word':'smoothrotation','kind':'f','menu':'vector(const int,const vector,const vector)'})
let c['smoothrotation'] = f
let f = []
call add(f,{'word':'snoise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'snoise','kind':'f','menu':'float(const vector,const int,const float,const float)'})
call add(f,{'word':'snoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'snoise','kind':'f','menu':'float(const vector,const int,const int,const int,const int,const float,const float)'})
call add(f,{'word':'snoise','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'snoise','kind':'f','menu':'vector(const vector,const int,const float,const float)'})
call add(f,{'word':'snoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
call add(f,{'word':'snoise','kind':'f','menu':'vector(const vector,const int,const int,const int,const int,const float,const float)'})
let c['snoise'] = f
let f = []
call add(f,{'word':'solid_angle','kind':'f','menu':'float(const bsdf,const int)'})
let c['solid_angle'] = f
let f = []
call add(f,{'word':'solveconstraint','kind':'f','menu':'vector[](const float[],const vector,const float,const matrix,const vector[])'})
let c['solveconstraint'] = f
let f = []
call add(f,{'word':'solvecubic','kind':'f','menu':'int(const float,const float,const float,const float,float,float,float)'})
call add(f,{'word':'solvecubic','kind':'f','menu':'int(const float,const float,const float,const float,vector2,vector2,vector2)'})
let c['solvecubic'] = f
let f = []
call add(f,{'word':'solvecurve','kind':'f','menu':'vector[](const string,const float[],const int,const int,const vector,const int,const matrix)'})
call add(f,{'word':'solvecurve','kind':'f','menu':'vector[](const float[],const int,const int,const vector,const vector[],const vector[])'})
let c['solvecurve'] = f
let f = []
call add(f,{'word':'solvefbik','kind':'f','menu':'matrix[](const matrix[],const int[],const int[],const matrix[],const int)'})
call add(f,{'word':'solvefbik','kind':'f','menu':'matrix[](const matrix[],const int[],const int[],const matrix[],const int,const float,const int)'})
call add(f,{'word':'solvefbik','kind':'f','menu':'matrix[](const matrix[],const int[],const int[],const matrix[],const int,const float,const int,const float[],const int[],const int[])'})
call add(f,{'word':'solvefbik','kind':'f','menu':'matrix[](const matrix[],const int[],const int[],const matrix[],const int,const float,const int,const float[],const int[],const int[],const matrix[],const vector4[],const vector[])'})
let c['solvefbik'] = f
let f = []
call add(f,{'word':'solveik','kind':'f','menu':'vector[](const float[],const vector,const vector,const float,const int,const float,const int,const float,const matrix,const vector[])'})
let c['solveik'] = f
let f = []
call add(f,{'word':'solvepoly','kind':'f','menu':'int(const float[],float[])'})
call add(f,{'word':'solvepoly','kind':'f','menu':'int(const float[],float[],const int)'})
let c['solvepoly'] = f
let f = []
call add(f,{'word':'solvequadratic','kind':'f','menu':'int(const float,const float,const float,float,float)'})
call add(f,{'word':'solvequadratic','kind':'f','menu':'int(const float,const float,const float,vector2,vector2)'})
let c['solvequadratic'] = f
let f = []
call add(f,{'word':'sort','kind':'f','menu':'float[](const float[])'})
call add(f,{'word':'sort','kind':'f','menu':'int[](const int[])'})
call add(f,{'word':'sort','kind':'f','menu':'string[](const string[])'})
let c['sort'] = f
let f = []
call add(f,{'word':'specular','kind':'f','menu':'bsdf(const vector)'})
call add(f,{'word':'specular','kind':'f','menu':'vector(const vector,const vector,const float)'})
let c['specular'] = f
let f = []
call add(f,{'word':'specularBRDF','kind':'f','menu':'float(const vector,const vector,const vector,const float)'})
let c['specularBRDF'] = f
let f = []
call add(f,{'word':'spline','kind':'f','menu':'float(const string,const float,const float)'})
call add(f,{'word':'spline','kind':'f','menu':'float(const string,const float,const float[])'})
call add(f,{'word':'spline','kind':'f','menu':'float(const string[],const float,const float[])'})
call add(f,{'word':'spline','kind':'f','menu':'float(const string[],const float,const float[],const float[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector4(const string,const float,const vector4)'})
call add(f,{'word':'spline','kind':'f','menu':'vector4(const string,const float,const vector4[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector4(const string[],const float,const vector4[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector4(const string[],const float,const vector4[],const float[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector(const string,const float,const vector)'})
call add(f,{'word':'spline','kind':'f','menu':'vector(const string,const float,const vector[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector(const string[],const float,const vector[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector(const string[],const float,const vector[],const float[])'})
let c['spline'] = f
let f = []
call add(f,{'word':'split','kind':'f','menu':'string[](const string)'})
call add(f,{'word':'split','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'split','kind':'f','menu':'string[](const string,const string,const int)'})
let c['split'] = f
let f = []
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[],const int,const int,const float,const float[])'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[],const int,const int,const float,const float[])'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[],const int,const int,const float)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[],const int,const int,const float)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[],const int,const int)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[],const int,const int)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[],const int)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[],const int)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[])'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[])'})
let c['split_bsdf'] = f
let f = []
call add(f,{'word':'splitpath','kind':'f','menu':'void(const string,string,string)'})
call add(f,{'word':'splitpath','kind':'f','menu':'string(const string,string)'})
let c['splitpath'] = f
let f = []
call add(f,{'word':'sprintf','kind':'f','menu':'string(const string)'})
let c['sprintf'] = f
let f = []
call add(f,{'word':'sqrt','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sqrt','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sqrt','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sqrt','kind':'f','menu':'vector(const vector)'})
let c['sqrt'] = f
let f = []
call add(f,{'word':'sssapprox','kind':'f','menu':'bsdf(const vector,const float,const float,const float)'})
let c['sssapprox'] = f
let f = []
call add(f,{'word':'startswith','kind':'f','menu':'int(const string,const string)'})
let c['startswith'] = f
let f = []
call add(f,{'word':'storelightexport','kind':'f','menu':'void(const string,const string,const float)'})
call add(f,{'word':'storelightexport','kind':'f','menu':'void(const string,const string,const int)'})
call add(f,{'word':'storelightexport','kind':'f','menu':'void(const string,const string,const vector4)'})
call add(f,{'word':'storelightexport','kind':'f','menu':'void(const string,const string,const vector)'})
call add(f,{'word':'storelightexport','kind':'f','menu':'void(const string,const string,const float[])'})
call add(f,{'word':'storelightexport','kind':'f','menu':'void(const string,const string,const int[])'})
call add(f,{'word':'storelightexport','kind':'f','menu':'void(const string,const string,const vector4[])'})
call add(f,{'word':'storelightexport','kind':'f','menu':'void(const string,const string,const vector[])'})
let c['storelightexport'] = f
let f = []
call add(f,{'word':'storelightexports','kind':'f','menu':'void(const string)'})
let c['storelightexports'] = f
let f = []
call add(f,{'word':'strip','kind':'f','menu':'string(const string)'})
call add(f,{'word':'strip','kind':'f','menu':'string(const string,const string)'})
let c['strip'] = f
let f = []
call add(f,{'word':'strlen','kind':'f','menu':'int(const string)'})
let c['strlen'] = f
let f = []
let c['struct'] = f
let f = []
let c['sub'] = f
let f = []
call add(f,{'word':'sum','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sum','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'sum','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'sum','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'sum','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'sum','kind':'f','menu':'int(const int)'})
call add(f,{'word':'sum','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'sum','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'sum','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'sum','kind':'f','menu':'vector(const vector[])'})
let c['sum'] = f
let f = []
call add(f,{'word':'surfacedist','kind':'f','menu':'float(const int,const string,const string,const int,const float,int,const string)'})
call add(f,{'word':'surfacedist','kind':'f','menu':'float(const string,const string,const string,const int,const float,int,const string)'})
let c['surfacedist'] = f
let f = []
let c['swap'] = f
let f = []
call add(f,{'word':'switch','kind':'f','menu':'bsdf(const bsdf,const bsdf)'})
let c['switch'] = f
let f = []
call add(f,{'word':'swizzle','kind':'f','menu':'vector4(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'swizzle','kind':'f','menu':'vector2(const vector2,const int,const int)'})
call add(f,{'word':'swizzle','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
let c['swizzle'] = f
let f = []
call add(f,{'word':'tan','kind':'f','menu':'float(const float)'})
call add(f,{'word':'tan','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'tan','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'tan','kind':'f','menu':'vector(const vector)'})
let c['tan'] = f
let f = []
call add(f,{'word':'tanh','kind':'f','menu':'float(const float)'})
call add(f,{'word':'tanh','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'tanh','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'tanh','kind':'f','menu':'vector(const vector)'})
let c['tanh'] = f
let f = []
call add(f,{'word':'tet_adjacent','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'tet_adjacent','kind':'f','menu':'int(const string,const int,const int)'})
let c['tet_adjacent'] = f
let f = []
call add(f,{'word':'tet_faceindex','kind':'f','menu':'int(const int,const int)'})
let c['tet_faceindex'] = f
let f = []
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export matrix3)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export matrix)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export float)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export int)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export vector4)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export string)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export vector)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export int[])'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export string[])'})
let c['teximport'] = f
let f = []
call add(f,{'word':'texprintf','kind':'f','menu':'string(const float,const float,const string)'})
let c['texprintf'] = f
let f = []
call add(f,{'word':'texture','kind':'f','menu':'vector4(const string)'})
call add(f,{'word':'texture','kind':'f','menu':'vector4(const string,const float,const float)'})
call add(f,{'word':'texture','kind':'f','menu':'vector4(const string,const float,const float,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'texture','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'texture','kind':'f','menu':'vector(const string,const float,const float)'})
call add(f,{'word':'texture','kind':'f','menu':'vector(const string,const float,const float,const float,const float,const float,const float,const float,const float)'})
let c['texture'] = f
let f = []
call add(f,{'word':'texture3d','kind':'f','menu':'matrix3(const string,const string,const vector)'})
call add(f,{'word':'texture3d','kind':'f','menu':'matrix(const string,const string,const vector)'})
call add(f,{'word':'texture3d','kind':'f','menu':'float(const string,const string,const vector)'})
call add(f,{'word':'texture3d','kind':'f','menu':'vector4(const string,const string,const vector)'})
call add(f,{'word':'texture3d','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['texture3d'] = f
let f = []
call add(f,{'word':'texture3dBox','kind':'f','menu':'void(const string,const string,vector,vector)'})
call add(f,{'word':'texture3dBox','kind':'f','menu':'vector(const string,const string,vector)'})
let c['texture3dBox'] = f
let f = []
call add(f,{'word':'titlecase','kind':'f','menu':'string(const string)'})
let c['titlecase'] = f
let f = []
call add(f,{'word':'toNDC','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'toNDC','kind':'f','menu':'vector(const vector)'})
let c['toNDC'] = f
let f = []
call add(f,{'word':'tolower','kind':'f','menu':'string(const string)'})
let c['tolower'] = f
let f = []
call add(f,{'word':'toupper','kind':'f','menu':'string(const string)'})
let c['toupper'] = f
let f = []
call add(f,{'word':'trace','kind':'f','menu':'int(const vector,const vector,const float)'})
call add(f,{'word':'trace','kind':'f','menu':'void(vector,vector,float,const vector,const vector,const float,const float)'})
call add(f,{'word':'trace','kind':'f','menu':'vector(vector,float,const vector,const vector,const float,const float)'})
let c['trace'] = f
let f = []
call add(f,{'word':'translate','kind':'f','menu':'void(export matrix,const vector4)'})
call add(f,{'word':'translate','kind':'f','menu':'void(export matrix,const vector)'})
let c['translate'] = f
let f = []
call add(f,{'word':'translucent','kind':'f','menu':'bsdf(const vector,const vector)'})
let c['translucent'] = f
let f = []
call add(f,{'word':'transpose','kind':'f','menu':'void(export matrix2)'})
call add(f,{'word':'transpose','kind':'f','menu':'matrix2(const matrix2)'})
call add(f,{'word':'transpose','kind':'f','menu':'void(export matrix3)'})
call add(f,{'word':'transpose','kind':'f','menu':'matrix3(const matrix3)'})
call add(f,{'word':'transpose','kind':'f','menu':'void(export matrix)'})
call add(f,{'word':'transpose','kind':'f','menu':'matrix(const matrix)'})
let c['transpose'] = f
let f = []
call add(f,{'word':'trunc','kind':'f','menu':'float(const float)'})
call add(f,{'word':'trunc','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'trunc','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'trunc','kind':'f','menu':'vector(const vector)'})
let c['trunc'] = f
let f = []
call add(f,{'word':'tw_nspace','kind':'f','menu':'vector(const vector)'})
let c['tw_nspace'] = f
let f = []
call add(f,{'word':'tw_space','kind':'f','menu':'matrix()'})
call add(f,{'word':'tw_space','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'tw_space','kind':'f','menu':'vector(const vector)'})
let c['tw_space'] = f
let f = []
call add(f,{'word':'tw_vspace','kind':'f','menu':'vector(const vector)'})
let c['tw_vspace'] = f
let f = []
call add(f,{'word':'uniqueval','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'uniqueval','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'uniqueval','kind':'f','menu':'string(const int,const string,const string,const int)'})
call add(f,{'word':'uniqueval','kind':'f','menu':'string(const string,const string,const string,const int)'})
let c['uniqueval'] = f
let f = []
call add(f,{'word':'uniquevals','kind':'f','menu':'int[](const int,const string,const string)'})
call add(f,{'word':'uniquevals','kind':'f','menu':'int[](const string,const string,const string)'})
call add(f,{'word':'uniquevals','kind':'f','menu':'string[](const int,const string,const string)'})
call add(f,{'word':'uniquevals','kind':'f','menu':'string[](const string,const string,const string)'})
let c['uniquevals'] = f
let f = []
call add(f,{'word':'unpack_intfromsafefloat','kind':'f','menu':'int(const float)'})
let c['unpack_intfromsafefloat'] = f
let f = []
call add(f,{'word':'unserialize','kind':'f','menu':'matrix2[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'matrix3[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'matrix[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'vector4[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'vector2[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'vector[](const float[])'})
let c['unserialize'] = f
let f = []
call add(f,{'word':'upush','kind':'f','menu':'void(export matrix2[],const matrix2)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export matrix3[],const matrix3)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export matrix[],const matrix)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export bsdf[],const bsdf)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export light[],const light)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export lpeaccumulator[],const lpeaccumulator)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export material[],const material)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export float[],const float)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export int[],const int)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export vector4[],const vector4)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export string[],const string)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export vector2[],const vector2)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export vector[],const vector)'})
let c['upush'] = f
let f = []
let c['urandom'] = f
let f = []
call add(f,{'word':'usd_addtransform','kind':'f','menu':'int(const int,const string,const string,const matrix)'})
let c['usd_addtransform'] = f
let f = []
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector[](const string,const string,const string)'})
let c['usd_attrib'] = f
let f = []
call add(f,{'word':'usd_attriblen','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_attriblen','kind':'f','menu':'int(const string,const string,const string)'})
let c['usd_attriblen'] = f
let f = []
call add(f,{'word':'usd_attribnames','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'usd_attribnames','kind':'f','menu':'string[](const string,const string)'})
let c['usd_attribnames'] = f
let f = []
call add(f,{'word':'usd_attribsize','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_attribsize','kind':'f','menu':'int(const string,const string,const string)'})
let c['usd_attribsize'] = f
let f = []
call add(f,{'word':'usd_attribtypename','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'usd_attribtypename','kind':'f','menu':'string(const string,const string,const string)'})
let c['usd_attribtypename'] = f
let f = []
call add(f,{'word':'usd_cleartransformorder','kind':'f','menu':'int(const int,const string)'})
let c['usd_cleartransformorder'] = f
let f = []
call add(f,{'word':'usd_drawmode','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_drawmode','kind':'f','menu':'string(const string,const string)'})
let c['usd_drawmode'] = f
let f = []
call add(f,{'word':'usd_isactive','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'usd_isactive','kind':'f','menu':'int(const string,const string)'})
let c['usd_isactive'] = f
let f = []
call add(f,{'word':'usd_isarray','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_isarray','kind':'f','menu':'int(const string,const string,const string)'})
let c['usd_isarray'] = f
let f = []
call add(f,{'word':'usd_isattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_isattrib','kind':'f','menu':'int(const string,const string,const string)'})
let c['usd_isattrib'] = f
let f = []
call add(f,{'word':'usd_isprim','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'usd_isprim','kind':'f','menu':'int(const string,const string)'})
let c['usd_isprim'] = f
let f = []
call add(f,{'word':'usd_isstage','kind':'f','menu':'int(const int)'})
call add(f,{'word':'usd_isstage','kind':'f','menu':'int(const string)'})
let c['usd_isstage'] = f
let f = []
call add(f,{'word':'usd_istransformreset','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'usd_istransformreset','kind':'f','menu':'int(const string,const string)'})
let c['usd_istransformreset'] = f
let f = []
call add(f,{'word':'usd_isvisible','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'usd_isvisible','kind':'f','menu':'int(const string,const string)'})
let c['usd_isvisible'] = f
let f = []
call add(f,{'word':'usd_kind','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_kind','kind':'f','menu':'string(const string,const string)'})
let c['usd_kind'] = f
let f = []
call add(f,{'word':'usd_localtransform','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'usd_localtransform','kind':'f','menu':'matrix(const string,const string)'})
let c['usd_localtransform'] = f
let f = []
call add(f,{'word':'usd_name','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_name','kind':'f','menu':'string(const string,const string)'})
let c['usd_name'] = f
let f = []
call add(f,{'word':'usd_parentpath','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_parentpath','kind':'f','menu':'string(const string,const string)'})
let c['usd_parentpath'] = f
let f = []
call add(f,{'word':'usd_purpose','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_purpose','kind':'f','menu':'string(const string,const string)'})
let c['usd_purpose'] = f
let f = []
call add(f,{'word':'usd_setactive','kind':'f','menu':'int(const int,const string,const int)'})
let c['usd_setactive'] = f
let f = []
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix2)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix3)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const float)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector4)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector2)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix2[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix3[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const float[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const int[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector4[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const string[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector2[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector[])'})
let c['usd_setattrib'] = f
let f = []
call add(f,{'word':'usd_setdrawmode','kind':'f','menu':'int(const int,const string,const string)'})
let c['usd_setdrawmode'] = f
let f = []
call add(f,{'word':'usd_setkind','kind':'f','menu':'int(const int,const string,const string)'})
let c['usd_setkind'] = f
let f = []
call add(f,{'word':'usd_setpurpose','kind':'f','menu':'int(const int,const string,const string)'})
let c['usd_setpurpose'] = f
let f = []
call add(f,{'word':'usd_setvariantselection','kind':'f','menu':'int(const int,const string,const string,const string)'})
let c['usd_setvariantselection'] = f
let f = []
call add(f,{'word':'usd_setvisible','kind':'f','menu':'int(const int,const string,const int)'})
let c['usd_setvisible'] = f
let f = []
call add(f,{'word':'usd_transformorder','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'usd_transformorder','kind':'f','menu':'string[](const string,const string)'})
let c['usd_transformorder'] = f
let f = []
call add(f,{'word':'usd_typename','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_typename','kind':'f','menu':'string(const string,const string)'})
let c['usd_typename'] = f
let f = []
call add(f,{'word':'usd_variants','kind':'f','menu':'string[](const int,const string,const string)'})
call add(f,{'word':'usd_variants','kind':'f','menu':'string[](const string,const string,const string)'})
let c['usd_variants'] = f
let f = []
call add(f,{'word':'usd_variantselection','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'usd_variantselection','kind':'f','menu':'string(const string,const string,const string)'})
let c['usd_variantselection'] = f
let f = []
call add(f,{'word':'usd_variantsets','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'usd_variantsets','kind':'f','menu':'string[](const string,const string)'})
let c['usd_variantsets'] = f
let f = []
call add(f,{'word':'usd_worldtransform','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'usd_worldtransform','kind':'f','menu':'matrix(const string,const string)'})
let c['usd_worldtransform'] = f
let f = []
call add(f,{'word':'uvdist','kind':'f','menu':'float(const int,const string,const string,const vector,int,vector)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const int,const string,const string,const vector,int,vector,const float)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const int,const string,const vector,int,vector)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const int,const string,const vector,int,vector,const float)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const string,const string,const string,const vector,int,vector)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const string,const string,const string,const vector,int,vector,const float)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const string,const string,const vector,int,vector)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const string,const string,const vector,int,vector,const float)'})
let c['uvdist'] = f
let f = []
call add(f,{'word':'uvintersect','kind':'f','menu':'int(const int,const string,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'uvintersect','kind':'f','menu':'int(const int,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'uvintersect','kind':'f','menu':'int(const string,const string,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'uvintersect','kind':'f','menu':'int(const string,const string,const vector,const vector,vector,vector)'})
let c['uvintersect'] = f
let f = []
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector[](const string,const string,const string,const vector)'})
let c['uvsample'] = f
let f = []
call add(f,{'word':'uvunwrap','kind':'f','menu':'int(const string,const float,const float,const float,vector,vector)'})
call add(f,{'word':'uvunwrap','kind':'f','menu':'int(const string,const float,const float,const float,vector,vector,vector,vector)'})
let c['uvunwrap'] = f
let f = []
call add(f,{'word':'variance','kind':'f','menu':'float(const float,float,int)'})
let c['variance'] = f
let f = []
call add(f,{'word':'vertex','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector[](const string,const string,const int,const int)'})
let c['vertex'] = f
let f = []
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix2(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix2(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix3(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix3(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'float(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'float(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'int(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'int(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector4(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector4(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'string(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'string(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector2(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector2(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix2[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix2[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix3[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix3[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'float[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'float[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'int[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'int[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector4[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector4[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'string[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'string[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector2[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector2[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector[](const string,const string,const int,int)'})
let c['vertexattrib'] = f
let f = []
call add(f,{'word':'vertexattribsize','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'vertexattribsize','kind':'f','menu':'int(const string,const string)'})
let c['vertexattribsize'] = f
let f = []
call add(f,{'word':'vertexattribtype','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'vertexattribtype','kind':'f','menu':'int(const string,const string)'})
let c['vertexattribtype'] = f
let f = []
call add(f,{'word':'vertexattribtypeinfo','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'vertexattribtypeinfo','kind':'f','menu':'string(const string,const string)'})
let c['vertexattribtypeinfo'] = f
let f = []
call add(f,{'word':'vertexhedge','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexhedge','kind':'f','menu':'int(const string,const int)'})
let c['vertexhedge'] = f
let f = []
call add(f,{'word':'vertexindex','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'vertexindex','kind':'f','menu':'int(const string,const int,const int)'})
let c['vertexindex'] = f
let f = []
call add(f,{'word':'vertexnext','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexnext','kind':'f','menu':'int(const string,const int)'})
let c['vertexnext'] = f
let f = []
call add(f,{'word':'vertexpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexpoint','kind':'f','menu':'int(const string,const int)'})
let c['vertexpoint'] = f
let f = []
call add(f,{'word':'vertexprev','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexprev','kind':'f','menu':'int(const string,const int)'})
let c['vertexprev'] = f
let f = []
call add(f,{'word':'vertexprim','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexprim','kind':'f','menu':'int(const string,const int)'})
let c['vertexprim'] = f
let f = []
call add(f,{'word':'vertexprimindex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexprimindex','kind':'f','menu':'int(const string,const int)'})
let c['vertexprimindex'] = f
let f = []
call add(f,{'word':'vnoise','kind':'f','menu':'void(const float,const float,const float,const float,int,float,float,float,float,float,float)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const float,const float,const float,const float,float,float,float,float,float,float)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const float,const float,const float,const float,int,float,float,float,float,float,float,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const float,const float,const float,const float,float,float,float,float,float,float,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const float,const float,float,float,float,float)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const float,const float,float,float,float,float,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector4,const vector4,int,float,float,vector4,vector4)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector4,const vector4,float,float,vector4,vector4)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector4,const vector4,int,float,float,vector4,vector4,const int,const int,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector4,const vector4,float,float,vector4,vector4,const int,const int,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector4,const vector4,int,float,float,vector4,vector4,const vector4)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector4,const vector4,float,float,vector4,vector4,const vector4)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector,const vector,int,float,float,vector,vector)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector,const vector,float,float,vector,vector)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector,const vector,int,float,float,vector,vector,const int,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector,const vector,float,float,vector,vector,const int,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector,const vector,int,float,float,vector,vector,const vector)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector,const vector,float,float,vector,vector,const vector)'})
let c['vnoise'] = f
let f = []
call add(f,{'word':'volume','kind':'f','menu':'float(const vector)'})
let c['volume'] = f
let f = []
call add(f,{'word':'volumegradient','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumegradient','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumegradient','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumegradient','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumegradient'] = f
let f = []
call add(f,{'word':'volumeindex','kind':'f','menu':'float(const int,const int,const vector)'})
call add(f,{'word':'volumeindex','kind':'f','menu':'float(const int,const string,const vector)'})
call add(f,{'word':'volumeindex','kind':'f','menu':'float(const string,const int,const vector)'})
call add(f,{'word':'volumeindex','kind':'f','menu':'float(const string,const string,const vector)'})
let c['volumeindex'] = f
let f = []
call add(f,{'word':'volumeindexactive','kind':'f','menu':'int(const int,const int,const vector)'})
call add(f,{'word':'volumeindexactive','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'volumeindexactive','kind':'f','menu':'int(const string,const int,const vector)'})
call add(f,{'word':'volumeindexactive','kind':'f','menu':'int(const string,const string,const vector)'})
let c['volumeindexactive'] = f
let f = []
call add(f,{'word':'volumeindexorigin','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'volumeindexorigin','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'volumeindexorigin','kind':'f','menu':'vector(const string,const int)'})
call add(f,{'word':'volumeindexorigin','kind':'f','menu':'vector(const string,const string)'})
let c['volumeindexorigin'] = f
let f = []
call add(f,{'word':'volumeindextopos','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumeindextopos','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumeindextopos','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumeindextopos','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumeindextopos'] = f
let f = []
call add(f,{'word':'volumeindexv','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumeindexv','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumeindexv','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumeindexv','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumeindexv'] = f
let f = []
call add(f,{'word':'volumepostoindex','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumepostoindex','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumepostoindex','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumepostoindex','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumepostoindex'] = f
let f = []
call add(f,{'word':'volumeres','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'volumeres','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'volumeres','kind':'f','menu':'vector(const string,const int)'})
call add(f,{'word':'volumeres','kind':'f','menu':'vector(const string,const string)'})
let c['volumeres'] = f
let f = []
call add(f,{'word':'volumesample','kind':'f','menu':'float(const int,const int,const vector)'})
call add(f,{'word':'volumesample','kind':'f','menu':'float(const int,const string,const vector)'})
call add(f,{'word':'volumesample','kind':'f','menu':'float(const string,const int,const vector)'})
call add(f,{'word':'volumesample','kind':'f','menu':'float(const string,const string,const vector)'})
let c['volumesample'] = f
let f = []
call add(f,{'word':'volumesamplev','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumesamplev','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumesamplev','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumesamplev','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumesamplev'] = f
let f = []
call add(f,{'word':'volumevoxeldiameter','kind':'f','menu':'float(const int,const int)'})
call add(f,{'word':'volumevoxeldiameter','kind':'f','menu':'float(const int,const string)'})
call add(f,{'word':'volumevoxeldiameter','kind':'f','menu':'float(const string,const int)'})
call add(f,{'word':'volumevoxeldiameter','kind':'f','menu':'float(const string,const string)'})
let c['volumevoxeldiameter'] = f
let f = []
call add(f,{'word':'vtransform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'vtransform','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'vtransform','kind':'f','menu':'vector(const vector,const matrix)'})
let c['vtransform'] = f
let f = []
call add(f,{'word':'warning','kind':'f','menu':'void(const string)'})
let c['warning'] = f
let f = []
let c['while'] = f
let f = []
call add(f,{'word':'wireblinn','kind':'f','menu':'bsdf(const vector,const float)'})
let c['wireblinn'] = f
let f = []
call add(f,{'word':'wirediffuse','kind':'f','menu':'bsdf(const vector)'})
let c['wirediffuse'] = f
let f = []
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,const float,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,const float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,const float,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,const float,float,float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,const float,int,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,const float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,int,float,float,float,float,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,float,float,float,float,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,int,float,float,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,float,float,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector4,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector4,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector4,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector4,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector4,int,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector4,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector2,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector2,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector2,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector2,float,float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector2,int,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector2,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector,int,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector,int,float,float,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector,float,float,const int,const int,const int)'})
let c['wnoise'] = f
let f = []
call add(f,{'word':'wo_nspace','kind':'f','menu':'vector(const vector)'})
let c['wo_nspace'] = f
let f = []
call add(f,{'word':'wo_space','kind':'f','menu':'matrix()'})
call add(f,{'word':'wo_space','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'wo_space','kind':'f','menu':'vector(const vector)'})
let c['wo_space'] = f
let f = []
call add(f,{'word':'wo_vspace','kind':'f','menu':'vector(const vector)'})
let c['wo_vspace'] = f
let f = []
call add(f,{'word':'writepixel','kind':'f','menu':'void(const string,const float,const float,const vector)'})
let c['writepixel'] = f
let f = []
call add(f,{'word':'wt_nspace','kind':'f','menu':'vector(const vector)'})
let c['wt_nspace'] = f
let f = []
call add(f,{'word':'wt_space','kind':'f','menu':'matrix()'})
call add(f,{'word':'wt_space','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'wt_space','kind':'f','menu':'vector(const vector)'})
let c['wt_space'] = f
let f = []
call add(f,{'word':'wt_vspace','kind':'f','menu':'vector(const vector)'})
let c['wt_vspace'] = f
let f = []
call add(f,{'word':'xnoise','kind':'f','menu':'float(const float)'})
call add(f,{'word':'xnoise','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'xnoise','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'xnoise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'xnoise','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'xnoise','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'xnoise','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'xnoise','kind':'f','menu':'vector(const vector)'})
let c['xnoise'] = f
let f = []
call add(f,{'word':'xnoised','kind':'f','menu':'void(const float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'float(const float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const float,const float,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'float(const float,const float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const float,const float,vector,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'vector(const float,const float,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const float,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'vector(const float,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const vector4,float,float,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'float(const vector4,float,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const vector4,vector,vector,vector,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'vector(const vector4,vector,vector,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const vector,float,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'float(const vector,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const vector,vector,vector,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'vector(const vector,vector,vector,vector)'})
let c['xnoised'] = f
let f = []
let c['xor'] = f
let f = []
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const string,const vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const string,const vector,int,vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const string,const vector,int,vector,const float)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const vector,int,vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const vector,int,vector,const float)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const string,const vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const string,const vector,int,vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const string,const vector,int,vector,const float)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const vector,int,vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const vector,int,vector,const float)'})
let c['xyzdist'] = f
let f = []
call add(f,{'word':'xyztorgb','kind':'f','menu':'vector(const vector)'})
let c['xyztorgb'] = f
let contexts['surface'] = c
" CONTEXT: displace 
let c = {}
let c['P'] = [{'word':'P','kind':'v','menu':'vector'}]
let c['Pz'] = [{'word':'Pz','kind':'v','menu':'float'}]
let c['dPds'] = [{'word':'dPds','kind':'v','menu':'vector'}]
let c['dPdt'] = [{'word':'dPdt','kind':'v','menu':'vector'}]
let c['N'] = [{'word':'N','kind':'v','menu':'vector'}]
let c['Ng'] = [{'word':'Ng','kind':'v','menu':'vector'}]
let c['Cl'] = [{'word':'Cl','kind':'v','menu':'vector'}]
let c['L'] = [{'word':'L','kind':'v','menu':'vector'}]
let c['s'] = [{'word':'s','kind':'v','menu':'float'}]
let c['t'] = [{'word':'t','kind':'v','menu':'float'}]
let c['Time'] = [{'word':'Time','kind':'v','menu':'float'}]
let c['dPdz'] = [{'word':'dPdz','kind':'v','menu':'float'}]
let c['SID'] = [{'word':'SID','kind':'v','menu':'int'}]
let f = []
call add(f,{'word':'Du','kind':'f','menu':'float(const float)'})
call add(f,{'word':'Du','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'Du','kind':'f','menu':'vector(const vector)'})
let c['Du'] = f
let f = []
call add(f,{'word':'Dv','kind':'f','menu':'float(const float)'})
call add(f,{'word':'Dv','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'Dv','kind':'f','menu':'vector(const vector)'})
let c['Dv'] = f
let f = []
call add(f,{'word':'Dw','kind':'f','menu':'float(const float)'})
call add(f,{'word':'Dw','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'Dw','kind':'f','menu':'vector(const vector)'})
let c['Dw'] = f
let f = []
let c['__jumplight'] = f
let f = []
let c['__nextgather'] = f
let f = []
let c['__nextlight'] = f
let f = []
let c['__ptexture_shift_coord'] = f
let f = []
let c['__resetlights'] = f
let f = []
let c['__testactivelight'] = f
let f = []
let c['_export'] = f
let f = []
call add(f,{'word':'abs','kind':'f','menu':'float(const float)'})
call add(f,{'word':'abs','kind':'f','menu':'int(const int)'})
call add(f,{'word':'abs','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'abs','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'abs','kind':'f','menu':'vector(const vector)'})
let c['abs'] = f
let f = []
call add(f,{'word':'acos','kind':'f','menu':'float(const float)'})
call add(f,{'word':'acos','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'acos','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'acos','kind':'f','menu':'vector(const vector)'})
let c['acos'] = f
let f = []
let c['add'] = f
let f = []
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix2)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix3)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const float)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector4)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector2)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix2[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix3[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const float[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const int[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector4[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const string[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector2[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector[])'})
let c['addattrib'] = f
let f = []
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
let c['adddetailattrib'] = f
let f = []
call add(f,{'word':'addpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'addpoint','kind':'f','menu':'int(const int,const vector)'})
let c['addpoint'] = f
let f = []
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
let c['addpointattrib'] = f
let f = []
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,const int)'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,const int,const int)'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int,const int,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int[],int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int[],int[])'})
let c['addprim'] = f
let f = []
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
let c['addprimattrib'] = f
let f = []
call add(f,{'word':'addvariablename','kind':'f','menu':'int(const int,const string,const string)'})
let c['addvariablename'] = f
let f = []
call add(f,{'word':'addvertex','kind':'f','menu':'int(const int,const int,const int)'})
let c['addvertex'] = f
let f = []
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
let c['addvertexattrib'] = f
let f = []
call add(f,{'word':'addvisualizer','kind':'f','menu':'int(const int,const string)'})
let c['addvisualizer'] = f
let f = []
call add(f,{'word':'agentaddclip','kind':'f','menu':'int(const int,const int,const string,const string,const int)'})
let c['agentaddclip'] = f
let f = []
call add(f,{'word':'agentclipcatalog','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agentclipcatalog','kind':'f','menu':'string[](const string,const int)'})
let c['agentclipcatalog'] = f
let f = []
call add(f,{'word':'agentclipchannel','kind':'f','menu':'int(const int,const int,const string,const string)'})
call add(f,{'word':'agentclipchannel','kind':'f','menu':'int(const string,const int,const string,const string)'})
let c['agentclipchannel'] = f
let f = []
call add(f,{'word':'agentclipchannelnames','kind':'f','menu':'string[](const int,const int,const string)'})
call add(f,{'word':'agentclipchannelnames','kind':'f','menu':'string[](const string,const int,const string)'})
let c['agentclipchannelnames'] = f
let f = []
call add(f,{'word':'agentcliplength','kind':'f','menu':'float(const int,const int,const string)'})
call add(f,{'word':'agentcliplength','kind':'f','menu':'float(const string,const int,const string)'})
let c['agentcliplength'] = f
let f = []
call add(f,{'word':'agentclipnames','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agentclipnames','kind':'f','menu':'string[](const string,const int)'})
let c['agentclipnames'] = f
let f = []
call add(f,{'word':'agentclipsample','kind':'f','menu':'float(const int,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsample','kind':'f','menu':'float(const int,const int,const string,const float,const string)'})
call add(f,{'word':'agentclipsample','kind':'f','menu':'float(const string,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsample','kind':'f','menu':'float(const string,const int,const string,const float,const string)'})
let c['agentclipsample'] = f
let f = []
call add(f,{'word':'agentclipsamplelocal','kind':'f','menu':'matrix(const int,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsamplelocal','kind':'f','menu':'matrix(const string,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsamplelocal','kind':'f','menu':'matrix[](const int,const int,const string,const float)'})
call add(f,{'word':'agentclipsamplelocal','kind':'f','menu':'matrix[](const string,const int,const string,const float)'})
let c['agentclipsamplelocal'] = f
let f = []
call add(f,{'word':'agentclipsamplerate','kind':'f','menu':'float(const int,const int,const string)'})
call add(f,{'word':'agentclipsamplerate','kind':'f','menu':'float(const string,const int,const string)'})
let c['agentclipsamplerate'] = f
let f = []
call add(f,{'word':'agentclipsampleworld','kind':'f','menu':'matrix(const int,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsampleworld','kind':'f','menu':'matrix(const string,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsampleworld','kind':'f','menu':'matrix[](const int,const int,const string,const float)'})
call add(f,{'word':'agentclipsampleworld','kind':'f','menu':'matrix[](const string,const int,const string,const float)'})
let c['agentclipsampleworld'] = f
let f = []
call add(f,{'word':'agentcliptimes','kind':'f','menu':'float[](const int,const int)'})
call add(f,{'word':'agentcliptimes','kind':'f','menu':'float[](const string,const int)'})
let c['agentcliptimes'] = f
let f = []
call add(f,{'word':'agentcliptransformgroups','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agentcliptransformgroups','kind':'f','menu':'string[](const string,const int)'})
let c['agentcliptransformgroups'] = f
let f = []
call add(f,{'word':'agentclipweights','kind':'f','menu':'float[](const int,const int)'})
call add(f,{'word':'agentclipweights','kind':'f','menu':'float[](const string,const int)'})
let c['agentclipweights'] = f
let f = []
call add(f,{'word':'agentcollisionlayer','kind':'f','menu':'string(const int,const int)'})
call add(f,{'word':'agentcollisionlayer','kind':'f','menu':'string(const string,const int)'})
let c['agentcollisionlayer'] = f
let f = []
call add(f,{'word':'agentcurrentlayer','kind':'f','menu':'string(const int,const int)'})
call add(f,{'word':'agentcurrentlayer','kind':'f','menu':'string(const string,const int)'})
let c['agentcurrentlayer'] = f
let f = []
call add(f,{'word':'agentfindtransformgroup','kind':'f','menu':'int(const int,const int,const string)'})
call add(f,{'word':'agentfindtransformgroup','kind':'f','menu':'int(const string,const int,const string)'})
let c['agentfindtransformgroup'] = f
let f = []
call add(f,{'word':'agentlayerbindings','kind':'f','menu':'int[](const int,const int,const string,const string)'})
call add(f,{'word':'agentlayerbindings','kind':'f','menu':'int[](const string,const int,const string,const string)'})
let c['agentlayerbindings'] = f
let f = []
call add(f,{'word':'agentlayers','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agentlayers','kind':'f','menu':'string[](const string,const int)'})
let c['agentlayers'] = f
let f = []
call add(f,{'word':'agentlayershapes','kind':'f','menu':'string[](const int,const int,const string,const int)'})
call add(f,{'word':'agentlayershapes','kind':'f','menu':'string[](const int,const int,const string,const string)'})
call add(f,{'word':'agentlayershapes','kind':'f','menu':'string[](const string,const int,const string,const int)'})
call add(f,{'word':'agentlayershapes','kind':'f','menu':'string[](const string,const int,const string,const string)'})
let c['agentlayershapes'] = f
let f = []
call add(f,{'word':'agentlocaltransform','kind':'f','menu':'matrix(const int,const int,const int)'})
call add(f,{'word':'agentlocaltransform','kind':'f','menu':'matrix(const string,const int,const int)'})
let c['agentlocaltransform'] = f
let f = []
call add(f,{'word':'agentlocaltransforms','kind':'f','menu':'matrix[](const int,const int)'})
call add(f,{'word':'agentlocaltransforms','kind':'f','menu':'matrix[](const string,const int)'})
let c['agentlocaltransforms'] = f
let f = []
call add(f,{'word':'agentrigchildren','kind':'f','menu':'int[](const int,const int,const int)'})
call add(f,{'word':'agentrigchildren','kind':'f','menu':'int[](const string,const int,const int)'})
let c['agentrigchildren'] = f
let f = []
call add(f,{'word':'agentrigfind','kind':'f','menu':'int(const int,const int,const string)'})
call add(f,{'word':'agentrigfind','kind':'f','menu':'int(const string,const int,const string)'})
let c['agentrigfind'] = f
let f = []
call add(f,{'word':'agentrigparent','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'agentrigparent','kind':'f','menu':'int(const string,const int,const int)'})
let c['agentrigparent'] = f
let f = []
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const int,const int,const int,const int[],const matrix[],const int,const int)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const int,const int,const int,const int[],const matrix[],const int,const int,const float,const int)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const int,const int,const int,const int[],const matrix[],const int,const int,const float,const int,const float[],const int[],const int[])'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const int,const int,const int,const int[],const matrix[],const int,const int,const float,const int,const float[],const int[],const int[],const string,const string,const string)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const string,const int,const int,const int[],const matrix[],const int,const int)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const string,const int,const int,const int[],const matrix[],const int,const int,const float,const int)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const string,const int,const int,const int[],const matrix[],const int,const int,const float,const int,const float[],const int[],const int[])'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const string,const int,const int,const int[],const matrix[],const int,const int,const float,const int,const float[],const int[],const int[],const string,const string,const string)'})
let c['agentsolvefbik'] = f
let f = []
call add(f,{'word':'agenttransformcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'agenttransformcount','kind':'f','menu':'int(const string,const int)'})
let c['agenttransformcount'] = f
let f = []
call add(f,{'word':'agenttransformgroupmember','kind':'f','menu':'int(const int,const int,const int,const int)'})
call add(f,{'word':'agenttransformgroupmember','kind':'f','menu':'int(const int,const int,const string,const int)'})
call add(f,{'word':'agenttransformgroupmember','kind':'f','menu':'int(const string,const int,const int,const int)'})
call add(f,{'word':'agenttransformgroupmember','kind':'f','menu':'int(const string,const int,const string,const int)'})
let c['agenttransformgroupmember'] = f
let f = []
call add(f,{'word':'agenttransformgroups','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agenttransformgroups','kind':'f','menu':'string[](const string,const int)'})
let c['agenttransformgroups'] = f
let f = []
call add(f,{'word':'agenttransformgroupweight','kind':'f','menu':'float(const int,const int,const int,const int)'})
call add(f,{'word':'agenttransformgroupweight','kind':'f','menu':'float(const string,const int,const int,const int)'})
let c['agenttransformgroupweight'] = f
let f = []
call add(f,{'word':'agenttransformnames','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agenttransformnames','kind':'f','menu':'string[](const string,const int)'})
let c['agenttransformnames'] = f
let f = []
call add(f,{'word':'agenttransformtolocal','kind':'f','menu':'int(const int,const int,export matrix[])'})
call add(f,{'word':'agenttransformtolocal','kind':'f','menu':'int(const string,const int,export matrix[])'})
let c['agenttransformtolocal'] = f
let f = []
call add(f,{'word':'agenttransformtoworld','kind':'f','menu':'int(const int,const int,export matrix[])'})
call add(f,{'word':'agenttransformtoworld','kind':'f','menu':'int(const string,const int,export matrix[])'})
let c['agenttransformtoworld'] = f
let f = []
call add(f,{'word':'agentworldtransform','kind':'f','menu':'matrix(const int,const int,const int)'})
call add(f,{'word':'agentworldtransform','kind':'f','menu':'matrix(const string,const int,const int)'})
let c['agentworldtransform'] = f
let f = []
call add(f,{'word':'agentworldtransforms','kind':'f','menu':'matrix[](const int,const int)'})
call add(f,{'word':'agentworldtransforms','kind':'f','menu':'matrix[](const string,const int)'})
let c['agentworldtransforms'] = f
let f = []
call add(f,{'word':'albedo','kind':'f','menu':'vector(const bsdf,const int)'})
call add(f,{'word':'albedo','kind':'f','menu':'vector(const bsdf,const vector,const int)'})
call add(f,{'word':'albedo','kind':'f','menu':'vector(const bsdf,const vector)'})
call add(f,{'word':'albedo','kind':'f','menu':'vector(const bsdf)'})
let c['albedo'] = f
let f = []
call add(f,{'word':'ambient','kind':'f','menu':'vector()'})
let c['ambient'] = f
let f = []
let c['and'] = f
let f = []
call add(f,{'word':'anoise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'anoise','kind':'f','menu':'float(const vector,const int,const float,const float)'})
call add(f,{'word':'anoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'anoise','kind':'f','menu':'float(const vector,const int,const int,const int,const int,const float,const float)'})
call add(f,{'word':'anoise','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'anoise','kind':'f','menu':'vector(const vector,const int,const float,const float)'})
call add(f,{'word':'anoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
call add(f,{'word':'anoise','kind':'f','menu':'vector(const vector,const int,const int,const int,const int,const float,const float)'})
let c['anoise'] = f
let f = []
call add(f,{'word':'append','kind':'f','menu':'void(export string,const string)'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix2[],const matrix2)'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix2[],const matrix2[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix3[],const matrix3)'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix3[],const matrix3[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix[],const matrix)'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix[],const matrix[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export float[],const float)'})
call add(f,{'word':'append','kind':'f','menu':'void(export float[],const float[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export int[],const int)'})
call add(f,{'word':'append','kind':'f','menu':'void(export int[],const int[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector4[],const vector4)'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector4[],const vector4[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export string[],const string)'})
call add(f,{'word':'append','kind':'f','menu':'void(export string[],const string[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector2[],const vector2)'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector2[],const vector2[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector[],const vector)'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector[],const vector[])'})
let c['append'] = f
let f = []
call add(f,{'word':'area','kind':'f','menu':'float(const vector)'})
let c['area'] = f
let f = []
call add(f,{'word':'argsort','kind':'f','menu':'int[](const float[])'})
call add(f,{'word':'argsort','kind':'f','menu':'int[](const int[])'})
call add(f,{'word':'argsort','kind':'f','menu':'int[](const string[])'})
let c['argsort'] = f
let f = []
call add(f,{'word':'array','kind':'f','menu':'matrix2[]()'})
call add(f,{'word':'array','kind':'f','menu':'matrix3[]()'})
call add(f,{'word':'array','kind':'f','menu':'matrix[]()'})
call add(f,{'word':'array','kind':'f','menu':'float[]()'})
call add(f,{'word':'array','kind':'f','menu':'int[]()'})
call add(f,{'word':'array','kind':'f','menu':'vector4[]()'})
call add(f,{'word':'array','kind':'f','menu':'string[]()'})
call add(f,{'word':'array','kind':'f','menu':'vector2[]()'})
call add(f,{'word':'array','kind':'f','menu':'vector[]()'})
let c['array'] = f
let f = []
call add(f,{'word':'arraylength','kind':'f','menu':'int(const matrix3)'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const matrix)'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const vector4)'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const vector)'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const matrix3[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const matrix[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const bsdf[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const light[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const material[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const float[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const vector4[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const string[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const vector[])'})
let c['arraylength'] = f
let f = []
call add(f,{'word':'ashikhmin','kind':'f','menu':'bsdf(const float,const float,const vector,const vector)'})
call add(f,{'word':'ashikhmin','kind':'f','menu':'bsdf(const vector,const float,const float,const vector,const vector)'})
let c['ashikhmin'] = f
let f = []
call add(f,{'word':'asin','kind':'f','menu':'float(const float)'})
call add(f,{'word':'asin','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'asin','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'asin','kind':'f','menu':'vector(const vector)'})
let c['asin'] = f
let f = []
call add(f,{'word':'assert_enabled','kind':'f','menu':'int()'})
let c['assert_enabled'] = f
let f = []
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,float,const matrix2)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,float,const matrix2)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,float,float,float,float,float,float,const matrix3)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,float,float,float,float,float,float,const matrix3)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,const matrix)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,const matrix)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,float,const vector4)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,float,const vector4)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,const vector)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,const vector)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,const vector2)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,const vector2)'})
let c['assign'] = f
let f = []
call add(f,{'word':'atan','kind':'f','menu':'float(const float)'})
call add(f,{'word':'atan','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'atan','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'atan','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'atan','kind':'f','menu':'vector(const vector)'})
let c['atan'] = f
let f = []
call add(f,{'word':'atan2','kind':'f','menu':'float(const float,const float)'})
let c['atan2'] = f
let f = []
call add(f,{'word':'atof','kind':'f','menu':'float(const string)'})
let c['atof'] = f
let f = []
call add(f,{'word':'atoi','kind':'f','menu':'int(const string)'})
let c['atoi'] = f
let f = []
call add(f,{'word':'atten','kind':'f','menu':'float(const float,const float)'})
let c['atten'] = f
let f = []
call add(f,{'word':'attrib','kind':'f','menu':'matrix2(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix2(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix3(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix3(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'float(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'float(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector4(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector4(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'string(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'string(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector2(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector2(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix2[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix2[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix3[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix3[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'float[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'float[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'int[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'int[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector4[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector4[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'string[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'string[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector2[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector2[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector[](const string,const string,const string,const int)'})
let c['attrib'] = f
let f = []
call add(f,{'word':'attribclass','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'attribclass','kind':'f','menu':'string(const string,const string)'})
let c['attribclass'] = f
let f = []
call add(f,{'word':'attribdataid','kind':'f','menu':'int[](const int,const string,const string)'})
call add(f,{'word':'attribdataid','kind':'f','menu':'int[](const string,const string,const string)'})
let c['attribdataid'] = f
let f = []
call add(f,{'word':'attribsize','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'attribsize','kind':'f','menu':'int(const string,const string,const string)'})
let c['attribsize'] = f
let f = []
call add(f,{'word':'attribtype','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'attribtype','kind':'f','menu':'int(const string,const string,const string)'})
let c['attribtype'] = f
let f = []
call add(f,{'word':'attribtypeinfo','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'attribtypeinfo','kind':'f','menu':'string(const string,const string,const string)'})
let c['attribtypeinfo'] = f
let f = []
call add(f,{'word':'avg','kind':'f','menu':'float(const float)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'avg','kind':'f','menu':'int(const int)'})
call add(f,{'word':'avg','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'avg','kind':'f','menu':'vector4(const vector4,const vector4)'})
call add(f,{'word':'avg','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'avg','kind':'f','menu':'vector2(const vector2,const vector2)'})
call add(f,{'word':'avg','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'avg','kind':'f','menu':'vector(const vector,const vector)'})
call add(f,{'word':'avg','kind':'f','menu':'vector(const vector[])'})
let c['avg'] = f
let f = []
let c['band'] = f
let f = []
let c['bgather'] = f
let f = []
call add(f,{'word':'blackbody','kind':'f','menu':'vector(const float,const float)'})
let c['blackbody'] = f
let f = []
let c['blight'] = f
let f = []
call add(f,{'word':'blinn','kind':'f','menu':'bsdf(const float)'})
call add(f,{'word':'blinn','kind':'f','menu':'bsdf(const vector,const float)'})
call add(f,{'word':'blinn','kind':'f','menu':'vector(const vector,const vector,const float)'})
let c['blinn'] = f
let f = []
call add(f,{'word':'blinnBRDF','kind':'f','menu':'float(const vector,const vector,const vector,const float)'})
let c['blinnBRDF'] = f
let f = []
let c['bnot'] = f
let f = []
let c['bor'] = f
let f = []
call add(f,{'word':'bouncelabel','kind':'f','menu':'string(const int)'})
let c['bouncelabel'] = f
let f = []
call add(f,{'word':'bouncemask','kind':'f','menu':'int(const string)'})
let c['bouncemask'] = f
let f = []
let c['br'] = f
let f = []
let c['break'] = f
let f = []
call add(f,{'word':'bumpmap','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmap','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmap','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmap','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmap'] = f
let f = []
call add(f,{'word':'bumpmapA','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapA','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapA','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapA','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapA'] = f
let f = []
call add(f,{'word':'bumpmapB','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapB','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapB','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapB','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapB'] = f
let f = []
call add(f,{'word':'bumpmapG','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapG','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapG','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapG','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapG'] = f
let f = []
call add(f,{'word':'bumpmapL','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapL','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapL','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapL','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapL'] = f
let f = []
call add(f,{'word':'bumpmapR','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapR','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapR','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapR','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapR'] = f
let f = []
let c['bwhile'] = f
let f = []
let c['bxor'] = f
let f = []
call add(f,{'word':'cbrt','kind':'f','menu':'float(const float)'})
call add(f,{'word':'cbrt','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'cbrt','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'cbrt','kind':'f','menu':'vector(const vector)'})
let c['cbrt'] = f
let f = []
call add(f,{'word':'ceil','kind':'f','menu':'float(const float)'})
call add(f,{'word':'ceil','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'ceil','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'ceil','kind':'f','menu':'vector(const vector)'})
let c['ceil'] = f
let f = []
call add(f,{'word':'ch','kind':'f','menu':'float(const int,const int,const int)'})
call add(f,{'word':'ch','kind':'f','menu':'float(const int,const int,const int,const float)'})
call add(f,{'word':'ch','kind':'f','menu':'float(const string)'})
call add(f,{'word':'ch','kind':'f','menu':'float(const string,const float)'})
call add(f,{'word':'ch','kind':'f','menu':'string(const string)'})
call add(f,{'word':'ch','kind':'f','menu':'string(const string,const float)'})
let c['ch'] = f
let f = []
call add(f,{'word':'ch2','kind':'f','menu':'matrix2(const string)'})
call add(f,{'word':'ch2','kind':'f','menu':'matrix2(const string,const float)'})
let c['ch2'] = f
let f = []
call add(f,{'word':'ch3','kind':'f','menu':'matrix3(const string)'})
call add(f,{'word':'ch3','kind':'f','menu':'matrix3(const string,const float)'})
let c['ch3'] = f
let f = []
call add(f,{'word':'ch4','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'ch4','kind':'f','menu':'matrix(const string,const float)'})
let c['ch4'] = f
let f = []
call add(f,{'word':'chexpr','kind':'f','menu':'float(const string,const string)'})
let c['chexpr'] = f
let f = []
call add(f,{'word':'chexprf','kind':'f','menu':'float(const string,const string,const float)'})
let c['chexprf'] = f
let f = []
call add(f,{'word':'chexprt','kind':'f','menu':'float(const string,const string,const float)'})
let c['chexprt'] = f
let f = []
call add(f,{'word':'chf','kind':'f','menu':'float(const int,const int,const int)'})
call add(f,{'word':'chf','kind':'f','menu':'float(const int,const int,const int,const float)'})
call add(f,{'word':'chf','kind':'f','menu':'float(const string)'})
call add(f,{'word':'chf','kind':'f','menu':'float(const string,const float)'})
let c['chf'] = f
let f = []
call add(f,{'word':'chi','kind':'f','menu':'int(const string)'})
call add(f,{'word':'chi','kind':'f','menu':'int(const string,const float)'})
let c['chi'] = f
let f = []
call add(f,{'word':'chid','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'chid','kind':'f','menu':'void(const string,int,int,int)'})
call add(f,{'word':'chid','kind':'f','menu':'int(const string,int,int)'})
call add(f,{'word':'chid','kind':'f','menu':'void(const string,const string,int,int,int)'})
call add(f,{'word':'chid','kind':'f','menu':'int(const string,const string,int,int)'})
let c['chid'] = f
let f = []
call add(f,{'word':'chop','kind':'f','menu':'matrix(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'matrix(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'matrix(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'float(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'float(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'float(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector4(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector4(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector4(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector2(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector2(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector2(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector(const string,const string,const int)'})
let c['chop'] = f
let f = []
call add(f,{'word':'choplocal','kind':'f','menu':'matrix(const string,const int,const float)'})
call add(f,{'word':'choplocal','kind':'f','menu':'matrix(const string,const int,const int)'})
call add(f,{'word':'choplocal','kind':'f','menu':'matrix(const string,const string,const float)'})
call add(f,{'word':'choplocal','kind':'f','menu':'matrix(const string,const string,const int)'})
let c['choplocal'] = f
let f = []
call add(f,{'word':'choplocalt','kind':'f','menu':'matrix(const string,const int,const float,const float)'})
call add(f,{'word':'choplocalt','kind':'f','menu':'matrix(const string,const int,const int,const float)'})
call add(f,{'word':'choplocalt','kind':'f','menu':'matrix(const string,const string,const float,const float)'})
call add(f,{'word':'choplocalt','kind':'f','menu':'matrix(const string,const string,const int,const float)'})
let c['choplocalt'] = f
let f = []
call add(f,{'word':'chopt','kind':'f','menu':'matrix(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'matrix(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'matrix(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'matrix(const string,const string,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'float(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'float(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'float(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'float(const string,const string,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector4(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector4(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector4(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector4(const string,const string,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector2(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector2(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector2(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector2(const string,const string,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector(const string,const string,const int,const float)'})
let c['chopt'] = f
let f = []
call add(f,{'word':'chp','kind':'f','menu':'vector4(const string)'})
call add(f,{'word':'chp','kind':'f','menu':'vector4(const string,const float)'})
let c['chp'] = f
let f = []
call add(f,{'word':'chr','kind':'f','menu':'string(const int)'})
let c['chr'] = f
let f = []
call add(f,{'word':'chramp','kind':'f','menu':'float(const string,const float)'})
call add(f,{'word':'chramp','kind':'f','menu':'float(const string,const float,const float)'})
call add(f,{'word':'chramp','kind':'f','menu':'vector(const string,const float)'})
call add(f,{'word':'chramp','kind':'f','menu':'vector(const string,const float,const float)'})
let c['chramp'] = f
let f = []
call add(f,{'word':'chs','kind':'f','menu':'string(const string)'})
call add(f,{'word':'chs','kind':'f','menu':'string(const string,const float)'})
let c['chs'] = f
let f = []
call add(f,{'word':'chsraw','kind':'f','menu':'string(const string)'})
let c['chsraw'] = f
let f = []
call add(f,{'word':'chu','kind':'f','menu':'vector2(const string)'})
call add(f,{'word':'chu','kind':'f','menu':'vector2(const string,const float)'})
let c['chu'] = f
let f = []
call add(f,{'word':'chv','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'chv','kind':'f','menu':'vector(const int,const int,const float)'})
call add(f,{'word':'chv','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'chv','kind':'f','menu':'vector(const string,const float)'})
let c['chv'] = f
let f = []
call add(f,{'word':'ckspline','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'ckspline','kind':'f','menu':'vector4(const float,const vector4,const float)'})
call add(f,{'word':'ckspline','kind':'f','menu':'vector(const float,const vector,const float)'})
let c['ckspline'] = f
let f = []
call add(f,{'word':'clamp','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'clamp','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'clamp','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'clamp','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'clamp','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['clamp'] = f
let f = []
call add(f,{'word':'clip','kind':'f','menu':'void(int,export vector,export vector,const vector4)'})
call add(f,{'word':'clip','kind':'f','menu':'int(export vector,export vector,const vector4)'})
call add(f,{'word':'clip','kind':'f','menu':'void(int,export vector,export vector,const vector,const vector)'})
call add(f,{'word':'clip','kind':'f','menu':'int(export vector,export vector,const vector,const vector)'})
let c['clip'] = f
let f = []
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const float,const float)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const float,const float,const float,const float,const float,const float,const float,const float,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const vector)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const float,const float)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const float,const float,const float,const float,const float,const float,const float,const float,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector,const int)'})
let c['colormap'] = f
let f = []
call add(f,{'word':'computenormal','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'computenormal','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['computenormal'] = f
let f = []
call add(f,{'word':'concat','kind':'f','menu':'string(const string,const string)'})
let c['concat'] = f
let f = []
call add(f,{'word':'cone','kind':'f','menu':'bsdf(const vector,const float)'})
call add(f,{'word':'cone','kind':'f','menu':'bsdf(const vector,const vector,const float)'})
let c['cone'] = f
let f = []
call add(f,{'word':'cos','kind':'f','menu':'float(const float)'})
call add(f,{'word':'cos','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'cos','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'cos','kind':'f','menu':'vector(const vector)'})
let c['cos'] = f
let f = []
call add(f,{'word':'cosh','kind':'f','menu':'float(const float)'})
call add(f,{'word':'cosh','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'cosh','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'cosh','kind':'f','menu':'vector(const vector)'})
let c['cosh'] = f
let f = []
call add(f,{'word':'cout','kind':'f','menu':'void()'})
let c['cout'] = f
let f = []
call add(f,{'word':'cracktransform','kind':'f','menu':'void(const int,const int,const vector,const matrix,vector,vector,vector)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'vector(const int,const int,const vector,const matrix,vector,vector)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'void(const int,const int,const vector,const vector,const matrix,vector,vector,vector,vector)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'vector(const int,const int,const vector,const vector,const matrix,vector,vector,vector)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'vector(const int,const int,const int,const vector,const matrix)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'vector(const int,const int,const int,const vector,const vector,const matrix)'})
let c['cracktransform'] = f
let f = []
call add(f,{'word':'create_cdf','kind':'f','menu':'float[](const float[])'})
let c['create_cdf'] = f
let f = []
call add(f,{'word':'create_pdf','kind':'f','menu':'float[](const float[])'})
let c['create_pdf'] = f
let f = []
call add(f,{'word':'cross','kind':'f','menu':'vector(const vector,const vector)'})
let c['cross'] = f
let f = []
call add(f,{'word':'cspline','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'cspline','kind':'f','menu':'vector4(const float,const vector4)'})
call add(f,{'word':'cspline','kind':'f','menu':'vector(const float,const vector)'})
let c['cspline'] = f
let f = []
call add(f,{'word':'ctransform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'ctransform','kind':'f','menu':'vector(const string,const vector)'})
let c['ctransform'] = f
let f = []
call add(f,{'word':'curlnoise','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'curlnoise','kind':'f','menu':'vector(const vector)'})
let c['curlnoise'] = f
let f = []
call add(f,{'word':'curlnoise2d','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'curlnoise2d','kind':'f','menu':'vector(const vector)'})
let c['curlnoise2d'] = f
let f = []
call add(f,{'word':'curlxnoise','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'curlxnoise','kind':'f','menu':'vector(const vector)'})
let c['curlxnoise'] = f
let f = []
call add(f,{'word':'curlxnoise2d','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'curlxnoise2d','kind':'f','menu':'vector(const vector)'})
let c['curlxnoise2d'] = f
let f = []
call add(f,{'word':'cvex_bsdf','kind':'f','menu':'bsdf(const string,const string)'})
let c['cvex_bsdf'] = f
let f = []
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,const float,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,const float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,const float,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,const float,float,float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,const float,int,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,const float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,int,float,float,float,float,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,float,float,float,float,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,int,float,float,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,float,float,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector4,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector4,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector4,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector4,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector4,int,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector4,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector2,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector2,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector2,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector2,float,float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector2,int,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector2,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector,int,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector,int,float,float,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector,float,float,const int,const int,const int)'})
let c['cwnoise'] = f
let f = []
call add(f,{'word':'decode','kind':'f','menu':'string(const string)'})
let c['decode'] = f
let f = []
call add(f,{'word':'degrees','kind':'f','menu':'float(const float)'})
call add(f,{'word':'degrees','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'degrees','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'degrees','kind':'f','menu':'vector(const vector)'})
let c['degrees'] = f
let f = []
call add(f,{'word':'depthmap','kind':'f','menu':'float(const string,const float,const float)'})
call add(f,{'word':'depthmap','kind':'f','menu':'float(const string,const vector)'})
let c['depthmap'] = f
let f = []
call add(f,{'word':'detail','kind':'f','menu':'matrix2(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'float(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'float(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'int(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'string(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'float[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'float[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'int[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector[](const string,const string,const int)'})
let c['detail'] = f
let f = []
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix2(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix2(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix3(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix3(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'float(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'float(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'int(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'int(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector4(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector4(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'string(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'string(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector2(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector2(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix2[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix2[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix3[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix3[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'float[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'float[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'int[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'int[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector4[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector4[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'string[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'string[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector2[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector2[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector[](const string,const string,const int,int)'})
let c['detailattrib'] = f
let f = []
call add(f,{'word':'detailattribsize','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'detailattribsize','kind':'f','menu':'int(const string,const string)'})
let c['detailattribsize'] = f
let f = []
call add(f,{'word':'detailattribtype','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'detailattribtype','kind':'f','menu':'int(const string,const string)'})
let c['detailattribtype'] = f
let f = []
call add(f,{'word':'detailattribtypeinfo','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'detailattribtypeinfo','kind':'f','menu':'string(const string,const string)'})
let c['detailattribtypeinfo'] = f
let f = []
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix2(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix2(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix3(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix3(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'float(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'float(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'int(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector4(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector4(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'string(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector2(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector2(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix2[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix2[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix3[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix3[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'float[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'float[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'int[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector4[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector4[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector2[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector2[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector[](const string,const string)'})
let c['detailintrinsic'] = f
let f = []
call add(f,{'word':'determinant','kind':'f','menu':'float(const matrix2)'})
call add(f,{'word':'determinant','kind':'f','menu':'float(const matrix3)'})
call add(f,{'word':'determinant','kind':'f','menu':'float(const matrix)'})
let c['determinant'] = f
let f = []
call add(f,{'word':'diagonalizesymmetric','kind':'f','menu':'matrix3(const matrix3,vector)'})
let c['diagonalizesymmetric'] = f
let f = []
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf(const float)'})
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf(const vector,const float)'})
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf(const vector,const vector,const float)'})
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf(const vector,const vector)'})
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf(const vector)'})
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf()'})
call add(f,{'word':'diffuse','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'diffuse','kind':'f','menu':'vector(const vector,const vector,const float)'})
let c['diffuse'] = f
let f = []
call add(f,{'word':'diffuseBRDF','kind':'f','menu':'float(const vector,const vector)'})
call add(f,{'word':'diffuseBRDF','kind':'f','menu':'float(const vector,const vector,const vector,const float)'})
let c['diffuseBRDF'] = f
let f = []
call add(f,{'word':'dihedral','kind':'f','menu':'matrix3(const vector,const vector)'})
call add(f,{'word':'dihedral','kind':'f','menu':'vector4(const vector,const vector)'})
let c['dihedral'] = f
let f = []
call add(f,{'word':'distance','kind':'f','menu':'float(const vector4,const vector4)'})
call add(f,{'word':'distance','kind':'f','menu':'float(const vector2,const vector2)'})
call add(f,{'word':'distance','kind':'f','menu':'float(const vector,const vector)'})
let c['distance'] = f
let f = []
call add(f,{'word':'distance2','kind':'f','menu':'float(const vector4,const vector4)'})
call add(f,{'word':'distance2','kind':'f','menu':'float(const vector2,const vector2)'})
call add(f,{'word':'distance2','kind':'f','menu':'float(const vector,const vector)'})
let c['distance2'] = f
let f = []
let c['div'] = f
let f = []
call add(f,{'word':'dot','kind':'f','menu':'float(const vector4,const vector4)'})
call add(f,{'word':'dot','kind':'f','menu':'float(const vector4,const vector)'})
call add(f,{'word':'dot','kind':'f','menu':'float(const vector2,const vector2)'})
call add(f,{'word':'dot','kind':'f','menu':'float(const vector,const vector4)'})
call add(f,{'word':'dot','kind':'f','menu':'float(const vector,const vector)'})
let c['dot'] = f
let f = []
call add(f,{'word':'dsmpixel','kind':'f','menu':'int(const string,const string,const int,const int,float[])'})
call add(f,{'word':'dsmpixel','kind':'f','menu':'int(const string,const string,const int,const int,vector4[])'})
call add(f,{'word':'dsmpixel','kind':'f','menu':'int(const string,const string,const int,const int,vector[])'})
let c['dsmpixel'] = f
let f = []
call add(f,{'word':'efit','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
call add(f,{'word':'efit','kind':'f','menu':'vector4(const vector4,const vector4,const vector4,const float,const float)'})
call add(f,{'word':'efit','kind':'f','menu':'vector4(const vector4,const vector4,const vector4,const vector4,const vector4)'})
call add(f,{'word':'efit','kind':'f','menu':'vector2(const vector2,const vector2,const vector2,const float,const float)'})
call add(f,{'word':'efit','kind':'f','menu':'vector2(const vector2,const vector2,const vector2,const vector2,const vector2)'})
call add(f,{'word':'efit','kind':'f','menu':'vector(const vector,const vector,const vector,const float,const float)'})
call add(f,{'word':'efit','kind':'f','menu':'vector(const vector,const vector,const vector,const vector,const vector)'})
let c['efit'] = f
let f = []
call add(f,{'word':'eigenvalues','kind':'f','menu':'void(int,const matrix3,vector,vector)'})
call add(f,{'word':'eigenvalues','kind':'f','menu':'int(const matrix3,vector,vector)'})
let c['eigenvalues'] = f
let f = []
let c['else'] = f
let f = []
call add(f,{'word':'encode','kind':'f','menu':'string(const string)'})
let c['encode'] = f
let f = []
let c['endel'] = f
let f = []
let c['endif'] = f
let f = []
let c['endnotif'] = f
let f = []
call add(f,{'word':'endswith','kind':'f','menu':'int(const string,const string)'})
let c['endswith'] = f
let f = []
call add(f,{'word':'environment','kind':'f','menu':'vector4(const string,const vector)'})
call add(f,{'word':'environment','kind':'f','menu':'vector4(const string,const vector,const float)'})
call add(f,{'word':'environment','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'environment','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'environment','kind':'f','menu':'vector(const string,const vector,const float)'})
call add(f,{'word':'environment','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector)'})
let c['environment'] = f
let f = []
let c['eq'] = f
let f = []
call add(f,{'word':'erf','kind':'f','menu':'float(const float)'})
call add(f,{'word':'erf','kind':'f','menu':'vector2(const vector2)'})
let c['erf'] = f
let f = []
call add(f,{'word':'erf_inv','kind':'f','menu':'float(const float)'})
let c['erf_inv'] = f
let f = []
call add(f,{'word':'erfc','kind':'f','menu':'float(const float)'})
let c['erfc'] = f
let f = []
call add(f,{'word':'error','kind':'f','menu':'void(const string)'})
let c['error'] = f
let f = []
call add(f,{'word':'eulertoquaternion','kind':'f','menu':'vector4(const vector,const int)'})
let c['eulertoquaternion'] = f
let f = []
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,float,const int)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,const int)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,const vector,float,const int)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,const vector,const int)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,const vector)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector)'})
let c['eval_bsdf'] = f
let f = []
call add(f,{'word':'exp','kind':'f','menu':'float(const float)'})
call add(f,{'word':'exp','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'exp','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'exp','kind':'f','menu':'vector(const vector)'})
let c['exp'] = f
let f = []
call add(f,{'word':'expand_udim','kind':'f','menu':'string(const float,const float,const string)'})
let c['expand_udim'] = f
let f = []
call add(f,{'word':'expandedgegroup','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'expandedgegroup','kind':'f','menu':'int[](const string,const string)'})
let c['expandedgegroup'] = f
let f = []
call add(f,{'word':'expandpointgroup','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'expandpointgroup','kind':'f','menu':'int[](const string,const string)'})
let c['expandpointgroup'] = f
let f = []
call add(f,{'word':'expandprimgroup','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'expandprimgroup','kind':'f','menu':'int[](const string,const string)'})
let c['expandprimgroup'] = f
let f = []
call add(f,{'word':'expandvertexgroup','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'expandvertexgroup','kind':'f','menu':'int[](const string,const string)'})
let c['expandvertexgroup'] = f
let f = []
call add(f,{'word':'fastshadow','kind':'f','menu':'float(const vector,const vector,const float)'})
let c['fastshadow'] = f
let f = []
call add(f,{'word':'filamentsample','kind':'f','menu':'vector(const int,const vector)'})
call add(f,{'word':'filamentsample','kind':'f','menu':'vector(const string,const vector)'})
let c['filamentsample'] = f
let f = []
call add(f,{'word':'file_stat','kind':'f','menu':'int(const string,int[])'})
let c['file_stat'] = f
let f = []
call add(f,{'word':'filtershadow','kind':'f','menu':'vector(const vector,const vector,const float)'})
let c['filtershadow'] = f
let f = []
call add(f,{'word':'filterstep','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'filterstep','kind':'f','menu':'float(const float,const float,const float)'})
let c['filterstep'] = f
let f = []
call add(f,{'word':'find','kind':'f','menu':'int(const string,const string)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string,const string,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix2[],const matrix2)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix2[],const matrix2,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix2[],const matrix2,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix3[],const matrix3)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix3[],const matrix3,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix3[],const matrix3,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix[],const matrix)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix[],const matrix,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix[],const matrix,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const float[],const float)'})
call add(f,{'word':'find','kind':'f','menu':'int(const float[],const float,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const float[],const float,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const int[],const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const int[],const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const int[],const int,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector4[],const vector4)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector4[],const vector4,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector4[],const vector4,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string[],const string)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string[],const string,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string[],const string,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector2[],const vector2)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector2[],const vector2,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector2[],const vector2,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector[],const vector)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector[],const vector,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector[],const vector,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string,const string)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string,const string,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix2[],const matrix2)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix2[],const matrix2,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix2[],const matrix2,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix3[],const matrix3)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix3[],const matrix3,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix3[],const matrix3,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix[],const matrix)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix[],const matrix,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix[],const matrix,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const float[],const float)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const float[],const float,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const float[],const float,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const int[],const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const int[],const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const int[],const int,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector4[],const vector4)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector4[],const vector4,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector4[],const vector4,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string[],const string)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string[],const string,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string[],const string,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector2[],const vector2)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector2[],const vector2,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector2[],const vector2,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector[],const vector)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector[],const vector,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector[],const vector,const int,const int)'})
let c['find'] = f
let f = []
call add(f,{'word':'findattribval','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const int,const string,const string,const int,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const int,const string,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const string,const string,const string,const int,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const string,const string,const string,const string)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const string,const string,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int[](const int,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int[](const int,const string,const string,const string)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int[](const string,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int[](const string,const string,const string,const string)'})
let c['findattribval'] = f
let f = []
call add(f,{'word':'findattribvalcount','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'findattribvalcount','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'findattribvalcount','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'findattribvalcount','kind':'f','menu':'int(const string,const string,const string,const string)'})
let c['findattribvalcount'] = f
let f = []
call add(f,{'word':'fit','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
call add(f,{'word':'fit','kind':'f','menu':'vector4(const vector4,const vector4,const vector4,const vector4,const vector4)'})
call add(f,{'word':'fit','kind':'f','menu':'vector2(const vector2,const vector2,const vector2,const vector2,const vector2)'})
call add(f,{'word':'fit','kind':'f','menu':'vector(const vector,const vector,const vector,const vector,const vector)'})
let c['fit'] = f
let f = []
call add(f,{'word':'fit01','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'fit01','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'fit01','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'fit01','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['fit01'] = f
let f = []
call add(f,{'word':'fit10','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'fit10','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'fit10','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'fit10','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['fit10'] = f
let f = []
call add(f,{'word':'fit11','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'fit11','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'fit11','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'fit11','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['fit11'] = f
let f = []
call add(f,{'word':'floor','kind':'f','menu':'float(const float)'})
call add(f,{'word':'floor','kind':'f','menu':'int(const float)'})
call add(f,{'word':'floor','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'floor','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'floor','kind':'f','menu':'vector(const vector)'})
let c['floor'] = f
let f = []
call add(f,{'word':'flownoise','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'float(const vector4,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'float(const vector,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'vector(const float,const float,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'vector(const vector4,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'vector(const vector,const float)'})
let c['flownoise'] = f
let f = []
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const float,const float,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const vector4,const int,const int,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const vector4,const vector4,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const vector,const int,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const vector,const vector,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const float,const float,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const vector4,const int,const int,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const vector4,const vector4,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const vector,const int,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const vector,const vector,const float)'})
let c['flowpnoise'] = f
let f = []
call add(f,{'word':'frac','kind':'f','menu':'float(const float)'})
call add(f,{'word':'frac','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'frac','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'frac','kind':'f','menu':'vector(const vector)'})
let c['frac'] = f
let f = []
call add(f,{'word':'fresnel','kind':'f','menu':'void(const vector,const vector,const float,float,float)'})
call add(f,{'word':'fresnel','kind':'f','menu':'float(const vector,const vector,const float,float)'})
call add(f,{'word':'fresnel','kind':'f','menu':'void(const vector,const vector,const float,float,float,vector,vector)'})
call add(f,{'word':'fresnel','kind':'f','menu':'float(const vector,const vector,const float,float,vector,vector)'})
let c['fresnel'] = f
let f = []
call add(f,{'word':'fromNDC','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'fromNDC','kind':'f','menu':'vector(const vector)'})
let c['fromNDC'] = f
let f = []
call add(f,{'word':'frontface','kind':'f','menu':'vector(const vector,const vector)'})
call add(f,{'word':'frontface','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['frontface'] = f
let f = []
call add(f,{'word':'fuzzify','kind':'f','menu':'float(const string[],const float[],const float[],const float,const float,const float)'})
let c['fuzzify'] = f
let f = []
call add(f,{'word':'fuzzy_and','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_and','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_and'] = f
let f = []
call add(f,{'word':'fuzzy_defuzz_centroid','kind':'f','menu':'float(const float[],const float,const float)'})
let c['fuzzy_defuzz_centroid'] = f
let f = []
call add(f,{'word':'fuzzy_nand','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_nand','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_nand'] = f
let f = []
call add(f,{'word':'fuzzy_nor','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_nor','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_nor'] = f
let f = []
call add(f,{'word':'fuzzy_not','kind':'f','menu':'float(const float)'})
call add(f,{'word':'fuzzy_not','kind':'f','menu':'int(const int)'})
let c['fuzzy_not'] = f
let f = []
call add(f,{'word':'fuzzy_nxor','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_nxor','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_nxor'] = f
let f = []
call add(f,{'word':'fuzzy_or','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_or','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_or'] = f
let f = []
call add(f,{'word':'fuzzy_xor','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_xor','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_xor'] = f
let f = []
let c['ge'] = f
let f = []
call add(f,{'word':'geoself','kind':'f','menu':'int()'})
let c['geoself'] = f
let f = []
call add(f,{'word':'geounwrap','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'geounwrap','kind':'f','menu':'string(const string,const string)'})
let c['geounwrap'] = f
let f = []
call add(f,{'word':'getattrib','kind':'f','menu':'matrix2(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix2(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix3(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix3(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'float(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'float(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'int(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'int(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector4(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector4(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'string(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'string(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector2(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector2(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix2[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix2[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix3[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix3[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'float[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'float[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'int[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'int[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector4[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector4[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'string[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'string[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector2[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector2[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector[](const string,const string,const string,const int,int)'})
let c['getattrib'] = f
let f = []
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,matrix3,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,matrix,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,float,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,int,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,vector4,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,string,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,vector,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,float[],const string,const string,const int,const int)'})
let c['getattribute'] = f
let f = []
call add(f,{'word':'getbbox','kind':'f','menu':'void(const int,const string,vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(const int,const string,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'void(const int,vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(const int,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'void(const string,const string,vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(const string,const string,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'void(const string,vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(const string,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'void(vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(vector)'})
let c['getbbox'] = f
let f = []
call add(f,{'word':'getbbox_center','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getbbox_center','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getbbox_center','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getbbox_center','kind':'f','menu':'vector(const string,const string)'})
let c['getbbox_center'] = f
let f = []
call add(f,{'word':'getbbox_max','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getbbox_max','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getbbox_max','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getbbox_max','kind':'f','menu':'vector(const string,const string)'})
let c['getbbox_max'] = f
let f = []
call add(f,{'word':'getbbox_min','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getbbox_min','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getbbox_min','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getbbox_min','kind':'f','menu':'vector(const string,const string)'})
let c['getbbox_min'] = f
let f = []
call add(f,{'word':'getbbox_size','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getbbox_size','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getbbox_size','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getbbox_size','kind':'f','menu':'vector(const string,const string)'})
let c['getbbox_size'] = f
let f = []
call add(f,{'word':'getblurP','kind':'f','menu':'vector(const float)'})
let c['getblurP'] = f
let f = []
call add(f,{'word':'getbounces','kind':'f','menu':'int(const bsdf)'})
let c['getbounces'] = f
let f = []
call add(f,{'word':'getbounds','kind':'f','menu':'int(const string,const string,vector,vector)'})
call add(f,{'word':'getbounds','kind':'f','menu':'int(const string,vector,vector)'})
let c['getbounds'] = f
let f = []
call add(f,{'word':'getcomp','kind':'f','menu':'matrix2(const matrix2[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'matrix3(const matrix3[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'matrix(const matrix[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'bsdf(const bsdf[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'light(const light[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'material(const material[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const matrix2,const int,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const matrix3,const int,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const matrix,const int,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const vector4,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const vector2,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const vector,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const float[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'int(const int[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'vector4(const vector4[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'string(const string,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'string(const string[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'vector2(const vector2[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'vector(const vector[],const int)'})
let c['getcomp'] = f
let f = []
call add(f,{'word':'getcomponents','kind':'f','menu':'string[]()'})
let c['getcomponents'] = f
let f = []
call add(f,{'word':'getderiv','kind':'f','menu':'void(const float,const string,const int,const float,const float,float,float)'})
call add(f,{'word':'getderiv','kind':'f','menu':'float(const float,const string,const int,const float,const float,float)'})
call add(f,{'word':'getderiv','kind':'f','menu':'void(const vector4,const string,const int,const float,const float,vector4,vector4)'})
call add(f,{'word':'getderiv','kind':'f','menu':'vector4(const vector4,const string,const int,const float,const float,vector4)'})
call add(f,{'word':'getderiv','kind':'f','menu':'void(const vector,const string,const int,const float,const float,vector,vector)'})
call add(f,{'word':'getderiv','kind':'f','menu':'vector(const vector,const string,const int,const float,const float,vector)'})
let c['getderiv'] = f
let f = []
let c['getelem'] = f
let f = []
call add(f,{'word':'getfogname','kind':'f','menu':'string()'})
let c['getfogname'] = f
let f = []
call add(f,{'word':'getglobalraylevel','kind':'f','menu':'int()'})
let c['getglobalraylevel'] = f
let f = []
call add(f,{'word':'getgroupid','kind':'f','menu':'int()'})
let c['getgroupid'] = f
let f = []
call add(f,{'word':'getlight','kind':'f','menu':'light(const int)'})
let c['getlight'] = f
let f = []
call add(f,{'word':'getlightid','kind':'f','menu':'int(const string)'})
let c['getlightid'] = f
let f = []
call add(f,{'word':'getlightname','kind':'f','menu':'string()'})
call add(f,{'word':'getlightname','kind':'f','menu':'string(const int)'})
let c['getlightname'] = f
let f = []
call add(f,{'word':'getlights','kind':'f','menu':'int[]()'})
call add(f,{'word':'getlights','kind':'f','menu':'int[](const material,const vector)'})
call add(f,{'word':'getlights','kind':'f','menu':'int[](const vector)'})
let c['getlights'] = f
let f = []
call add(f,{'word':'getlightscope','kind':'f','menu':'void(const material,string,string)'})
call add(f,{'word':'getlightscope','kind':'f','menu':'string(const material,string)'})
let c['getlightscope'] = f
let f = []
call add(f,{'word':'getlocalcurvature','kind':'f','menu':'vector(const float,const float)'})
let c['getlocalcurvature'] = f
let f = []
call add(f,{'word':'getmaterial','kind':'f','menu':'material()'})
let c['getmaterial'] = f
let f = []
call add(f,{'word':'getmaterialid','kind':'f','menu':'int()'})
let c['getmaterialid'] = f
let f = []
call add(f,{'word':'getobjectid','kind':'f','menu':'int()'})
let c['getobjectid'] = f
let f = []
call add(f,{'word':'getobjectname','kind':'f','menu':'string()'})
let c['getobjectname'] = f
let f = []
call add(f,{'word':'getpackedtransform','kind':'f','menu':'matrix(const int,const int)'})
let c['getpackedtransform'] = f
let f = []
call add(f,{'word':'getphotonlight','kind':'f','menu':'int()'})
let c['getphotonlight'] = f
let f = []
call add(f,{'word':'getpointbbox','kind':'f','menu':'void(const int,const string,vector,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'vector(const int,const string,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'void(const int,vector,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'vector(const int,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'void(const string,const string,vector,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'vector(const string,const string,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'void(const string,vector,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'vector(const string,vector)'})
let c['getpointbbox'] = f
let f = []
call add(f,{'word':'getpointbbox_center','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getpointbbox_center','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getpointbbox_center','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getpointbbox_center','kind':'f','menu':'vector(const string,const string)'})
let c['getpointbbox_center'] = f
let f = []
call add(f,{'word':'getpointbbox_max','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getpointbbox_max','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getpointbbox_max','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getpointbbox_max','kind':'f','menu':'vector(const string,const string)'})
let c['getpointbbox_max'] = f
let f = []
call add(f,{'word':'getpointbbox_min','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getpointbbox_min','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getpointbbox_min','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getpointbbox_min','kind':'f','menu':'vector(const string,const string)'})
let c['getpointbbox_min'] = f
let f = []
call add(f,{'word':'getpointbbox_size','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getpointbbox_size','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getpointbbox_size','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getpointbbox_size','kind':'f','menu':'vector(const string,const string)'})
let c['getpointbbox_size'] = f
let f = []
call add(f,{'word':'getprimid','kind':'f','menu':'int()'})
let c['getprimid'] = f
let f = []
call add(f,{'word':'getptextureid','kind':'f','menu':'int()'})
let c['getptextureid'] = f
let f = []
call add(f,{'word':'getraylevel','kind':'f','menu':'int()'})
let c['getraylevel'] = f
let f = []
call add(f,{'word':'getrayweight','kind':'f','menu':'float()'})
let c['getrayweight'] = f
let f = []
call add(f,{'word':'getsamplestore','kind':'f','menu':'int(const string,const vector,float)'})
call add(f,{'word':'getsamplestore','kind':'f','menu':'int(const string,const vector,int)'})
call add(f,{'word':'getsamplestore','kind':'f','menu':'int(const string,const vector,vector4)'})
call add(f,{'word':'getsamplestore','kind':'f','menu':'int(const string,const vector,vector)'})
let c['getsamplestore'] = f
let f = []
call add(f,{'word':'getscope','kind':'f','menu':'void(const material,const string,string,string)'})
call add(f,{'word':'getscope','kind':'f','menu':'string(const material,const string,string)'})
let c['getscope'] = f
let f = []
call add(f,{'word':'getsmoothP','kind':'f','menu':'int(vector,const vector)'})
call add(f,{'word':'getsmoothP','kind':'f','menu':'vector()'})
let c['getsmoothP'] = f
let f = []
call add(f,{'word':'getspace','kind':'f','menu':'matrix(const string,const string)'})
let c['getspace'] = f
let f = []
call add(f,{'word':'getuvtangents','kind':'f','menu':'void(const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'getuvtangents','kind':'f','menu':'vector(const string,const vector,const vector,vector)'})
call add(f,{'word':'getuvtangents','kind':'f','menu':'void(const string,const vector,const vector,vector,vector,vector)'})
call add(f,{'word':'getuvtangents','kind':'f','menu':'vector(const string,const vector,const vector,vector,vector)'})
let c['getuvtangents'] = f
let f = []
call add(f,{'word':'gradient','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'gradient','kind':'f','menu':'vector(const vector,const float)'})
let c['gradient'] = f
let f = []
call add(f,{'word':'gradient3d','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['gradient3d'] = f
let f = []
let c['gt'] = f
let f = []
call add(f,{'word':'hair','kind':'f','menu':'bsdf(const vector,const vector,const float,const float,const float,const float,const float)'})
call add(f,{'word':'hair','kind':'f','menu':'bsdf(const vector,const vector,const float,const float,const float)'})
call add(f,{'word':'hair','kind':'f','menu':'bsdf(const vector,const vector,const float,const float)'})
let c['hair'] = f
let f = []
call add(f,{'word':'has_udim','kind':'f','menu':'int(const string)'})
let c['has_udim'] = f
let f = []
call add(f,{'word':'hasattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'hasattrib','kind':'f','menu':'int(const string,const string,const string)'})
let c['hasattrib'] = f
let f = []
call add(f,{'word':'hasdetailattrib','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'hasdetailattrib','kind':'f','menu':'int(const string,const string)'})
let c['hasdetailattrib'] = f
let f = []
call add(f,{'word':'haslight','kind':'f','menu':'int(const material,const vector,const int)'})
let c['haslight'] = f
let f = []
call add(f,{'word':'haspointattrib','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'haspointattrib','kind':'f','menu':'int(const string,const string)'})
let c['haspointattrib'] = f
let f = []
call add(f,{'word':'hasprimattrib','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'hasprimattrib','kind':'f','menu':'int(const string,const string)'})
let c['hasprimattrib'] = f
let f = []
call add(f,{'word':'hasvertexattrib','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'hasvertexattrib','kind':'f','menu':'int(const string,const string)'})
let c['hasvertexattrib'] = f
let f = []
call add(f,{'word':'hedge_dstpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_dstpoint','kind':'f','menu':'int(const string,const int)'})
let c['hedge_dstpoint'] = f
let f = []
call add(f,{'word':'hedge_dstvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_dstvertex','kind':'f','menu':'int(const string,const int)'})
let c['hedge_dstvertex'] = f
let f = []
call add(f,{'word':'hedge_equivcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_equivcount','kind':'f','menu':'int(const string,const int)'})
let c['hedge_equivcount'] = f
let f = []
call add(f,{'word':'hedge_isequiv','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'hedge_isequiv','kind':'f','menu':'int(const string,const int,const int)'})
let c['hedge_isequiv'] = f
let f = []
call add(f,{'word':'hedge_isprimary','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_isprimary','kind':'f','menu':'int(const string,const int)'})
let c['hedge_isprimary'] = f
let f = []
call add(f,{'word':'hedge_isvalid','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_isvalid','kind':'f','menu':'int(const string,const int)'})
let c['hedge_isvalid'] = f
let f = []
call add(f,{'word':'hedge_next','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_next','kind':'f','menu':'int(const string,const int)'})
let c['hedge_next'] = f
let f = []
call add(f,{'word':'hedge_nextequiv','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_nextequiv','kind':'f','menu':'int(const string,const int)'})
let c['hedge_nextequiv'] = f
let f = []
call add(f,{'word':'hedge_postdstpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_postdstpoint','kind':'f','menu':'int(const string,const int)'})
let c['hedge_postdstpoint'] = f
let f = []
call add(f,{'word':'hedge_postdstvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_postdstvertex','kind':'f','menu':'int(const string,const int)'})
let c['hedge_postdstvertex'] = f
let f = []
call add(f,{'word':'hedge_presrcpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_presrcpoint','kind':'f','menu':'int(const string,const int)'})
let c['hedge_presrcpoint'] = f
let f = []
call add(f,{'word':'hedge_presrcvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_presrcvertex','kind':'f','menu':'int(const string,const int)'})
let c['hedge_presrcvertex'] = f
let f = []
call add(f,{'word':'hedge_prev','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_prev','kind':'f','menu':'int(const string,const int)'})
let c['hedge_prev'] = f
let f = []
call add(f,{'word':'hedge_prim','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_prim','kind':'f','menu':'int(const string,const int)'})
let c['hedge_prim'] = f
let f = []
call add(f,{'word':'hedge_primary','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_primary','kind':'f','menu':'int(const string,const int)'})
let c['hedge_primary'] = f
let f = []
call add(f,{'word':'hedge_srcpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_srcpoint','kind':'f','menu':'int(const string,const int)'})
let c['hedge_srcpoint'] = f
let f = []
call add(f,{'word':'hedge_srcvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_srcvertex','kind':'f','menu':'int(const string,const int)'})
let c['hedge_srcvertex'] = f
let f = []
call add(f,{'word':'henyeygreenstein','kind':'f','menu':'bsdf(const float)'})
let c['henyeygreenstein'] = f
let f = []
call add(f,{'word':'hscript_noise','kind':'f','menu':'float(const vector)'})
let c['hscript_noise'] = f
let f = []
call add(f,{'word':'hscript_rand','kind':'f','menu':'float(const float)'})
call add(f,{'word':'hscript_rand','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'hscript_rand','kind':'f','menu':'vector(const float)'})
let c['hscript_rand'] = f
let f = []
call add(f,{'word':'hscript_snoise','kind':'f','menu':'float(const vector)'})
let c['hscript_snoise'] = f
let f = []
call add(f,{'word':'hscript_sturb','kind':'f','menu':'float(const vector,const int)'})
let c['hscript_sturb'] = f
let f = []
call add(f,{'word':'hscript_turb','kind':'f','menu':'float(const vector,const int)'})
let c['hscript_turb'] = f
let f = []
call add(f,{'word':'hsvtorgb','kind':'f','menu':'vector(const float,const float,const float)'})
call add(f,{'word':'hsvtorgb','kind':'f','menu':'vector(const vector)'})
let c['hsvtorgb'] = f
let f = []
call add(f,{'word':'ident','kind':'f','menu':'matrix2()'})
call add(f,{'word':'ident','kind':'f','menu':'matrix3()'})
call add(f,{'word':'ident','kind':'f','menu':'matrix()'})
let c['ident'] = f
let f = []
call add(f,{'word':'idtopoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'idtopoint','kind':'f','menu':'int(const string,const int)'})
let c['idtopoint'] = f
let f = []
call add(f,{'word':'idtoprim','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'idtoprim','kind':'f','menu':'int(const string,const int)'})
let c['idtoprim'] = f
let f = []
let c['if'] = f
let f = []
call add(f,{'word':'importance_light','kind':'f','menu':'float(const int)'})
let c['importance_light'] = f
let f = []
call add(f,{'word':'inedgegroup','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'inedgegroup','kind':'f','menu':'int(const string,const string,const int,const int)'})
let c['inedgegroup'] = f
let f = []
call add(f,{'word':'inpointgroup','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'inpointgroup','kind':'f','menu':'int(const string,const string,const int)'})
let c['inpointgroup'] = f
let f = []
call add(f,{'word':'inprimgroup','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'inprimgroup','kind':'f','menu':'int(const string,const string,const int)'})
let c['inprimgroup'] = f
let f = []
call add(f,{'word':'insert','kind':'f','menu':'void(export string,const int,const string)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix2[],const int,const matrix2)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix2[],const int,const matrix2[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix3[],const int,const matrix3)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix3[],const int,const matrix3[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix[],const int,const matrix)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix[],const int,const matrix[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export float[],const int,const float)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export float[],const int,const float[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export int[],const int,const int)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export int[],const int,const int[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector4[],const int,const vector4)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector4[],const int,const vector4[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export string[],const int,const string)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export string[],const int,const string[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector2[],const int,const vector2)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector2[],const int,const vector2[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector[],const int,const vector)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector[],const int,const vector[])'})
let c['insert'] = f
let f = []
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector4,const vector4)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector4,const vector4,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector4,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector4,const vector,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector)'})
let c['instance'] = f
let f = []
call add(f,{'word':'integrate3d','kind':'f','menu':'float(const string,const string,const vector,const vector)'})
call add(f,{'word':'integrate3d','kind':'f','menu':'vector4(const string,const string,const vector,const vector)'})
call add(f,{'word':'integrate3d','kind':'f','menu':'vector(const string,const string,const vector,const vector)'})
let c['integrate3d'] = f
let f = []
call add(f,{'word':'integrate3dClip','kind':'f','menu':'int(const string,const string,export vector,export vector,const float)'})
let c['integrate3dClip'] = f
let f = []
call add(f,{'word':'interpolate','kind':'f','menu':'bsdf(const bsdf,const float,const float)'})
call add(f,{'word':'interpolate','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'interpolate','kind':'f','menu':'vector4(const vector4,const float,const float)'})
call add(f,{'word':'interpolate','kind':'f','menu':'vector(const vector,const float,const float)'})
let c['interpolate'] = f
let f = []
call add(f,{'word':'intersect','kind':'f','menu':'int(const int,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const int,const vector,const vector,vector,float,float)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const int,const vector,const vector,vector,vector)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const string,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const string,const vector,const vector,vector,float,float)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const string,const vector,const vector,vector,vector)'})
let c['intersect'] = f
let f = []
call add(f,{'word':'intersect3d','kind':'f','menu':'int(const string,const string,const vector,const vector,const float)'})
let c['intersect3d'] = f
let f = []
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const int,const string,const vector,const vector,vector[],int[],vector[])'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const int,const string,const vector,const vector,vector[],int[],vector[],const float,const float)'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const int,const vector,const vector,vector[],int[],vector[])'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const int,const vector,const vector,vector[],int[],vector[],const float,const float)'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const string,const string,const vector,const vector,vector[],int[],vector[])'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const string,const string,const vector,const vector,vector[],int[],vector[],const float,const float)'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const string,const vector,const vector,vector[],int[],vector[])'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const string,const vector,const vector,vector[],int[],vector[],const float,const float)'})
let c['intersect_all'] = f
let f = []
call add(f,{'word':'intersect_lights','kind':'f','menu':'int(const int[],const vector,const vector,const float,int,float,vector,float)'})
let c['intersect_lights'] = f
let f = []
call add(f,{'word':'invert','kind':'f','menu':'matrix2(const matrix2)'})
call add(f,{'word':'invert','kind':'f','menu':'matrix3(const matrix3)'})
call add(f,{'word':'invert','kind':'f','menu':'matrix(const matrix)'})
let c['invert'] = f
let f = []
call add(f,{'word':'invertexgroup','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'invertexgroup','kind':'f','menu':'int(const string,const string,const int)'})
let c['invertexgroup'] = f
let f = []
call add(f,{'word':'irradiance','kind':'f','menu':'vector(const vector,const vector)'})
let c['irradiance'] = f
let f = []
call add(f,{'word':'isalpha','kind':'f','menu':'int(const string)'})
let c['isalpha'] = f
let f = []
call add(f,{'word':'isbound','kind':'f','menu':'int(const string)'})
let c['isbound'] = f
let f = []
call add(f,{'word':'isdigit','kind':'f','menu':'int(const string)'})
let c['isdigit'] = f
let f = []
call add(f,{'word':'isfinite','kind':'f','menu':'int(const float)'})
let c['isfinite'] = f
let f = []
call add(f,{'word':'isnan','kind':'f','menu':'int(const float)'})
let c['isnan'] = f
let f = []
call add(f,{'word':'isotropic','kind':'f','menu':'bsdf()'})
let c['isotropic'] = f
let f = []
call add(f,{'word':'israytracing','kind':'f','menu':'int()'})
let c['israytracing'] = f
let f = []
call add(f,{'word':'isuvrendering','kind':'f','menu':'int()'})
let c['isuvrendering'] = f
let f = []
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(const string,const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export matrix2[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export matrix3[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export matrix[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export float[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export int[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export vector4[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export string[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export vector2[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export vector[],const int)'})
let c['isvalidindex'] = f
let f = []
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix2)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix3)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const bsdf)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const light)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const material)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const float)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const int)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector4)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const string)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector2)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix2[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix3[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const bsdf[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const light[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const material[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const float[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector4[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const string[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector2[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector[])'})
let c['isvarying'] = f
let f = []
call add(f,{'word':'itoa','kind':'f','menu':'string(const int)'})
let c['itoa'] = f
let f = []
call add(f,{'word':'join','kind':'f','menu':'string(const string[],const string)'})
let c['join'] = f
let f = []
let c['jump'] = f
let f = []
call add(f,{'word':'kspline','kind':'f','menu':'float(const string,const float,const float,const float)'})
call add(f,{'word':'kspline','kind':'f','menu':'vector4(const string,const float,const vector4,const float)'})
call add(f,{'word':'kspline','kind':'f','menu':'vector(const string,const float,const vector,const float)'})
let c['kspline'] = f
let f = []
let c['le'] = f
let f = []
call add(f,{'word':'len','kind':'f','menu':'int(const matrix2)'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix3)'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix)'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector4)'})
call add(f,{'word':'len','kind':'f','menu':'int(const string)'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector2)'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector)'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix2[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix3[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const bsdf[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const light[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const material[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const float[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector4[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const string[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector2[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector[])'})
let c['len'] = f
let f = []
call add(f,{'word':'length','kind':'f','menu':'float(const float)'})
call add(f,{'word':'length','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'length','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'length','kind':'f','menu':'float(const vector)'})
let c['length'] = f
let f = []
call add(f,{'word':'length2','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'length2','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'length2','kind':'f','menu':'float(const vector)'})
let c['length2'] = f
let f = []
call add(f,{'word':'lerp','kind':'f','menu':'bsdf(const bsdf,const bsdf,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector4(const vector4,const vector4,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector2(const vector2,const vector2,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector(const vector,const vector,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['lerp'] = f
let f = []
call add(f,{'word':'lightbounces','kind':'f','menu':'int(const light)'})
let c['lightbounces'] = f
let f = []
call add(f,{'word':'lightid','kind':'f','menu':'int(const light)'})
let c['lightid'] = f
let f = []
call add(f,{'word':'limit_sample_space','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'limit_sample_space','kind':'f','menu':'float(const float,const float,const float)'})
let c['limit_sample_space'] = f
let f = []
call add(f,{'word':'limport','kind':'f','menu':'int(const string,export matrix2)'})
call add(f,{'word':'limport','kind':'f','menu':'int(const string,export matrix3)'})
call add(f,{'word':'limport','kind':'f','menu':'int(const string,export matrix)'})
call add(f,{'word':'limport','kind':'f','menu':'int(const string,export float)'})
call add(f,{'word':'limport','kind':'f','menu':'int(const string,export int)'})
call add(f,{'word':'limport','kind':'f','menu':'int(const string,export vector4)'})
call add(f,{'word':'limport','kind':'f','menu':'int(const string,export string)'})
call add(f,{'word':'limport','kind':'f','menu':'int(const string,export vector2)'})
call add(f,{'word':'limport','kind':'f','menu':'int(const string,export vector)'})
let c['limport'] = f
let f = []
call add(f,{'word':'lkspline','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'lkspline','kind':'f','menu':'vector4(const float,const vector4,const float)'})
call add(f,{'word':'lkspline','kind':'f','menu':'vector(const float,const vector,const float)'})
let c['lkspline'] = f
let f = []
call add(f,{'word':'log','kind':'f','menu':'float(const float)'})
call add(f,{'word':'log','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'log','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'log','kind':'f','menu':'vector(const vector)'})
let c['log'] = f
let f = []
call add(f,{'word':'log10','kind':'f','menu':'float(const float)'})
call add(f,{'word':'log10','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'log10','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'log10','kind':'f','menu':'vector(const vector)'})
let c['log10'] = f
let f = []
call add(f,{'word':'lookat','kind':'f','menu':'matrix3(const vector,const vector)'})
call add(f,{'word':'lookat','kind':'f','menu':'matrix3(const vector,const vector,const float)'})
call add(f,{'word':'lookat','kind':'f','menu':'matrix3(const vector,const vector,const vector)'})
call add(f,{'word':'lookat','kind':'f','menu':'vector(const vector,const vector,const float,const int)'})
call add(f,{'word':'lookat','kind':'f','menu':'vector(const vector,const vector,const vector,const int)'})
let c['lookat'] = f
let f = []
let c['loop'] = f
let f = []
call add(f,{'word':'lspline','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'lspline','kind':'f','menu':'vector4(const float,const vector4)'})
call add(f,{'word':'lspline','kind':'f','menu':'vector(const float,const vector)'})
let c['lspline'] = f
let f = []
call add(f,{'word':'lstrip','kind':'f','menu':'string(const string)'})
call add(f,{'word':'lstrip','kind':'f','menu':'string(const string,const string)'})
let c['lstrip'] = f
let f = []
let c['lt'] = f
let f = []
call add(f,{'word':'luminance','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'luminance','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'luminance','kind':'f','menu':'float(const vector)'})
let c['luminance'] = f
let f = []
call add(f,{'word':'makebasis','kind':'f','menu':'void(vector,vector,const vector)'})
call add(f,{'word':'makebasis','kind':'f','menu':'vector(vector,const vector)'})
call add(f,{'word':'makebasis','kind':'f','menu':'void(export vector,export vector,const vector,const vector)'})
let c['makebasis'] = f
let f = []
call add(f,{'word':'maketransform','kind':'f','menu':'matrix3(const int,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix3(const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const int,const int,const vector,const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const int,const int,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const int,const int,const vector,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const int,const int,const vector,const vector,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const vector,const vector,const vector)'})
let c['maketransform'] = f
let f = []
call add(f,{'word':'mask_bsdf','kind':'f','menu':'bsdf(const bsdf,const int)'})
let c['mask_bsdf'] = f
let f = []
call add(f,{'word':'match','kind':'f','menu':'int(const string,const string)'})
let c['match'] = f
let f = []
call add(f,{'word':'matchvex_blinn','kind':'f','menu':'bsdf(const float)'})
call add(f,{'word':'matchvex_blinn','kind':'f','menu':'bsdf(const vector,const float)'})
let c['matchvex_blinn'] = f
let f = []
call add(f,{'word':'matchvex_specular','kind':'f','menu':'bsdf(const float)'})
call add(f,{'word':'matchvex_specular','kind':'f','menu':'bsdf(const vector,const float)'})
let c['matchvex_specular'] = f
let f = []
call add(f,{'word':'max','kind':'f','menu':'float(const float)'})
call add(f,{'word':'max','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'max','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'max','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'max','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'max','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'max','kind':'f','menu':'int(const int)'})
call add(f,{'word':'max','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'max','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'max','kind':'f','menu':'vector4(const vector4,const vector4)'})
call add(f,{'word':'max','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'max','kind':'f','menu':'vector2(const vector2,const vector2)'})
call add(f,{'word':'max','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'max','kind':'f','menu':'vector(const vector,const vector)'})
call add(f,{'word':'max','kind':'f','menu':'vector(const vector[])'})
let c['max'] = f
let f = []
let c['measured'] = f
let f = []
let c['merge'] = f
let f = []
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,matrix2)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,matrix3)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,matrix)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,float)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,int)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,vector4)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,vector2)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'matrix3[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'matrix[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'float[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'vector4[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'vector[](const string,const string,const vector)'})
let c['metaimport'] = f
let f = []
call add(f,{'word':'metamarch','kind':'f','menu':'int(export int,const string,export vector,export vector,const float)'})
let c['metamarch'] = f
let f = []
call add(f,{'word':'metanext','kind':'f','menu':'int(const int)'})
let c['metanext'] = f
let f = []
call add(f,{'word':'metastart','kind':'f','menu':'int(const string,const vector)'})
let c['metastart'] = f
let f = []
call add(f,{'word':'metaweight','kind':'f','menu':'float(const string,const vector)'})
let c['metaweight'] = f
let f = []
call add(f,{'word':'min','kind':'f','menu':'float(const float)'})
call add(f,{'word':'min','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'min','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'min','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'min','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'min','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'min','kind':'f','menu':'int(const int)'})
call add(f,{'word':'min','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'min','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'min','kind':'f','menu':'vector4(const vector4,const vector4)'})
call add(f,{'word':'min','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'min','kind':'f','menu':'vector2(const vector2,const vector2)'})
call add(f,{'word':'min','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'min','kind':'f','menu':'vector(const vector,const vector)'})
call add(f,{'word':'min','kind':'f','menu':'vector(const vector[])'})
let c['min'] = f
let f = []
call add(f,{'word':'minpos','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const int,const string,const vector,const float)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const int,const vector)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const int,const vector,const float)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const string,const string,const vector,const float)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const string,const vector,const float)'})
let c['minpos'] = f
let f = []
let c['mod'] = f
let f = []
let c['mul'] = f
let f = []
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,const float,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,const float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,const float,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,const float,float,float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,const float,int,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,const float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,int,float,float,float,float,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,float,float,float,float,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,int,float,float,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,float,float,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector4,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector4,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector4,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector4,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector4,int,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector4,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector2,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector2,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector2,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector2,float,float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector2,int,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector2,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector,int,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector,int,float,float,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector,float,float,const int,const int,const int)'})
let c['mwnoise'] = f
let f = []
call add(f,{'word':'nametopoint','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nametopoint','kind':'f','menu':'int(const string,const string)'})
let c['nametopoint'] = f
let f = []
call add(f,{'word':'nametoprim','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nametoprim','kind':'f','menu':'int(const string,const string)'})
let c['nametoprim'] = f
let f = []
call add(f,{'word':'nbouncetypes','kind':'f','menu':'int()'})
let c['nbouncetypes'] = f
let f = []
let c['ne'] = f
let f = []
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const int,const string,const vector,const float)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const int,const vector)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const int,const vector,const float)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const string,const string,const vector)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const string,const string,const vector,const float)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const string,const vector)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const string,const vector,const float)'})
let c['nearpoint'] = f
let f = []
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const int,const string,const vector,const float)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const int,const string,const vector,const float,const int)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const int,const vector,const float)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const int,const vector,const float,const int)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const string,const string,const vector,const float)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const string,const string,const vector,const float,const int)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const string,const vector,const float)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const string,const vector,const float,const int)'})
let c['nearpoints'] = f
let f = []
call add(f,{'word':'nedgesgroup','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nedgesgroup','kind':'f','menu':'int(const string,const string)'})
let c['nedgesgroup'] = f
let f = []
let c['neg'] = f
let f = []
call add(f,{'word':'neighbour','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'neighbour','kind':'f','menu':'int(const string,const int,const int)'})
let c['neighbour'] = f
let f = []
call add(f,{'word':'neighbourcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'neighbourcount','kind':'f','menu':'int(const string,const int)'})
let c['neighbourcount'] = f
let f = []
call add(f,{'word':'neighbours','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'neighbours','kind':'f','menu':'int[](const string,const int)'})
let c['neighbours'] = f
let f = []
call add(f,{'word':'newsampler','kind':'f','menu':'int()'})
call add(f,{'word':'newsampler','kind':'f','menu':'int(const int)'})
let c['newsampler'] = f
let f = []
call add(f,{'word':'nextsample','kind':'f','menu':'void(export int,float,float)'})
call add(f,{'word':'nextsample','kind':'f','menu':'float(export int,float)'})
call add(f,{'word':'nextsample','kind':'f','menu':'void(export int,vector)'})
call add(f,{'word':'nextsample','kind':'f','menu':'vector(export int)'})
let c['nextsample'] = f
let f = []
let c['ngather'] = f
let f = []
let c['nlight'] = f
let f = []
call add(f,{'word':'noise','kind':'f','menu':'float(const float)'})
call add(f,{'word':'noise','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'noise','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'noise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'noise','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'noise','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'noise','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'noise','kind':'f','menu':'vector(const vector)'})
let c['noise'] = f
let f = []
call add(f,{'word':'noised','kind':'f','menu':'void(const float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'float(const float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const float,const float,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'float(const float,const float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const float,const float,vector,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'vector(const float,const float,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const float,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'vector(const float,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const vector4,float,float,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'float(const vector4,float,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const vector4,vector,vector,vector,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'vector(const vector4,vector,vector,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const vector,float,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'float(const vector,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const vector,vector,vector,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'vector(const vector,vector,vector,vector)'})
let c['noised'] = f
let f = []
let c['nop'] = f
let f = []
call add(f,{'word':'normal_bsdf','kind':'f','menu':'vector(const bsdf)'})
let c['normal_bsdf'] = f
let f = []
call add(f,{'word':'normalize','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'normalize','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'normalize','kind':'f','menu':'vector(const vector)'})
let c['normalize'] = f
let f = []
let c['not'] = f
let f = []
let c['notif'] = f
let f = []
call add(f,{'word':'npoints','kind':'f','menu':'int(const int)'})
call add(f,{'word':'npoints','kind':'f','menu':'int(const string)'})
let c['npoints'] = f
let f = []
call add(f,{'word':'npointsgroup','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'npointsgroup','kind':'f','menu':'int(const string,const string)'})
let c['npointsgroup'] = f
let f = []
call add(f,{'word':'nprimitives','kind':'f','menu':'int(const int)'})
call add(f,{'word':'nprimitives','kind':'f','menu':'int(const string)'})
let c['nprimitives'] = f
let f = []
call add(f,{'word':'nprimitivesgroup','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nprimitivesgroup','kind':'f','menu':'int(const string,const string)'})
let c['nprimitivesgroup'] = f
let f = []
call add(f,{'word':'nrandom','kind':'f','menu':'float()'})
call add(f,{'word':'nrandom','kind':'f','menu':'void(float,float)'})
call add(f,{'word':'nrandom','kind':'f','menu':'float(float)'})
call add(f,{'word':'nrandom','kind':'f','menu':'vector4()'})
call add(f,{'word':'nrandom','kind':'f','menu':'vector()'})
let c['nrandom'] = f
let f = []
call add(f,{'word':'ntransform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'ntransform','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'ntransform','kind':'f','menu':'vector(const vector,const matrix)'})
let c['ntransform'] = f
let f = []
call add(f,{'word':'nuniqueval','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'nuniqueval','kind':'f','menu':'int(const string,const string,const string)'})
let c['nuniqueval'] = f
let f = []
call add(f,{'word':'nvertices','kind':'f','menu':'int(const int)'})
call add(f,{'word':'nvertices','kind':'f','menu':'int(const string)'})
let c['nvertices'] = f
let f = []
call add(f,{'word':'nverticesgroup','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nverticesgroup','kind':'f','menu':'int(const string,const string)'})
let c['nverticesgroup'] = f
let f = []
call add(f,{'word':'occlusion','kind':'f','menu':'void(float,vector,const vector,const vector)'})
call add(f,{'word':'occlusion','kind':'f','menu':'float(vector,const vector,const vector)'})
call add(f,{'word':'occlusion','kind':'f','menu':'vector(const vector,const vector)'})
let c['occlusion'] = f
let f = []
call add(f,{'word':'ocean_sample','kind':'f','menu':'vector(const string,const int,const int,const int,const float,const float,const int,const int,const vector)'})
let c['ocean_sample'] = f
let f = []
call add(f,{'word':'ocio_activedisplays','kind':'f','menu':'string[]()'})
let c['ocio_activedisplays'] = f
let f = []
call add(f,{'word':'ocio_activeviews','kind':'f','menu':'string[]()'})
let c['ocio_activeviews'] = f
let f = []
call add(f,{'word':'ocio_import','kind':'f','menu':'int(const string,const string,int)'})
call add(f,{'word':'ocio_import','kind':'f','menu':'int(const string,const string,string)'})
call add(f,{'word':'ocio_import','kind':'f','menu':'int(const string,const string,vector)'})
let c['ocio_import'] = f
let f = []
call add(f,{'word':'ocio_roles','kind':'f','menu':'string[]()'})
let c['ocio_roles'] = f
let f = []
call add(f,{'word':'ocio_spaces','kind':'f','menu':'string[]()'})
let c['ocio_spaces'] = f
let f = []
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector4(const string,const vector4)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector4(const string,const string,const vector4)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector4(const string,const string,const string,const vector4)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector(const string,const string,const string,const vector)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector(const string,const vector)'})
let c['ocio_transform'] = f
let f = []
call add(f,{'word':'onoise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'onoise','kind':'f','menu':'float(const vector,const int,const float,const float)'})
call add(f,{'word':'onoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'onoise','kind':'f','menu':'float(const vector,const int,const int,const int,const int,const float,const float)'})
call add(f,{'word':'onoise','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'onoise','kind':'f','menu':'vector(const vector,const int,const float,const float)'})
call add(f,{'word':'onoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
call add(f,{'word':'onoise','kind':'f','menu':'vector(const vector,const int,const int,const int,const int,const float,const float)'})
let c['onoise'] = f
let f = []
call add(f,{'word':'opdigits','kind':'f','menu':'int()'})
call add(f,{'word':'opdigits','kind':'f','menu':'int(const string)'})
let c['opdigits'] = f
let f = []
call add(f,{'word':'opend','kind':'f','menu':'void(const int)'})
let c['opend'] = f
let f = []
call add(f,{'word':'opfullpath','kind':'f','menu':'string(const string)'})
let c['opfullpath'] = f
let f = []
call add(f,{'word':'opid','kind':'f','menu':'int(const int)'})
call add(f,{'word':'opid','kind':'f','menu':'int(const string)'})
let c['opid'] = f
let f = []
call add(f,{'word':'opparentbonetransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'opparentbonetransform','kind':'f','menu':'matrix(const string,const float)'})
let c['opparentbonetransform'] = f
let f = []
call add(f,{'word':'opparenttransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'opparenttransform','kind':'f','menu':'matrix(const string,const float)'})
let c['opparenttransform'] = f
let f = []
call add(f,{'word':'opparmtransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'opparmtransform','kind':'f','menu':'matrix(const string,const float)'})
let c['opparmtransform'] = f
let f = []
call add(f,{'word':'oppreconstrainttransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'oppreconstrainttransform','kind':'f','menu':'matrix(const string,const float)'})
let c['oppreconstrainttransform'] = f
let f = []
call add(f,{'word':'oppretransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'oppretransform','kind':'f','menu':'matrix(const string,const float)'})
let c['oppretransform'] = f
let f = []
call add(f,{'word':'opstart','kind':'f','menu':'int(const string)'})
let c['opstart'] = f
let f = []
call add(f,{'word':'optransform','kind':'f','menu':'matrix(const int)'})
call add(f,{'word':'optransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'optransform','kind':'f','menu':'matrix(const string,const float)'})
let c['optransform'] = f
let f = []
let c['or'] = f
let f = []
call add(f,{'word':'ord','kind':'f','menu':'int(const string)'})
let c['ord'] = f
let f = []
call add(f,{'word':'orthographic','kind':'f','menu':'matrix(const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'orthographic','kind':'f','menu':'matrix(const float,const float,const float,const float,const float,const float,const vector4)'})
let c['orthographic'] = f
let f = []
call add(f,{'word':'osd_facecount','kind':'f','menu':'int(const int)'})
call add(f,{'word':'osd_facecount','kind':'f','menu':'int(const string)'})
let c['osd_facecount'] = f
let f = []
call add(f,{'word':'osd_firstpatch','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'osd_firstpatch','kind':'f','menu':'int(const string,const int)'})
let c['osd_firstpatch'] = f
let f = []
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix2)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix3)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,float)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector4)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector2)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,float[])'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix2)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix3)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,float)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector4)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector2)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,float[])'})
let c['osd_limitsurface'] = f
let f = []
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix2)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix3)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,float)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector4)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector2)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,float[])'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix2)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix3)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,float)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector4)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector2)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,float[])'})
let c['osd_limitsurfacevertex'] = f
let f = []
call add(f,{'word':'osd_lookupface','kind':'f','menu':'int(const int,const int,const float,const float,int,float,float)'})
call add(f,{'word':'osd_lookupface','kind':'f','menu':'int(const int,const int,const float,const float,int,float,float,const string)'})
call add(f,{'word':'osd_lookupface','kind':'f','menu':'int(const string,const int,const float,const float,int,float,float)'})
call add(f,{'word':'osd_lookupface','kind':'f','menu':'int(const string,const int,const float,const float,int,float,float,const string)'})
let c['osd_lookupface'] = f
let f = []
call add(f,{'word':'osd_lookuppatch','kind':'f','menu':'int(const int,const int,const float,const float,int,float,float)'})
call add(f,{'word':'osd_lookuppatch','kind':'f','menu':'int(const int,const int,const float,const float,int,float,float,const string)'})
call add(f,{'word':'osd_lookuppatch','kind':'f','menu':'int(const string,const int,const float,const float,int,float,float)'})
call add(f,{'word':'osd_lookuppatch','kind':'f','menu':'int(const string,const int,const float,const float,int,float,float,const string)'})
let c['osd_lookuppatch'] = f
let f = []
call add(f,{'word':'osd_patchcount','kind':'f','menu':'int(const int)'})
call add(f,{'word':'osd_patchcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'osd_patchcount','kind':'f','menu':'int(const string)'})
call add(f,{'word':'osd_patchcount','kind':'f','menu':'int(const string,const int)'})
let c['osd_patchcount'] = f
let f = []
call add(f,{'word':'osd_patches','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'osd_patches','kind':'f','menu':'int[](const string,const int)'})
let c['osd_patches'] = f
let f = []
call add(f,{'word':'outerproduct','kind':'f','menu':'matrix2(const vector2,const vector2)'})
call add(f,{'word':'outerproduct','kind':'f','menu':'matrix3(const vector,const vector)'})
call add(f,{'word':'outerproduct','kind':'f','menu':'matrix(const vector4,const vector4)'})
let c['outerproduct'] = f
let f = []
call add(f,{'word':'ow_nspace','kind':'f','menu':'vector(const vector)'})
let c['ow_nspace'] = f
let f = []
call add(f,{'word':'ow_space','kind':'f','menu':'matrix()'})
call add(f,{'word':'ow_space','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'ow_space','kind':'f','menu':'vector(const vector)'})
let c['ow_space'] = f
let f = []
call add(f,{'word':'ow_vspace','kind':'f','menu':'vector(const vector)'})
let c['ow_vspace'] = f
let f = []
call add(f,{'word':'pack_inttosafefloat','kind':'f','menu':'float(const int)'})
let c['pack_inttosafefloat'] = f
let f = []
call add(f,{'word':'packedtransform','kind':'f','menu':'void(const int,const int,const matrix)'})
let c['packedtransform'] = f
let f = []
call add(f,{'word':'pathtrace','kind':'f','menu':'vector(const vector,const vector)'})
let c['pathtrace'] = f
let f = []
call add(f,{'word':'pcclose','kind':'f','menu':'void(export int)'})
let c['pcclose'] = f
let f = []
call add(f,{'word':'pcconvex','kind':'f','menu':'float(const int,const string,const vector)'})
let c['pcconvex'] = f
let f = []
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const vector,const float)'})
let c['pcexport'] = f
let f = []
call add(f,{'word':'pcfarthest','kind':'f','menu':'float(const int)'})
let c['pcfarthest'] = f
let f = []
call add(f,{'word':'pcfilter','kind':'f','menu':'matrix3(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'float(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'vector4(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'vector(const int,const string)'})
let c['pcfilter'] = f
let f = []
call add(f,{'word':'pcfind','kind':'f','menu':'int[](const int,const string,const string,const vector,const float,const int)'})
call add(f,{'word':'pcfind','kind':'f','menu':'int[](const int,const string,const vector,const float,const int)'})
call add(f,{'word':'pcfind','kind':'f','menu':'int[](const string,const string,const string,const vector,const float,const int)'})
call add(f,{'word':'pcfind','kind':'f','menu':'int[](const string,const string,const vector,const float,const int)'})
let c['pcfind'] = f
let f = []
call add(f,{'word':'pcfind_radius','kind':'f','menu':'int[](const int,const string,const string,const float,const vector,const float,const int)'})
call add(f,{'word':'pcfind_radius','kind':'f','menu':'int[](const int,const string,const string,const string,const float,const vector,const float,const int)'})
call add(f,{'word':'pcfind_radius','kind':'f','menu':'int[](const string,const string,const string,const float,const vector,const float,const int)'})
call add(f,{'word':'pcfind_radius','kind':'f','menu':'int[](const string,const string,const string,const string,const float,const vector,const float,const int)'})
let c['pcfind_radius'] = f
let f = []
call add(f,{'word':'pcgenerate','kind':'f','menu':'int(const string,const int)'})
let c['pcgenerate'] = f
let f = []
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,matrix3)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,matrix)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,float)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,int)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,vector4)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,string)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,vector)'})
let c['pcimport'] = f
let f = []
call add(f,{'word':'pcimportbyidx3','kind':'f','menu':'matrix3(const int,const string,const int)'})
let c['pcimportbyidx3'] = f
let f = []
call add(f,{'word':'pcimportbyidx4','kind':'f','menu':'matrix(const int,const string,const int)'})
let c['pcimportbyidx4'] = f
let f = []
call add(f,{'word':'pcimportbyidxf','kind':'f','menu':'float(const int,const string,const int)'})
let c['pcimportbyidxf'] = f
let f = []
call add(f,{'word':'pcimportbyidxi','kind':'f','menu':'int(const int,const string,const int)'})
let c['pcimportbyidxi'] = f
let f = []
call add(f,{'word':'pcimportbyidxp','kind':'f','menu':'vector4(const int,const string,const int)'})
let c['pcimportbyidxp'] = f
let f = []
call add(f,{'word':'pcimportbyidxs','kind':'f','menu':'string(const int,const string,const int)'})
let c['pcimportbyidxs'] = f
let f = []
call add(f,{'word':'pcimportbyidxv','kind':'f','menu':'vector(const int,const string,const int)'})
let c['pcimportbyidxv'] = f
let f = []
call add(f,{'word':'pciterate','kind':'f','menu':'int(const int)'})
let c['pciterate'] = f
let f = []
call add(f,{'word':'pcnumfound','kind':'f','menu':'int(const int)'})
let c['pcnumfound'] = f
let f = []
call add(f,{'word':'pcopen','kind':'f','menu':'int(const int,const string,const vector,const float,const int)'})
call add(f,{'word':'pcopen','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'pcopen','kind':'f','menu':'int(const string,const string,const vector,const float,const int)'})
call add(f,{'word':'pcopen','kind':'f','menu':'int(const string,const string,const vector,const string,const vector,const float,const int)'})
let c['pcopen'] = f
let f = []
call add(f,{'word':'pcopenlod','kind':'f','menu':'int(const string,const string,const vector,const int)'})
let c['pcopenlod'] = f
let f = []
call add(f,{'word':'pcsampleleaf','kind':'f','menu':'void(const int,const float)'})
let c['pcsampleleaf'] = f
let f = []
call add(f,{'word':'pcsize','kind':'f','menu':'int(const int)'})
let c['pcsize'] = f
let f = []
call add(f,{'word':'pcunshaded','kind':'f','menu':'int(const int,const string)'})
let c['pcunshaded'] = f
let f = []
call add(f,{'word':'pcwrite','kind':'f','menu':'int(const string)'})
let c['pcwrite'] = f
let f = []
call add(f,{'word':'perspective','kind':'f','menu':'matrix(const float,const float,const float,const float,const float)'})
call add(f,{'word':'perspective','kind':'f','menu':'matrix(const float,const float,const float,const float,const float,const vector4)'})
let c['perspective'] = f
let f = []
call add(f,{'word':'pgfind','kind':'f','menu':'int[](const int,const string,const vector,const float,const int,const float)'})
call add(f,{'word':'pgfind','kind':'f','menu':'int[](const int,const vector,const float,const int,const float)'})
call add(f,{'word':'pgfind','kind':'f','menu':'int[](const string,const string,const vector,const float,const int,const float)'})
call add(f,{'word':'pgfind','kind':'f','menu':'int[](const string,const vector,const float,const int,const float)'})
let c['pgfind'] = f
let f = []
call add(f,{'word':'phong','kind':'f','menu':'bsdf(const float)'})
call add(f,{'word':'phong','kind':'f','menu':'bsdf(const vector,const float)'})
call add(f,{'word':'phong','kind':'f','menu':'vector(const vector,const vector,const float)'})
let c['phong'] = f
let f = []
call add(f,{'word':'phongBRDF','kind':'f','menu':'float(const vector,const vector,const vector,const float)'})
let c['phongBRDF'] = f
let f = []
call add(f,{'word':'phonglobe','kind':'f','menu':'bsdf(const vector,const float,const float,const vector,const vector)'})
call add(f,{'word':'phonglobe','kind':'f','menu':'bsdf(const vector,const float)'})
call add(f,{'word':'phonglobe','kind':'f','menu':'bsdf(const vector,const vector,const float,const float,const vector,const vector)'})
call add(f,{'word':'phonglobe','kind':'f','menu':'bsdf(const vector,const vector,const float)'})
let c['phonglobe'] = f
let f = []
call add(f,{'word':'photonmap','kind':'f','menu':'vector(const string,const vector,const vector)'})
call add(f,{'word':'photonmap','kind':'f','menu':'void(const string,const vector,const vector,vector,float)'})
call add(f,{'word':'photonmap','kind':'f','menu':'vector(const string,const vector,const vector,float)'})
let c['photonmap'] = f
let f = []
call add(f,{'word':'planepointdistance','kind':'f','menu':'float(const vector,const vector,const vector,vector)'})
let c['planepointdistance'] = f
let f = []
call add(f,{'word':'planesphereintersect','kind':'f','menu':'int(const vector,const vector,const vector,const float,vector,float,float)'})
let c['planesphereintersect'] = f
let f = []
call add(f,{'word':'pluralize','kind':'f','menu':'string(const string)'})
let c['pluralize'] = f
let f = []
call add(f,{'word':'pnoise','kind':'f','menu':'float(const float,const float,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const float,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const vector4,const vector4)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const vector,const vector)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const float,const float,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const float,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const vector4,const vector4)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const vector,const vector)'})
let c['pnoise'] = f
let f = []
call add(f,{'word':'point','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector[](const string,const string,const int)'})
let c['point'] = f
let f = []
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix2(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix2(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix3(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix3(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'float(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'float(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'int(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'int(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector4(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector4(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'string(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'string(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector2(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector2(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix2[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix2[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix3[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix3[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'float[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'float[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'int[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'int[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector4[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector4[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'string[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'string[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector2[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector2[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector[](const string,const string,const int,int)'})
let c['pointattrib'] = f
let f = []
call add(f,{'word':'pointattribsize','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'pointattribsize','kind':'f','menu':'int(const string,const string)'})
let c['pointattribsize'] = f
let f = []
call add(f,{'word':'pointattribtype','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'pointattribtype','kind':'f','menu':'int(const string,const string)'})
let c['pointattribtype'] = f
let f = []
call add(f,{'word':'pointattribtypeinfo','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'pointattribtypeinfo','kind':'f','menu':'string(const string,const string)'})
let c['pointattribtypeinfo'] = f
let f = []
call add(f,{'word':'pointedge','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'pointedge','kind':'f','menu':'int(const string,const int,const int)'})
let c['pointedge'] = f
let f = []
call add(f,{'word':'pointhedge','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'pointhedge','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'pointhedge','kind':'f','menu':'int(const string,const int)'})
call add(f,{'word':'pointhedge','kind':'f','menu':'int(const string,const int,const int)'})
let c['pointhedge'] = f
let f = []
call add(f,{'word':'pointhedgenext','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'pointhedgenext','kind':'f','menu':'int(const string,const int)'})
let c['pointhedgenext'] = f
let f = []
call add(f,{'word':'pointprims','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'pointprims','kind':'f','menu':'int[](const string,const int)'})
let c['pointprims'] = f
let f = []
call add(f,{'word':'pointvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'pointvertex','kind':'f','menu':'int(const string,const int)'})
let c['pointvertex'] = f
let f = []
call add(f,{'word':'pointvertices','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'pointvertices','kind':'f','menu':'int[](const string,const int)'})
let c['pointvertices'] = f
let f = []
call add(f,{'word':'polardecomp','kind':'f','menu':'matrix3(const matrix3)'})
let c['polardecomp'] = f
let f = []
call add(f,{'word':'polyneighbours','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'polyneighbours','kind':'f','menu':'int[](const string,const int)'})
let c['polyneighbours'] = f
let f = []
call add(f,{'word':'pop','kind':'f','menu':'matrix2(export matrix2[])'})
call add(f,{'word':'pop','kind':'f','menu':'matrix2(export matrix2[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'matrix3(export matrix3[])'})
call add(f,{'word':'pop','kind':'f','menu':'matrix3(export matrix3[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'matrix(export matrix[])'})
call add(f,{'word':'pop','kind':'f','menu':'matrix(export matrix[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'bsdf(export bsdf[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'light(export light[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'material(export material[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'bsdf(export bsdf[])'})
call add(f,{'word':'pop','kind':'f','menu':'light(export light[])'})
call add(f,{'word':'pop','kind':'f','menu':'material(export material[])'})
call add(f,{'word':'pop','kind':'f','menu':'float(export float[])'})
call add(f,{'word':'pop','kind':'f','menu':'float(export float[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'int(export int[])'})
call add(f,{'word':'pop','kind':'f','menu':'int(export int[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'vector4(export vector4[])'})
call add(f,{'word':'pop','kind':'f','menu':'vector4(export vector4[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'string(export string[])'})
call add(f,{'word':'pop','kind':'f','menu':'string(export string[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'vector2(export vector2[])'})
call add(f,{'word':'pop','kind':'f','menu':'vector2(export vector2[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'vector(export vector[])'})
call add(f,{'word':'pop','kind':'f','menu':'vector(export vector[],const int)'})
let c['pop'] = f
let f = []
let c['popinline'] = f
let f = []
call add(f,{'word':'pow','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'pow','kind':'f','menu':'vector4(const vector4,const float)'})
call add(f,{'word':'pow','kind':'f','menu':'vector2(const vector2,const float)'})
call add(f,{'word':'pow','kind':'f','menu':'vector(const vector,const float)'})
let c['pow'] = f
let f = []
call add(f,{'word':'predicate_incircle','kind':'f','menu':'float(const vector2,const vector2,const vector2,const vector2)'})
let c['predicate_incircle'] = f
let f = []
call add(f,{'word':'predicate_insphere','kind':'f','menu':'float(const vector,const vector,const vector,const vector,const vector)'})
let c['predicate_insphere'] = f
let f = []
call add(f,{'word':'predicate_orient2d','kind':'f','menu':'float(const vector2,const vector2,const vector2)'})
let c['predicate_orient2d'] = f
let f = []
call add(f,{'word':'predicate_orient3d','kind':'f','menu':'float(const vector,const vector,const vector,const vector)'})
let c['predicate_orient3d'] = f
let f = []
call add(f,{'word':'prerotate','kind':'f','menu':'void(export matrix3,const float,const vector)'})
call add(f,{'word':'prerotate','kind':'f','menu':'void(export matrix3,const vector,const int)'})
call add(f,{'word':'prerotate','kind':'f','menu':'void(export matrix,const float,const vector)'})
call add(f,{'word':'prerotate','kind':'f','menu':'void(export matrix,const vector,const int)'})
let c['prerotate'] = f
let f = []
call add(f,{'word':'prescale','kind':'f','menu':'void(export matrix3,const vector)'})
call add(f,{'word':'prescale','kind':'f','menu':'void(export matrix,const vector)'})
let c['prescale'] = f
let f = []
call add(f,{'word':'pretranslate','kind':'f','menu':'void(export matrix,const vector)'})
let c['pretranslate'] = f
let f = []
call add(f,{'word':'prim','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector[](const string,const string,const int)'})
let c['prim'] = f
let f = []
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix2,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix3,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix3,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,float,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,float,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,int,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,int,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector4,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector4,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector2,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix2[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix3[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,float[],const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,float[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,int[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector4[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector2[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector[],const string,const int,const vector)'})
let c['prim_attribute'] = f
let f = []
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const int,const int,const float,const float)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const int,const int,const float,const float,const float)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const string,const int,const float,const float)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const string,const int,const float,const float,const float)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const string,const int,const vector)'})
let c['prim_normal'] = f
let f = []
call add(f,{'word':'primarclen','kind':'f','menu':'float(const string,const vector2,const vector2,const int)'})
call add(f,{'word':'primarclen','kind':'f','menu':'float(const string,const vector2,const vector2,const int,const int)'})
let c['primarclen'] = f
let f = []
call add(f,{'word':'primattrib','kind':'f','menu':'matrix2(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix2(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix3(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix3(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'float(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'float(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'int(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'int(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector4(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector4(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'string(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'string(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector2(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector2(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix2[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix2[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix3[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix3[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'float[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'float[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'int[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'int[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector4[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector4[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'string[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'string[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector2[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector2[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector[](const string,const string,const int,int)'})
let c['primattrib'] = f
let f = []
call add(f,{'word':'primattribsize','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'primattribsize','kind':'f','menu':'int(const string,const string)'})
let c['primattribsize'] = f
let f = []
call add(f,{'word':'primattribtype','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'primattribtype','kind':'f','menu':'int(const string,const string)'})
let c['primattribtype'] = f
let f = []
call add(f,{'word':'primattribtypeinfo','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'primattribtypeinfo','kind':'f','menu':'string(const string,const string)'})
let c['primattribtypeinfo'] = f
let f = []
call add(f,{'word':'primduv','kind':'f','menu':'vector(const string,const int,const vector2,const int,const int)'})
let c['primduv'] = f
let f = []
call add(f,{'word':'primfind','kind':'f','menu':'int[](const int,const string,const vector,const vector)'})
call add(f,{'word':'primfind','kind':'f','menu':'int[](const int,const vector,const vector)'})
call add(f,{'word':'primfind','kind':'f','menu':'int[](const string,const string,const vector,const vector)'})
call add(f,{'word':'primfind','kind':'f','menu':'int[](const string,const vector,const vector)'})
let c['primfind'] = f
let f = []
call add(f,{'word':'primhedge','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'primhedge','kind':'f','menu':'int(const string,const int)'})
let c['primhedge'] = f
let f = []
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector[](const string,const string,const int)'})
let c['primintrinsic'] = f
let f = []
call add(f,{'word':'primpoint','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'primpoint','kind':'f','menu':'int(const string,const int,const int)'})
let c['primpoint'] = f
let f = []
call add(f,{'word':'primpoints','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'primpoints','kind':'f','menu':'int[](const string,const int)'})
let c['primpoints'] = f
let f = []
call add(f,{'word':'primuv','kind':'f','menu':'matrix2(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix2(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix3(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix3(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'float(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'float(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'int(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'int(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector4(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector4(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector2(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector2(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix2[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix2[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix3[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix3[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'float[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'float[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'int[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'int[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector4[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector4[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector2[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector2[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector[](const string,const string,const int,const vector)'})
let c['primuv'] = f
let f = []
call add(f,{'word':'primuvconvert','kind':'f','menu':'vector2(const string,const vector2,const int,const int)'})
call add(f,{'word':'primuvconvert','kind':'f','menu':'vector2(const string,const vector2,const int,const int,const float)'})
let c['primuvconvert'] = f
let f = []
call add(f,{'word':'primvertex','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'primvertex','kind':'f','menu':'int(const string,const int,const int)'})
let c['primvertex'] = f
let f = []
call add(f,{'word':'primvertexcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'primvertexcount','kind':'f','menu':'int(const string,const int)'})
let c['primvertexcount'] = f
let f = []
call add(f,{'word':'primvertices','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'primvertices','kind':'f','menu':'int[](const string,const int)'})
let c['primvertices'] = f
let f = []
call add(f,{'word':'print_once','kind':'f','menu':'void(const string)'})
let c['print_once'] = f
let f = []
call add(f,{'word':'printf','kind':'f','menu':'void(const string)'})
let c['printf'] = f
let f = []
call add(f,{'word':'product','kind':'f','menu':'float(const float)'})
call add(f,{'word':'product','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'product','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'product','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'product','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'product','kind':'f','menu':'int(const int)'})
call add(f,{'word':'product','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'product','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'product','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'product','kind':'f','menu':'vector(const vector[])'})
let c['product'] = f
let f = []
call add(f,{'word':'ptexture','kind':'f','menu':'matrix3(const string,const int)'})
call add(f,{'word':'ptexture','kind':'f','menu':'matrix3(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'matrix3(const string,const int,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'matrix(const string,const int)'})
call add(f,{'word':'ptexture','kind':'f','menu':'matrix(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'matrix(const string,const int,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'float(const string,const int)'})
call add(f,{'word':'ptexture','kind':'f','menu':'float(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'float(const string,const int,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector4(const string,const int)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector4(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector4(const string,const int,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector(const string,const int)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector(const string,const int,const float,const float,const float,const float,const float,const float)'})
let c['ptexture'] = f
let f = []
call add(f,{'word':'ptlined','kind':'f','menu':'float(const vector,const vector,const vector)'})
let c['ptlined'] = f
let f = []
call add(f,{'word':'ptransform','kind':'f','menu':'vector4(const vector4,const matrix)'})
call add(f,{'word':'ptransform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'ptransform','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'ptransform','kind':'f','menu':'vector(const vector,const matrix)'})
let c['ptransform'] = f
let f = []
call add(f,{'word':'push','kind':'f','menu':'void(export matrix2[],const matrix2)'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix2[],const matrix2[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix3[],const matrix3)'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix3[],const matrix3[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix[],const matrix)'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix[],const matrix[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export bsdf[],const bsdf)'})
call add(f,{'word':'push','kind':'f','menu':'void(export light[],const light)'})
call add(f,{'word':'push','kind':'f','menu':'void(export material[],const material)'})
call add(f,{'word':'push','kind':'f','menu':'void(export bsdf[],const bsdf[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export light[],const light[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export material[],const material[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export float[],const float)'})
call add(f,{'word':'push','kind':'f','menu':'void(export float[],const float[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export int[],const int)'})
call add(f,{'word':'push','kind':'f','menu':'void(export int[],const int[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector4[],const vector4)'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector4[],const vector4[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export string[],const string)'})
call add(f,{'word':'push','kind':'f','menu':'void(export string[],const string[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector2[],const vector2)'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector2[],const vector2[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector[],const vector)'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector[],const vector[])'})
let c['push'] = f
let f = []
let c['pushinline'] = f
let f = []
call add(f,{'word':'pxnoise','kind':'f','menu':'float(const float,const float,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'float(const float,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'float(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'vector(const float,const float,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'vector(const float,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'vector(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
let c['pxnoise'] = f
let f = []
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const float,const float,const int,const int,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'float(const float,const float,const int,const int,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const float,const float,const int,const int,vector,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'vector(const float,const float,const int,const int,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const float,const int,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'float(const float,const int,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const float,const int,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'vector(const float,const int,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const vector4,const int,const int,const int,const int,float,float,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'float(const vector4,const int,const int,const int,const int,float,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const vector4,const int,const int,const int,const int,vector,vector,vector,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'vector(const vector4,const int,const int,const int,const int,vector,vector,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const vector,const int,const int,const int,float,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'float(const vector,const int,const int,const int,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const vector,const int,const int,const int,vector,vector,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'vector(const vector,const int,const int,const int,vector,vector,vector)'})
let c['pxnoised'] = f
let f = []
call add(f,{'word':'qconvert','kind':'f','menu':'matrix3(const vector4)'})
call add(f,{'word':'qconvert','kind':'f','menu':'vector(const vector4)'})
let c['qconvert'] = f
let f = []
call add(f,{'word':'qdistance','kind':'f','menu':'float(const vector4,const vector4)'})
let c['qdistance'] = f
let f = []
call add(f,{'word':'qinvert','kind':'f','menu':'vector4(const vector4)'})
let c['qinvert'] = f
let f = []
call add(f,{'word':'qmultiply','kind':'f','menu':'vector4(const vector4,const vector4)'})
let c['qmultiply'] = f
let f = []
call add(f,{'word':'qrotate','kind':'f','menu':'vector(const vector4,const vector)'})
let c['qrotate'] = f
let f = []
call add(f,{'word':'quaternion','kind':'f','menu':'vector4(const matrix3)'})
call add(f,{'word':'quaternion','kind':'f','menu':'vector4(const float,const vector)'})
call add(f,{'word':'quaternion','kind':'f','menu':'vector4(const vector)'})
let c['quaternion'] = f
let f = []
call add(f,{'word':'quaterniontoeuler','kind':'f','menu':'vector(const vector4,const int)'})
let c['quaterniontoeuler'] = f
let f = []
call add(f,{'word':'radians','kind':'f','menu':'float(const float)'})
call add(f,{'word':'radians','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'radians','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'radians','kind':'f','menu':'vector(const vector)'})
let c['radians'] = f
let f = []
call add(f,{'word':'rand','kind':'f','menu':'float(const float)'})
call add(f,{'word':'rand','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'rand','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'rand','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'rand','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const float,const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const vector2)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const vector)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const float,const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const vector4)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const vector)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const vector2)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const vector)'})
let c['rand'] = f
let f = []
call add(f,{'word':'random','kind':'f','menu':'float(const float)'})
call add(f,{'word':'random','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'random','kind':'f','menu':'float(const int)'})
call add(f,{'word':'random','kind':'f','menu':'float(const int,const int)'})
call add(f,{'word':'random','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'random','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const float,const float)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const int,const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const vector)'})
call add(f,{'word':'random','kind':'f','menu':'vector2(const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const vector)'})
let c['random'] = f
let f = []
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const float)'})
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const float,const float)'})
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const vector4)'})
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const vector2)'})
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const vector)'})
let c['random_fhash'] = f
let f = []
let c['random_hash'] = f
let f = []
call add(f,{'word':'random_ihash','kind':'f','menu':'int(const int)'})
let c['random_ihash'] = f
let f = []
call add(f,{'word':'random_poisson','kind':'f','menu':'int(const int,const float)'})
call add(f,{'word':'random_poisson','kind':'f','menu':'int(const int,const float,const int,const int)'})
let c['random_poisson'] = f
let f = []
call add(f,{'word':'random_shash','kind':'f','menu':'int(const string)'})
let c['random_shash'] = f
let f = []
call add(f,{'word':'random_sobol','kind':'f','menu':'float(const float,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'float(const int,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'float(const vector4,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'float(const vector,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector4(const float,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector4(const int,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector4(const vector4,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector4(const vector,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector(const float,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector(const vector4,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector(const vector,const int)'})
let c['random_sobol'] = f
let f = []
call add(f,{'word':'randomf','kind':'f','menu':'float(const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'randomf','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector4(const float,const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector4(const vector)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector(const vector)'})
let c['randomf'] = f
let f = []
call add(f,{'word':'rawbumpmap','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmap','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmap','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmap','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmap'] = f
let f = []
call add(f,{'word':'rawbumpmapA','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapA','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapA','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapA','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapA'] = f
let f = []
call add(f,{'word':'rawbumpmapB','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapB','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapB','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapB','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapB'] = f
let f = []
call add(f,{'word':'rawbumpmapG','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapG','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapG','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapG','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapG'] = f
let f = []
call add(f,{'word':'rawbumpmapL','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapL','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapL','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapL','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapL'] = f
let f = []
call add(f,{'word':'rawbumpmapR','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapR','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapR','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapR','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapR'] = f
let f = []
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const float,const float)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const float,const float,const float,const float,const float,const float,const float,const float,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const vector)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const float,const float)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const float,const float,const float,const float,const float,const float,const float,const float,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector,const int)'})
let c['rawcolormap'] = f
let f = []
call add(f,{'word':'rayhittest','kind':'f','menu':'float(const vector,const vector,const float)'})
call add(f,{'word':'rayhittest','kind':'f','menu':'float(const vector,const vector,vector,vector,const float)'})
let c['rayhittest'] = f
let f = []
call add(f,{'word':'re_find','kind':'f','menu':'int(const string,const string)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(const string,const string,const int,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(int[],int[],const string,const string)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(int[],int[],const string,const string,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(int[],int[],const string,const string,const int,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'string(const string,const string)'})
call add(f,{'word':'re_find','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'string(const string,const string,const int,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'re_find','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'string[](const string,const string,const int,const int)'})
let c['re_find'] = f
let f = []
call add(f,{'word':'re_findall','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'re_findall','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'re_findall','kind':'f','menu':'string[](const string,const string,const int,const int)'})
let c['re_findall'] = f
let f = []
call add(f,{'word':'re_match','kind':'f','menu':'int(const string,const string)'})
let c['re_match'] = f
let f = []
call add(f,{'word':'re_replace','kind':'f','menu':'string(const string,const string,const string)'})
call add(f,{'word':'re_replace','kind':'f','menu':'string(const string,const string,const string,const int)'})
let c['re_replace'] = f
let f = []
call add(f,{'word':'re_split','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'re_split','kind':'f','menu':'string[](const string,const string,const int)'})
let c['re_split'] = f
let f = []
call add(f,{'word':'reflect','kind':'f','menu':'vector(const vector,const vector)'})
let c['reflect'] = f
let f = []
call add(f,{'word':'reflectlight','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'reflectlight','kind':'f','menu':'vector(const vector,const vector,const float,const float)'})
call add(f,{'word':'reflectlight','kind':'f','menu':'vector(const vector,const vector,const vector,const float,const float)'})
let c['reflectlight'] = f
let f = []
call add(f,{'word':'refract','kind':'f','menu':'vector(const vector,const vector,const float)'})
let c['refract'] = f
let f = []
call add(f,{'word':'refractlight','kind':'f','menu':'void(vector,vector,float,const vector,const vector,const float,const float)'})
call add(f,{'word':'refractlight','kind':'f','menu':'vector(vector,float,const vector,const vector,const float,const float)'})
call add(f,{'word':'refractlight','kind':'f','menu':'void(vector,vector,float,const vector,const vector,const vector,const float,const float,const float)'})
call add(f,{'word':'refractlight','kind':'f','menu':'vector(vector,float,const vector,const vector,const vector,const float,const float,const float)'})
let c['refractlight'] = f
let f = []
call add(f,{'word':'relativepath','kind':'f','menu':'string(const string,const string)'})
let c['relativepath'] = f
let f = []
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const int,const vector)'})
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const vector)'})
let c['relbbox'] = f
let f = []
call add(f,{'word':'relpointbbox','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'relpointbbox','kind':'f','menu':'vector(const int,const vector)'})
call add(f,{'word':'relpointbbox','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'relpointbbox','kind':'f','menu':'vector(const string,const vector)'})
let c['relpointbbox'] = f
let f = []
call add(f,{'word':'removeindex','kind':'f','menu':'matrix2(export matrix2[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'matrix3(export matrix3[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'matrix(export matrix[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'float(export float[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'int(export int[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'vector4(export vector4[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'string(export string[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'vector2(export vector2[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'vector(export vector[],const int)'})
let c['removeindex'] = f
let f = []
call add(f,{'word':'removepoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'removepoint','kind':'f','menu':'int(const int,const int,const int)'})
let c['removepoint'] = f
let f = []
call add(f,{'word':'removeprim','kind':'f','menu':'int(const int,const int,const int)'})
let c['removeprim'] = f
let f = []
call add(f,{'word':'removevalue','kind':'f','menu':'int(export matrix2[],const matrix2)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export matrix3[],const matrix3)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export matrix[],const matrix)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export float[],const float)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export int[],const int)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export vector4[],const vector4)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export string[],const string)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export vector2[],const vector2)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export vector[],const vector)'})
let c['removevalue'] = f
let f = []
call add(f,{'word':'renderstate','kind':'f','menu':'int(const material,const string,export matrix3)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const material,const string,export matrix)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const material,const string,export float)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const material,const string,export int)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const material,const string,export vector4)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const material,const string,export string)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const material,const string,export vector)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const string,export matrix3)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const string,export matrix)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const string,export float)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const string,export int)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const string,export vector4)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const string,export string)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const string,export vector)'})
let c['renderstate'] = f
let f = []
call add(f,{'word':'reorder','kind':'f','menu':'string(const string,const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'matrix2[](const matrix2[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'matrix3[](const matrix3[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'matrix[](const matrix[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'float[](const float[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'int[](const int[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'vector4[](const vector4[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'string[](const string[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'vector2[](const vector2[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'vector[](const vector[],const int[])'})
let c['reorder'] = f
let f = []
call add(f,{'word':'resample_linear','kind':'f','menu':'float[](const float[],const int)'})
call add(f,{'word':'resample_linear','kind':'f','menu':'vector4[](const vector4[],const int)'})
call add(f,{'word':'resample_linear','kind':'f','menu':'vector2[](const vector2[],const int)'})
call add(f,{'word':'resample_linear','kind':'f','menu':'vector[](const vector[],const int)'})
let c['resample_linear'] = f
let f = []
call add(f,{'word':'resize','kind':'f','menu':'void(export matrix2[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export matrix3[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export matrix[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export bsdf[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export light[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export material[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export float[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export int[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export vector4[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export string[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export vector2[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export vector[],const int)'})
let c['resize'] = f
let f = []
call add(f,{'word':'resolvemissedray','kind':'f','menu':'vector(const vector,const float,const int)'})
let c['resolvemissedray'] = f
let f = []
let c['returninline'] = f
let f = []
call add(f,{'word':'reverse','kind':'f','menu':'string(const string)'})
call add(f,{'word':'reverse','kind':'f','menu':'matrix2[](const matrix2[])'})
call add(f,{'word':'reverse','kind':'f','menu':'matrix3[](const matrix3[])'})
call add(f,{'word':'reverse','kind':'f','menu':'matrix[](const matrix[])'})
call add(f,{'word':'reverse','kind':'f','menu':'float[](const float[])'})
call add(f,{'word':'reverse','kind':'f','menu':'int[](const int[])'})
call add(f,{'word':'reverse','kind':'f','menu':'vector4[](const vector4[])'})
call add(f,{'word':'reverse','kind':'f','menu':'string[](const string[])'})
call add(f,{'word':'reverse','kind':'f','menu':'vector2[](const vector2[])'})
call add(f,{'word':'reverse','kind':'f','menu':'vector[](const vector[])'})
let c['reverse'] = f
let f = []
call add(f,{'word':'rgbtohsv','kind':'f','menu':'vector(const float,const float,const float)'})
call add(f,{'word':'rgbtohsv','kind':'f','menu':'vector(const vector)'})
let c['rgbtohsv'] = f
let f = []
call add(f,{'word':'rgbtoxyz','kind':'f','menu':'vector(const vector)'})
let c['rgbtoxyz'] = f
let f = []
call add(f,{'word':'rint','kind':'f','menu':'float(const float)'})
call add(f,{'word':'rint','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'rint','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'rint','kind':'f','menu':'vector(const vector)'})
let c['rint'] = f
let f = []
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix2,const float)'})
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix3,const float,const vector)'})
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix3,const vector,const int)'})
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix,const float,const vector)'})
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix,const vector,const int)'})
let c['rotate'] = f
let f = []
call add(f,{'word':'rotate_x_to','kind':'f','menu':'vector4(const vector4,const vector4)'})
call add(f,{'word':'rotate_x_to','kind':'f','menu':'vector2(const vector2,const vector2)'})
call add(f,{'word':'rotate_x_to','kind':'f','menu':'vector(const vector,const vector)'})
let c['rotate_x_to'] = f
let f = []
call add(f,{'word':'rstrip','kind':'f','menu':'string(const string)'})
call add(f,{'word':'rstrip','kind':'f','menu':'string(const string,const string)'})
let c['rstrip'] = f
let f = []
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,const vector,int,vector,vector,float,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'int(const bsdf,const vector,const vector,vector,vector,float,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,vector,vector,float,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'vector(const bsdf,const vector,vector,float,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,vector,vector,float,int,const float,const float)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'vector(const bsdf,const vector,vector,float,int,const float,const float)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,vector,vector,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'vector(const bsdf,const vector,vector,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,vector,vector,int,const float,const float)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'vector(const bsdf,const vector,vector,int,const float,const float)'})
let c['sample_bsdf'] = f
let f = []
call add(f,{'word':'sample_cauchy','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'float(const float,const float,const float,const float)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'vector2(const float,const vector2)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'vector(const vector)'})
let c['sample_cauchy'] = f
let f = []
call add(f,{'word':'sample_cdf','kind':'f','menu':'int(const float[],const float)'})
call add(f,{'word':'sample_cdf','kind':'f','menu':'void(const float[],const float,int,float)'})
call add(f,{'word':'sample_cdf','kind':'f','menu':'int(const float[],const float,float)'})
call add(f,{'word':'sample_cdf','kind':'f','menu':'void(const float[],const float,int,float,float)'})
call add(f,{'word':'sample_cdf','kind':'f','menu':'int(const float[],const float,float,float)'})
let c['sample_cdf'] = f
let f = []
call add(f,{'word':'sample_circle_arc','kind':'f','menu':'vector2(const vector2,const float,const float)'})
let c['sample_circle_arc'] = f
let f = []
call add(f,{'word':'sample_circle_edge_uniform','kind':'f','menu':'vector2(const float)'})
let c['sample_circle_edge_uniform'] = f
let f = []
call add(f,{'word':'sample_circle_ring_uniform','kind':'f','menu':'vector2(const vector2,const float)'})
let c['sample_circle_ring_uniform'] = f
let f = []
call add(f,{'word':'sample_circle_slice','kind':'f','menu':'vector2(const vector2,const float,const vector2)'})
let c['sample_circle_slice'] = f
let f = []
call add(f,{'word':'sample_circle_uniform','kind':'f','menu':'vector2(const vector2)'})
let c['sample_circle_uniform'] = f
let f = []
call add(f,{'word':'sample_direction_cone','kind':'f','menu':'vector(const vector,const float,const vector2)'})
let c['sample_direction_cone'] = f
let f = []
call add(f,{'word':'sample_direction_uniform','kind':'f','menu':'vector(const vector2)'})
let c['sample_direction_uniform'] = f
let f = []
call add(f,{'word':'sample_discrete','kind':'f','menu':'int(const int,const float)'})
call add(f,{'word':'sample_discrete','kind':'f','menu':'int(const float[],const float)'})
let c['sample_discrete'] = f
let f = []
call add(f,{'word':'sample_exponential','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sample_exponential','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'sample_exponential','kind':'f','menu':'float(const float,const float,const float)'})
let c['sample_exponential'] = f
let f = []
call add(f,{'word':'sample_geometry','kind':'f','menu':'int(const vector,const vector,const float)'})
let c['sample_geometry'] = f
let f = []
call add(f,{'word':'sample_hemisphere','kind':'f','menu':'vector(const float,const vector2)'})
call add(f,{'word':'sample_hemisphere','kind':'f','menu':'vector(const vector2)'})
call add(f,{'word':'sample_hemisphere','kind':'f','menu':'vector(const vector,const float,const vector2)'})
call add(f,{'word':'sample_hemisphere','kind':'f','menu':'vector(const vector,const vector2)'})
let c['sample_hemisphere'] = f
let f = []
call add(f,{'word':'sample_hypersphere_cone','kind':'f','menu':'vector4(const vector4,const float,const vector4)'})
let c['sample_hypersphere_cone'] = f
let f = []
call add(f,{'word':'sample_hypersphere_uniform','kind':'f','menu':'vector4(const vector4)'})
let c['sample_hypersphere_uniform'] = f
let f = []
call add(f,{'word':'sample_light','kind':'f','menu':'int(const int,const vector,const vector,const float,vector,vector,float)'})
let c['sample_light'] = f
let f = []
call add(f,{'word':'sample_lognormal','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'sample_lognormal','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
let c['sample_lognormal'] = f
let f = []
call add(f,{'word':'sample_lognormal_by_median','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'sample_lognormal_by_median','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
let c['sample_lognormal_by_median'] = f
let f = []
call add(f,{'word':'sample_normal','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'vector(const vector)'})
let c['sample_normal'] = f
let f = []
call add(f,{'word':'sample_orientation_cone','kind':'f','menu':'vector4(const vector4,const float,const vector)'})
let c['sample_orientation_cone'] = f
let f = []
call add(f,{'word':'sample_orientation_uniform','kind':'f','menu':'vector4(const vector)'})
let c['sample_orientation_uniform'] = f
let f = []
call add(f,{'word':'sample_photon','kind':'f','menu':'int(const light,vector,vector,float,const float)'})
let c['sample_photon'] = f
let f = []
call add(f,{'word':'sample_sphere_cone','kind':'f','menu':'vector(const vector,const float,const vector)'})
let c['sample_sphere_cone'] = f
let f = []
call add(f,{'word':'sample_sphere_shell_uniform','kind':'f','menu':'vector(const vector,const float)'})
let c['sample_sphere_shell_uniform'] = f
let f = []
call add(f,{'word':'sample_sphere_uniform','kind':'f','menu':'vector(const vector)'})
let c['sample_sphere_uniform'] = f
let f = []
call add(f,{'word':'sampledisk','kind':'f','menu':'void(float,float,const float,const float)'})
call add(f,{'word':'sampledisk','kind':'f','menu':'float(float,const float,const float)'})
let c['sampledisk'] = f
let f = []
call add(f,{'word':'scale','kind':'f','menu':'void(export matrix2,const vector2)'})
call add(f,{'word':'scale','kind':'f','menu':'void(export matrix3,const vector)'})
call add(f,{'word':'scale','kind':'f','menu':'void(export matrix,const vector)'})
let c['scale'] = f
let f = []
call add(f,{'word':'scatter','kind':'f','menu':'int(const vector,const vector,const vector,const vector,const float,const float,vector,vector,vector)'})
let c['scatter'] = f
let f = []
call add(f,{'word':'select','kind':'f','menu':'matrix2(const int,const matrix2,const matrix2)'})
call add(f,{'word':'select','kind':'f','menu':'matrix3(const int,const matrix3,const matrix3)'})
call add(f,{'word':'select','kind':'f','menu':'matrix(const int,const matrix,const matrix)'})
call add(f,{'word':'select','kind':'f','menu':'bsdf(const int,const bsdf,const bsdf)'})
call add(f,{'word':'select','kind':'f','menu':'light(const int,const light,const light)'})
call add(f,{'word':'select','kind':'f','menu':'material(const int,const material,const material)'})
call add(f,{'word':'select','kind':'f','menu':'float(const int,const float,const float)'})
call add(f,{'word':'select','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'select','kind':'f','menu':'vector4(const int,const vector4,const vector4)'})
call add(f,{'word':'select','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'select','kind':'f','menu':'vector2(const int,const vector2,const vector2)'})
call add(f,{'word':'select','kind':'f','menu':'vector(const int,const vector,const vector)'})
call add(f,{'word':'select','kind':'f','menu':'matrix2[](const int,const matrix2[],const matrix2[])'})
call add(f,{'word':'select','kind':'f','menu':'matrix3[](const int,const matrix3[],const matrix3[])'})
call add(f,{'word':'select','kind':'f','menu':'matrix[](const int,const matrix[],const matrix[])'})
call add(f,{'word':'select','kind':'f','menu':'bsdf[](const int,const bsdf[],const bsdf[])'})
call add(f,{'word':'select','kind':'f','menu':'light[](const int,const light[],const light[])'})
call add(f,{'word':'select','kind':'f','menu':'material[](const int,const material[],const material[])'})
call add(f,{'word':'select','kind':'f','menu':'float[](const int,const float[],const float[])'})
call add(f,{'word':'select','kind':'f','menu':'int[](const int,const int[],const int[])'})
call add(f,{'word':'select','kind':'f','menu':'vector4[](const int,const vector4[],const vector4[])'})
call add(f,{'word':'select','kind':'f','menu':'string[](const int,const string[],const string[])'})
call add(f,{'word':'select','kind':'f','menu':'vector2[](const int,const vector2[],const vector2[])'})
call add(f,{'word':'select','kind':'f','menu':'vector[](const int,const vector[],const vector[])'})
let c['select'] = f
let f = []
call add(f,{'word':'sensor_panorama_create','kind':'f','menu':'int(const float,const vector,const int,const float,const float,const string,const string,const string,const int)'})
let c['sensor_panorama_create'] = f
let f = []
call add(f,{'word':'sensor_panorama_getcolor','kind':'f','menu':'vector(const int,const vector)'})
let c['sensor_panorama_getcolor'] = f
let f = []
call add(f,{'word':'sensor_panorama_getcone','kind':'f','menu':'void(const int,const vector,const float,const vector,const vector,const float,const float,float,vector,vector,float)'})
call add(f,{'word':'sensor_panorama_getcone','kind':'f','menu':'float(const int,const vector,const float,const vector,const vector,const float,const float,vector,vector,float)'})
let c['sensor_panorama_getcone'] = f
let f = []
call add(f,{'word':'sensor_panorama_getdepth','kind':'f','menu':'float(const int,const vector)'})
let c['sensor_panorama_getdepth'] = f
let f = []
call add(f,{'word':'sensor_save','kind':'f','menu':'int(const int,const string,const string)'})
let c['sensor_save'] = f
let f = []
call add(f,{'word':'serialize','kind':'f','menu':'float[](const matrix2[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const matrix3[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const matrix[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const vector4[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const vector2[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const vector[])'})
let c['serialize'] = f
let f = []
call add(f,{'word':'set','kind':'f','menu':'matrix2(const matrix2)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const float,const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const int)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const vector2,const vector2)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const matrix2)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const float,const float,const float,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const int)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const vector,const vector,const vector)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const vector[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const matrix2)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const int)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const vector4,const vector4,const vector4,const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const vector4[])'})
call add(f,{'word':'set','kind':'f','menu':'bsdf(const bsdf)'})
call add(f,{'word':'set','kind':'f','menu':'light(const light)'})
call add(f,{'word':'set','kind':'f','menu':'material(const material)'})
call add(f,{'word':'set','kind':'f','menu':'float(const float)'})
call add(f,{'word':'set','kind':'f','menu':'float(const int)'})
call add(f,{'word':'set','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'set','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'int(const float)'})
call add(f,{'word':'set','kind':'f','menu':'int(const int)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const float,const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const int)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const vector2)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const vector)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'string(const string)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const int)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const vector)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const vector2)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix2[](const matrix2[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix2[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix3[](const matrix3[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix3[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix[](const matrix[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'bsdf[](const bsdf[])'})
call add(f,{'word':'set','kind':'f','menu':'light[](const light[])'})
call add(f,{'word':'set','kind':'f','menu':'material[](const material[])'})
call add(f,{'word':'set','kind':'f','menu':'float[](const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const float)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const vector)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'float[](const int[])'})
call add(f,{'word':'set','kind':'f','menu':'int[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'int[](const int[])'})
call add(f,{'word':'set','kind':'f','menu':'vector4[](const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'vector4[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'vector4[](const vector4[])'})
call add(f,{'word':'set','kind':'f','menu':'string[](const string[])'})
call add(f,{'word':'set','kind':'f','menu':'vector2[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'vector2[](const vector2[])'})
call add(f,{'word':'set','kind':'f','menu':'vector[](const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'vector[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'vector[](const vector[])'})
let c['set'] = f
let f = []
call add(f,{'word':'setagentclipnames','kind':'f','menu':'void(const int,const int,const string[])'})
let c['setagentclipnames'] = f
let f = []
call add(f,{'word':'setagentclips','kind':'f','menu':'int(const int,const int,const string[],const float[],const float[],const string[],const int[],const int[],const float[],const int[])'})
let c['setagentclips'] = f
let f = []
call add(f,{'word':'setagentcliptimes','kind':'f','menu':'void(const int,const int,const float[])'})
let c['setagentcliptimes'] = f
let f = []
call add(f,{'word':'setagentclipweights','kind':'f','menu':'void(const int,const int,const float[])'})
let c['setagentclipweights'] = f
let f = []
call add(f,{'word':'setagentcollisionlayer','kind':'f','menu':'void(const int,const int,const string)'})
let c['setagentcollisionlayer'] = f
let f = []
call add(f,{'word':'setagentcurrentlayer','kind':'f','menu':'void(const int,const int,const string)'})
let c['setagentcurrentlayer'] = f
let f = []
call add(f,{'word':'setagentlocaltransform','kind':'f','menu':'int(const int,const int,const matrix,const int)'})
let c['setagentlocaltransform'] = f
let f = []
call add(f,{'word':'setagentlocaltransforms','kind':'f','menu':'void(const int,const int,const matrix[])'})
let c['setagentlocaltransforms'] = f
let f = []
call add(f,{'word':'setagentworldtransform','kind':'f','menu':'int(const int,const int,const matrix,const int)'})
let c['setagentworldtransform'] = f
let f = []
call add(f,{'word':'setagentworldtransforms','kind':'f','menu':'void(const int,const int,const matrix[])'})
let c['setagentworldtransforms'] = f
let f = []
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix2)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix2,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix3)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix3,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const float)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const float,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const int)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const int,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector4)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector4,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const string,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector2)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector2,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix2[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix2[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix3[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix3[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const float[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const float[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const int[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const int[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector4[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector4[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const string[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const string[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector2[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector2[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector[],const string)'})
let c['setattrib'] = f
let f = []
call add(f,{'word':'setattribtypeinfo','kind':'f','menu':'int(const int,const string,const string,const string)'})
let c['setattribtypeinfo'] = f
let f = []
call add(f,{'word':'setcomp','kind':'f','menu':'void(export matrix2,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'matrix2(export matrix2[],const matrix2,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export matrix3,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'matrix3(export matrix3[],const matrix3,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export matrix,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'matrix(export matrix[],const matrix,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'bsdf(export bsdf[],const bsdf,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'light(export light[],const light,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'material(export material[],const material,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export matrix2,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export matrix3,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export matrix,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export vector4,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export vector2,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export vector,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export float[],const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'int(export int[],const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export vector4,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'vector4(export vector4[],const vector4,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'string(export string[],const string,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export vector2,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'vector2(export vector2[],const vector2,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export vector,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'vector(export vector[],const vector,const int)'})
let c['setcomp'] = f
let f = []
call add(f,{'word':'setcurrentlight','kind':'f','menu':'int(const int)'})
let c['setcurrentlight'] = f
let f = []
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix2[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix2[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix3[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix3[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector4[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector4[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector2[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector2[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector[],const string)'})
let c['setdetailattrib'] = f
let f = []
call add(f,{'word':'setedgegroup','kind':'f','menu':'int(const int,const string,const int,const int,const int)'})
let c['setedgegroup'] = f
let f = []
let c['setelem'] = f
let f = []
call add(f,{'word':'setpackedtransform','kind':'f','menu':'void(const int,const int,const matrix)'})
let c['setpackedtransform'] = f
let f = []
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const float)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const float,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector4)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector4,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const string,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector2)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector2,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const float[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const float[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const int[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const int[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector4[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector4[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const string[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const string[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector2[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector2[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector[],const string)'})
let c['setpointattrib'] = f
let f = []
call add(f,{'word':'setpointgroup','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setpointgroup','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
let c['setpointgroup'] = f
let f = []
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const float)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const float,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector4)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector4,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const string,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector2)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector2,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const float[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const float[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const int[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const int[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector4[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector4[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const string[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const string[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector2[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector2[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector[],const string)'})
let c['setprimattrib'] = f
let f = []
call add(f,{'word':'setprimgroup','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setprimgroup','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
let c['setprimgroup'] = f
let f = []
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix2)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix2,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix3)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix3,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const float)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const float,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector4)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector4,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const string,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector2)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector2,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix2[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix2[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix3[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix3[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const float[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const float[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const int[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const int[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector4[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector4[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const string[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const string[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector2[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector2[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector[],const string)'})
let c['setprimintrinsic'] = f
let f = []
call add(f,{'word':'setprimvertex','kind':'f','menu':'int(const int,const int,const int,const int)'})
let c['setprimvertex'] = f
let f = []
call add(f,{'word':'setsamplestore','kind':'f','menu':'int(const string,const vector,const float)'})
call add(f,{'word':'setsamplestore','kind':'f','menu':'int(const string,const vector,const int)'})
call add(f,{'word':'setsamplestore','kind':'f','menu':'int(const string,const vector,const vector4)'})
call add(f,{'word':'setsamplestore','kind':'f','menu':'int(const string,const vector,const vector)'})
let c['setsamplestore'] = f
let f = []
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix2)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix2,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix3)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix3,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const float)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const float,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const int)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const int,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector4)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector4,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector2)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector2,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix2[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix2[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix3[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix3[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const float[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const float[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const int[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const int[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector4[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector4[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector2[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector2[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector[],const string)'})
let c['setvertexattrib'] = f
let f = []
call add(f,{'word':'setvertexgroup','kind':'f','menu':'int(const int,const string,const int,const int,const int)'})
call add(f,{'word':'setvertexgroup','kind':'f','menu':'int(const int,const string,const int,const int,const int,const string)'})
let c['setvertexgroup'] = f
let f = []
call add(f,{'word':'setvertexpoint','kind':'f','menu':'int(const int,const int,const int,const int)'})
let c['setvertexpoint'] = f
let f = []
call add(f,{'word':'shadow','kind':'f','menu':'void(export vector)'})
call add(f,{'word':'shadow','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'shadow','kind':'f','menu':'void(export vector,const vector,const vector)'})
call add(f,{'word':'shadow','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['shadow'] = f
let f = []
call add(f,{'word':'shadow_light','kind':'f','menu':'vector(const int,const vector,const vector,const float)'})
let c['shadow_light'] = f
let f = []
call add(f,{'word':'shadowmap','kind':'f','menu':'float(const string,const vector,const float,const float,const float)'})
call add(f,{'word':'shadowmap','kind':'f','menu':'vector(const string,const vector,const float,const float,const float)'})
call add(f,{'word':'shadowmap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector,const float,const float,const float)'})
let c['shadowmap'] = f
let f = []
call add(f,{'word':'shl','kind':'f','menu':'int(const int,const int)'})
let c['shl'] = f
let f = []
call add(f,{'word':'shr','kind':'f','menu':'int(const int,const int)'})
let c['shr'] = f
let f = []
call add(f,{'word':'shrz','kind':'f','menu':'int(const int,const int)'})
let c['shrz'] = f
let f = []
call add(f,{'word':'sign','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sign','kind':'f','menu':'int(const int)'})
call add(f,{'word':'sign','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sign','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sign','kind':'f','menu':'vector(const vector)'})
let c['sign'] = f
let f = []
call add(f,{'word':'sin','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sin','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sin','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sin','kind':'f','menu':'vector(const vector)'})
let c['sin'] = f
let f = []
call add(f,{'word':'sinh','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sinh','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sinh','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sinh','kind':'f','menu':'vector(const vector)'})
let c['sinh'] = f
let f = []
call add(f,{'word':'sleep','kind':'f','menu':'void(const int)'})
let c['sleep'] = f
let f = []
call add(f,{'word':'slerp','kind':'f','menu':'vector4(const vector4,const vector4,const float)'})
call add(f,{'word':'slerp','kind':'f','menu':'vector4(const vector4[],const float[])'})
let c['slerp'] = f
let f = []
call add(f,{'word':'slice','kind':'f','menu':'string(const string,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string(const string,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string(const string,const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix2[](const matrix2[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix2[](const matrix2[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix2[](const matrix2[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix3[](const matrix3[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix3[](const matrix3[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix3[](const matrix3[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix[](const matrix[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix[](const matrix[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix[](const matrix[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'float[](const float[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'float[](const float[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'float[](const float[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'int[](const int[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'int[](const int[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'int[](const int[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector4[](const vector4[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector4[](const vector4[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector4[](const vector4[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string[](const string[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string[](const string[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string[](const string[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector2[](const vector2[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector2[](const vector2[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector2[](const vector2[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector[](const vector[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector[](const vector[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector[](const vector[],const int,const int,const int,const int,const int,const int)'})
let c['slice'] = f
let f = []
call add(f,{'word':'slideframe','kind':'f','menu':'vector(const vector,const vector,const vector,const vector,const vector)'})
let c['slideframe'] = f
let f = []
call add(f,{'word':'smooth','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'smooth','kind':'f','menu':'float(const float,const float,const float,const float)'})
let c['smooth'] = f
let f = []
call add(f,{'word':'smoothrotation','kind':'f','menu':'vector(const int,const vector,const vector)'})
let c['smoothrotation'] = f
let f = []
call add(f,{'word':'snoise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'snoise','kind':'f','menu':'float(const vector,const int,const float,const float)'})
call add(f,{'word':'snoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'snoise','kind':'f','menu':'float(const vector,const int,const int,const int,const int,const float,const float)'})
call add(f,{'word':'snoise','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'snoise','kind':'f','menu':'vector(const vector,const int,const float,const float)'})
call add(f,{'word':'snoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
call add(f,{'word':'snoise','kind':'f','menu':'vector(const vector,const int,const int,const int,const int,const float,const float)'})
let c['snoise'] = f
let f = []
call add(f,{'word':'solid_angle','kind':'f','menu':'float(const bsdf,const int)'})
let c['solid_angle'] = f
let f = []
call add(f,{'word':'solveconstraint','kind':'f','menu':'vector[](const float[],const vector,const float,const matrix,const vector[])'})
let c['solveconstraint'] = f
let f = []
call add(f,{'word':'solvecubic','kind':'f','menu':'int(const float,const float,const float,const float,float,float,float)'})
call add(f,{'word':'solvecubic','kind':'f','menu':'int(const float,const float,const float,const float,vector2,vector2,vector2)'})
let c['solvecubic'] = f
let f = []
call add(f,{'word':'solvecurve','kind':'f','menu':'vector[](const string,const float[],const int,const int,const vector,const int,const matrix)'})
call add(f,{'word':'solvecurve','kind':'f','menu':'vector[](const float[],const int,const int,const vector,const vector[],const vector[])'})
let c['solvecurve'] = f
let f = []
call add(f,{'word':'solvefbik','kind':'f','menu':'matrix[](const matrix[],const int[],const int[],const matrix[],const int)'})
call add(f,{'word':'solvefbik','kind':'f','menu':'matrix[](const matrix[],const int[],const int[],const matrix[],const int,const float,const int)'})
call add(f,{'word':'solvefbik','kind':'f','menu':'matrix[](const matrix[],const int[],const int[],const matrix[],const int,const float,const int,const float[],const int[],const int[])'})
call add(f,{'word':'solvefbik','kind':'f','menu':'matrix[](const matrix[],const int[],const int[],const matrix[],const int,const float,const int,const float[],const int[],const int[],const matrix[],const vector4[],const vector[])'})
let c['solvefbik'] = f
let f = []
call add(f,{'word':'solveik','kind':'f','menu':'vector[](const float[],const vector,const vector,const float,const int,const float,const int,const float,const matrix,const vector[])'})
let c['solveik'] = f
let f = []
call add(f,{'word':'solvepoly','kind':'f','menu':'int(const float[],float[])'})
call add(f,{'word':'solvepoly','kind':'f','menu':'int(const float[],float[],const int)'})
let c['solvepoly'] = f
let f = []
call add(f,{'word':'solvequadratic','kind':'f','menu':'int(const float,const float,const float,float,float)'})
call add(f,{'word':'solvequadratic','kind':'f','menu':'int(const float,const float,const float,vector2,vector2)'})
let c['solvequadratic'] = f
let f = []
call add(f,{'word':'sort','kind':'f','menu':'float[](const float[])'})
call add(f,{'word':'sort','kind':'f','menu':'int[](const int[])'})
call add(f,{'word':'sort','kind':'f','menu':'string[](const string[])'})
let c['sort'] = f
let f = []
call add(f,{'word':'specular','kind':'f','menu':'bsdf(const vector)'})
call add(f,{'word':'specular','kind':'f','menu':'vector(const vector,const vector,const float)'})
let c['specular'] = f
let f = []
call add(f,{'word':'specularBRDF','kind':'f','menu':'float(const vector,const vector,const vector,const float)'})
let c['specularBRDF'] = f
let f = []
call add(f,{'word':'spline','kind':'f','menu':'float(const string,const float,const float)'})
call add(f,{'word':'spline','kind':'f','menu':'float(const string,const float,const float[])'})
call add(f,{'word':'spline','kind':'f','menu':'float(const string[],const float,const float[])'})
call add(f,{'word':'spline','kind':'f','menu':'float(const string[],const float,const float[],const float[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector4(const string,const float,const vector4)'})
call add(f,{'word':'spline','kind':'f','menu':'vector4(const string,const float,const vector4[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector4(const string[],const float,const vector4[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector4(const string[],const float,const vector4[],const float[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector(const string,const float,const vector)'})
call add(f,{'word':'spline','kind':'f','menu':'vector(const string,const float,const vector[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector(const string[],const float,const vector[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector(const string[],const float,const vector[],const float[])'})
let c['spline'] = f
let f = []
call add(f,{'word':'split','kind':'f','menu':'string[](const string)'})
call add(f,{'word':'split','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'split','kind':'f','menu':'string[](const string,const string,const int)'})
let c['split'] = f
let f = []
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[],const int,const int,const float,const float[])'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[],const int,const int,const float,const float[])'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[],const int,const int,const float)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[],const int,const int,const float)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[],const int,const int)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[],const int,const int)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[],const int)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[],const int)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[])'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[])'})
let c['split_bsdf'] = f
let f = []
call add(f,{'word':'splitpath','kind':'f','menu':'void(const string,string,string)'})
call add(f,{'word':'splitpath','kind':'f','menu':'string(const string,string)'})
let c['splitpath'] = f
let f = []
call add(f,{'word':'sprintf','kind':'f','menu':'string(const string)'})
let c['sprintf'] = f
let f = []
call add(f,{'word':'sqrt','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sqrt','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sqrt','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sqrt','kind':'f','menu':'vector(const vector)'})
let c['sqrt'] = f
let f = []
call add(f,{'word':'sssapprox','kind':'f','menu':'bsdf(const vector,const float,const float,const float)'})
let c['sssapprox'] = f
let f = []
call add(f,{'word':'startswith','kind':'f','menu':'int(const string,const string)'})
let c['startswith'] = f
let f = []
call add(f,{'word':'storelightexport','kind':'f','menu':'void(const string,const string,const float)'})
call add(f,{'word':'storelightexport','kind':'f','menu':'void(const string,const string,const int)'})
call add(f,{'word':'storelightexport','kind':'f','menu':'void(const string,const string,const vector4)'})
call add(f,{'word':'storelightexport','kind':'f','menu':'void(const string,const string,const vector)'})
call add(f,{'word':'storelightexport','kind':'f','menu':'void(const string,const string,const float[])'})
call add(f,{'word':'storelightexport','kind':'f','menu':'void(const string,const string,const int[])'})
call add(f,{'word':'storelightexport','kind':'f','menu':'void(const string,const string,const vector4[])'})
call add(f,{'word':'storelightexport','kind':'f','menu':'void(const string,const string,const vector[])'})
let c['storelightexport'] = f
let f = []
call add(f,{'word':'storelightexports','kind':'f','menu':'void(const string)'})
let c['storelightexports'] = f
let f = []
call add(f,{'word':'strip','kind':'f','menu':'string(const string)'})
call add(f,{'word':'strip','kind':'f','menu':'string(const string,const string)'})
let c['strip'] = f
let f = []
call add(f,{'word':'strlen','kind':'f','menu':'int(const string)'})
let c['strlen'] = f
let f = []
let c['struct'] = f
let f = []
let c['sub'] = f
let f = []
call add(f,{'word':'sum','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sum','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'sum','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'sum','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'sum','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'sum','kind':'f','menu':'int(const int)'})
call add(f,{'word':'sum','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'sum','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'sum','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'sum','kind':'f','menu':'vector(const vector[])'})
let c['sum'] = f
let f = []
call add(f,{'word':'surfacedist','kind':'f','menu':'float(const int,const string,const string,const int,const float,int,const string)'})
call add(f,{'word':'surfacedist','kind':'f','menu':'float(const string,const string,const string,const int,const float,int,const string)'})
let c['surfacedist'] = f
let f = []
let c['swap'] = f
let f = []
call add(f,{'word':'switch','kind':'f','menu':'bsdf(const bsdf,const bsdf)'})
let c['switch'] = f
let f = []
call add(f,{'word':'swizzle','kind':'f','menu':'vector4(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'swizzle','kind':'f','menu':'vector2(const vector2,const int,const int)'})
call add(f,{'word':'swizzle','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
let c['swizzle'] = f
let f = []
call add(f,{'word':'tan','kind':'f','menu':'float(const float)'})
call add(f,{'word':'tan','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'tan','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'tan','kind':'f','menu':'vector(const vector)'})
let c['tan'] = f
let f = []
call add(f,{'word':'tanh','kind':'f','menu':'float(const float)'})
call add(f,{'word':'tanh','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'tanh','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'tanh','kind':'f','menu':'vector(const vector)'})
let c['tanh'] = f
let f = []
call add(f,{'word':'tet_adjacent','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'tet_adjacent','kind':'f','menu':'int(const string,const int,const int)'})
let c['tet_adjacent'] = f
let f = []
call add(f,{'word':'tet_faceindex','kind':'f','menu':'int(const int,const int)'})
let c['tet_faceindex'] = f
let f = []
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export matrix3)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export matrix)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export float)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export int)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export vector4)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export string)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export vector)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export int[])'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export string[])'})
let c['teximport'] = f
let f = []
call add(f,{'word':'texprintf','kind':'f','menu':'string(const float,const float,const string)'})
let c['texprintf'] = f
let f = []
call add(f,{'word':'texture','kind':'f','menu':'vector4(const string)'})
call add(f,{'word':'texture','kind':'f','menu':'vector4(const string,const float,const float)'})
call add(f,{'word':'texture','kind':'f','menu':'vector4(const string,const float,const float,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'texture','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'texture','kind':'f','menu':'vector(const string,const float,const float)'})
call add(f,{'word':'texture','kind':'f','menu':'vector(const string,const float,const float,const float,const float,const float,const float,const float,const float)'})
let c['texture'] = f
let f = []
call add(f,{'word':'texture3d','kind':'f','menu':'matrix3(const string,const string,const vector)'})
call add(f,{'word':'texture3d','kind':'f','menu':'matrix(const string,const string,const vector)'})
call add(f,{'word':'texture3d','kind':'f','menu':'float(const string,const string,const vector)'})
call add(f,{'word':'texture3d','kind':'f','menu':'vector4(const string,const string,const vector)'})
call add(f,{'word':'texture3d','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['texture3d'] = f
let f = []
call add(f,{'word':'texture3dBox','kind':'f','menu':'void(const string,const string,vector,vector)'})
call add(f,{'word':'texture3dBox','kind':'f','menu':'vector(const string,const string,vector)'})
let c['texture3dBox'] = f
let f = []
call add(f,{'word':'titlecase','kind':'f','menu':'string(const string)'})
let c['titlecase'] = f
let f = []
call add(f,{'word':'toNDC','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'toNDC','kind':'f','menu':'vector(const vector)'})
let c['toNDC'] = f
let f = []
call add(f,{'word':'tolower','kind':'f','menu':'string(const string)'})
let c['tolower'] = f
let f = []
call add(f,{'word':'toupper','kind':'f','menu':'string(const string)'})
let c['toupper'] = f
let f = []
call add(f,{'word':'trace','kind':'f','menu':'int(const vector,const vector,const float)'})
call add(f,{'word':'trace','kind':'f','menu':'void(vector,vector,float,const vector,const vector,const float,const float)'})
call add(f,{'word':'trace','kind':'f','menu':'vector(vector,float,const vector,const vector,const float,const float)'})
let c['trace'] = f
let f = []
call add(f,{'word':'translate','kind':'f','menu':'void(export matrix,const vector4)'})
call add(f,{'word':'translate','kind':'f','menu':'void(export matrix,const vector)'})
let c['translate'] = f
let f = []
call add(f,{'word':'translucent','kind':'f','menu':'bsdf(const vector,const vector)'})
let c['translucent'] = f
let f = []
call add(f,{'word':'transpose','kind':'f','menu':'void(export matrix2)'})
call add(f,{'word':'transpose','kind':'f','menu':'matrix2(const matrix2)'})
call add(f,{'word':'transpose','kind':'f','menu':'void(export matrix3)'})
call add(f,{'word':'transpose','kind':'f','menu':'matrix3(const matrix3)'})
call add(f,{'word':'transpose','kind':'f','menu':'void(export matrix)'})
call add(f,{'word':'transpose','kind':'f','menu':'matrix(const matrix)'})
let c['transpose'] = f
let f = []
call add(f,{'word':'trunc','kind':'f','menu':'float(const float)'})
call add(f,{'word':'trunc','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'trunc','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'trunc','kind':'f','menu':'vector(const vector)'})
let c['trunc'] = f
let f = []
call add(f,{'word':'tw_nspace','kind':'f','menu':'vector(const vector)'})
let c['tw_nspace'] = f
let f = []
call add(f,{'word':'tw_space','kind':'f','menu':'matrix()'})
call add(f,{'word':'tw_space','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'tw_space','kind':'f','menu':'vector(const vector)'})
let c['tw_space'] = f
let f = []
call add(f,{'word':'tw_vspace','kind':'f','menu':'vector(const vector)'})
let c['tw_vspace'] = f
let f = []
call add(f,{'word':'uniqueval','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'uniqueval','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'uniqueval','kind':'f','menu':'string(const int,const string,const string,const int)'})
call add(f,{'word':'uniqueval','kind':'f','menu':'string(const string,const string,const string,const int)'})
let c['uniqueval'] = f
let f = []
call add(f,{'word':'uniquevals','kind':'f','menu':'int[](const int,const string,const string)'})
call add(f,{'word':'uniquevals','kind':'f','menu':'int[](const string,const string,const string)'})
call add(f,{'word':'uniquevals','kind':'f','menu':'string[](const int,const string,const string)'})
call add(f,{'word':'uniquevals','kind':'f','menu':'string[](const string,const string,const string)'})
let c['uniquevals'] = f
let f = []
call add(f,{'word':'unpack_intfromsafefloat','kind':'f','menu':'int(const float)'})
let c['unpack_intfromsafefloat'] = f
let f = []
call add(f,{'word':'unserialize','kind':'f','menu':'matrix2[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'matrix3[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'matrix[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'vector4[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'vector2[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'vector[](const float[])'})
let c['unserialize'] = f
let f = []
call add(f,{'word':'upush','kind':'f','menu':'void(export matrix2[],const matrix2)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export matrix3[],const matrix3)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export matrix[],const matrix)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export bsdf[],const bsdf)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export light[],const light)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export material[],const material)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export float[],const float)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export int[],const int)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export vector4[],const vector4)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export string[],const string)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export vector2[],const vector2)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export vector[],const vector)'})
let c['upush'] = f
let f = []
let c['urandom'] = f
let f = []
call add(f,{'word':'usd_addtransform','kind':'f','menu':'int(const int,const string,const string,const matrix)'})
let c['usd_addtransform'] = f
let f = []
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector[](const string,const string,const string)'})
let c['usd_attrib'] = f
let f = []
call add(f,{'word':'usd_attriblen','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_attriblen','kind':'f','menu':'int(const string,const string,const string)'})
let c['usd_attriblen'] = f
let f = []
call add(f,{'word':'usd_attribnames','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'usd_attribnames','kind':'f','menu':'string[](const string,const string)'})
let c['usd_attribnames'] = f
let f = []
call add(f,{'word':'usd_attribsize','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_attribsize','kind':'f','menu':'int(const string,const string,const string)'})
let c['usd_attribsize'] = f
let f = []
call add(f,{'word':'usd_attribtypename','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'usd_attribtypename','kind':'f','menu':'string(const string,const string,const string)'})
let c['usd_attribtypename'] = f
let f = []
call add(f,{'word':'usd_cleartransformorder','kind':'f','menu':'int(const int,const string)'})
let c['usd_cleartransformorder'] = f
let f = []
call add(f,{'word':'usd_drawmode','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_drawmode','kind':'f','menu':'string(const string,const string)'})
let c['usd_drawmode'] = f
let f = []
call add(f,{'word':'usd_isactive','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'usd_isactive','kind':'f','menu':'int(const string,const string)'})
let c['usd_isactive'] = f
let f = []
call add(f,{'word':'usd_isarray','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_isarray','kind':'f','menu':'int(const string,const string,const string)'})
let c['usd_isarray'] = f
let f = []
call add(f,{'word':'usd_isattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_isattrib','kind':'f','menu':'int(const string,const string,const string)'})
let c['usd_isattrib'] = f
let f = []
call add(f,{'word':'usd_isprim','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'usd_isprim','kind':'f','menu':'int(const string,const string)'})
let c['usd_isprim'] = f
let f = []
call add(f,{'word':'usd_isstage','kind':'f','menu':'int(const int)'})
call add(f,{'word':'usd_isstage','kind':'f','menu':'int(const string)'})
let c['usd_isstage'] = f
let f = []
call add(f,{'word':'usd_istransformreset','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'usd_istransformreset','kind':'f','menu':'int(const string,const string)'})
let c['usd_istransformreset'] = f
let f = []
call add(f,{'word':'usd_isvisible','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'usd_isvisible','kind':'f','menu':'int(const string,const string)'})
let c['usd_isvisible'] = f
let f = []
call add(f,{'word':'usd_kind','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_kind','kind':'f','menu':'string(const string,const string)'})
let c['usd_kind'] = f
let f = []
call add(f,{'word':'usd_localtransform','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'usd_localtransform','kind':'f','menu':'matrix(const string,const string)'})
let c['usd_localtransform'] = f
let f = []
call add(f,{'word':'usd_name','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_name','kind':'f','menu':'string(const string,const string)'})
let c['usd_name'] = f
let f = []
call add(f,{'word':'usd_parentpath','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_parentpath','kind':'f','menu':'string(const string,const string)'})
let c['usd_parentpath'] = f
let f = []
call add(f,{'word':'usd_purpose','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_purpose','kind':'f','menu':'string(const string,const string)'})
let c['usd_purpose'] = f
let f = []
call add(f,{'word':'usd_setactive','kind':'f','menu':'int(const int,const string,const int)'})
let c['usd_setactive'] = f
let f = []
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix2)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix3)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const float)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector4)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector2)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix2[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix3[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const float[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const int[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector4[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const string[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector2[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector[])'})
let c['usd_setattrib'] = f
let f = []
call add(f,{'word':'usd_setdrawmode','kind':'f','menu':'int(const int,const string,const string)'})
let c['usd_setdrawmode'] = f
let f = []
call add(f,{'word':'usd_setkind','kind':'f','menu':'int(const int,const string,const string)'})
let c['usd_setkind'] = f
let f = []
call add(f,{'word':'usd_setpurpose','kind':'f','menu':'int(const int,const string,const string)'})
let c['usd_setpurpose'] = f
let f = []
call add(f,{'word':'usd_setvariantselection','kind':'f','menu':'int(const int,const string,const string,const string)'})
let c['usd_setvariantselection'] = f
let f = []
call add(f,{'word':'usd_setvisible','kind':'f','menu':'int(const int,const string,const int)'})
let c['usd_setvisible'] = f
let f = []
call add(f,{'word':'usd_transformorder','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'usd_transformorder','kind':'f','menu':'string[](const string,const string)'})
let c['usd_transformorder'] = f
let f = []
call add(f,{'word':'usd_typename','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_typename','kind':'f','menu':'string(const string,const string)'})
let c['usd_typename'] = f
let f = []
call add(f,{'word':'usd_variants','kind':'f','menu':'string[](const int,const string,const string)'})
call add(f,{'word':'usd_variants','kind':'f','menu':'string[](const string,const string,const string)'})
let c['usd_variants'] = f
let f = []
call add(f,{'word':'usd_variantselection','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'usd_variantselection','kind':'f','menu':'string(const string,const string,const string)'})
let c['usd_variantselection'] = f
let f = []
call add(f,{'word':'usd_variantsets','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'usd_variantsets','kind':'f','menu':'string[](const string,const string)'})
let c['usd_variantsets'] = f
let f = []
call add(f,{'word':'usd_worldtransform','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'usd_worldtransform','kind':'f','menu':'matrix(const string,const string)'})
let c['usd_worldtransform'] = f
let f = []
call add(f,{'word':'uvdist','kind':'f','menu':'float(const int,const string,const string,const vector,int,vector)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const int,const string,const string,const vector,int,vector,const float)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const int,const string,const vector,int,vector)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const int,const string,const vector,int,vector,const float)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const string,const string,const string,const vector,int,vector)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const string,const string,const string,const vector,int,vector,const float)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const string,const string,const vector,int,vector)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const string,const string,const vector,int,vector,const float)'})
let c['uvdist'] = f
let f = []
call add(f,{'word':'uvintersect','kind':'f','menu':'int(const int,const string,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'uvintersect','kind':'f','menu':'int(const int,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'uvintersect','kind':'f','menu':'int(const string,const string,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'uvintersect','kind':'f','menu':'int(const string,const string,const vector,const vector,vector,vector)'})
let c['uvintersect'] = f
let f = []
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector[](const string,const string,const string,const vector)'})
let c['uvsample'] = f
let f = []
call add(f,{'word':'uvunwrap','kind':'f','menu':'int(const string,const float,const float,const float,vector,vector)'})
call add(f,{'word':'uvunwrap','kind':'f','menu':'int(const string,const float,const float,const float,vector,vector,vector,vector)'})
let c['uvunwrap'] = f
let f = []
call add(f,{'word':'variance','kind':'f','menu':'float(const float,float,int)'})
let c['variance'] = f
let f = []
call add(f,{'word':'vertex','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector[](const string,const string,const int,const int)'})
let c['vertex'] = f
let f = []
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix2(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix2(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix3(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix3(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'float(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'float(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'int(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'int(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector4(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector4(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'string(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'string(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector2(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector2(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix2[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix2[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix3[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix3[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'float[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'float[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'int[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'int[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector4[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector4[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'string[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'string[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector2[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector2[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector[](const string,const string,const int,int)'})
let c['vertexattrib'] = f
let f = []
call add(f,{'word':'vertexattribsize','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'vertexattribsize','kind':'f','menu':'int(const string,const string)'})
let c['vertexattribsize'] = f
let f = []
call add(f,{'word':'vertexattribtype','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'vertexattribtype','kind':'f','menu':'int(const string,const string)'})
let c['vertexattribtype'] = f
let f = []
call add(f,{'word':'vertexattribtypeinfo','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'vertexattribtypeinfo','kind':'f','menu':'string(const string,const string)'})
let c['vertexattribtypeinfo'] = f
let f = []
call add(f,{'word':'vertexhedge','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexhedge','kind':'f','menu':'int(const string,const int)'})
let c['vertexhedge'] = f
let f = []
call add(f,{'word':'vertexindex','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'vertexindex','kind':'f','menu':'int(const string,const int,const int)'})
let c['vertexindex'] = f
let f = []
call add(f,{'word':'vertexnext','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexnext','kind':'f','menu':'int(const string,const int)'})
let c['vertexnext'] = f
let f = []
call add(f,{'word':'vertexpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexpoint','kind':'f','menu':'int(const string,const int)'})
let c['vertexpoint'] = f
let f = []
call add(f,{'word':'vertexprev','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexprev','kind':'f','menu':'int(const string,const int)'})
let c['vertexprev'] = f
let f = []
call add(f,{'word':'vertexprim','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexprim','kind':'f','menu':'int(const string,const int)'})
let c['vertexprim'] = f
let f = []
call add(f,{'word':'vertexprimindex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexprimindex','kind':'f','menu':'int(const string,const int)'})
let c['vertexprimindex'] = f
let f = []
call add(f,{'word':'vnoise','kind':'f','menu':'void(const float,const float,const float,const float,int,float,float,float,float,float,float)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const float,const float,const float,const float,float,float,float,float,float,float)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const float,const float,const float,const float,int,float,float,float,float,float,float,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const float,const float,const float,const float,float,float,float,float,float,float,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const float,const float,float,float,float,float)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const float,const float,float,float,float,float,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector4,const vector4,int,float,float,vector4,vector4)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector4,const vector4,float,float,vector4,vector4)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector4,const vector4,int,float,float,vector4,vector4,const int,const int,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector4,const vector4,float,float,vector4,vector4,const int,const int,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector4,const vector4,int,float,float,vector4,vector4,const vector4)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector4,const vector4,float,float,vector4,vector4,const vector4)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector,const vector,int,float,float,vector,vector)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector,const vector,float,float,vector,vector)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector,const vector,int,float,float,vector,vector,const int,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector,const vector,float,float,vector,vector,const int,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector,const vector,int,float,float,vector,vector,const vector)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector,const vector,float,float,vector,vector,const vector)'})
let c['vnoise'] = f
let f = []
call add(f,{'word':'volume','kind':'f','menu':'float(const vector)'})
let c['volume'] = f
let f = []
call add(f,{'word':'volumegradient','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumegradient','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumegradient','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumegradient','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumegradient'] = f
let f = []
call add(f,{'word':'volumeindex','kind':'f','menu':'float(const int,const int,const vector)'})
call add(f,{'word':'volumeindex','kind':'f','menu':'float(const int,const string,const vector)'})
call add(f,{'word':'volumeindex','kind':'f','menu':'float(const string,const int,const vector)'})
call add(f,{'word':'volumeindex','kind':'f','menu':'float(const string,const string,const vector)'})
let c['volumeindex'] = f
let f = []
call add(f,{'word':'volumeindexactive','kind':'f','menu':'int(const int,const int,const vector)'})
call add(f,{'word':'volumeindexactive','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'volumeindexactive','kind':'f','menu':'int(const string,const int,const vector)'})
call add(f,{'word':'volumeindexactive','kind':'f','menu':'int(const string,const string,const vector)'})
let c['volumeindexactive'] = f
let f = []
call add(f,{'word':'volumeindexorigin','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'volumeindexorigin','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'volumeindexorigin','kind':'f','menu':'vector(const string,const int)'})
call add(f,{'word':'volumeindexorigin','kind':'f','menu':'vector(const string,const string)'})
let c['volumeindexorigin'] = f
let f = []
call add(f,{'word':'volumeindextopos','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumeindextopos','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumeindextopos','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumeindextopos','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumeindextopos'] = f
let f = []
call add(f,{'word':'volumeindexv','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumeindexv','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumeindexv','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumeindexv','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumeindexv'] = f
let f = []
call add(f,{'word':'volumepostoindex','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumepostoindex','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumepostoindex','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumepostoindex','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumepostoindex'] = f
let f = []
call add(f,{'word':'volumeres','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'volumeres','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'volumeres','kind':'f','menu':'vector(const string,const int)'})
call add(f,{'word':'volumeres','kind':'f','menu':'vector(const string,const string)'})
let c['volumeres'] = f
let f = []
call add(f,{'word':'volumesample','kind':'f','menu':'float(const int,const int,const vector)'})
call add(f,{'word':'volumesample','kind':'f','menu':'float(const int,const string,const vector)'})
call add(f,{'word':'volumesample','kind':'f','menu':'float(const string,const int,const vector)'})
call add(f,{'word':'volumesample','kind':'f','menu':'float(const string,const string,const vector)'})
let c['volumesample'] = f
let f = []
call add(f,{'word':'volumesamplev','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumesamplev','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumesamplev','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumesamplev','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumesamplev'] = f
let f = []
call add(f,{'word':'volumevoxeldiameter','kind':'f','menu':'float(const int,const int)'})
call add(f,{'word':'volumevoxeldiameter','kind':'f','menu':'float(const int,const string)'})
call add(f,{'word':'volumevoxeldiameter','kind':'f','menu':'float(const string,const int)'})
call add(f,{'word':'volumevoxeldiameter','kind':'f','menu':'float(const string,const string)'})
let c['volumevoxeldiameter'] = f
let f = []
call add(f,{'word':'vtransform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'vtransform','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'vtransform','kind':'f','menu':'vector(const vector,const matrix)'})
let c['vtransform'] = f
let f = []
call add(f,{'word':'warning','kind':'f','menu':'void(const string)'})
let c['warning'] = f
let f = []
let c['while'] = f
let f = []
call add(f,{'word':'wireblinn','kind':'f','menu':'bsdf(const vector,const float)'})
let c['wireblinn'] = f
let f = []
call add(f,{'word':'wirediffuse','kind':'f','menu':'bsdf(const vector)'})
let c['wirediffuse'] = f
let f = []
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,const float,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,const float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,const float,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,const float,float,float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,const float,int,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,const float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,int,float,float,float,float,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,float,float,float,float,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,int,float,float,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,float,float,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector4,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector4,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector4,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector4,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector4,int,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector4,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector2,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector2,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector2,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector2,float,float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector2,int,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector2,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector,int,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector,int,float,float,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector,float,float,const int,const int,const int)'})
let c['wnoise'] = f
let f = []
call add(f,{'word':'wo_nspace','kind':'f','menu':'vector(const vector)'})
let c['wo_nspace'] = f
let f = []
call add(f,{'word':'wo_space','kind':'f','menu':'matrix()'})
call add(f,{'word':'wo_space','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'wo_space','kind':'f','menu':'vector(const vector)'})
let c['wo_space'] = f
let f = []
call add(f,{'word':'wo_vspace','kind':'f','menu':'vector(const vector)'})
let c['wo_vspace'] = f
let f = []
call add(f,{'word':'writepixel','kind':'f','menu':'void(const string,const float,const float,const vector)'})
let c['writepixel'] = f
let f = []
call add(f,{'word':'wt_nspace','kind':'f','menu':'vector(const vector)'})
let c['wt_nspace'] = f
let f = []
call add(f,{'word':'wt_space','kind':'f','menu':'matrix()'})
call add(f,{'word':'wt_space','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'wt_space','kind':'f','menu':'vector(const vector)'})
let c['wt_space'] = f
let f = []
call add(f,{'word':'wt_vspace','kind':'f','menu':'vector(const vector)'})
let c['wt_vspace'] = f
let f = []
call add(f,{'word':'xnoise','kind':'f','menu':'float(const float)'})
call add(f,{'word':'xnoise','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'xnoise','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'xnoise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'xnoise','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'xnoise','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'xnoise','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'xnoise','kind':'f','menu':'vector(const vector)'})
let c['xnoise'] = f
let f = []
call add(f,{'word':'xnoised','kind':'f','menu':'void(const float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'float(const float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const float,const float,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'float(const float,const float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const float,const float,vector,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'vector(const float,const float,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const float,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'vector(const float,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const vector4,float,float,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'float(const vector4,float,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const vector4,vector,vector,vector,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'vector(const vector4,vector,vector,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const vector,float,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'float(const vector,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const vector,vector,vector,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'vector(const vector,vector,vector,vector)'})
let c['xnoised'] = f
let f = []
let c['xor'] = f
let f = []
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const string,const vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const string,const vector,int,vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const string,const vector,int,vector,const float)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const vector,int,vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const vector,int,vector,const float)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const string,const vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const string,const vector,int,vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const string,const vector,int,vector,const float)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const vector,int,vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const vector,int,vector,const float)'})
let c['xyzdist'] = f
let f = []
call add(f,{'word':'xyztorgb','kind':'f','menu':'vector(const vector)'})
let c['xyztorgb'] = f
let contexts['displace'] = c
" CONTEXT: light 
let c = {}
let c['P'] = [{'word':'P','kind':'v','menu':'vector'}]
let c['I'] = [{'word':'I','kind':'v','menu':'vector'}]
let c['dPds'] = [{'word':'dPds','kind':'v','menu':'vector'}]
let c['dPdt'] = [{'word':'dPdt','kind':'v','menu':'vector'}]
let c['N'] = [{'word':'N','kind':'v','menu':'vector'}]
let c['Ng'] = [{'word':'Ng','kind':'v','menu':'vector'}]
let c['Cl'] = [{'word':'Cl','kind':'v','menu':'vector'}]
let c['L'] = [{'word':'L','kind':'v','menu':'vector'}]
let c['Ps'] = [{'word':'Ps','kind':'v','menu':'vector'}]
let c['Eye'] = [{'word':'Eye','kind':'v','menu':'vector'}]
let c['s'] = [{'word':'s','kind':'v','menu':'float'}]
let c['t'] = [{'word':'t','kind':'v','menu':'float'}]
let c['Time'] = [{'word':'Time','kind':'v','menu':'float'}]
let c['dPdz'] = [{'word':'dPdz','kind':'v','menu':'float'}]
let c['Lz'] = [{'word':'Lz','kind':'v','menu':'vector'}]
let c['SID'] = [{'word':'SID','kind':'v','menu':'int'}]
let f = []
call add(f,{'word':'Du','kind':'f','menu':'float(const float)'})
call add(f,{'word':'Du','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'Du','kind':'f','menu':'vector(const vector)'})
let c['Du'] = f
let f = []
call add(f,{'word':'Dv','kind':'f','menu':'float(const float)'})
call add(f,{'word':'Dv','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'Dv','kind':'f','menu':'vector(const vector)'})
let c['Dv'] = f
let f = []
call add(f,{'word':'Dw','kind':'f','menu':'float(const float)'})
call add(f,{'word':'Dw','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'Dw','kind':'f','menu':'vector(const vector)'})
let c['Dw'] = f
let f = []
let c['__nextgather'] = f
let f = []
let c['__ptexture_shift_coord'] = f
let f = []
let c['_export'] = f
let f = []
call add(f,{'word':'abs','kind':'f','menu':'float(const float)'})
call add(f,{'word':'abs','kind':'f','menu':'int(const int)'})
call add(f,{'word':'abs','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'abs','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'abs','kind':'f','menu':'vector(const vector)'})
let c['abs'] = f
let f = []
call add(f,{'word':'acos','kind':'f','menu':'float(const float)'})
call add(f,{'word':'acos','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'acos','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'acos','kind':'f','menu':'vector(const vector)'})
let c['acos'] = f
let f = []
let c['add'] = f
let f = []
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix2)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix3)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const float)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector4)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector2)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix2[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix3[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const float[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const int[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector4[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const string[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector2[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector[])'})
let c['addattrib'] = f
let f = []
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
let c['adddetailattrib'] = f
let f = []
call add(f,{'word':'addpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'addpoint','kind':'f','menu':'int(const int,const vector)'})
let c['addpoint'] = f
let f = []
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
let c['addpointattrib'] = f
let f = []
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,const int)'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,const int,const int)'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int,const int,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int[],int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int[],int[])'})
let c['addprim'] = f
let f = []
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
let c['addprimattrib'] = f
let f = []
call add(f,{'word':'addvariablename','kind':'f','menu':'int(const int,const string,const string)'})
let c['addvariablename'] = f
let f = []
call add(f,{'word':'addvertex','kind':'f','menu':'int(const int,const int,const int)'})
let c['addvertex'] = f
let f = []
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
let c['addvertexattrib'] = f
let f = []
call add(f,{'word':'addvisualizer','kind':'f','menu':'int(const int,const string)'})
let c['addvisualizer'] = f
let f = []
call add(f,{'word':'agentaddclip','kind':'f','menu':'int(const int,const int,const string,const string,const int)'})
let c['agentaddclip'] = f
let f = []
call add(f,{'word':'agentclipcatalog','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agentclipcatalog','kind':'f','menu':'string[](const string,const int)'})
let c['agentclipcatalog'] = f
let f = []
call add(f,{'word':'agentclipchannel','kind':'f','menu':'int(const int,const int,const string,const string)'})
call add(f,{'word':'agentclipchannel','kind':'f','menu':'int(const string,const int,const string,const string)'})
let c['agentclipchannel'] = f
let f = []
call add(f,{'word':'agentclipchannelnames','kind':'f','menu':'string[](const int,const int,const string)'})
call add(f,{'word':'agentclipchannelnames','kind':'f','menu':'string[](const string,const int,const string)'})
let c['agentclipchannelnames'] = f
let f = []
call add(f,{'word':'agentcliplength','kind':'f','menu':'float(const int,const int,const string)'})
call add(f,{'word':'agentcliplength','kind':'f','menu':'float(const string,const int,const string)'})
let c['agentcliplength'] = f
let f = []
call add(f,{'word':'agentclipnames','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agentclipnames','kind':'f','menu':'string[](const string,const int)'})
let c['agentclipnames'] = f
let f = []
call add(f,{'word':'agentclipsample','kind':'f','menu':'float(const int,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsample','kind':'f','menu':'float(const int,const int,const string,const float,const string)'})
call add(f,{'word':'agentclipsample','kind':'f','menu':'float(const string,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsample','kind':'f','menu':'float(const string,const int,const string,const float,const string)'})
let c['agentclipsample'] = f
let f = []
call add(f,{'word':'agentclipsamplelocal','kind':'f','menu':'matrix(const int,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsamplelocal','kind':'f','menu':'matrix(const string,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsamplelocal','kind':'f','menu':'matrix[](const int,const int,const string,const float)'})
call add(f,{'word':'agentclipsamplelocal','kind':'f','menu':'matrix[](const string,const int,const string,const float)'})
let c['agentclipsamplelocal'] = f
let f = []
call add(f,{'word':'agentclipsamplerate','kind':'f','menu':'float(const int,const int,const string)'})
call add(f,{'word':'agentclipsamplerate','kind':'f','menu':'float(const string,const int,const string)'})
let c['agentclipsamplerate'] = f
let f = []
call add(f,{'word':'agentclipsampleworld','kind':'f','menu':'matrix(const int,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsampleworld','kind':'f','menu':'matrix(const string,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsampleworld','kind':'f','menu':'matrix[](const int,const int,const string,const float)'})
call add(f,{'word':'agentclipsampleworld','kind':'f','menu':'matrix[](const string,const int,const string,const float)'})
let c['agentclipsampleworld'] = f
let f = []
call add(f,{'word':'agentcliptimes','kind':'f','menu':'float[](const int,const int)'})
call add(f,{'word':'agentcliptimes','kind':'f','menu':'float[](const string,const int)'})
let c['agentcliptimes'] = f
let f = []
call add(f,{'word':'agentcliptransformgroups','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agentcliptransformgroups','kind':'f','menu':'string[](const string,const int)'})
let c['agentcliptransformgroups'] = f
let f = []
call add(f,{'word':'agentclipweights','kind':'f','menu':'float[](const int,const int)'})
call add(f,{'word':'agentclipweights','kind':'f','menu':'float[](const string,const int)'})
let c['agentclipweights'] = f
let f = []
call add(f,{'word':'agentcollisionlayer','kind':'f','menu':'string(const int,const int)'})
call add(f,{'word':'agentcollisionlayer','kind':'f','menu':'string(const string,const int)'})
let c['agentcollisionlayer'] = f
let f = []
call add(f,{'word':'agentcurrentlayer','kind':'f','menu':'string(const int,const int)'})
call add(f,{'word':'agentcurrentlayer','kind':'f','menu':'string(const string,const int)'})
let c['agentcurrentlayer'] = f
let f = []
call add(f,{'word':'agentfindtransformgroup','kind':'f','menu':'int(const int,const int,const string)'})
call add(f,{'word':'agentfindtransformgroup','kind':'f','menu':'int(const string,const int,const string)'})
let c['agentfindtransformgroup'] = f
let f = []
call add(f,{'word':'agentlayerbindings','kind':'f','menu':'int[](const int,const int,const string,const string)'})
call add(f,{'word':'agentlayerbindings','kind':'f','menu':'int[](const string,const int,const string,const string)'})
let c['agentlayerbindings'] = f
let f = []
call add(f,{'word':'agentlayers','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agentlayers','kind':'f','menu':'string[](const string,const int)'})
let c['agentlayers'] = f
let f = []
call add(f,{'word':'agentlayershapes','kind':'f','menu':'string[](const int,const int,const string,const int)'})
call add(f,{'word':'agentlayershapes','kind':'f','menu':'string[](const int,const int,const string,const string)'})
call add(f,{'word':'agentlayershapes','kind':'f','menu':'string[](const string,const int,const string,const int)'})
call add(f,{'word':'agentlayershapes','kind':'f','menu':'string[](const string,const int,const string,const string)'})
let c['agentlayershapes'] = f
let f = []
call add(f,{'word':'agentlocaltransform','kind':'f','menu':'matrix(const int,const int,const int)'})
call add(f,{'word':'agentlocaltransform','kind':'f','menu':'matrix(const string,const int,const int)'})
let c['agentlocaltransform'] = f
let f = []
call add(f,{'word':'agentlocaltransforms','kind':'f','menu':'matrix[](const int,const int)'})
call add(f,{'word':'agentlocaltransforms','kind':'f','menu':'matrix[](const string,const int)'})
let c['agentlocaltransforms'] = f
let f = []
call add(f,{'word':'agentrigchildren','kind':'f','menu':'int[](const int,const int,const int)'})
call add(f,{'word':'agentrigchildren','kind':'f','menu':'int[](const string,const int,const int)'})
let c['agentrigchildren'] = f
let f = []
call add(f,{'word':'agentrigfind','kind':'f','menu':'int(const int,const int,const string)'})
call add(f,{'word':'agentrigfind','kind':'f','menu':'int(const string,const int,const string)'})
let c['agentrigfind'] = f
let f = []
call add(f,{'word':'agentrigparent','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'agentrigparent','kind':'f','menu':'int(const string,const int,const int)'})
let c['agentrigparent'] = f
let f = []
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const int,const int,const int,const int[],const matrix[],const int,const int)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const int,const int,const int,const int[],const matrix[],const int,const int,const float,const int)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const int,const int,const int,const int[],const matrix[],const int,const int,const float,const int,const float[],const int[],const int[])'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const int,const int,const int,const int[],const matrix[],const int,const int,const float,const int,const float[],const int[],const int[],const string,const string,const string)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const string,const int,const int,const int[],const matrix[],const int,const int)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const string,const int,const int,const int[],const matrix[],const int,const int,const float,const int)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const string,const int,const int,const int[],const matrix[],const int,const int,const float,const int,const float[],const int[],const int[])'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const string,const int,const int,const int[],const matrix[],const int,const int,const float,const int,const float[],const int[],const int[],const string,const string,const string)'})
let c['agentsolvefbik'] = f
let f = []
call add(f,{'word':'agenttransformcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'agenttransformcount','kind':'f','menu':'int(const string,const int)'})
let c['agenttransformcount'] = f
let f = []
call add(f,{'word':'agenttransformgroupmember','kind':'f','menu':'int(const int,const int,const int,const int)'})
call add(f,{'word':'agenttransformgroupmember','kind':'f','menu':'int(const int,const int,const string,const int)'})
call add(f,{'word':'agenttransformgroupmember','kind':'f','menu':'int(const string,const int,const int,const int)'})
call add(f,{'word':'agenttransformgroupmember','kind':'f','menu':'int(const string,const int,const string,const int)'})
let c['agenttransformgroupmember'] = f
let f = []
call add(f,{'word':'agenttransformgroups','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agenttransformgroups','kind':'f','menu':'string[](const string,const int)'})
let c['agenttransformgroups'] = f
let f = []
call add(f,{'word':'agenttransformgroupweight','kind':'f','menu':'float(const int,const int,const int,const int)'})
call add(f,{'word':'agenttransformgroupweight','kind':'f','menu':'float(const string,const int,const int,const int)'})
let c['agenttransformgroupweight'] = f
let f = []
call add(f,{'word':'agenttransformnames','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agenttransformnames','kind':'f','menu':'string[](const string,const int)'})
let c['agenttransformnames'] = f
let f = []
call add(f,{'word':'agenttransformtolocal','kind':'f','menu':'int(const int,const int,export matrix[])'})
call add(f,{'word':'agenttransformtolocal','kind':'f','menu':'int(const string,const int,export matrix[])'})
let c['agenttransformtolocal'] = f
let f = []
call add(f,{'word':'agenttransformtoworld','kind':'f','menu':'int(const int,const int,export matrix[])'})
call add(f,{'word':'agenttransformtoworld','kind':'f','menu':'int(const string,const int,export matrix[])'})
let c['agenttransformtoworld'] = f
let f = []
call add(f,{'word':'agentworldtransform','kind':'f','menu':'matrix(const int,const int,const int)'})
call add(f,{'word':'agentworldtransform','kind':'f','menu':'matrix(const string,const int,const int)'})
let c['agentworldtransform'] = f
let f = []
call add(f,{'word':'agentworldtransforms','kind':'f','menu':'matrix[](const int,const int)'})
call add(f,{'word':'agentworldtransforms','kind':'f','menu':'matrix[](const string,const int)'})
let c['agentworldtransforms'] = f
let f = []
call add(f,{'word':'albedo','kind':'f','menu':'vector(const bsdf,const int)'})
call add(f,{'word':'albedo','kind':'f','menu':'vector(const bsdf,const vector,const int)'})
call add(f,{'word':'albedo','kind':'f','menu':'vector(const bsdf,const vector)'})
call add(f,{'word':'albedo','kind':'f','menu':'vector(const bsdf)'})
let c['albedo'] = f
let f = []
let c['and'] = f
let f = []
call add(f,{'word':'anoise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'anoise','kind':'f','menu':'float(const vector,const int,const float,const float)'})
call add(f,{'word':'anoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'anoise','kind':'f','menu':'float(const vector,const int,const int,const int,const int,const float,const float)'})
call add(f,{'word':'anoise','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'anoise','kind':'f','menu':'vector(const vector,const int,const float,const float)'})
call add(f,{'word':'anoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
call add(f,{'word':'anoise','kind':'f','menu':'vector(const vector,const int,const int,const int,const int,const float,const float)'})
let c['anoise'] = f
let f = []
call add(f,{'word':'append','kind':'f','menu':'void(export string,const string)'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix2[],const matrix2)'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix2[],const matrix2[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix3[],const matrix3)'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix3[],const matrix3[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix[],const matrix)'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix[],const matrix[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export float[],const float)'})
call add(f,{'word':'append','kind':'f','menu':'void(export float[],const float[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export int[],const int)'})
call add(f,{'word':'append','kind':'f','menu':'void(export int[],const int[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector4[],const vector4)'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector4[],const vector4[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export string[],const string)'})
call add(f,{'word':'append','kind':'f','menu':'void(export string[],const string[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector2[],const vector2)'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector2[],const vector2[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector[],const vector)'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector[],const vector[])'})
let c['append'] = f
let f = []
call add(f,{'word':'area','kind':'f','menu':'float(const vector)'})
let c['area'] = f
let f = []
call add(f,{'word':'argsort','kind':'f','menu':'int[](const float[])'})
call add(f,{'word':'argsort','kind':'f','menu':'int[](const int[])'})
call add(f,{'word':'argsort','kind':'f','menu':'int[](const string[])'})
let c['argsort'] = f
let f = []
call add(f,{'word':'array','kind':'f','menu':'matrix2[]()'})
call add(f,{'word':'array','kind':'f','menu':'matrix3[]()'})
call add(f,{'word':'array','kind':'f','menu':'matrix[]()'})
call add(f,{'word':'array','kind':'f','menu':'float[]()'})
call add(f,{'word':'array','kind':'f','menu':'int[]()'})
call add(f,{'word':'array','kind':'f','menu':'vector4[]()'})
call add(f,{'word':'array','kind':'f','menu':'string[]()'})
call add(f,{'word':'array','kind':'f','menu':'vector2[]()'})
call add(f,{'word':'array','kind':'f','menu':'vector[]()'})
let c['array'] = f
let f = []
call add(f,{'word':'arraylength','kind':'f','menu':'int(const matrix3)'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const matrix)'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const vector4)'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const vector)'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const matrix3[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const matrix[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const bsdf[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const light[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const material[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const float[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const vector4[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const string[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const vector[])'})
let c['arraylength'] = f
let f = []
call add(f,{'word':'ashikhmin','kind':'f','menu':'bsdf(const float,const float,const vector,const vector)'})
call add(f,{'word':'ashikhmin','kind':'f','menu':'bsdf(const vector,const float,const float,const vector,const vector)'})
let c['ashikhmin'] = f
let f = []
call add(f,{'word':'asin','kind':'f','menu':'float(const float)'})
call add(f,{'word':'asin','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'asin','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'asin','kind':'f','menu':'vector(const vector)'})
let c['asin'] = f
let f = []
call add(f,{'word':'assert_enabled','kind':'f','menu':'int()'})
let c['assert_enabled'] = f
let f = []
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,float,const matrix2)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,float,const matrix2)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,float,float,float,float,float,float,const matrix3)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,float,float,float,float,float,float,const matrix3)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,const matrix)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,const matrix)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,float,const vector4)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,float,const vector4)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,const vector)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,const vector)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,const vector2)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,const vector2)'})
let c['assign'] = f
let f = []
call add(f,{'word':'atan','kind':'f','menu':'float(const float)'})
call add(f,{'word':'atan','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'atan','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'atan','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'atan','kind':'f','menu':'vector(const vector)'})
let c['atan'] = f
let f = []
call add(f,{'word':'atan2','kind':'f','menu':'float(const float,const float)'})
let c['atan2'] = f
let f = []
call add(f,{'word':'atof','kind':'f','menu':'float(const string)'})
let c['atof'] = f
let f = []
call add(f,{'word':'atoi','kind':'f','menu':'int(const string)'})
let c['atoi'] = f
let f = []
call add(f,{'word':'atten','kind':'f','menu':'float(const float,const float)'})
let c['atten'] = f
let f = []
call add(f,{'word':'attrib','kind':'f','menu':'matrix2(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix2(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix3(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix3(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'float(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'float(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector4(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector4(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'string(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'string(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector2(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector2(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix2[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix2[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix3[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix3[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'float[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'float[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'int[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'int[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector4[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector4[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'string[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'string[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector2[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector2[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector[](const string,const string,const string,const int)'})
let c['attrib'] = f
let f = []
call add(f,{'word':'attribclass','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'attribclass','kind':'f','menu':'string(const string,const string)'})
let c['attribclass'] = f
let f = []
call add(f,{'word':'attribdataid','kind':'f','menu':'int[](const int,const string,const string)'})
call add(f,{'word':'attribdataid','kind':'f','menu':'int[](const string,const string,const string)'})
let c['attribdataid'] = f
let f = []
call add(f,{'word':'attribsize','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'attribsize','kind':'f','menu':'int(const string,const string,const string)'})
let c['attribsize'] = f
let f = []
call add(f,{'word':'attribtype','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'attribtype','kind':'f','menu':'int(const string,const string,const string)'})
let c['attribtype'] = f
let f = []
call add(f,{'word':'attribtypeinfo','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'attribtypeinfo','kind':'f','menu':'string(const string,const string,const string)'})
let c['attribtypeinfo'] = f
let f = []
call add(f,{'word':'avg','kind':'f','menu':'float(const float)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'avg','kind':'f','menu':'int(const int)'})
call add(f,{'word':'avg','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'avg','kind':'f','menu':'vector4(const vector4,const vector4)'})
call add(f,{'word':'avg','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'avg','kind':'f','menu':'vector2(const vector2,const vector2)'})
call add(f,{'word':'avg','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'avg','kind':'f','menu':'vector(const vector,const vector)'})
call add(f,{'word':'avg','kind':'f','menu':'vector(const vector[])'})
let c['avg'] = f
let f = []
let c['band'] = f
let f = []
let c['bgather'] = f
let f = []
call add(f,{'word':'blackbody','kind':'f','menu':'vector(const float,const float)'})
let c['blackbody'] = f
let f = []
call add(f,{'word':'blinn','kind':'f','menu':'bsdf(const float)'})
call add(f,{'word':'blinn','kind':'f','menu':'bsdf(const vector,const float)'})
let c['blinn'] = f
let f = []
call add(f,{'word':'blinnBRDF','kind':'f','menu':'float(const vector,const vector,const vector,const float)'})
let c['blinnBRDF'] = f
let f = []
let c['bnot'] = f
let f = []
let c['bor'] = f
let f = []
call add(f,{'word':'bouncelabel','kind':'f','menu':'string(const int)'})
let c['bouncelabel'] = f
let f = []
call add(f,{'word':'bouncemask','kind':'f','menu':'int(const string)'})
let c['bouncemask'] = f
let f = []
let c['br'] = f
let f = []
let c['break'] = f
let f = []
call add(f,{'word':'bumpmap','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmap','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmap','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmap','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmap'] = f
let f = []
call add(f,{'word':'bumpmapA','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapA','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapA','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapA','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapA'] = f
let f = []
call add(f,{'word':'bumpmapB','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapB','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapB','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapB','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapB'] = f
let f = []
call add(f,{'word':'bumpmapG','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapG','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapG','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapG','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapG'] = f
let f = []
call add(f,{'word':'bumpmapL','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapL','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapL','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapL','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapL'] = f
let f = []
call add(f,{'word':'bumpmapR','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapR','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapR','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapR','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapR'] = f
let f = []
let c['bwhile'] = f
let f = []
let c['bxor'] = f
let f = []
call add(f,{'word':'cbrt','kind':'f','menu':'float(const float)'})
call add(f,{'word':'cbrt','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'cbrt','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'cbrt','kind':'f','menu':'vector(const vector)'})
let c['cbrt'] = f
let f = []
call add(f,{'word':'ceil','kind':'f','menu':'float(const float)'})
call add(f,{'word':'ceil','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'ceil','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'ceil','kind':'f','menu':'vector(const vector)'})
let c['ceil'] = f
let f = []
call add(f,{'word':'ch','kind':'f','menu':'float(const int,const int,const int)'})
call add(f,{'word':'ch','kind':'f','menu':'float(const int,const int,const int,const float)'})
call add(f,{'word':'ch','kind':'f','menu':'float(const string)'})
call add(f,{'word':'ch','kind':'f','menu':'float(const string,const float)'})
call add(f,{'word':'ch','kind':'f','menu':'string(const string)'})
call add(f,{'word':'ch','kind':'f','menu':'string(const string,const float)'})
let c['ch'] = f
let f = []
call add(f,{'word':'ch2','kind':'f','menu':'matrix2(const string)'})
call add(f,{'word':'ch2','kind':'f','menu':'matrix2(const string,const float)'})
let c['ch2'] = f
let f = []
call add(f,{'word':'ch3','kind':'f','menu':'matrix3(const string)'})
call add(f,{'word':'ch3','kind':'f','menu':'matrix3(const string,const float)'})
let c['ch3'] = f
let f = []
call add(f,{'word':'ch4','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'ch4','kind':'f','menu':'matrix(const string,const float)'})
let c['ch4'] = f
let f = []
call add(f,{'word':'chexpr','kind':'f','menu':'float(const string,const string)'})
let c['chexpr'] = f
let f = []
call add(f,{'word':'chexprf','kind':'f','menu':'float(const string,const string,const float)'})
let c['chexprf'] = f
let f = []
call add(f,{'word':'chexprt','kind':'f','menu':'float(const string,const string,const float)'})
let c['chexprt'] = f
let f = []
call add(f,{'word':'chf','kind':'f','menu':'float(const int,const int,const int)'})
call add(f,{'word':'chf','kind':'f','menu':'float(const int,const int,const int,const float)'})
call add(f,{'word':'chf','kind':'f','menu':'float(const string)'})
call add(f,{'word':'chf','kind':'f','menu':'float(const string,const float)'})
let c['chf'] = f
let f = []
call add(f,{'word':'chi','kind':'f','menu':'int(const string)'})
call add(f,{'word':'chi','kind':'f','menu':'int(const string,const float)'})
let c['chi'] = f
let f = []
call add(f,{'word':'chid','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'chid','kind':'f','menu':'void(const string,int,int,int)'})
call add(f,{'word':'chid','kind':'f','menu':'int(const string,int,int)'})
call add(f,{'word':'chid','kind':'f','menu':'void(const string,const string,int,int,int)'})
call add(f,{'word':'chid','kind':'f','menu':'int(const string,const string,int,int)'})
let c['chid'] = f
let f = []
call add(f,{'word':'chop','kind':'f','menu':'matrix(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'matrix(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'matrix(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'float(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'float(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'float(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector4(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector4(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector4(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector2(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector2(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector2(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector(const string,const string,const int)'})
let c['chop'] = f
let f = []
call add(f,{'word':'choplocal','kind':'f','menu':'matrix(const string,const int,const float)'})
call add(f,{'word':'choplocal','kind':'f','menu':'matrix(const string,const int,const int)'})
call add(f,{'word':'choplocal','kind':'f','menu':'matrix(const string,const string,const float)'})
call add(f,{'word':'choplocal','kind':'f','menu':'matrix(const string,const string,const int)'})
let c['choplocal'] = f
let f = []
call add(f,{'word':'choplocalt','kind':'f','menu':'matrix(const string,const int,const float,const float)'})
call add(f,{'word':'choplocalt','kind':'f','menu':'matrix(const string,const int,const int,const float)'})
call add(f,{'word':'choplocalt','kind':'f','menu':'matrix(const string,const string,const float,const float)'})
call add(f,{'word':'choplocalt','kind':'f','menu':'matrix(const string,const string,const int,const float)'})
let c['choplocalt'] = f
let f = []
call add(f,{'word':'chopt','kind':'f','menu':'matrix(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'matrix(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'matrix(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'matrix(const string,const string,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'float(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'float(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'float(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'float(const string,const string,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector4(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector4(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector4(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector4(const string,const string,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector2(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector2(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector2(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector2(const string,const string,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector(const string,const string,const int,const float)'})
let c['chopt'] = f
let f = []
call add(f,{'word':'chp','kind':'f','menu':'vector4(const string)'})
call add(f,{'word':'chp','kind':'f','menu':'vector4(const string,const float)'})
let c['chp'] = f
let f = []
call add(f,{'word':'chr','kind':'f','menu':'string(const int)'})
let c['chr'] = f
let f = []
call add(f,{'word':'chramp','kind':'f','menu':'float(const string,const float)'})
call add(f,{'word':'chramp','kind':'f','menu':'float(const string,const float,const float)'})
call add(f,{'word':'chramp','kind':'f','menu':'vector(const string,const float)'})
call add(f,{'word':'chramp','kind':'f','menu':'vector(const string,const float,const float)'})
let c['chramp'] = f
let f = []
call add(f,{'word':'chs','kind':'f','menu':'string(const string)'})
call add(f,{'word':'chs','kind':'f','menu':'string(const string,const float)'})
let c['chs'] = f
let f = []
call add(f,{'word':'chsraw','kind':'f','menu':'string(const string)'})
let c['chsraw'] = f
let f = []
call add(f,{'word':'chu','kind':'f','menu':'vector2(const string)'})
call add(f,{'word':'chu','kind':'f','menu':'vector2(const string,const float)'})
let c['chu'] = f
let f = []
call add(f,{'word':'chv','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'chv','kind':'f','menu':'vector(const int,const int,const float)'})
call add(f,{'word':'chv','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'chv','kind':'f','menu':'vector(const string,const float)'})
let c['chv'] = f
let f = []
call add(f,{'word':'ckspline','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'ckspline','kind':'f','menu':'vector4(const float,const vector4,const float)'})
call add(f,{'word':'ckspline','kind':'f','menu':'vector(const float,const vector,const float)'})
let c['ckspline'] = f
let f = []
call add(f,{'word':'clamp','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'clamp','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'clamp','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'clamp','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'clamp','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['clamp'] = f
let f = []
call add(f,{'word':'clip','kind':'f','menu':'void(int,export vector,export vector,const vector4)'})
call add(f,{'word':'clip','kind':'f','menu':'int(export vector,export vector,const vector4)'})
call add(f,{'word':'clip','kind':'f','menu':'void(int,export vector,export vector,const vector,const vector)'})
call add(f,{'word':'clip','kind':'f','menu':'int(export vector,export vector,const vector,const vector)'})
let c['clip'] = f
let f = []
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const float,const float)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const float,const float,const float,const float,const float,const float,const float,const float,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const vector)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const float,const float)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const float,const float,const float,const float,const float,const float,const float,const float,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector,const int)'})
let c['colormap'] = f
let f = []
call add(f,{'word':'computenormal','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'computenormal','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['computenormal'] = f
let f = []
call add(f,{'word':'concat','kind':'f','menu':'string(const string,const string)'})
let c['concat'] = f
let f = []
call add(f,{'word':'cone','kind':'f','menu':'bsdf(const vector,const float)'})
call add(f,{'word':'cone','kind':'f','menu':'bsdf(const vector,const vector,const float)'})
let c['cone'] = f
let f = []
call add(f,{'word':'cos','kind':'f','menu':'float(const float)'})
call add(f,{'word':'cos','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'cos','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'cos','kind':'f','menu':'vector(const vector)'})
let c['cos'] = f
let f = []
call add(f,{'word':'cosh','kind':'f','menu':'float(const float)'})
call add(f,{'word':'cosh','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'cosh','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'cosh','kind':'f','menu':'vector(const vector)'})
let c['cosh'] = f
let f = []
call add(f,{'word':'cout','kind':'f','menu':'void()'})
let c['cout'] = f
let f = []
call add(f,{'word':'cracktransform','kind':'f','menu':'void(const int,const int,const vector,const matrix,vector,vector,vector)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'vector(const int,const int,const vector,const matrix,vector,vector)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'void(const int,const int,const vector,const vector,const matrix,vector,vector,vector,vector)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'vector(const int,const int,const vector,const vector,const matrix,vector,vector,vector)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'vector(const int,const int,const int,const vector,const matrix)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'vector(const int,const int,const int,const vector,const vector,const matrix)'})
let c['cracktransform'] = f
let f = []
call add(f,{'word':'create_cdf','kind':'f','menu':'float[](const float[])'})
let c['create_cdf'] = f
let f = []
call add(f,{'word':'create_pdf','kind':'f','menu':'float[](const float[])'})
let c['create_pdf'] = f
let f = []
call add(f,{'word':'cross','kind':'f','menu':'vector(const vector,const vector)'})
let c['cross'] = f
let f = []
call add(f,{'word':'cspline','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'cspline','kind':'f','menu':'vector4(const float,const vector4)'})
call add(f,{'word':'cspline','kind':'f','menu':'vector(const float,const vector)'})
let c['cspline'] = f
let f = []
call add(f,{'word':'ctransform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'ctransform','kind':'f','menu':'vector(const string,const vector)'})
let c['ctransform'] = f
let f = []
call add(f,{'word':'curlnoise','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'curlnoise','kind':'f','menu':'vector(const vector)'})
let c['curlnoise'] = f
let f = []
call add(f,{'word':'curlnoise2d','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'curlnoise2d','kind':'f','menu':'vector(const vector)'})
let c['curlnoise2d'] = f
let f = []
call add(f,{'word':'curlxnoise','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'curlxnoise','kind':'f','menu':'vector(const vector)'})
let c['curlxnoise'] = f
let f = []
call add(f,{'word':'curlxnoise2d','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'curlxnoise2d','kind':'f','menu':'vector(const vector)'})
let c['curlxnoise2d'] = f
let f = []
call add(f,{'word':'cvex_bsdf','kind':'f','menu':'bsdf(const string,const string)'})
let c['cvex_bsdf'] = f
let f = []
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,const float,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,const float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,const float,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,const float,float,float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,const float,int,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,const float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,int,float,float,float,float,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,float,float,float,float,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,int,float,float,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,float,float,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector4,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector4,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector4,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector4,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector4,int,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector4,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector2,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector2,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector2,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector2,float,float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector2,int,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector2,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector,int,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector,int,float,float,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector,float,float,const int,const int,const int)'})
let c['cwnoise'] = f
let f = []
call add(f,{'word':'decode','kind':'f','menu':'string(const string)'})
let c['decode'] = f
let f = []
call add(f,{'word':'degrees','kind':'f','menu':'float(const float)'})
call add(f,{'word':'degrees','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'degrees','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'degrees','kind':'f','menu':'vector(const vector)'})
let c['degrees'] = f
let f = []
call add(f,{'word':'depthmap','kind':'f','menu':'float(const string,const float,const float)'})
call add(f,{'word':'depthmap','kind':'f','menu':'float(const string,const vector)'})
let c['depthmap'] = f
let f = []
call add(f,{'word':'detail','kind':'f','menu':'matrix2(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'float(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'float(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'int(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'string(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'float[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'float[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'int[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector[](const string,const string,const int)'})
let c['detail'] = f
let f = []
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix2(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix2(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix3(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix3(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'float(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'float(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'int(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'int(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector4(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector4(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'string(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'string(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector2(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector2(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix2[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix2[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix3[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix3[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'float[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'float[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'int[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'int[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector4[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector4[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'string[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'string[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector2[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector2[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector[](const string,const string,const int,int)'})
let c['detailattrib'] = f
let f = []
call add(f,{'word':'detailattribsize','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'detailattribsize','kind':'f','menu':'int(const string,const string)'})
let c['detailattribsize'] = f
let f = []
call add(f,{'word':'detailattribtype','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'detailattribtype','kind':'f','menu':'int(const string,const string)'})
let c['detailattribtype'] = f
let f = []
call add(f,{'word':'detailattribtypeinfo','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'detailattribtypeinfo','kind':'f','menu':'string(const string,const string)'})
let c['detailattribtypeinfo'] = f
let f = []
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix2(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix2(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix3(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix3(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'float(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'float(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'int(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector4(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector4(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'string(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector2(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector2(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix2[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix2[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix3[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix3[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'float[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'float[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'int[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector4[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector4[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector2[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector2[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector[](const string,const string)'})
let c['detailintrinsic'] = f
let f = []
call add(f,{'word':'determinant','kind':'f','menu':'float(const matrix2)'})
call add(f,{'word':'determinant','kind':'f','menu':'float(const matrix3)'})
call add(f,{'word':'determinant','kind':'f','menu':'float(const matrix)'})
let c['determinant'] = f
let f = []
call add(f,{'word':'diagonalizesymmetric','kind':'f','menu':'matrix3(const matrix3,vector)'})
let c['diagonalizesymmetric'] = f
let f = []
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf(const float)'})
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf(const vector,const float)'})
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf(const vector,const vector,const float)'})
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf(const vector,const vector)'})
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf(const vector)'})
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf()'})
let c['diffuse'] = f
let f = []
call add(f,{'word':'diffuseBRDF','kind':'f','menu':'float(const vector,const vector)'})
call add(f,{'word':'diffuseBRDF','kind':'f','menu':'float(const vector,const vector,const vector,const float)'})
let c['diffuseBRDF'] = f
let f = []
call add(f,{'word':'dihedral','kind':'f','menu':'matrix3(const vector,const vector)'})
call add(f,{'word':'dihedral','kind':'f','menu':'vector4(const vector,const vector)'})
let c['dihedral'] = f
let f = []
call add(f,{'word':'dimport','kind':'f','menu':'int(const string,export matrix2)'})
call add(f,{'word':'dimport','kind':'f','menu':'int(const string,export matrix3)'})
call add(f,{'word':'dimport','kind':'f','menu':'int(const string,export matrix)'})
call add(f,{'word':'dimport','kind':'f','menu':'int(const string,export float)'})
call add(f,{'word':'dimport','kind':'f','menu':'int(const string,export int)'})
call add(f,{'word':'dimport','kind':'f','menu':'int(const string,export vector4)'})
call add(f,{'word':'dimport','kind':'f','menu':'int(const string,export string)'})
call add(f,{'word':'dimport','kind':'f','menu':'int(const string,export vector2)'})
call add(f,{'word':'dimport','kind':'f','menu':'int(const string,export vector)'})
let c['dimport'] = f
let f = []
call add(f,{'word':'distance','kind':'f','menu':'float(const vector4,const vector4)'})
call add(f,{'word':'distance','kind':'f','menu':'float(const vector2,const vector2)'})
call add(f,{'word':'distance','kind':'f','menu':'float(const vector,const vector)'})
let c['distance'] = f
let f = []
call add(f,{'word':'distance2','kind':'f','menu':'float(const vector4,const vector4)'})
call add(f,{'word':'distance2','kind':'f','menu':'float(const vector2,const vector2)'})
call add(f,{'word':'distance2','kind':'f','menu':'float(const vector,const vector)'})
let c['distance2'] = f
let f = []
let c['div'] = f
let f = []
call add(f,{'word':'dot','kind':'f','menu':'float(const vector4,const vector4)'})
call add(f,{'word':'dot','kind':'f','menu':'float(const vector4,const vector)'})
call add(f,{'word':'dot','kind':'f','menu':'float(const vector2,const vector2)'})
call add(f,{'word':'dot','kind':'f','menu':'float(const vector,const vector4)'})
call add(f,{'word':'dot','kind':'f','menu':'float(const vector,const vector)'})
let c['dot'] = f
let f = []
call add(f,{'word':'dsmpixel','kind':'f','menu':'int(const string,const string,const int,const int,float[])'})
call add(f,{'word':'dsmpixel','kind':'f','menu':'int(const string,const string,const int,const int,vector4[])'})
call add(f,{'word':'dsmpixel','kind':'f','menu':'int(const string,const string,const int,const int,vector[])'})
let c['dsmpixel'] = f
let f = []
call add(f,{'word':'efit','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
call add(f,{'word':'efit','kind':'f','menu':'vector4(const vector4,const vector4,const vector4,const float,const float)'})
call add(f,{'word':'efit','kind':'f','menu':'vector4(const vector4,const vector4,const vector4,const vector4,const vector4)'})
call add(f,{'word':'efit','kind':'f','menu':'vector2(const vector2,const vector2,const vector2,const float,const float)'})
call add(f,{'word':'efit','kind':'f','menu':'vector2(const vector2,const vector2,const vector2,const vector2,const vector2)'})
call add(f,{'word':'efit','kind':'f','menu':'vector(const vector,const vector,const vector,const float,const float)'})
call add(f,{'word':'efit','kind':'f','menu':'vector(const vector,const vector,const vector,const vector,const vector)'})
let c['efit'] = f
let f = []
call add(f,{'word':'eigenvalues','kind':'f','menu':'void(int,const matrix3,vector,vector)'})
call add(f,{'word':'eigenvalues','kind':'f','menu':'int(const matrix3,vector,vector)'})
let c['eigenvalues'] = f
let f = []
let c['else'] = f
let f = []
call add(f,{'word':'encode','kind':'f','menu':'string(const string)'})
let c['encode'] = f
let f = []
let c['endel'] = f
let f = []
let c['endif'] = f
let f = []
let c['endnotif'] = f
let f = []
call add(f,{'word':'endswith','kind':'f','menu':'int(const string,const string)'})
let c['endswith'] = f
let f = []
call add(f,{'word':'environment','kind':'f','menu':'vector4(const string,const vector)'})
call add(f,{'word':'environment','kind':'f','menu':'vector4(const string,const vector,const float)'})
call add(f,{'word':'environment','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'environment','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'environment','kind':'f','menu':'vector(const string,const vector,const float)'})
call add(f,{'word':'environment','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector)'})
let c['environment'] = f
let f = []
let c['eq'] = f
let f = []
call add(f,{'word':'erf','kind':'f','menu':'float(const float)'})
call add(f,{'word':'erf','kind':'f','menu':'vector2(const vector2)'})
let c['erf'] = f
let f = []
call add(f,{'word':'erf_inv','kind':'f','menu':'float(const float)'})
let c['erf_inv'] = f
let f = []
call add(f,{'word':'erfc','kind':'f','menu':'float(const float)'})
let c['erfc'] = f
let f = []
call add(f,{'word':'error','kind':'f','menu':'void(const string)'})
let c['error'] = f
let f = []
call add(f,{'word':'eulertoquaternion','kind':'f','menu':'vector4(const vector,const int)'})
let c['eulertoquaternion'] = f
let f = []
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,float,const int)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,const int)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,const vector,float,const int)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,const vector,const int)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,const vector)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector)'})
let c['eval_bsdf'] = f
let f = []
call add(f,{'word':'exp','kind':'f','menu':'float(const float)'})
call add(f,{'word':'exp','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'exp','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'exp','kind':'f','menu':'vector(const vector)'})
let c['exp'] = f
let f = []
call add(f,{'word':'expand_udim','kind':'f','menu':'string(const float,const float,const string)'})
let c['expand_udim'] = f
let f = []
call add(f,{'word':'expandedgegroup','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'expandedgegroup','kind':'f','menu':'int[](const string,const string)'})
let c['expandedgegroup'] = f
let f = []
call add(f,{'word':'expandpointgroup','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'expandpointgroup','kind':'f','menu':'int[](const string,const string)'})
let c['expandpointgroup'] = f
let f = []
call add(f,{'word':'expandprimgroup','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'expandprimgroup','kind':'f','menu':'int[](const string,const string)'})
let c['expandprimgroup'] = f
let f = []
call add(f,{'word':'expandvertexgroup','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'expandvertexgroup','kind':'f','menu':'int[](const string,const string)'})
let c['expandvertexgroup'] = f
let f = []
call add(f,{'word':'fastshadow','kind':'f','menu':'float(const vector,const vector,const float)'})
let c['fastshadow'] = f
let f = []
call add(f,{'word':'filamentsample','kind':'f','menu':'vector(const int,const vector)'})
call add(f,{'word':'filamentsample','kind':'f','menu':'vector(const string,const vector)'})
let c['filamentsample'] = f
let f = []
call add(f,{'word':'file_stat','kind':'f','menu':'int(const string,int[])'})
let c['file_stat'] = f
let f = []
call add(f,{'word':'filtershadow','kind':'f','menu':'vector(const vector,const vector,const float)'})
let c['filtershadow'] = f
let f = []
call add(f,{'word':'filterstep','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'filterstep','kind':'f','menu':'float(const float,const float,const float)'})
let c['filterstep'] = f
let f = []
call add(f,{'word':'find','kind':'f','menu':'int(const string,const string)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string,const string,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix2[],const matrix2)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix2[],const matrix2,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix2[],const matrix2,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix3[],const matrix3)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix3[],const matrix3,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix3[],const matrix3,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix[],const matrix)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix[],const matrix,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix[],const matrix,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const float[],const float)'})
call add(f,{'word':'find','kind':'f','menu':'int(const float[],const float,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const float[],const float,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const int[],const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const int[],const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const int[],const int,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector4[],const vector4)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector4[],const vector4,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector4[],const vector4,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string[],const string)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string[],const string,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string[],const string,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector2[],const vector2)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector2[],const vector2,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector2[],const vector2,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector[],const vector)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector[],const vector,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector[],const vector,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string,const string)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string,const string,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix2[],const matrix2)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix2[],const matrix2,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix2[],const matrix2,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix3[],const matrix3)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix3[],const matrix3,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix3[],const matrix3,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix[],const matrix)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix[],const matrix,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix[],const matrix,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const float[],const float)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const float[],const float,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const float[],const float,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const int[],const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const int[],const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const int[],const int,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector4[],const vector4)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector4[],const vector4,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector4[],const vector4,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string[],const string)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string[],const string,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string[],const string,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector2[],const vector2)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector2[],const vector2,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector2[],const vector2,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector[],const vector)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector[],const vector,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector[],const vector,const int,const int)'})
let c['find'] = f
let f = []
call add(f,{'word':'findattribval','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const int,const string,const string,const int,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const int,const string,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const string,const string,const string,const int,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const string,const string,const string,const string)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const string,const string,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int[](const int,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int[](const int,const string,const string,const string)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int[](const string,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int[](const string,const string,const string,const string)'})
let c['findattribval'] = f
let f = []
call add(f,{'word':'findattribvalcount','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'findattribvalcount','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'findattribvalcount','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'findattribvalcount','kind':'f','menu':'int(const string,const string,const string,const string)'})
let c['findattribvalcount'] = f
let f = []
call add(f,{'word':'fit','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
call add(f,{'word':'fit','kind':'f','menu':'vector4(const vector4,const vector4,const vector4,const vector4,const vector4)'})
call add(f,{'word':'fit','kind':'f','menu':'vector2(const vector2,const vector2,const vector2,const vector2,const vector2)'})
call add(f,{'word':'fit','kind':'f','menu':'vector(const vector,const vector,const vector,const vector,const vector)'})
let c['fit'] = f
let f = []
call add(f,{'word':'fit01','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'fit01','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'fit01','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'fit01','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['fit01'] = f
let f = []
call add(f,{'word':'fit10','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'fit10','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'fit10','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'fit10','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['fit10'] = f
let f = []
call add(f,{'word':'fit11','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'fit11','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'fit11','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'fit11','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['fit11'] = f
let f = []
call add(f,{'word':'floor','kind':'f','menu':'float(const float)'})
call add(f,{'word':'floor','kind':'f','menu':'int(const float)'})
call add(f,{'word':'floor','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'floor','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'floor','kind':'f','menu':'vector(const vector)'})
let c['floor'] = f
let f = []
call add(f,{'word':'flownoise','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'float(const vector4,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'float(const vector,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'vector(const float,const float,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'vector(const vector4,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'vector(const vector,const float)'})
let c['flownoise'] = f
let f = []
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const float,const float,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const vector4,const int,const int,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const vector4,const vector4,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const vector,const int,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const vector,const vector,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const float,const float,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const vector4,const int,const int,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const vector4,const vector4,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const vector,const int,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const vector,const vector,const float)'})
let c['flowpnoise'] = f
let f = []
call add(f,{'word':'frac','kind':'f','menu':'float(const float)'})
call add(f,{'word':'frac','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'frac','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'frac','kind':'f','menu':'vector(const vector)'})
let c['frac'] = f
let f = []
call add(f,{'word':'fresnel','kind':'f','menu':'void(const vector,const vector,const float,float,float)'})
call add(f,{'word':'fresnel','kind':'f','menu':'float(const vector,const vector,const float,float)'})
call add(f,{'word':'fresnel','kind':'f','menu':'void(const vector,const vector,const float,float,float,vector,vector)'})
call add(f,{'word':'fresnel','kind':'f','menu':'float(const vector,const vector,const float,float,vector,vector)'})
let c['fresnel'] = f
let f = []
call add(f,{'word':'fromNDC','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'fromNDC','kind':'f','menu':'vector(const vector)'})
let c['fromNDC'] = f
let f = []
call add(f,{'word':'frontface','kind':'f','menu':'vector(const vector,const vector)'})
call add(f,{'word':'frontface','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['frontface'] = f
let f = []
call add(f,{'word':'fuzzify','kind':'f','menu':'float(const string[],const float[],const float[],const float,const float,const float)'})
let c['fuzzify'] = f
let f = []
call add(f,{'word':'fuzzy_and','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_and','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_and'] = f
let f = []
call add(f,{'word':'fuzzy_defuzz_centroid','kind':'f','menu':'float(const float[],const float,const float)'})
let c['fuzzy_defuzz_centroid'] = f
let f = []
call add(f,{'word':'fuzzy_nand','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_nand','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_nand'] = f
let f = []
call add(f,{'word':'fuzzy_nor','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_nor','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_nor'] = f
let f = []
call add(f,{'word':'fuzzy_not','kind':'f','menu':'float(const float)'})
call add(f,{'word':'fuzzy_not','kind':'f','menu':'int(const int)'})
let c['fuzzy_not'] = f
let f = []
call add(f,{'word':'fuzzy_nxor','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_nxor','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_nxor'] = f
let f = []
call add(f,{'word':'fuzzy_or','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_or','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_or'] = f
let f = []
call add(f,{'word':'fuzzy_xor','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_xor','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_xor'] = f
let f = []
let c['ge'] = f
let f = []
call add(f,{'word':'geoself','kind':'f','menu':'int()'})
let c['geoself'] = f
let f = []
call add(f,{'word':'geounwrap','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'geounwrap','kind':'f','menu':'string(const string,const string)'})
let c['geounwrap'] = f
let f = []
call add(f,{'word':'getattrib','kind':'f','menu':'matrix2(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix2(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix3(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix3(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'float(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'float(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'int(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'int(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector4(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector4(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'string(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'string(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector2(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector2(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix2[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix2[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix3[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix3[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'float[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'float[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'int[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'int[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector4[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector4[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'string[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'string[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector2[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector2[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector[](const string,const string,const string,const int,int)'})
let c['getattrib'] = f
let f = []
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,matrix3,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,matrix,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,float,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,int,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,vector4,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,string,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,vector,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,float[],const string,const string,const int,const int)'})
let c['getattribute'] = f
let f = []
call add(f,{'word':'getbbox','kind':'f','menu':'void(const int,const string,vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(const int,const string,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'void(const int,vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(const int,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'void(const string,const string,vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(const string,const string,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'void(const string,vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(const string,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'void(vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(vector)'})
let c['getbbox'] = f
let f = []
call add(f,{'word':'getbbox_center','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getbbox_center','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getbbox_center','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getbbox_center','kind':'f','menu':'vector(const string,const string)'})
let c['getbbox_center'] = f
let f = []
call add(f,{'word':'getbbox_max','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getbbox_max','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getbbox_max','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getbbox_max','kind':'f','menu':'vector(const string,const string)'})
let c['getbbox_max'] = f
let f = []
call add(f,{'word':'getbbox_min','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getbbox_min','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getbbox_min','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getbbox_min','kind':'f','menu':'vector(const string,const string)'})
let c['getbbox_min'] = f
let f = []
call add(f,{'word':'getbbox_size','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getbbox_size','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getbbox_size','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getbbox_size','kind':'f','menu':'vector(const string,const string)'})
let c['getbbox_size'] = f
let f = []
call add(f,{'word':'getblurP','kind':'f','menu':'vector(const float)'})
let c['getblurP'] = f
let f = []
call add(f,{'word':'getbounces','kind':'f','menu':'int(const bsdf)'})
let c['getbounces'] = f
let f = []
call add(f,{'word':'getbounds','kind':'f','menu':'int(const string,const string,vector,vector)'})
call add(f,{'word':'getbounds','kind':'f','menu':'int(const string,vector,vector)'})
let c['getbounds'] = f
let f = []
call add(f,{'word':'getcomp','kind':'f','menu':'matrix2(const matrix2[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'matrix3(const matrix3[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'matrix(const matrix[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'bsdf(const bsdf[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'light(const light[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'material(const material[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const matrix2,const int,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const matrix3,const int,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const matrix,const int,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const vector4,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const vector2,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const vector,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const float[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'int(const int[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'vector4(const vector4[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'string(const string,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'string(const string[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'vector2(const vector2[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'vector(const vector[],const int)'})
let c['getcomp'] = f
let f = []
call add(f,{'word':'getcomponents','kind':'f','menu':'string[]()'})
let c['getcomponents'] = f
let f = []
call add(f,{'word':'getderiv','kind':'f','menu':'void(const float,const string,const int,const float,const float,float,float)'})
call add(f,{'word':'getderiv','kind':'f','menu':'float(const float,const string,const int,const float,const float,float)'})
call add(f,{'word':'getderiv','kind':'f','menu':'void(const vector4,const string,const int,const float,const float,vector4,vector4)'})
call add(f,{'word':'getderiv','kind':'f','menu':'vector4(const vector4,const string,const int,const float,const float,vector4)'})
call add(f,{'word':'getderiv','kind':'f','menu':'void(const vector,const string,const int,const float,const float,vector,vector)'})
call add(f,{'word':'getderiv','kind':'f','menu':'vector(const vector,const string,const int,const float,const float,vector)'})
let c['getderiv'] = f
let f = []
let c['getelem'] = f
let f = []
call add(f,{'word':'getfogname','kind':'f','menu':'string()'})
let c['getfogname'] = f
let f = []
call add(f,{'word':'getglobalraylevel','kind':'f','menu':'int()'})
let c['getglobalraylevel'] = f
let f = []
call add(f,{'word':'getgroupid','kind':'f','menu':'int()'})
let c['getgroupid'] = f
let f = []
call add(f,{'word':'getlight','kind':'f','menu':'light(const int)'})
let c['getlight'] = f
let f = []
call add(f,{'word':'getlightname','kind':'f','menu':'string()'})
let c['getlightname'] = f
let f = []
call add(f,{'word':'getlights','kind':'f','menu':'int[](const material,const vector)'})
let c['getlights'] = f
let f = []
call add(f,{'word':'getlightscope','kind':'f','menu':'void(const material,string,string)'})
call add(f,{'word':'getlightscope','kind':'f','menu':'string(const material,string)'})
let c['getlightscope'] = f
let f = []
call add(f,{'word':'getlocalcurvature','kind':'f','menu':'vector(const float,const float)'})
let c['getlocalcurvature'] = f
let f = []
call add(f,{'word':'getmaterial','kind':'f','menu':'material()'})
let c['getmaterial'] = f
let f = []
call add(f,{'word':'getmaterialid','kind':'f','menu':'int()'})
let c['getmaterialid'] = f
let f = []
call add(f,{'word':'getobjectid','kind':'f','menu':'int()'})
let c['getobjectid'] = f
let f = []
call add(f,{'word':'getobjectname','kind':'f','menu':'string()'})
let c['getobjectname'] = f
let f = []
call add(f,{'word':'getpackedtransform','kind':'f','menu':'matrix(const int,const int)'})
let c['getpackedtransform'] = f
let f = []
call add(f,{'word':'getphotonlight','kind':'f','menu':'int()'})
let c['getphotonlight'] = f
let f = []
call add(f,{'word':'getpointbbox','kind':'f','menu':'void(const int,const string,vector,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'vector(const int,const string,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'void(const int,vector,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'vector(const int,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'void(const string,const string,vector,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'vector(const string,const string,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'void(const string,vector,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'vector(const string,vector)'})
let c['getpointbbox'] = f
let f = []
call add(f,{'word':'getpointbbox_center','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getpointbbox_center','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getpointbbox_center','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getpointbbox_center','kind':'f','menu':'vector(const string,const string)'})
let c['getpointbbox_center'] = f
let f = []
call add(f,{'word':'getpointbbox_max','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getpointbbox_max','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getpointbbox_max','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getpointbbox_max','kind':'f','menu':'vector(const string,const string)'})
let c['getpointbbox_max'] = f
let f = []
call add(f,{'word':'getpointbbox_min','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getpointbbox_min','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getpointbbox_min','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getpointbbox_min','kind':'f','menu':'vector(const string,const string)'})
let c['getpointbbox_min'] = f
let f = []
call add(f,{'word':'getpointbbox_size','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getpointbbox_size','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getpointbbox_size','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getpointbbox_size','kind':'f','menu':'vector(const string,const string)'})
let c['getpointbbox_size'] = f
let f = []
call add(f,{'word':'getprimid','kind':'f','menu':'int()'})
let c['getprimid'] = f
let f = []
call add(f,{'word':'getptextureid','kind':'f','menu':'int()'})
let c['getptextureid'] = f
let f = []
call add(f,{'word':'getraylevel','kind':'f','menu':'int()'})
let c['getraylevel'] = f
let f = []
call add(f,{'word':'getrayweight','kind':'f','menu':'float()'})
let c['getrayweight'] = f
let f = []
call add(f,{'word':'getsamplestore','kind':'f','menu':'int(const string,const vector,float)'})
call add(f,{'word':'getsamplestore','kind':'f','menu':'int(const string,const vector,int)'})
call add(f,{'word':'getsamplestore','kind':'f','menu':'int(const string,const vector,vector4)'})
call add(f,{'word':'getsamplestore','kind':'f','menu':'int(const string,const vector,vector)'})
let c['getsamplestore'] = f
let f = []
call add(f,{'word':'getscope','kind':'f','menu':'void(const material,const string,string,string)'})
call add(f,{'word':'getscope','kind':'f','menu':'string(const material,const string,string)'})
let c['getscope'] = f
let f = []
call add(f,{'word':'getsmoothP','kind':'f','menu':'int(vector,const vector)'})
call add(f,{'word':'getsmoothP','kind':'f','menu':'vector()'})
let c['getsmoothP'] = f
let f = []
call add(f,{'word':'getspace','kind':'f','menu':'matrix(const string,const string)'})
let c['getspace'] = f
let f = []
call add(f,{'word':'getuvtangents','kind':'f','menu':'void(const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'getuvtangents','kind':'f','menu':'vector(const string,const vector,const vector,vector)'})
call add(f,{'word':'getuvtangents','kind':'f','menu':'void(const string,const vector,const vector,vector,vector,vector)'})
call add(f,{'word':'getuvtangents','kind':'f','menu':'vector(const string,const vector,const vector,vector,vector)'})
let c['getuvtangents'] = f
let f = []
call add(f,{'word':'gradient','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'gradient','kind':'f','menu':'vector(const vector,const float)'})
let c['gradient'] = f
let f = []
call add(f,{'word':'gradient3d','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['gradient3d'] = f
let f = []
let c['gt'] = f
let f = []
call add(f,{'word':'hair','kind':'f','menu':'bsdf(const vector,const vector,const float,const float,const float,const float,const float)'})
call add(f,{'word':'hair','kind':'f','menu':'bsdf(const vector,const vector,const float,const float,const float)'})
call add(f,{'word':'hair','kind':'f','menu':'bsdf(const vector,const vector,const float,const float)'})
let c['hair'] = f
let f = []
call add(f,{'word':'has_udim','kind':'f','menu':'int(const string)'})
let c['has_udim'] = f
let f = []
call add(f,{'word':'hasattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'hasattrib','kind':'f','menu':'int(const string,const string,const string)'})
let c['hasattrib'] = f
let f = []
call add(f,{'word':'hasdetailattrib','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'hasdetailattrib','kind':'f','menu':'int(const string,const string)'})
let c['hasdetailattrib'] = f
let f = []
call add(f,{'word':'haslight','kind':'f','menu':'int(const material,const vector,const int)'})
let c['haslight'] = f
let f = []
call add(f,{'word':'haspointattrib','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'haspointattrib','kind':'f','menu':'int(const string,const string)'})
let c['haspointattrib'] = f
let f = []
call add(f,{'word':'hasprimattrib','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'hasprimattrib','kind':'f','menu':'int(const string,const string)'})
let c['hasprimattrib'] = f
let f = []
call add(f,{'word':'hasvertexattrib','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'hasvertexattrib','kind':'f','menu':'int(const string,const string)'})
let c['hasvertexattrib'] = f
let f = []
call add(f,{'word':'hedge_dstpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_dstpoint','kind':'f','menu':'int(const string,const int)'})
let c['hedge_dstpoint'] = f
let f = []
call add(f,{'word':'hedge_dstvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_dstvertex','kind':'f','menu':'int(const string,const int)'})
let c['hedge_dstvertex'] = f
let f = []
call add(f,{'word':'hedge_equivcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_equivcount','kind':'f','menu':'int(const string,const int)'})
let c['hedge_equivcount'] = f
let f = []
call add(f,{'word':'hedge_isequiv','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'hedge_isequiv','kind':'f','menu':'int(const string,const int,const int)'})
let c['hedge_isequiv'] = f
let f = []
call add(f,{'word':'hedge_isprimary','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_isprimary','kind':'f','menu':'int(const string,const int)'})
let c['hedge_isprimary'] = f
let f = []
call add(f,{'word':'hedge_isvalid','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_isvalid','kind':'f','menu':'int(const string,const int)'})
let c['hedge_isvalid'] = f
let f = []
call add(f,{'word':'hedge_next','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_next','kind':'f','menu':'int(const string,const int)'})
let c['hedge_next'] = f
let f = []
call add(f,{'word':'hedge_nextequiv','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_nextequiv','kind':'f','menu':'int(const string,const int)'})
let c['hedge_nextequiv'] = f
let f = []
call add(f,{'word':'hedge_postdstpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_postdstpoint','kind':'f','menu':'int(const string,const int)'})
let c['hedge_postdstpoint'] = f
let f = []
call add(f,{'word':'hedge_postdstvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_postdstvertex','kind':'f','menu':'int(const string,const int)'})
let c['hedge_postdstvertex'] = f
let f = []
call add(f,{'word':'hedge_presrcpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_presrcpoint','kind':'f','menu':'int(const string,const int)'})
let c['hedge_presrcpoint'] = f
let f = []
call add(f,{'word':'hedge_presrcvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_presrcvertex','kind':'f','menu':'int(const string,const int)'})
let c['hedge_presrcvertex'] = f
let f = []
call add(f,{'word':'hedge_prev','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_prev','kind':'f','menu':'int(const string,const int)'})
let c['hedge_prev'] = f
let f = []
call add(f,{'word':'hedge_prim','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_prim','kind':'f','menu':'int(const string,const int)'})
let c['hedge_prim'] = f
let f = []
call add(f,{'word':'hedge_primary','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_primary','kind':'f','menu':'int(const string,const int)'})
let c['hedge_primary'] = f
let f = []
call add(f,{'word':'hedge_srcpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_srcpoint','kind':'f','menu':'int(const string,const int)'})
let c['hedge_srcpoint'] = f
let f = []
call add(f,{'word':'hedge_srcvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_srcvertex','kind':'f','menu':'int(const string,const int)'})
let c['hedge_srcvertex'] = f
let f = []
call add(f,{'word':'henyeygreenstein','kind':'f','menu':'bsdf(const float)'})
let c['henyeygreenstein'] = f
let f = []
call add(f,{'word':'hscript_noise','kind':'f','menu':'float(const vector)'})
let c['hscript_noise'] = f
let f = []
call add(f,{'word':'hscript_rand','kind':'f','menu':'float(const float)'})
call add(f,{'word':'hscript_rand','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'hscript_rand','kind':'f','menu':'vector(const float)'})
let c['hscript_rand'] = f
let f = []
call add(f,{'word':'hscript_snoise','kind':'f','menu':'float(const vector)'})
let c['hscript_snoise'] = f
let f = []
call add(f,{'word':'hscript_sturb','kind':'f','menu':'float(const vector,const int)'})
let c['hscript_sturb'] = f
let f = []
call add(f,{'word':'hscript_turb','kind':'f','menu':'float(const vector,const int)'})
let c['hscript_turb'] = f
let f = []
call add(f,{'word':'hsvtorgb','kind':'f','menu':'vector(const float,const float,const float)'})
call add(f,{'word':'hsvtorgb','kind':'f','menu':'vector(const vector)'})
let c['hsvtorgb'] = f
let f = []
call add(f,{'word':'ident','kind':'f','menu':'matrix2()'})
call add(f,{'word':'ident','kind':'f','menu':'matrix3()'})
call add(f,{'word':'ident','kind':'f','menu':'matrix()'})
let c['ident'] = f
let f = []
call add(f,{'word':'idtopoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'idtopoint','kind':'f','menu':'int(const string,const int)'})
let c['idtopoint'] = f
let f = []
call add(f,{'word':'idtoprim','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'idtoprim','kind':'f','menu':'int(const string,const int)'})
let c['idtoprim'] = f
let f = []
let c['if'] = f
let f = []
call add(f,{'word':'inedgegroup','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'inedgegroup','kind':'f','menu':'int(const string,const string,const int,const int)'})
let c['inedgegroup'] = f
let f = []
call add(f,{'word':'inpointgroup','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'inpointgroup','kind':'f','menu':'int(const string,const string,const int)'})
let c['inpointgroup'] = f
let f = []
call add(f,{'word':'inprimgroup','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'inprimgroup','kind':'f','menu':'int(const string,const string,const int)'})
let c['inprimgroup'] = f
let f = []
call add(f,{'word':'insert','kind':'f','menu':'void(export string,const int,const string)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix2[],const int,const matrix2)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix2[],const int,const matrix2[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix3[],const int,const matrix3)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix3[],const int,const matrix3[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix[],const int,const matrix)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix[],const int,const matrix[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export float[],const int,const float)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export float[],const int,const float[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export int[],const int,const int)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export int[],const int,const int[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector4[],const int,const vector4)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector4[],const int,const vector4[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export string[],const int,const string)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export string[],const int,const string[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector2[],const int,const vector2)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector2[],const int,const vector2[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector[],const int,const vector)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector[],const int,const vector[])'})
let c['insert'] = f
let f = []
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector4,const vector4)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector4,const vector4,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector4,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector4,const vector,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector)'})
let c['instance'] = f
let f = []
call add(f,{'word':'integrate3d','kind':'f','menu':'float(const string,const string,const vector,const vector)'})
call add(f,{'word':'integrate3d','kind':'f','menu':'vector4(const string,const string,const vector,const vector)'})
call add(f,{'word':'integrate3d','kind':'f','menu':'vector(const string,const string,const vector,const vector)'})
let c['integrate3d'] = f
let f = []
call add(f,{'word':'integrate3dClip','kind':'f','menu':'int(const string,const string,export vector,export vector,const float)'})
let c['integrate3dClip'] = f
let f = []
call add(f,{'word':'interpolate','kind':'f','menu':'bsdf(const bsdf,const float,const float)'})
call add(f,{'word':'interpolate','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'interpolate','kind':'f','menu':'vector4(const vector4,const float,const float)'})
call add(f,{'word':'interpolate','kind':'f','menu':'vector(const vector,const float,const float)'})
let c['interpolate'] = f
let f = []
call add(f,{'word':'intersect','kind':'f','menu':'int(const int,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const int,const vector,const vector,vector,float,float)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const int,const vector,const vector,vector,vector)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const string,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const string,const vector,const vector,vector,float,float)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const string,const vector,const vector,vector,vector)'})
let c['intersect'] = f
let f = []
call add(f,{'word':'intersect3d','kind':'f','menu':'int(const string,const string,const vector,const vector,const float)'})
let c['intersect3d'] = f
let f = []
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const int,const string,const vector,const vector,vector[],int[],vector[])'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const int,const string,const vector,const vector,vector[],int[],vector[],const float,const float)'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const int,const vector,const vector,vector[],int[],vector[])'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const int,const vector,const vector,vector[],int[],vector[],const float,const float)'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const string,const string,const vector,const vector,vector[],int[],vector[])'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const string,const string,const vector,const vector,vector[],int[],vector[],const float,const float)'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const string,const vector,const vector,vector[],int[],vector[])'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const string,const vector,const vector,vector[],int[],vector[],const float,const float)'})
let c['intersect_all'] = f
let f = []
call add(f,{'word':'invert','kind':'f','menu':'matrix2(const matrix2)'})
call add(f,{'word':'invert','kind':'f','menu':'matrix3(const matrix3)'})
call add(f,{'word':'invert','kind':'f','menu':'matrix(const matrix)'})
let c['invert'] = f
let f = []
call add(f,{'word':'invertexgroup','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'invertexgroup','kind':'f','menu':'int(const string,const string,const int)'})
let c['invertexgroup'] = f
let f = []
call add(f,{'word':'irradiance','kind':'f','menu':'vector(const vector,const vector)'})
let c['irradiance'] = f
let f = []
call add(f,{'word':'isalpha','kind':'f','menu':'int(const string)'})
let c['isalpha'] = f
let f = []
call add(f,{'word':'isbound','kind':'f','menu':'int(const string)'})
let c['isbound'] = f
let f = []
call add(f,{'word':'isdigit','kind':'f','menu':'int(const string)'})
let c['isdigit'] = f
let f = []
call add(f,{'word':'isfinite','kind':'f','menu':'int(const float)'})
let c['isfinite'] = f
let f = []
call add(f,{'word':'isfogray','kind':'f','menu':'int()'})
let c['isfogray'] = f
let f = []
call add(f,{'word':'isnan','kind':'f','menu':'int(const float)'})
let c['isnan'] = f
let f = []
call add(f,{'word':'isotropic','kind':'f','menu':'bsdf()'})
let c['isotropic'] = f
let f = []
call add(f,{'word':'israytracing','kind':'f','menu':'int()'})
let c['israytracing'] = f
let f = []
call add(f,{'word':'isuvrendering','kind':'f','menu':'int()'})
let c['isuvrendering'] = f
let f = []
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(const string,const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export matrix2[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export matrix3[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export matrix[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export float[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export int[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export vector4[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export string[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export vector2[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export vector[],const int)'})
let c['isvalidindex'] = f
let f = []
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix2)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix3)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const bsdf)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const light)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const material)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const float)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const int)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector4)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const string)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector2)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix2[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix3[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const bsdf[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const light[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const material[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const float[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector4[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const string[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector2[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector[])'})
let c['isvarying'] = f
let f = []
call add(f,{'word':'itoa','kind':'f','menu':'string(const int)'})
let c['itoa'] = f
let f = []
call add(f,{'word':'join','kind':'f','menu':'string(const string[],const string)'})
let c['join'] = f
let f = []
let c['jump'] = f
let f = []
call add(f,{'word':'kspline','kind':'f','menu':'float(const string,const float,const float,const float)'})
call add(f,{'word':'kspline','kind':'f','menu':'vector4(const string,const float,const vector4,const float)'})
call add(f,{'word':'kspline','kind':'f','menu':'vector(const string,const float,const vector,const float)'})
let c['kspline'] = f
let f = []
let c['le'] = f
let f = []
call add(f,{'word':'len','kind':'f','menu':'int(const matrix2)'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix3)'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix)'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector4)'})
call add(f,{'word':'len','kind':'f','menu':'int(const string)'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector2)'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector)'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix2[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix3[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const bsdf[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const light[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const material[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const float[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector4[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const string[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector2[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector[])'})
let c['len'] = f
let f = []
call add(f,{'word':'length','kind':'f','menu':'float(const float)'})
call add(f,{'word':'length','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'length','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'length','kind':'f','menu':'float(const vector)'})
let c['length'] = f
let f = []
call add(f,{'word':'length2','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'length2','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'length2','kind':'f','menu':'float(const vector)'})
let c['length2'] = f
let f = []
call add(f,{'word':'lerp','kind':'f','menu':'bsdf(const bsdf,const bsdf,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector4(const vector4,const vector4,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector2(const vector2,const vector2,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector(const vector,const vector,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['lerp'] = f
let f = []
call add(f,{'word':'lightbounces','kind':'f','menu':'int(const light)'})
let c['lightbounces'] = f
let f = []
call add(f,{'word':'lightid','kind':'f','menu':'int(const light)'})
let c['lightid'] = f
let f = []
call add(f,{'word':'limit_sample_space','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'limit_sample_space','kind':'f','menu':'float(const float,const float,const float)'})
let c['limit_sample_space'] = f
let f = []
call add(f,{'word':'lkspline','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'lkspline','kind':'f','menu':'vector4(const float,const vector4,const float)'})
call add(f,{'word':'lkspline','kind':'f','menu':'vector(const float,const vector,const float)'})
let c['lkspline'] = f
let f = []
call add(f,{'word':'log','kind':'f','menu':'float(const float)'})
call add(f,{'word':'log','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'log','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'log','kind':'f','menu':'vector(const vector)'})
let c['log'] = f
let f = []
call add(f,{'word':'log10','kind':'f','menu':'float(const float)'})
call add(f,{'word':'log10','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'log10','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'log10','kind':'f','menu':'vector(const vector)'})
let c['log10'] = f
let f = []
call add(f,{'word':'lookat','kind':'f','menu':'matrix3(const vector,const vector)'})
call add(f,{'word':'lookat','kind':'f','menu':'matrix3(const vector,const vector,const float)'})
call add(f,{'word':'lookat','kind':'f','menu':'matrix3(const vector,const vector,const vector)'})
call add(f,{'word':'lookat','kind':'f','menu':'vector(const vector,const vector,const float,const int)'})
call add(f,{'word':'lookat','kind':'f','menu':'vector(const vector,const vector,const vector,const int)'})
let c['lookat'] = f
let f = []
let c['loop'] = f
let f = []
call add(f,{'word':'lspline','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'lspline','kind':'f','menu':'vector4(const float,const vector4)'})
call add(f,{'word':'lspline','kind':'f','menu':'vector(const float,const vector)'})
let c['lspline'] = f
let f = []
call add(f,{'word':'lstrip','kind':'f','menu':'string(const string)'})
call add(f,{'word':'lstrip','kind':'f','menu':'string(const string,const string)'})
let c['lstrip'] = f
let f = []
let c['lt'] = f
let f = []
call add(f,{'word':'luminance','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'luminance','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'luminance','kind':'f','menu':'float(const vector)'})
let c['luminance'] = f
let f = []
call add(f,{'word':'makebasis','kind':'f','menu':'void(vector,vector,const vector)'})
call add(f,{'word':'makebasis','kind':'f','menu':'vector(vector,const vector)'})
call add(f,{'word':'makebasis','kind':'f','menu':'void(export vector,export vector,const vector,const vector)'})
let c['makebasis'] = f
let f = []
call add(f,{'word':'maketransform','kind':'f','menu':'matrix3(const int,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix3(const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const int,const int,const vector,const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const int,const int,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const int,const int,const vector,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const int,const int,const vector,const vector,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const vector,const vector,const vector)'})
let c['maketransform'] = f
let f = []
call add(f,{'word':'mask_bsdf','kind':'f','menu':'bsdf(const bsdf,const int)'})
let c['mask_bsdf'] = f
let f = []
call add(f,{'word':'match','kind':'f','menu':'int(const string,const string)'})
let c['match'] = f
let f = []
call add(f,{'word':'matchvex_blinn','kind':'f','menu':'bsdf(const float)'})
call add(f,{'word':'matchvex_blinn','kind':'f','menu':'bsdf(const vector,const float)'})
let c['matchvex_blinn'] = f
let f = []
call add(f,{'word':'matchvex_specular','kind':'f','menu':'bsdf(const float)'})
call add(f,{'word':'matchvex_specular','kind':'f','menu':'bsdf(const vector,const float)'})
let c['matchvex_specular'] = f
let f = []
call add(f,{'word':'max','kind':'f','menu':'float(const float)'})
call add(f,{'word':'max','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'max','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'max','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'max','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'max','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'max','kind':'f','menu':'int(const int)'})
call add(f,{'word':'max','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'max','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'max','kind':'f','menu':'vector4(const vector4,const vector4)'})
call add(f,{'word':'max','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'max','kind':'f','menu':'vector2(const vector2,const vector2)'})
call add(f,{'word':'max','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'max','kind':'f','menu':'vector(const vector,const vector)'})
call add(f,{'word':'max','kind':'f','menu':'vector(const vector[])'})
let c['max'] = f
let f = []
let c['measured'] = f
let f = []
let c['merge'] = f
let f = []
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,matrix2)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,matrix3)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,matrix)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,float)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,int)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,vector4)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,vector2)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'matrix3[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'matrix[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'float[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'vector4[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'vector[](const string,const string,const vector)'})
let c['metaimport'] = f
let f = []
call add(f,{'word':'metamarch','kind':'f','menu':'int(export int,const string,export vector,export vector,const float)'})
let c['metamarch'] = f
let f = []
call add(f,{'word':'metanext','kind':'f','menu':'int(const int)'})
let c['metanext'] = f
let f = []
call add(f,{'word':'metastart','kind':'f','menu':'int(const string,const vector)'})
let c['metastart'] = f
let f = []
call add(f,{'word':'metaweight','kind':'f','menu':'float(const string,const vector)'})
let c['metaweight'] = f
let f = []
call add(f,{'word':'min','kind':'f','menu':'float(const float)'})
call add(f,{'word':'min','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'min','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'min','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'min','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'min','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'min','kind':'f','menu':'int(const int)'})
call add(f,{'word':'min','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'min','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'min','kind':'f','menu':'vector4(const vector4,const vector4)'})
call add(f,{'word':'min','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'min','kind':'f','menu':'vector2(const vector2,const vector2)'})
call add(f,{'word':'min','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'min','kind':'f','menu':'vector(const vector,const vector)'})
call add(f,{'word':'min','kind':'f','menu':'vector(const vector[])'})
let c['min'] = f
let f = []
call add(f,{'word':'minpos','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const int,const string,const vector,const float)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const int,const vector)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const int,const vector,const float)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const string,const string,const vector,const float)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const string,const vector,const float)'})
let c['minpos'] = f
let f = []
let c['mod'] = f
let f = []
let c['mul'] = f
let f = []
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,const float,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,const float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,const float,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,const float,float,float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,const float,int,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,const float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,int,float,float,float,float,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,float,float,float,float,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,int,float,float,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,float,float,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector4,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector4,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector4,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector4,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector4,int,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector4,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector2,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector2,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector2,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector2,float,float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector2,int,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector2,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector,int,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector,int,float,float,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector,float,float,const int,const int,const int)'})
let c['mwnoise'] = f
let f = []
call add(f,{'word':'nametopoint','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nametopoint','kind':'f','menu':'int(const string,const string)'})
let c['nametopoint'] = f
let f = []
call add(f,{'word':'nametoprim','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nametoprim','kind':'f','menu':'int(const string,const string)'})
let c['nametoprim'] = f
let f = []
call add(f,{'word':'nbouncetypes','kind':'f','menu':'int()'})
let c['nbouncetypes'] = f
let f = []
let c['ne'] = f
let f = []
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const int,const string,const vector,const float)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const int,const vector)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const int,const vector,const float)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const string,const string,const vector)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const string,const string,const vector,const float)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const string,const vector)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const string,const vector,const float)'})
let c['nearpoint'] = f
let f = []
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const int,const string,const vector,const float)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const int,const string,const vector,const float,const int)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const int,const vector,const float)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const int,const vector,const float,const int)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const string,const string,const vector,const float)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const string,const string,const vector,const float,const int)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const string,const vector,const float)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const string,const vector,const float,const int)'})
let c['nearpoints'] = f
let f = []
call add(f,{'word':'nedgesgroup','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nedgesgroup','kind':'f','menu':'int(const string,const string)'})
let c['nedgesgroup'] = f
let f = []
let c['neg'] = f
let f = []
call add(f,{'word':'neighbour','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'neighbour','kind':'f','menu':'int(const string,const int,const int)'})
let c['neighbour'] = f
let f = []
call add(f,{'word':'neighbourcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'neighbourcount','kind':'f','menu':'int(const string,const int)'})
let c['neighbourcount'] = f
let f = []
call add(f,{'word':'neighbours','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'neighbours','kind':'f','menu':'int[](const string,const int)'})
let c['neighbours'] = f
let f = []
call add(f,{'word':'newsampler','kind':'f','menu':'int()'})
call add(f,{'word':'newsampler','kind':'f','menu':'int(const int)'})
let c['newsampler'] = f
let f = []
call add(f,{'word':'nextsample','kind':'f','menu':'void(export int,float,float)'})
call add(f,{'word':'nextsample','kind':'f','menu':'float(export int,float)'})
call add(f,{'word':'nextsample','kind':'f','menu':'void(export int,vector)'})
call add(f,{'word':'nextsample','kind':'f','menu':'vector(export int)'})
let c['nextsample'] = f
let f = []
let c['ngather'] = f
let f = []
call add(f,{'word':'noise','kind':'f','menu':'float(const float)'})
call add(f,{'word':'noise','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'noise','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'noise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'noise','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'noise','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'noise','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'noise','kind':'f','menu':'vector(const vector)'})
let c['noise'] = f
let f = []
call add(f,{'word':'noised','kind':'f','menu':'void(const float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'float(const float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const float,const float,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'float(const float,const float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const float,const float,vector,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'vector(const float,const float,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const float,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'vector(const float,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const vector4,float,float,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'float(const vector4,float,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const vector4,vector,vector,vector,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'vector(const vector4,vector,vector,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const vector,float,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'float(const vector,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const vector,vector,vector,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'vector(const vector,vector,vector,vector)'})
let c['noised'] = f
let f = []
let c['nop'] = f
let f = []
call add(f,{'word':'normal_bsdf','kind':'f','menu':'vector(const bsdf)'})
let c['normal_bsdf'] = f
let f = []
call add(f,{'word':'normalize','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'normalize','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'normalize','kind':'f','menu':'vector(const vector)'})
let c['normalize'] = f
let f = []
let c['not'] = f
let f = []
let c['notif'] = f
let f = []
call add(f,{'word':'npoints','kind':'f','menu':'int(const int)'})
call add(f,{'word':'npoints','kind':'f','menu':'int(const string)'})
let c['npoints'] = f
let f = []
call add(f,{'word':'npointsgroup','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'npointsgroup','kind':'f','menu':'int(const string,const string)'})
let c['npointsgroup'] = f
let f = []
call add(f,{'word':'nprimitives','kind':'f','menu':'int(const int)'})
call add(f,{'word':'nprimitives','kind':'f','menu':'int(const string)'})
let c['nprimitives'] = f
let f = []
call add(f,{'word':'nprimitivesgroup','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nprimitivesgroup','kind':'f','menu':'int(const string,const string)'})
let c['nprimitivesgroup'] = f
let f = []
call add(f,{'word':'nrandom','kind':'f','menu':'float()'})
call add(f,{'word':'nrandom','kind':'f','menu':'void(float,float)'})
call add(f,{'word':'nrandom','kind':'f','menu':'float(float)'})
call add(f,{'word':'nrandom','kind':'f','menu':'vector4()'})
call add(f,{'word':'nrandom','kind':'f','menu':'vector()'})
let c['nrandom'] = f
let f = []
call add(f,{'word':'ntransform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'ntransform','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'ntransform','kind':'f','menu':'vector(const vector,const matrix)'})
let c['ntransform'] = f
let f = []
call add(f,{'word':'nuniqueval','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'nuniqueval','kind':'f','menu':'int(const string,const string,const string)'})
let c['nuniqueval'] = f
let f = []
call add(f,{'word':'nvertices','kind':'f','menu':'int(const int)'})
call add(f,{'word':'nvertices','kind':'f','menu':'int(const string)'})
let c['nvertices'] = f
let f = []
call add(f,{'word':'nverticesgroup','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nverticesgroup','kind':'f','menu':'int(const string,const string)'})
let c['nverticesgroup'] = f
let f = []
call add(f,{'word':'occlusion','kind':'f','menu':'void(float,vector,const vector,const vector)'})
call add(f,{'word':'occlusion','kind':'f','menu':'float(vector,const vector,const vector)'})
call add(f,{'word':'occlusion','kind':'f','menu':'vector(const vector,const vector)'})
let c['occlusion'] = f
let f = []
call add(f,{'word':'ocean_sample','kind':'f','menu':'vector(const string,const int,const int,const int,const float,const float,const int,const int,const vector)'})
let c['ocean_sample'] = f
let f = []
call add(f,{'word':'ocio_activedisplays','kind':'f','menu':'string[]()'})
let c['ocio_activedisplays'] = f
let f = []
call add(f,{'word':'ocio_activeviews','kind':'f','menu':'string[]()'})
let c['ocio_activeviews'] = f
let f = []
call add(f,{'word':'ocio_import','kind':'f','menu':'int(const string,const string,int)'})
call add(f,{'word':'ocio_import','kind':'f','menu':'int(const string,const string,string)'})
call add(f,{'word':'ocio_import','kind':'f','menu':'int(const string,const string,vector)'})
let c['ocio_import'] = f
let f = []
call add(f,{'word':'ocio_roles','kind':'f','menu':'string[]()'})
let c['ocio_roles'] = f
let f = []
call add(f,{'word':'ocio_spaces','kind':'f','menu':'string[]()'})
let c['ocio_spaces'] = f
let f = []
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector4(const string,const vector4)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector4(const string,const string,const vector4)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector4(const string,const string,const string,const vector4)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector(const string,const string,const string,const vector)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector(const string,const vector)'})
let c['ocio_transform'] = f
let f = []
call add(f,{'word':'onoise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'onoise','kind':'f','menu':'float(const vector,const int,const float,const float)'})
call add(f,{'word':'onoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'onoise','kind':'f','menu':'float(const vector,const int,const int,const int,const int,const float,const float)'})
call add(f,{'word':'onoise','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'onoise','kind':'f','menu':'vector(const vector,const int,const float,const float)'})
call add(f,{'word':'onoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
call add(f,{'word':'onoise','kind':'f','menu':'vector(const vector,const int,const int,const int,const int,const float,const float)'})
let c['onoise'] = f
let f = []
call add(f,{'word':'opdigits','kind':'f','menu':'int()'})
call add(f,{'word':'opdigits','kind':'f','menu':'int(const string)'})
let c['opdigits'] = f
let f = []
call add(f,{'word':'opend','kind':'f','menu':'void(const int)'})
let c['opend'] = f
let f = []
call add(f,{'word':'opfullpath','kind':'f','menu':'string(const string)'})
let c['opfullpath'] = f
let f = []
call add(f,{'word':'opid','kind':'f','menu':'int(const int)'})
call add(f,{'word':'opid','kind':'f','menu':'int(const string)'})
let c['opid'] = f
let f = []
call add(f,{'word':'opparentbonetransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'opparentbonetransform','kind':'f','menu':'matrix(const string,const float)'})
let c['opparentbonetransform'] = f
let f = []
call add(f,{'word':'opparenttransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'opparenttransform','kind':'f','menu':'matrix(const string,const float)'})
let c['opparenttransform'] = f
let f = []
call add(f,{'word':'opparmtransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'opparmtransform','kind':'f','menu':'matrix(const string,const float)'})
let c['opparmtransform'] = f
let f = []
call add(f,{'word':'oppreconstrainttransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'oppreconstrainttransform','kind':'f','menu':'matrix(const string,const float)'})
let c['oppreconstrainttransform'] = f
let f = []
call add(f,{'word':'oppretransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'oppretransform','kind':'f','menu':'matrix(const string,const float)'})
let c['oppretransform'] = f
let f = []
call add(f,{'word':'opstart','kind':'f','menu':'int(const string)'})
let c['opstart'] = f
let f = []
call add(f,{'word':'optransform','kind':'f','menu':'matrix(const int)'})
call add(f,{'word':'optransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'optransform','kind':'f','menu':'matrix(const string,const float)'})
let c['optransform'] = f
let f = []
let c['or'] = f
let f = []
call add(f,{'word':'ord','kind':'f','menu':'int(const string)'})
let c['ord'] = f
let f = []
call add(f,{'word':'orthographic','kind':'f','menu':'matrix(const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'orthographic','kind':'f','menu':'matrix(const float,const float,const float,const float,const float,const float,const vector4)'})
let c['orthographic'] = f
let f = []
call add(f,{'word':'osd_facecount','kind':'f','menu':'int(const int)'})
call add(f,{'word':'osd_facecount','kind':'f','menu':'int(const string)'})
let c['osd_facecount'] = f
let f = []
call add(f,{'word':'osd_firstpatch','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'osd_firstpatch','kind':'f','menu':'int(const string,const int)'})
let c['osd_firstpatch'] = f
let f = []
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix2)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix3)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,float)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector4)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector2)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,float[])'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix2)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix3)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,float)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector4)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector2)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,float[])'})
let c['osd_limitsurface'] = f
let f = []
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix2)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix3)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,float)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector4)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector2)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,float[])'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix2)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix3)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,float)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector4)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector2)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,float[])'})
let c['osd_limitsurfacevertex'] = f
let f = []
call add(f,{'word':'osd_lookupface','kind':'f','menu':'int(const int,const int,const float,const float,int,float,float)'})
call add(f,{'word':'osd_lookupface','kind':'f','menu':'int(const int,const int,const float,const float,int,float,float,const string)'})
call add(f,{'word':'osd_lookupface','kind':'f','menu':'int(const string,const int,const float,const float,int,float,float)'})
call add(f,{'word':'osd_lookupface','kind':'f','menu':'int(const string,const int,const float,const float,int,float,float,const string)'})
let c['osd_lookupface'] = f
let f = []
call add(f,{'word':'osd_lookuppatch','kind':'f','menu':'int(const int,const int,const float,const float,int,float,float)'})
call add(f,{'word':'osd_lookuppatch','kind':'f','menu':'int(const int,const int,const float,const float,int,float,float,const string)'})
call add(f,{'word':'osd_lookuppatch','kind':'f','menu':'int(const string,const int,const float,const float,int,float,float)'})
call add(f,{'word':'osd_lookuppatch','kind':'f','menu':'int(const string,const int,const float,const float,int,float,float,const string)'})
let c['osd_lookuppatch'] = f
let f = []
call add(f,{'word':'osd_patchcount','kind':'f','menu':'int(const int)'})
call add(f,{'word':'osd_patchcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'osd_patchcount','kind':'f','menu':'int(const string)'})
call add(f,{'word':'osd_patchcount','kind':'f','menu':'int(const string,const int)'})
let c['osd_patchcount'] = f
let f = []
call add(f,{'word':'osd_patches','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'osd_patches','kind':'f','menu':'int[](const string,const int)'})
let c['osd_patches'] = f
let f = []
call add(f,{'word':'outerproduct','kind':'f','menu':'matrix2(const vector2,const vector2)'})
call add(f,{'word':'outerproduct','kind':'f','menu':'matrix3(const vector,const vector)'})
call add(f,{'word':'outerproduct','kind':'f','menu':'matrix(const vector4,const vector4)'})
let c['outerproduct'] = f
let f = []
call add(f,{'word':'ow_nspace','kind':'f','menu':'vector(const vector)'})
let c['ow_nspace'] = f
let f = []
call add(f,{'word':'ow_space','kind':'f','menu':'matrix()'})
call add(f,{'word':'ow_space','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'ow_space','kind':'f','menu':'vector(const vector)'})
let c['ow_space'] = f
let f = []
call add(f,{'word':'ow_vspace','kind':'f','menu':'vector(const vector)'})
let c['ow_vspace'] = f
let f = []
call add(f,{'word':'pack_inttosafefloat','kind':'f','menu':'float(const int)'})
let c['pack_inttosafefloat'] = f
let f = []
call add(f,{'word':'packedtransform','kind':'f','menu':'void(const int,const int,const matrix)'})
let c['packedtransform'] = f
let f = []
call add(f,{'word':'pathtrace','kind':'f','menu':'vector(const vector,const vector)'})
let c['pathtrace'] = f
let f = []
call add(f,{'word':'pcclose','kind':'f','menu':'void(export int)'})
let c['pcclose'] = f
let f = []
call add(f,{'word':'pcconvex','kind':'f','menu':'float(const int,const string,const vector)'})
let c['pcconvex'] = f
let f = []
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const vector,const float)'})
let c['pcexport'] = f
let f = []
call add(f,{'word':'pcfarthest','kind':'f','menu':'float(const int)'})
let c['pcfarthest'] = f
let f = []
call add(f,{'word':'pcfilter','kind':'f','menu':'matrix3(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'float(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'vector4(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'vector(const int,const string)'})
let c['pcfilter'] = f
let f = []
call add(f,{'word':'pcfind','kind':'f','menu':'int[](const int,const string,const string,const vector,const float,const int)'})
call add(f,{'word':'pcfind','kind':'f','menu':'int[](const int,const string,const vector,const float,const int)'})
call add(f,{'word':'pcfind','kind':'f','menu':'int[](const string,const string,const string,const vector,const float,const int)'})
call add(f,{'word':'pcfind','kind':'f','menu':'int[](const string,const string,const vector,const float,const int)'})
let c['pcfind'] = f
let f = []
call add(f,{'word':'pcfind_radius','kind':'f','menu':'int[](const int,const string,const string,const float,const vector,const float,const int)'})
call add(f,{'word':'pcfind_radius','kind':'f','menu':'int[](const int,const string,const string,const string,const float,const vector,const float,const int)'})
call add(f,{'word':'pcfind_radius','kind':'f','menu':'int[](const string,const string,const string,const float,const vector,const float,const int)'})
call add(f,{'word':'pcfind_radius','kind':'f','menu':'int[](const string,const string,const string,const string,const float,const vector,const float,const int)'})
let c['pcfind_radius'] = f
let f = []
call add(f,{'word':'pcgenerate','kind':'f','menu':'int(const string,const int)'})
let c['pcgenerate'] = f
let f = []
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,matrix3)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,matrix)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,float)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,int)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,vector4)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,string)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,vector)'})
let c['pcimport'] = f
let f = []
call add(f,{'word':'pcimportbyidx3','kind':'f','menu':'matrix3(const int,const string,const int)'})
let c['pcimportbyidx3'] = f
let f = []
call add(f,{'word':'pcimportbyidx4','kind':'f','menu':'matrix(const int,const string,const int)'})
let c['pcimportbyidx4'] = f
let f = []
call add(f,{'word':'pcimportbyidxf','kind':'f','menu':'float(const int,const string,const int)'})
let c['pcimportbyidxf'] = f
let f = []
call add(f,{'word':'pcimportbyidxi','kind':'f','menu':'int(const int,const string,const int)'})
let c['pcimportbyidxi'] = f
let f = []
call add(f,{'word':'pcimportbyidxp','kind':'f','menu':'vector4(const int,const string,const int)'})
let c['pcimportbyidxp'] = f
let f = []
call add(f,{'word':'pcimportbyidxs','kind':'f','menu':'string(const int,const string,const int)'})
let c['pcimportbyidxs'] = f
let f = []
call add(f,{'word':'pcimportbyidxv','kind':'f','menu':'vector(const int,const string,const int)'})
let c['pcimportbyidxv'] = f
let f = []
call add(f,{'word':'pciterate','kind':'f','menu':'int(const int)'})
let c['pciterate'] = f
let f = []
call add(f,{'word':'pcnumfound','kind':'f','menu':'int(const int)'})
let c['pcnumfound'] = f
let f = []
call add(f,{'word':'pcopen','kind':'f','menu':'int(const int,const string,const vector,const float,const int)'})
call add(f,{'word':'pcopen','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'pcopen','kind':'f','menu':'int(const string,const string,const vector,const float,const int)'})
call add(f,{'word':'pcopen','kind':'f','menu':'int(const string,const string,const vector,const string,const vector,const float,const int)'})
let c['pcopen'] = f
let f = []
call add(f,{'word':'pcopenlod','kind':'f','menu':'int(const string,const string,const vector,const int)'})
let c['pcopenlod'] = f
let f = []
call add(f,{'word':'pcsampleleaf','kind':'f','menu':'void(const int,const float)'})
let c['pcsampleleaf'] = f
let f = []
call add(f,{'word':'pcsize','kind':'f','menu':'int(const int)'})
let c['pcsize'] = f
let f = []
call add(f,{'word':'pcunshaded','kind':'f','menu':'int(const int,const string)'})
let c['pcunshaded'] = f
let f = []
call add(f,{'word':'pcwrite','kind':'f','menu':'int(const string)'})
let c['pcwrite'] = f
let f = []
call add(f,{'word':'perspective','kind':'f','menu':'matrix(const float,const float,const float,const float,const float)'})
call add(f,{'word':'perspective','kind':'f','menu':'matrix(const float,const float,const float,const float,const float,const vector4)'})
let c['perspective'] = f
let f = []
call add(f,{'word':'pgfind','kind':'f','menu':'int[](const int,const string,const vector,const float,const int,const float)'})
call add(f,{'word':'pgfind','kind':'f','menu':'int[](const int,const vector,const float,const int,const float)'})
call add(f,{'word':'pgfind','kind':'f','menu':'int[](const string,const string,const vector,const float,const int,const float)'})
call add(f,{'word':'pgfind','kind':'f','menu':'int[](const string,const vector,const float,const int,const float)'})
let c['pgfind'] = f
let f = []
call add(f,{'word':'phong','kind':'f','menu':'bsdf(const float)'})
call add(f,{'word':'phong','kind':'f','menu':'bsdf(const vector,const float)'})
let c['phong'] = f
let f = []
call add(f,{'word':'phongBRDF','kind':'f','menu':'float(const vector,const vector,const vector,const float)'})
let c['phongBRDF'] = f
let f = []
call add(f,{'word':'phonglobe','kind':'f','menu':'bsdf(const vector,const float,const float,const vector,const vector)'})
call add(f,{'word':'phonglobe','kind':'f','menu':'bsdf(const vector,const float)'})
call add(f,{'word':'phonglobe','kind':'f','menu':'bsdf(const vector,const vector,const float,const float,const vector,const vector)'})
call add(f,{'word':'phonglobe','kind':'f','menu':'bsdf(const vector,const vector,const float)'})
let c['phonglobe'] = f
let f = []
call add(f,{'word':'photonmap','kind':'f','menu':'vector(const string,const vector,const vector)'})
call add(f,{'word':'photonmap','kind':'f','menu':'void(const string,const vector,const vector,vector,float)'})
call add(f,{'word':'photonmap','kind':'f','menu':'vector(const string,const vector,const vector,float)'})
let c['photonmap'] = f
let f = []
call add(f,{'word':'planepointdistance','kind':'f','menu':'float(const vector,const vector,const vector,vector)'})
let c['planepointdistance'] = f
let f = []
call add(f,{'word':'planesphereintersect','kind':'f','menu':'int(const vector,const vector,const vector,const float,vector,float,float)'})
let c['planesphereintersect'] = f
let f = []
call add(f,{'word':'pluralize','kind':'f','menu':'string(const string)'})
let c['pluralize'] = f
let f = []
call add(f,{'word':'pnoise','kind':'f','menu':'float(const float,const float,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const float,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const vector4,const vector4)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const vector,const vector)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const float,const float,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const float,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const vector4,const vector4)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const vector,const vector)'})
let c['pnoise'] = f
let f = []
call add(f,{'word':'point','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector[](const string,const string,const int)'})
let c['point'] = f
let f = []
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix2(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix2(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix3(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix3(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'float(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'float(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'int(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'int(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector4(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector4(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'string(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'string(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector2(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector2(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix2[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix2[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix3[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix3[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'float[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'float[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'int[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'int[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector4[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector4[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'string[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'string[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector2[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector2[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector[](const string,const string,const int,int)'})
let c['pointattrib'] = f
let f = []
call add(f,{'word':'pointattribsize','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'pointattribsize','kind':'f','menu':'int(const string,const string)'})
let c['pointattribsize'] = f
let f = []
call add(f,{'word':'pointattribtype','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'pointattribtype','kind':'f','menu':'int(const string,const string)'})
let c['pointattribtype'] = f
let f = []
call add(f,{'word':'pointattribtypeinfo','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'pointattribtypeinfo','kind':'f','menu':'string(const string,const string)'})
let c['pointattribtypeinfo'] = f
let f = []
call add(f,{'word':'pointedge','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'pointedge','kind':'f','menu':'int(const string,const int,const int)'})
let c['pointedge'] = f
let f = []
call add(f,{'word':'pointhedge','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'pointhedge','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'pointhedge','kind':'f','menu':'int(const string,const int)'})
call add(f,{'word':'pointhedge','kind':'f','menu':'int(const string,const int,const int)'})
let c['pointhedge'] = f
let f = []
call add(f,{'word':'pointhedgenext','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'pointhedgenext','kind':'f','menu':'int(const string,const int)'})
let c['pointhedgenext'] = f
let f = []
call add(f,{'word':'pointprims','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'pointprims','kind':'f','menu':'int[](const string,const int)'})
let c['pointprims'] = f
let f = []
call add(f,{'word':'pointvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'pointvertex','kind':'f','menu':'int(const string,const int)'})
let c['pointvertex'] = f
let f = []
call add(f,{'word':'pointvertices','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'pointvertices','kind':'f','menu':'int[](const string,const int)'})
let c['pointvertices'] = f
let f = []
call add(f,{'word':'polardecomp','kind':'f','menu':'matrix3(const matrix3)'})
let c['polardecomp'] = f
let f = []
call add(f,{'word':'polyneighbours','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'polyneighbours','kind':'f','menu':'int[](const string,const int)'})
let c['polyneighbours'] = f
let f = []
call add(f,{'word':'pop','kind':'f','menu':'matrix2(export matrix2[])'})
call add(f,{'word':'pop','kind':'f','menu':'matrix2(export matrix2[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'matrix3(export matrix3[])'})
call add(f,{'word':'pop','kind':'f','menu':'matrix3(export matrix3[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'matrix(export matrix[])'})
call add(f,{'word':'pop','kind':'f','menu':'matrix(export matrix[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'bsdf(export bsdf[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'light(export light[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'material(export material[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'bsdf(export bsdf[])'})
call add(f,{'word':'pop','kind':'f','menu':'light(export light[])'})
call add(f,{'word':'pop','kind':'f','menu':'material(export material[])'})
call add(f,{'word':'pop','kind':'f','menu':'float(export float[])'})
call add(f,{'word':'pop','kind':'f','menu':'float(export float[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'int(export int[])'})
call add(f,{'word':'pop','kind':'f','menu':'int(export int[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'vector4(export vector4[])'})
call add(f,{'word':'pop','kind':'f','menu':'vector4(export vector4[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'string(export string[])'})
call add(f,{'word':'pop','kind':'f','menu':'string(export string[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'vector2(export vector2[])'})
call add(f,{'word':'pop','kind':'f','menu':'vector2(export vector2[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'vector(export vector[])'})
call add(f,{'word':'pop','kind':'f','menu':'vector(export vector[],const int)'})
let c['pop'] = f
let f = []
let c['popinline'] = f
let f = []
call add(f,{'word':'pow','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'pow','kind':'f','menu':'vector4(const vector4,const float)'})
call add(f,{'word':'pow','kind':'f','menu':'vector2(const vector2,const float)'})
call add(f,{'word':'pow','kind':'f','menu':'vector(const vector,const float)'})
let c['pow'] = f
let f = []
call add(f,{'word':'predicate_incircle','kind':'f','menu':'float(const vector2,const vector2,const vector2,const vector2)'})
let c['predicate_incircle'] = f
let f = []
call add(f,{'word':'predicate_insphere','kind':'f','menu':'float(const vector,const vector,const vector,const vector,const vector)'})
let c['predicate_insphere'] = f
let f = []
call add(f,{'word':'predicate_orient2d','kind':'f','menu':'float(const vector2,const vector2,const vector2)'})
let c['predicate_orient2d'] = f
let f = []
call add(f,{'word':'predicate_orient3d','kind':'f','menu':'float(const vector,const vector,const vector,const vector)'})
let c['predicate_orient3d'] = f
let f = []
call add(f,{'word':'prerotate','kind':'f','menu':'void(export matrix3,const float,const vector)'})
call add(f,{'word':'prerotate','kind':'f','menu':'void(export matrix3,const vector,const int)'})
call add(f,{'word':'prerotate','kind':'f','menu':'void(export matrix,const float,const vector)'})
call add(f,{'word':'prerotate','kind':'f','menu':'void(export matrix,const vector,const int)'})
let c['prerotate'] = f
let f = []
call add(f,{'word':'prescale','kind':'f','menu':'void(export matrix3,const vector)'})
call add(f,{'word':'prescale','kind':'f','menu':'void(export matrix,const vector)'})
let c['prescale'] = f
let f = []
call add(f,{'word':'pretranslate','kind':'f','menu':'void(export matrix,const vector)'})
let c['pretranslate'] = f
let f = []
call add(f,{'word':'prim','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector[](const string,const string,const int)'})
let c['prim'] = f
let f = []
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix2,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix3,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix3,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,float,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,float,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,int,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,int,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector4,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector4,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector2,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix2[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix3[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,float[],const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,float[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,int[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector4[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector2[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector[],const string,const int,const vector)'})
let c['prim_attribute'] = f
let f = []
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const int,const int,const float,const float)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const int,const int,const float,const float,const float)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const string,const int,const float,const float)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const string,const int,const float,const float,const float)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const string,const int,const vector)'})
let c['prim_normal'] = f
let f = []
call add(f,{'word':'primarclen','kind':'f','menu':'float(const string,const vector2,const vector2,const int)'})
call add(f,{'word':'primarclen','kind':'f','menu':'float(const string,const vector2,const vector2,const int,const int)'})
let c['primarclen'] = f
let f = []
call add(f,{'word':'primattrib','kind':'f','menu':'matrix2(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix2(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix3(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix3(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'float(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'float(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'int(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'int(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector4(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector4(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'string(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'string(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector2(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector2(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix2[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix2[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix3[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix3[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'float[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'float[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'int[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'int[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector4[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector4[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'string[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'string[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector2[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector2[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector[](const string,const string,const int,int)'})
let c['primattrib'] = f
let f = []
call add(f,{'word':'primattribsize','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'primattribsize','kind':'f','menu':'int(const string,const string)'})
let c['primattribsize'] = f
let f = []
call add(f,{'word':'primattribtype','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'primattribtype','kind':'f','menu':'int(const string,const string)'})
let c['primattribtype'] = f
let f = []
call add(f,{'word':'primattribtypeinfo','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'primattribtypeinfo','kind':'f','menu':'string(const string,const string)'})
let c['primattribtypeinfo'] = f
let f = []
call add(f,{'word':'primduv','kind':'f','menu':'vector(const string,const int,const vector2,const int,const int)'})
let c['primduv'] = f
let f = []
call add(f,{'word':'primfind','kind':'f','menu':'int[](const int,const string,const vector,const vector)'})
call add(f,{'word':'primfind','kind':'f','menu':'int[](const int,const vector,const vector)'})
call add(f,{'word':'primfind','kind':'f','menu':'int[](const string,const string,const vector,const vector)'})
call add(f,{'word':'primfind','kind':'f','menu':'int[](const string,const vector,const vector)'})
let c['primfind'] = f
let f = []
call add(f,{'word':'primhedge','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'primhedge','kind':'f','menu':'int(const string,const int)'})
let c['primhedge'] = f
let f = []
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector[](const string,const string,const int)'})
let c['primintrinsic'] = f
let f = []
call add(f,{'word':'primpoint','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'primpoint','kind':'f','menu':'int(const string,const int,const int)'})
let c['primpoint'] = f
let f = []
call add(f,{'word':'primpoints','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'primpoints','kind':'f','menu':'int[](const string,const int)'})
let c['primpoints'] = f
let f = []
call add(f,{'word':'primuv','kind':'f','menu':'matrix2(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix2(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix3(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix3(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'float(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'float(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'int(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'int(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector4(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector4(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector2(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector2(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix2[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix2[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix3[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix3[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'float[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'float[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'int[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'int[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector4[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector4[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector2[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector2[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector[](const string,const string,const int,const vector)'})
let c['primuv'] = f
let f = []
call add(f,{'word':'primuvconvert','kind':'f','menu':'vector2(const string,const vector2,const int,const int)'})
call add(f,{'word':'primuvconvert','kind':'f','menu':'vector2(const string,const vector2,const int,const int,const float)'})
let c['primuvconvert'] = f
let f = []
call add(f,{'word':'primvertex','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'primvertex','kind':'f','menu':'int(const string,const int,const int)'})
let c['primvertex'] = f
let f = []
call add(f,{'word':'primvertexcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'primvertexcount','kind':'f','menu':'int(const string,const int)'})
let c['primvertexcount'] = f
let f = []
call add(f,{'word':'primvertices','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'primvertices','kind':'f','menu':'int[](const string,const int)'})
let c['primvertices'] = f
let f = []
call add(f,{'word':'print_once','kind':'f','menu':'void(const string)'})
let c['print_once'] = f
let f = []
call add(f,{'word':'printf','kind':'f','menu':'void(const string)'})
let c['printf'] = f
let f = []
call add(f,{'word':'product','kind':'f','menu':'float(const float)'})
call add(f,{'word':'product','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'product','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'product','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'product','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'product','kind':'f','menu':'int(const int)'})
call add(f,{'word':'product','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'product','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'product','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'product','kind':'f','menu':'vector(const vector[])'})
let c['product'] = f
let f = []
call add(f,{'word':'ptexture','kind':'f','menu':'matrix3(const string,const int)'})
call add(f,{'word':'ptexture','kind':'f','menu':'matrix3(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'matrix3(const string,const int,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'matrix(const string,const int)'})
call add(f,{'word':'ptexture','kind':'f','menu':'matrix(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'matrix(const string,const int,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'float(const string,const int)'})
call add(f,{'word':'ptexture','kind':'f','menu':'float(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'float(const string,const int,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector4(const string,const int)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector4(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector4(const string,const int,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector(const string,const int)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector(const string,const int,const float,const float,const float,const float,const float,const float)'})
let c['ptexture'] = f
let f = []
call add(f,{'word':'ptlined','kind':'f','menu':'float(const vector,const vector,const vector)'})
let c['ptlined'] = f
let f = []
call add(f,{'word':'ptransform','kind':'f','menu':'vector4(const vector4,const matrix)'})
call add(f,{'word':'ptransform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'ptransform','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'ptransform','kind':'f','menu':'vector(const vector,const matrix)'})
let c['ptransform'] = f
let f = []
call add(f,{'word':'push','kind':'f','menu':'void(export matrix2[],const matrix2)'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix2[],const matrix2[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix3[],const matrix3)'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix3[],const matrix3[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix[],const matrix)'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix[],const matrix[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export bsdf[],const bsdf)'})
call add(f,{'word':'push','kind':'f','menu':'void(export light[],const light)'})
call add(f,{'word':'push','kind':'f','menu':'void(export material[],const material)'})
call add(f,{'word':'push','kind':'f','menu':'void(export bsdf[],const bsdf[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export light[],const light[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export material[],const material[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export float[],const float)'})
call add(f,{'word':'push','kind':'f','menu':'void(export float[],const float[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export int[],const int)'})
call add(f,{'word':'push','kind':'f','menu':'void(export int[],const int[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector4[],const vector4)'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector4[],const vector4[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export string[],const string)'})
call add(f,{'word':'push','kind':'f','menu':'void(export string[],const string[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector2[],const vector2)'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector2[],const vector2[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector[],const vector)'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector[],const vector[])'})
let c['push'] = f
let f = []
let c['pushinline'] = f
let f = []
call add(f,{'word':'pxnoise','kind':'f','menu':'float(const float,const float,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'float(const float,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'float(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'vector(const float,const float,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'vector(const float,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'vector(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
let c['pxnoise'] = f
let f = []
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const float,const float,const int,const int,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'float(const float,const float,const int,const int,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const float,const float,const int,const int,vector,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'vector(const float,const float,const int,const int,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const float,const int,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'float(const float,const int,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const float,const int,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'vector(const float,const int,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const vector4,const int,const int,const int,const int,float,float,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'float(const vector4,const int,const int,const int,const int,float,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const vector4,const int,const int,const int,const int,vector,vector,vector,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'vector(const vector4,const int,const int,const int,const int,vector,vector,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const vector,const int,const int,const int,float,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'float(const vector,const int,const int,const int,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const vector,const int,const int,const int,vector,vector,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'vector(const vector,const int,const int,const int,vector,vector,vector)'})
let c['pxnoised'] = f
let f = []
call add(f,{'word':'qconvert','kind':'f','menu':'matrix3(const vector4)'})
call add(f,{'word':'qconvert','kind':'f','menu':'vector(const vector4)'})
let c['qconvert'] = f
let f = []
call add(f,{'word':'qdistance','kind':'f','menu':'float(const vector4,const vector4)'})
let c['qdistance'] = f
let f = []
call add(f,{'word':'qinvert','kind':'f','menu':'vector4(const vector4)'})
let c['qinvert'] = f
let f = []
call add(f,{'word':'qmultiply','kind':'f','menu':'vector4(const vector4,const vector4)'})
let c['qmultiply'] = f
let f = []
call add(f,{'word':'qrotate','kind':'f','menu':'vector(const vector4,const vector)'})
let c['qrotate'] = f
let f = []
call add(f,{'word':'quaternion','kind':'f','menu':'vector4(const matrix3)'})
call add(f,{'word':'quaternion','kind':'f','menu':'vector4(const float,const vector)'})
call add(f,{'word':'quaternion','kind':'f','menu':'vector4(const vector)'})
let c['quaternion'] = f
let f = []
call add(f,{'word':'quaterniontoeuler','kind':'f','menu':'vector(const vector4,const int)'})
let c['quaterniontoeuler'] = f
let f = []
call add(f,{'word':'radians','kind':'f','menu':'float(const float)'})
call add(f,{'word':'radians','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'radians','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'radians','kind':'f','menu':'vector(const vector)'})
let c['radians'] = f
let f = []
call add(f,{'word':'rand','kind':'f','menu':'float(const float)'})
call add(f,{'word':'rand','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'rand','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'rand','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'rand','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const float,const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const vector2)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const vector)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const float,const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const vector4)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const vector)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const vector2)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const vector)'})
let c['rand'] = f
let f = []
call add(f,{'word':'random','kind':'f','menu':'float(const float)'})
call add(f,{'word':'random','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'random','kind':'f','menu':'float(const int)'})
call add(f,{'word':'random','kind':'f','menu':'float(const int,const int)'})
call add(f,{'word':'random','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'random','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const float,const float)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const int,const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const vector)'})
call add(f,{'word':'random','kind':'f','menu':'vector2(const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const vector)'})
let c['random'] = f
let f = []
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const float)'})
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const float,const float)'})
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const vector4)'})
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const vector2)'})
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const vector)'})
let c['random_fhash'] = f
let f = []
let c['random_hash'] = f
let f = []
call add(f,{'word':'random_ihash','kind':'f','menu':'int(const int)'})
let c['random_ihash'] = f
let f = []
call add(f,{'word':'random_poisson','kind':'f','menu':'int(const int,const float)'})
call add(f,{'word':'random_poisson','kind':'f','menu':'int(const int,const float,const int,const int)'})
let c['random_poisson'] = f
let f = []
call add(f,{'word':'random_shash','kind':'f','menu':'int(const string)'})
let c['random_shash'] = f
let f = []
call add(f,{'word':'random_sobol','kind':'f','menu':'float(const float,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'float(const int,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'float(const vector4,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'float(const vector,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector4(const float,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector4(const int,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector4(const vector4,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector4(const vector,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector(const float,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector(const vector4,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector(const vector,const int)'})
let c['random_sobol'] = f
let f = []
call add(f,{'word':'randomf','kind':'f','menu':'float(const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'randomf','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector4(const float,const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector4(const vector)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector(const vector)'})
let c['randomf'] = f
let f = []
call add(f,{'word':'rawbumpmap','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmap','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmap','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmap','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmap'] = f
let f = []
call add(f,{'word':'rawbumpmapA','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapA','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapA','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapA','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapA'] = f
let f = []
call add(f,{'word':'rawbumpmapB','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapB','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapB','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapB','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapB'] = f
let f = []
call add(f,{'word':'rawbumpmapG','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapG','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapG','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapG','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapG'] = f
let f = []
call add(f,{'word':'rawbumpmapL','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapL','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapL','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapL','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapL'] = f
let f = []
call add(f,{'word':'rawbumpmapR','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapR','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapR','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapR','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapR'] = f
let f = []
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const float,const float)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const float,const float,const float,const float,const float,const float,const float,const float,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const vector)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const float,const float)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const float,const float,const float,const float,const float,const float,const float,const float,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector,const int)'})
let c['rawcolormap'] = f
let f = []
call add(f,{'word':'rayhittest','kind':'f','menu':'float(const vector,const vector,const float)'})
call add(f,{'word':'rayhittest','kind':'f','menu':'float(const vector,const vector,vector,vector,const float)'})
let c['rayhittest'] = f
let f = []
call add(f,{'word':'rayimport','kind':'f','menu':'int(const string,export matrix2)'})
call add(f,{'word':'rayimport','kind':'f','menu':'int(const string,export matrix3)'})
call add(f,{'word':'rayimport','kind':'f','menu':'int(const string,export matrix)'})
call add(f,{'word':'rayimport','kind':'f','menu':'int(const string,export float)'})
call add(f,{'word':'rayimport','kind':'f','menu':'int(const string,export int)'})
call add(f,{'word':'rayimport','kind':'f','menu':'int(const string,export vector4)'})
call add(f,{'word':'rayimport','kind':'f','menu':'int(const string,export string)'})
call add(f,{'word':'rayimport','kind':'f','menu':'int(const string,export vector2)'})
call add(f,{'word':'rayimport','kind':'f','menu':'int(const string,export vector)'})
let c['rayimport'] = f
let f = []
call add(f,{'word':'re_find','kind':'f','menu':'int(const string,const string)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(const string,const string,const int,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(int[],int[],const string,const string)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(int[],int[],const string,const string,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(int[],int[],const string,const string,const int,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'string(const string,const string)'})
call add(f,{'word':'re_find','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'string(const string,const string,const int,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'re_find','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'string[](const string,const string,const int,const int)'})
let c['re_find'] = f
let f = []
call add(f,{'word':'re_findall','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'re_findall','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'re_findall','kind':'f','menu':'string[](const string,const string,const int,const int)'})
let c['re_findall'] = f
let f = []
call add(f,{'word':'re_match','kind':'f','menu':'int(const string,const string)'})
let c['re_match'] = f
let f = []
call add(f,{'word':'re_replace','kind':'f','menu':'string(const string,const string,const string)'})
call add(f,{'word':'re_replace','kind':'f','menu':'string(const string,const string,const string,const int)'})
let c['re_replace'] = f
let f = []
call add(f,{'word':'re_split','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'re_split','kind':'f','menu':'string[](const string,const string,const int)'})
let c['re_split'] = f
let f = []
call add(f,{'word':'reflect','kind':'f','menu':'vector(const vector,const vector)'})
let c['reflect'] = f
let f = []
call add(f,{'word':'reflectlight','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'reflectlight','kind':'f','menu':'vector(const vector,const vector,const float,const float)'})
call add(f,{'word':'reflectlight','kind':'f','menu':'vector(const vector,const vector,const vector,const float,const float)'})
let c['reflectlight'] = f
let f = []
call add(f,{'word':'refract','kind':'f','menu':'vector(const vector,const vector,const float)'})
let c['refract'] = f
let f = []
call add(f,{'word':'refractlight','kind':'f','menu':'void(vector,vector,float,const vector,const vector,const float,const float)'})
call add(f,{'word':'refractlight','kind':'f','menu':'vector(vector,float,const vector,const vector,const float,const float)'})
call add(f,{'word':'refractlight','kind':'f','menu':'void(vector,vector,float,const vector,const vector,const vector,const float,const float,const float)'})
call add(f,{'word':'refractlight','kind':'f','menu':'vector(vector,float,const vector,const vector,const vector,const float,const float,const float)'})
let c['refractlight'] = f
let f = []
call add(f,{'word':'relativepath','kind':'f','menu':'string(const string,const string)'})
let c['relativepath'] = f
let f = []
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const int,const vector)'})
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const vector)'})
let c['relbbox'] = f
let f = []
call add(f,{'word':'relpointbbox','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'relpointbbox','kind':'f','menu':'vector(const int,const vector)'})
call add(f,{'word':'relpointbbox','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'relpointbbox','kind':'f','menu':'vector(const string,const vector)'})
let c['relpointbbox'] = f
let f = []
call add(f,{'word':'removeindex','kind':'f','menu':'matrix2(export matrix2[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'matrix3(export matrix3[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'matrix(export matrix[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'float(export float[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'int(export int[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'vector4(export vector4[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'string(export string[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'vector2(export vector2[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'vector(export vector[],const int)'})
let c['removeindex'] = f
let f = []
call add(f,{'word':'removepoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'removepoint','kind':'f','menu':'int(const int,const int,const int)'})
let c['removepoint'] = f
let f = []
call add(f,{'word':'removeprim','kind':'f','menu':'int(const int,const int,const int)'})
let c['removeprim'] = f
let f = []
call add(f,{'word':'removevalue','kind':'f','menu':'int(export matrix2[],const matrix2)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export matrix3[],const matrix3)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export matrix[],const matrix)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export float[],const float)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export int[],const int)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export vector4[],const vector4)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export string[],const string)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export vector2[],const vector2)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export vector[],const vector)'})
let c['removevalue'] = f
let f = []
call add(f,{'word':'renderstate','kind':'f','menu':'int(const material,const string,export matrix3)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const material,const string,export matrix)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const material,const string,export float)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const material,const string,export int)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const material,const string,export vector4)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const material,const string,export string)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const material,const string,export vector)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const string,export matrix3)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const string,export matrix)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const string,export float)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const string,export int)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const string,export vector4)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const string,export string)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const string,export vector)'})
let c['renderstate'] = f
let f = []
call add(f,{'word':'reorder','kind':'f','menu':'string(const string,const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'matrix2[](const matrix2[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'matrix3[](const matrix3[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'matrix[](const matrix[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'float[](const float[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'int[](const int[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'vector4[](const vector4[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'string[](const string[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'vector2[](const vector2[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'vector[](const vector[],const int[])'})
let c['reorder'] = f
let f = []
call add(f,{'word':'resample_linear','kind':'f','menu':'float[](const float[],const int)'})
call add(f,{'word':'resample_linear','kind':'f','menu':'vector4[](const vector4[],const int)'})
call add(f,{'word':'resample_linear','kind':'f','menu':'vector2[](const vector2[],const int)'})
call add(f,{'word':'resample_linear','kind':'f','menu':'vector[](const vector[],const int)'})
let c['resample_linear'] = f
let f = []
call add(f,{'word':'resize','kind':'f','menu':'void(export matrix2[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export matrix3[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export matrix[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export bsdf[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export light[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export material[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export float[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export int[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export vector4[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export string[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export vector2[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export vector[],const int)'})
let c['resize'] = f
let f = []
call add(f,{'word':'resolvemissedray','kind':'f','menu':'vector(const vector,const float,const int)'})
let c['resolvemissedray'] = f
let f = []
let c['returninline'] = f
let f = []
call add(f,{'word':'reverse','kind':'f','menu':'string(const string)'})
call add(f,{'word':'reverse','kind':'f','menu':'matrix2[](const matrix2[])'})
call add(f,{'word':'reverse','kind':'f','menu':'matrix3[](const matrix3[])'})
call add(f,{'word':'reverse','kind':'f','menu':'matrix[](const matrix[])'})
call add(f,{'word':'reverse','kind':'f','menu':'float[](const float[])'})
call add(f,{'word':'reverse','kind':'f','menu':'int[](const int[])'})
call add(f,{'word':'reverse','kind':'f','menu':'vector4[](const vector4[])'})
call add(f,{'word':'reverse','kind':'f','menu':'string[](const string[])'})
call add(f,{'word':'reverse','kind':'f','menu':'vector2[](const vector2[])'})
call add(f,{'word':'reverse','kind':'f','menu':'vector[](const vector[])'})
let c['reverse'] = f
let f = []
call add(f,{'word':'rgbtohsv','kind':'f','menu':'vector(const float,const float,const float)'})
call add(f,{'word':'rgbtohsv','kind':'f','menu':'vector(const vector)'})
let c['rgbtohsv'] = f
let f = []
call add(f,{'word':'rgbtoxyz','kind':'f','menu':'vector(const vector)'})
let c['rgbtoxyz'] = f
let f = []
call add(f,{'word':'rint','kind':'f','menu':'float(const float)'})
call add(f,{'word':'rint','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'rint','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'rint','kind':'f','menu':'vector(const vector)'})
let c['rint'] = f
let f = []
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix2,const float)'})
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix3,const float,const vector)'})
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix3,const vector,const int)'})
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix,const float,const vector)'})
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix,const vector,const int)'})
let c['rotate'] = f
let f = []
call add(f,{'word':'rotate_x_to','kind':'f','menu':'vector4(const vector4,const vector4)'})
call add(f,{'word':'rotate_x_to','kind':'f','menu':'vector2(const vector2,const vector2)'})
call add(f,{'word':'rotate_x_to','kind':'f','menu':'vector(const vector,const vector)'})
let c['rotate_x_to'] = f
let f = []
call add(f,{'word':'rstrip','kind':'f','menu':'string(const string)'})
call add(f,{'word':'rstrip','kind':'f','menu':'string(const string,const string)'})
let c['rstrip'] = f
let f = []
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,const vector,int,vector,vector,float,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'int(const bsdf,const vector,const vector,vector,vector,float,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,vector,vector,float,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'vector(const bsdf,const vector,vector,float,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,vector,vector,float,int,const float,const float)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'vector(const bsdf,const vector,vector,float,int,const float,const float)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,vector,vector,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'vector(const bsdf,const vector,vector,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,vector,vector,int,const float,const float)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'vector(const bsdf,const vector,vector,int,const float,const float)'})
let c['sample_bsdf'] = f
let f = []
call add(f,{'word':'sample_cauchy','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'float(const float,const float,const float,const float)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'vector2(const float,const vector2)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'vector(const vector)'})
let c['sample_cauchy'] = f
let f = []
call add(f,{'word':'sample_cdf','kind':'f','menu':'int(const float[],const float)'})
call add(f,{'word':'sample_cdf','kind':'f','menu':'void(const float[],const float,int,float)'})
call add(f,{'word':'sample_cdf','kind':'f','menu':'int(const float[],const float,float)'})
call add(f,{'word':'sample_cdf','kind':'f','menu':'void(const float[],const float,int,float,float)'})
call add(f,{'word':'sample_cdf','kind':'f','menu':'int(const float[],const float,float,float)'})
let c['sample_cdf'] = f
let f = []
call add(f,{'word':'sample_circle_arc','kind':'f','menu':'vector2(const vector2,const float,const float)'})
let c['sample_circle_arc'] = f
let f = []
call add(f,{'word':'sample_circle_edge_uniform','kind':'f','menu':'vector2(const float)'})
let c['sample_circle_edge_uniform'] = f
let f = []
call add(f,{'word':'sample_circle_ring_uniform','kind':'f','menu':'vector2(const vector2,const float)'})
let c['sample_circle_ring_uniform'] = f
let f = []
call add(f,{'word':'sample_circle_slice','kind':'f','menu':'vector2(const vector2,const float,const vector2)'})
let c['sample_circle_slice'] = f
let f = []
call add(f,{'word':'sample_circle_uniform','kind':'f','menu':'vector2(const vector2)'})
let c['sample_circle_uniform'] = f
let f = []
call add(f,{'word':'sample_direction_cone','kind':'f','menu':'vector(const vector,const float,const vector2)'})
let c['sample_direction_cone'] = f
let f = []
call add(f,{'word':'sample_direction_uniform','kind':'f','menu':'vector(const vector2)'})
let c['sample_direction_uniform'] = f
let f = []
call add(f,{'word':'sample_discrete','kind':'f','menu':'int(const int,const float)'})
call add(f,{'word':'sample_discrete','kind':'f','menu':'int(const float[],const float)'})
let c['sample_discrete'] = f
let f = []
call add(f,{'word':'sample_exponential','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sample_exponential','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'sample_exponential','kind':'f','menu':'float(const float,const float,const float)'})
let c['sample_exponential'] = f
let f = []
call add(f,{'word':'sample_geometry','kind':'f','menu':'int(const vector,const vector,const float)'})
let c['sample_geometry'] = f
let f = []
call add(f,{'word':'sample_hemisphere','kind':'f','menu':'vector(const float,const vector2)'})
call add(f,{'word':'sample_hemisphere','kind':'f','menu':'vector(const vector2)'})
call add(f,{'word':'sample_hemisphere','kind':'f','menu':'vector(const vector,const float,const vector2)'})
call add(f,{'word':'sample_hemisphere','kind':'f','menu':'vector(const vector,const vector2)'})
let c['sample_hemisphere'] = f
let f = []
call add(f,{'word':'sample_hypersphere_cone','kind':'f','menu':'vector4(const vector4,const float,const vector4)'})
let c['sample_hypersphere_cone'] = f
let f = []
call add(f,{'word':'sample_hypersphere_uniform','kind':'f','menu':'vector4(const vector4)'})
let c['sample_hypersphere_uniform'] = f
let f = []
call add(f,{'word':'sample_lognormal','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'sample_lognormal','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
let c['sample_lognormal'] = f
let f = []
call add(f,{'word':'sample_lognormal_by_median','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'sample_lognormal_by_median','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
let c['sample_lognormal_by_median'] = f
let f = []
call add(f,{'word':'sample_normal','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'vector(const vector)'})
let c['sample_normal'] = f
let f = []
call add(f,{'word':'sample_orientation_cone','kind':'f','menu':'vector4(const vector4,const float,const vector)'})
let c['sample_orientation_cone'] = f
let f = []
call add(f,{'word':'sample_orientation_uniform','kind':'f','menu':'vector4(const vector)'})
let c['sample_orientation_uniform'] = f
let f = []
call add(f,{'word':'sample_photon','kind':'f','menu':'int(const light,vector,vector,float,const float)'})
let c['sample_photon'] = f
let f = []
call add(f,{'word':'sample_sphere_cone','kind':'f','menu':'vector(const vector,const float,const vector)'})
let c['sample_sphere_cone'] = f
let f = []
call add(f,{'word':'sample_sphere_shell_uniform','kind':'f','menu':'vector(const vector,const float)'})
let c['sample_sphere_shell_uniform'] = f
let f = []
call add(f,{'word':'sample_sphere_uniform','kind':'f','menu':'vector(const vector)'})
let c['sample_sphere_uniform'] = f
let f = []
call add(f,{'word':'sampledisk','kind':'f','menu':'void(float,float,const float,const float)'})
call add(f,{'word':'sampledisk','kind':'f','menu':'float(float,const float,const float)'})
let c['sampledisk'] = f
let f = []
call add(f,{'word':'scale','kind':'f','menu':'void(export matrix2,const vector2)'})
call add(f,{'word':'scale','kind':'f','menu':'void(export matrix3,const vector)'})
call add(f,{'word':'scale','kind':'f','menu':'void(export matrix,const vector)'})
let c['scale'] = f
let f = []
call add(f,{'word':'scatter','kind':'f','menu':'int(const vector,const vector,const vector,const vector,const float,const float,vector,vector,vector)'})
let c['scatter'] = f
let f = []
call add(f,{'word':'select','kind':'f','menu':'matrix2(const int,const matrix2,const matrix2)'})
call add(f,{'word':'select','kind':'f','menu':'matrix3(const int,const matrix3,const matrix3)'})
call add(f,{'word':'select','kind':'f','menu':'matrix(const int,const matrix,const matrix)'})
call add(f,{'word':'select','kind':'f','menu':'bsdf(const int,const bsdf,const bsdf)'})
call add(f,{'word':'select','kind':'f','menu':'light(const int,const light,const light)'})
call add(f,{'word':'select','kind':'f','menu':'material(const int,const material,const material)'})
call add(f,{'word':'select','kind':'f','menu':'float(const int,const float,const float)'})
call add(f,{'word':'select','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'select','kind':'f','menu':'vector4(const int,const vector4,const vector4)'})
call add(f,{'word':'select','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'select','kind':'f','menu':'vector2(const int,const vector2,const vector2)'})
call add(f,{'word':'select','kind':'f','menu':'vector(const int,const vector,const vector)'})
call add(f,{'word':'select','kind':'f','menu':'matrix2[](const int,const matrix2[],const matrix2[])'})
call add(f,{'word':'select','kind':'f','menu':'matrix3[](const int,const matrix3[],const matrix3[])'})
call add(f,{'word':'select','kind':'f','menu':'matrix[](const int,const matrix[],const matrix[])'})
call add(f,{'word':'select','kind':'f','menu':'bsdf[](const int,const bsdf[],const bsdf[])'})
call add(f,{'word':'select','kind':'f','menu':'light[](const int,const light[],const light[])'})
call add(f,{'word':'select','kind':'f','menu':'material[](const int,const material[],const material[])'})
call add(f,{'word':'select','kind':'f','menu':'float[](const int,const float[],const float[])'})
call add(f,{'word':'select','kind':'f','menu':'int[](const int,const int[],const int[])'})
call add(f,{'word':'select','kind':'f','menu':'vector4[](const int,const vector4[],const vector4[])'})
call add(f,{'word':'select','kind':'f','menu':'string[](const int,const string[],const string[])'})
call add(f,{'word':'select','kind':'f','menu':'vector2[](const int,const vector2[],const vector2[])'})
call add(f,{'word':'select','kind':'f','menu':'vector[](const int,const vector[],const vector[])'})
let c['select'] = f
let f = []
call add(f,{'word':'sensor_panorama_create','kind':'f','menu':'int(const float,const vector,const int,const float,const float,const string,const string,const string,const int)'})
let c['sensor_panorama_create'] = f
let f = []
call add(f,{'word':'sensor_panorama_getcolor','kind':'f','menu':'vector(const int,const vector)'})
let c['sensor_panorama_getcolor'] = f
let f = []
call add(f,{'word':'sensor_panorama_getcone','kind':'f','menu':'void(const int,const vector,const float,const vector,const vector,const float,const float,float,vector,vector,float)'})
call add(f,{'word':'sensor_panorama_getcone','kind':'f','menu':'float(const int,const vector,const float,const vector,const vector,const float,const float,vector,vector,float)'})
let c['sensor_panorama_getcone'] = f
let f = []
call add(f,{'word':'sensor_panorama_getdepth','kind':'f','menu':'float(const int,const vector)'})
let c['sensor_panorama_getdepth'] = f
let f = []
call add(f,{'word':'sensor_save','kind':'f','menu':'int(const int,const string,const string)'})
let c['sensor_save'] = f
let f = []
call add(f,{'word':'serialize','kind':'f','menu':'float[](const matrix2[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const matrix3[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const matrix[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const vector4[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const vector2[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const vector[])'})
let c['serialize'] = f
let f = []
call add(f,{'word':'set','kind':'f','menu':'matrix2(const matrix2)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const float,const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const int)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const vector2,const vector2)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const matrix2)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const float,const float,const float,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const int)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const vector,const vector,const vector)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const vector[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const matrix2)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const int)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const vector4,const vector4,const vector4,const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const vector4[])'})
call add(f,{'word':'set','kind':'f','menu':'bsdf(const bsdf)'})
call add(f,{'word':'set','kind':'f','menu':'light(const light)'})
call add(f,{'word':'set','kind':'f','menu':'material(const material)'})
call add(f,{'word':'set','kind':'f','menu':'float(const float)'})
call add(f,{'word':'set','kind':'f','menu':'float(const int)'})
call add(f,{'word':'set','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'set','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'int(const float)'})
call add(f,{'word':'set','kind':'f','menu':'int(const int)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const float,const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const int)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const vector2)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const vector)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'string(const string)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const int)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const vector)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const vector2)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix2[](const matrix2[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix2[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix3[](const matrix3[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix3[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix[](const matrix[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'bsdf[](const bsdf[])'})
call add(f,{'word':'set','kind':'f','menu':'light[](const light[])'})
call add(f,{'word':'set','kind':'f','menu':'material[](const material[])'})
call add(f,{'word':'set','kind':'f','menu':'float[](const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const float)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const vector)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'float[](const int[])'})
call add(f,{'word':'set','kind':'f','menu':'int[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'int[](const int[])'})
call add(f,{'word':'set','kind':'f','menu':'vector4[](const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'vector4[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'vector4[](const vector4[])'})
call add(f,{'word':'set','kind':'f','menu':'string[](const string[])'})
call add(f,{'word':'set','kind':'f','menu':'vector2[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'vector2[](const vector2[])'})
call add(f,{'word':'set','kind':'f','menu':'vector[](const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'vector[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'vector[](const vector[])'})
let c['set'] = f
let f = []
call add(f,{'word':'setagentclipnames','kind':'f','menu':'void(const int,const int,const string[])'})
let c['setagentclipnames'] = f
let f = []
call add(f,{'word':'setagentclips','kind':'f','menu':'int(const int,const int,const string[],const float[],const float[],const string[],const int[],const int[],const float[],const int[])'})
let c['setagentclips'] = f
let f = []
call add(f,{'word':'setagentcliptimes','kind':'f','menu':'void(const int,const int,const float[])'})
let c['setagentcliptimes'] = f
let f = []
call add(f,{'word':'setagentclipweights','kind':'f','menu':'void(const int,const int,const float[])'})
let c['setagentclipweights'] = f
let f = []
call add(f,{'word':'setagentcollisionlayer','kind':'f','menu':'void(const int,const int,const string)'})
let c['setagentcollisionlayer'] = f
let f = []
call add(f,{'word':'setagentcurrentlayer','kind':'f','menu':'void(const int,const int,const string)'})
let c['setagentcurrentlayer'] = f
let f = []
call add(f,{'word':'setagentlocaltransform','kind':'f','menu':'int(const int,const int,const matrix,const int)'})
let c['setagentlocaltransform'] = f
let f = []
call add(f,{'word':'setagentlocaltransforms','kind':'f','menu':'void(const int,const int,const matrix[])'})
let c['setagentlocaltransforms'] = f
let f = []
call add(f,{'word':'setagentworldtransform','kind':'f','menu':'int(const int,const int,const matrix,const int)'})
let c['setagentworldtransform'] = f
let f = []
call add(f,{'word':'setagentworldtransforms','kind':'f','menu':'void(const int,const int,const matrix[])'})
let c['setagentworldtransforms'] = f
let f = []
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix2)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix2,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix3)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix3,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const float)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const float,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const int)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const int,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector4)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector4,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const string,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector2)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector2,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix2[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix2[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix3[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix3[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const float[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const float[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const int[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const int[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector4[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector4[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const string[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const string[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector2[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector2[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector[],const string)'})
let c['setattrib'] = f
let f = []
call add(f,{'word':'setattribtypeinfo','kind':'f','menu':'int(const int,const string,const string,const string)'})
let c['setattribtypeinfo'] = f
let f = []
call add(f,{'word':'setcomp','kind':'f','menu':'void(export matrix2,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'matrix2(export matrix2[],const matrix2,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export matrix3,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'matrix3(export matrix3[],const matrix3,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export matrix,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'matrix(export matrix[],const matrix,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'bsdf(export bsdf[],const bsdf,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'light(export light[],const light,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'material(export material[],const material,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export matrix2,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export matrix3,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export matrix,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export vector4,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export vector2,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export vector,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export float[],const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'int(export int[],const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export vector4,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'vector4(export vector4[],const vector4,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'string(export string[],const string,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export vector2,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'vector2(export vector2[],const vector2,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export vector,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'vector(export vector[],const vector,const int)'})
let c['setcomp'] = f
let f = []
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix2[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix2[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix3[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix3[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector4[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector4[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector2[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector2[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector[],const string)'})
let c['setdetailattrib'] = f
let f = []
call add(f,{'word':'setedgegroup','kind':'f','menu':'int(const int,const string,const int,const int,const int)'})
let c['setedgegroup'] = f
let f = []
let c['setelem'] = f
let f = []
call add(f,{'word':'setpackedtransform','kind':'f','menu':'void(const int,const int,const matrix)'})
let c['setpackedtransform'] = f
let f = []
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const float)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const float,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector4)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector4,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const string,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector2)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector2,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const float[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const float[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const int[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const int[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector4[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector4[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const string[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const string[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector2[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector2[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector[],const string)'})
let c['setpointattrib'] = f
let f = []
call add(f,{'word':'setpointgroup','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setpointgroup','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
let c['setpointgroup'] = f
let f = []
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const float)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const float,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector4)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector4,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const string,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector2)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector2,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const float[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const float[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const int[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const int[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector4[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector4[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const string[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const string[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector2[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector2[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector[],const string)'})
let c['setprimattrib'] = f
let f = []
call add(f,{'word':'setprimgroup','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setprimgroup','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
let c['setprimgroup'] = f
let f = []
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix2)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix2,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix3)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix3,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const float)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const float,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector4)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector4,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const string,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector2)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector2,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix2[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix2[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix3[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix3[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const float[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const float[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const int[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const int[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector4[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector4[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const string[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const string[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector2[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector2[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector[],const string)'})
let c['setprimintrinsic'] = f
let f = []
call add(f,{'word':'setprimvertex','kind':'f','menu':'int(const int,const int,const int,const int)'})
let c['setprimvertex'] = f
let f = []
call add(f,{'word':'setsamplestore','kind':'f','menu':'int(const string,const vector,const float)'})
call add(f,{'word':'setsamplestore','kind':'f','menu':'int(const string,const vector,const int)'})
call add(f,{'word':'setsamplestore','kind':'f','menu':'int(const string,const vector,const vector4)'})
call add(f,{'word':'setsamplestore','kind':'f','menu':'int(const string,const vector,const vector)'})
let c['setsamplestore'] = f
let f = []
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix2)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix2,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix3)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix3,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const float)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const float,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const int)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const int,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector4)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector4,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector2)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector2,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix2[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix2[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix3[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix3[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const float[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const float[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const int[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const int[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector4[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector4[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector2[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector2[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector[],const string)'})
let c['setvertexattrib'] = f
let f = []
call add(f,{'word':'setvertexgroup','kind':'f','menu':'int(const int,const string,const int,const int,const int)'})
call add(f,{'word':'setvertexgroup','kind':'f','menu':'int(const int,const string,const int,const int,const int,const string)'})
let c['setvertexgroup'] = f
let f = []
call add(f,{'word':'setvertexpoint','kind':'f','menu':'int(const int,const int,const int,const int)'})
let c['setvertexpoint'] = f
let f = []
call add(f,{'word':'shadowmap','kind':'f','menu':'float(const string,const vector,const float,const float,const float)'})
call add(f,{'word':'shadowmap','kind':'f','menu':'vector(const string,const vector,const float,const float,const float)'})
call add(f,{'word':'shadowmap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector,const float,const float,const float)'})
let c['shadowmap'] = f
let f = []
call add(f,{'word':'shl','kind':'f','menu':'int(const int,const int)'})
let c['shl'] = f
let f = []
call add(f,{'word':'shr','kind':'f','menu':'int(const int,const int)'})
let c['shr'] = f
let f = []
call add(f,{'word':'shrz','kind':'f','menu':'int(const int,const int)'})
let c['shrz'] = f
let f = []
call add(f,{'word':'sign','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sign','kind':'f','menu':'int(const int)'})
call add(f,{'word':'sign','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sign','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sign','kind':'f','menu':'vector(const vector)'})
let c['sign'] = f
let f = []
call add(f,{'word':'simport','kind':'f','menu':'int(const string,export matrix2)'})
call add(f,{'word':'simport','kind':'f','menu':'int(const string,export matrix3)'})
call add(f,{'word':'simport','kind':'f','menu':'int(const string,export matrix)'})
call add(f,{'word':'simport','kind':'f','menu':'int(const string,export float)'})
call add(f,{'word':'simport','kind':'f','menu':'int(const string,export int)'})
call add(f,{'word':'simport','kind':'f','menu':'int(const string,export vector4)'})
call add(f,{'word':'simport','kind':'f','menu':'int(const string,export string)'})
call add(f,{'word':'simport','kind':'f','menu':'int(const string,export vector2)'})
call add(f,{'word':'simport','kind':'f','menu':'int(const string,export vector)'})
let c['simport'] = f
let f = []
call add(f,{'word':'sin','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sin','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sin','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sin','kind':'f','menu':'vector(const vector)'})
let c['sin'] = f
let f = []
call add(f,{'word':'sinh','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sinh','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sinh','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sinh','kind':'f','menu':'vector(const vector)'})
let c['sinh'] = f
let f = []
call add(f,{'word':'sleep','kind':'f','menu':'void(const int)'})
let c['sleep'] = f
let f = []
call add(f,{'word':'slerp','kind':'f','menu':'vector4(const vector4,const vector4,const float)'})
call add(f,{'word':'slerp','kind':'f','menu':'vector4(const vector4[],const float[])'})
let c['slerp'] = f
let f = []
call add(f,{'word':'slice','kind':'f','menu':'string(const string,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string(const string,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string(const string,const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix2[](const matrix2[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix2[](const matrix2[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix2[](const matrix2[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix3[](const matrix3[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix3[](const matrix3[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix3[](const matrix3[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix[](const matrix[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix[](const matrix[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix[](const matrix[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'float[](const float[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'float[](const float[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'float[](const float[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'int[](const int[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'int[](const int[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'int[](const int[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector4[](const vector4[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector4[](const vector4[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector4[](const vector4[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string[](const string[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string[](const string[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string[](const string[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector2[](const vector2[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector2[](const vector2[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector2[](const vector2[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector[](const vector[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector[](const vector[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector[](const vector[],const int,const int,const int,const int,const int,const int)'})
let c['slice'] = f
let f = []
call add(f,{'word':'slideframe','kind':'f','menu':'vector(const vector,const vector,const vector,const vector,const vector)'})
let c['slideframe'] = f
let f = []
call add(f,{'word':'smooth','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'smooth','kind':'f','menu':'float(const float,const float,const float,const float)'})
let c['smooth'] = f
let f = []
call add(f,{'word':'smoothrotation','kind':'f','menu':'vector(const int,const vector,const vector)'})
let c['smoothrotation'] = f
let f = []
call add(f,{'word':'snoise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'snoise','kind':'f','menu':'float(const vector,const int,const float,const float)'})
call add(f,{'word':'snoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'snoise','kind':'f','menu':'float(const vector,const int,const int,const int,const int,const float,const float)'})
call add(f,{'word':'snoise','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'snoise','kind':'f','menu':'vector(const vector,const int,const float,const float)'})
call add(f,{'word':'snoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
call add(f,{'word':'snoise','kind':'f','menu':'vector(const vector,const int,const int,const int,const int,const float,const float)'})
let c['snoise'] = f
let f = []
call add(f,{'word':'solid_angle','kind':'f','menu':'float(const bsdf,const int)'})
let c['solid_angle'] = f
let f = []
call add(f,{'word':'solveconstraint','kind':'f','menu':'vector[](const float[],const vector,const float,const matrix,const vector[])'})
let c['solveconstraint'] = f
let f = []
call add(f,{'word':'solvecubic','kind':'f','menu':'int(const float,const float,const float,const float,float,float,float)'})
call add(f,{'word':'solvecubic','kind':'f','menu':'int(const float,const float,const float,const float,vector2,vector2,vector2)'})
let c['solvecubic'] = f
let f = []
call add(f,{'word':'solvecurve','kind':'f','menu':'vector[](const string,const float[],const int,const int,const vector,const int,const matrix)'})
call add(f,{'word':'solvecurve','kind':'f','menu':'vector[](const float[],const int,const int,const vector,const vector[],const vector[])'})
let c['solvecurve'] = f
let f = []
call add(f,{'word':'solvefbik','kind':'f','menu':'matrix[](const matrix[],const int[],const int[],const matrix[],const int)'})
call add(f,{'word':'solvefbik','kind':'f','menu':'matrix[](const matrix[],const int[],const int[],const matrix[],const int,const float,const int)'})
call add(f,{'word':'solvefbik','kind':'f','menu':'matrix[](const matrix[],const int[],const int[],const matrix[],const int,const float,const int,const float[],const int[],const int[])'})
call add(f,{'word':'solvefbik','kind':'f','menu':'matrix[](const matrix[],const int[],const int[],const matrix[],const int,const float,const int,const float[],const int[],const int[],const matrix[],const vector4[],const vector[])'})
let c['solvefbik'] = f
let f = []
call add(f,{'word':'solveik','kind':'f','menu':'vector[](const float[],const vector,const vector,const float,const int,const float,const int,const float,const matrix,const vector[])'})
let c['solveik'] = f
let f = []
call add(f,{'word':'solvepoly','kind':'f','menu':'int(const float[],float[])'})
call add(f,{'word':'solvepoly','kind':'f','menu':'int(const float[],float[],const int)'})
let c['solvepoly'] = f
let f = []
call add(f,{'word':'solvequadratic','kind':'f','menu':'int(const float,const float,const float,float,float)'})
call add(f,{'word':'solvequadratic','kind':'f','menu':'int(const float,const float,const float,vector2,vector2)'})
let c['solvequadratic'] = f
let f = []
call add(f,{'word':'sort','kind':'f','menu':'float[](const float[])'})
call add(f,{'word':'sort','kind':'f','menu':'int[](const int[])'})
call add(f,{'word':'sort','kind':'f','menu':'string[](const string[])'})
let c['sort'] = f
let f = []
call add(f,{'word':'specular','kind':'f','menu':'bsdf(const vector)'})
let c['specular'] = f
let f = []
call add(f,{'word':'specularBRDF','kind':'f','menu':'float(const vector,const vector,const vector,const float)'})
let c['specularBRDF'] = f
let f = []
call add(f,{'word':'spline','kind':'f','menu':'float(const string,const float,const float)'})
call add(f,{'word':'spline','kind':'f','menu':'float(const string,const float,const float[])'})
call add(f,{'word':'spline','kind':'f','menu':'float(const string[],const float,const float[])'})
call add(f,{'word':'spline','kind':'f','menu':'float(const string[],const float,const float[],const float[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector4(const string,const float,const vector4)'})
call add(f,{'word':'spline','kind':'f','menu':'vector4(const string,const float,const vector4[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector4(const string[],const float,const vector4[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector4(const string[],const float,const vector4[],const float[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector(const string,const float,const vector)'})
call add(f,{'word':'spline','kind':'f','menu':'vector(const string,const float,const vector[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector(const string[],const float,const vector[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector(const string[],const float,const vector[],const float[])'})
let c['spline'] = f
let f = []
call add(f,{'word':'split','kind':'f','menu':'string[](const string)'})
call add(f,{'word':'split','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'split','kind':'f','menu':'string[](const string,const string,const int)'})
let c['split'] = f
let f = []
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[],const int,const int,const float,const float[])'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[],const int,const int,const float,const float[])'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[],const int,const int,const float)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[],const int,const int,const float)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[],const int,const int)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[],const int,const int)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[],const int)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[],const int)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[])'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[])'})
let c['split_bsdf'] = f
let f = []
call add(f,{'word':'splitpath','kind':'f','menu':'void(const string,string,string)'})
call add(f,{'word':'splitpath','kind':'f','menu':'string(const string,string)'})
let c['splitpath'] = f
let f = []
call add(f,{'word':'sprintf','kind':'f','menu':'string(const string)'})
let c['sprintf'] = f
let f = []
call add(f,{'word':'sqrt','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sqrt','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sqrt','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sqrt','kind':'f','menu':'vector(const vector)'})
let c['sqrt'] = f
let f = []
call add(f,{'word':'sssapprox','kind':'f','menu':'bsdf(const vector,const float,const float,const float)'})
let c['sssapprox'] = f
let f = []
call add(f,{'word':'startswith','kind':'f','menu':'int(const string,const string)'})
let c['startswith'] = f
let f = []
call add(f,{'word':'strip','kind':'f','menu':'string(const string)'})
call add(f,{'word':'strip','kind':'f','menu':'string(const string,const string)'})
let c['strip'] = f
let f = []
call add(f,{'word':'strlen','kind':'f','menu':'int(const string)'})
let c['strlen'] = f
let f = []
let c['struct'] = f
let f = []
let c['sub'] = f
let f = []
call add(f,{'word':'sum','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sum','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'sum','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'sum','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'sum','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'sum','kind':'f','menu':'int(const int)'})
call add(f,{'word':'sum','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'sum','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'sum','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'sum','kind':'f','menu':'vector(const vector[])'})
let c['sum'] = f
let f = []
call add(f,{'word':'surfacedist','kind':'f','menu':'float(const int,const string,const string,const int,const float,int,const string)'})
call add(f,{'word':'surfacedist','kind':'f','menu':'float(const string,const string,const string,const int,const float,int,const string)'})
let c['surfacedist'] = f
let f = []
let c['swap'] = f
let f = []
call add(f,{'word':'switch','kind':'f','menu':'bsdf(const bsdf,const bsdf)'})
let c['switch'] = f
let f = []
call add(f,{'word':'swizzle','kind':'f','menu':'vector4(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'swizzle','kind':'f','menu':'vector2(const vector2,const int,const int)'})
call add(f,{'word':'swizzle','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
let c['swizzle'] = f
let f = []
call add(f,{'word':'tan','kind':'f','menu':'float(const float)'})
call add(f,{'word':'tan','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'tan','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'tan','kind':'f','menu':'vector(const vector)'})
let c['tan'] = f
let f = []
call add(f,{'word':'tanh','kind':'f','menu':'float(const float)'})
call add(f,{'word':'tanh','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'tanh','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'tanh','kind':'f','menu':'vector(const vector)'})
let c['tanh'] = f
let f = []
call add(f,{'word':'tet_adjacent','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'tet_adjacent','kind':'f','menu':'int(const string,const int,const int)'})
let c['tet_adjacent'] = f
let f = []
call add(f,{'word':'tet_faceindex','kind':'f','menu':'int(const int,const int)'})
let c['tet_faceindex'] = f
let f = []
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export matrix3)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export matrix)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export float)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export int)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export vector4)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export string)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export vector)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export int[])'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export string[])'})
let c['teximport'] = f
let f = []
call add(f,{'word':'texprintf','kind':'f','menu':'string(const float,const float,const string)'})
let c['texprintf'] = f
let f = []
call add(f,{'word':'texture','kind':'f','menu':'vector4(const string)'})
call add(f,{'word':'texture','kind':'f','menu':'vector4(const string,const float,const float)'})
call add(f,{'word':'texture','kind':'f','menu':'vector4(const string,const float,const float,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'texture','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'texture','kind':'f','menu':'vector(const string,const float,const float)'})
call add(f,{'word':'texture','kind':'f','menu':'vector(const string,const float,const float,const float,const float,const float,const float,const float,const float)'})
let c['texture'] = f
let f = []
call add(f,{'word':'texture3d','kind':'f','menu':'matrix3(const string,const string,const vector)'})
call add(f,{'word':'texture3d','kind':'f','menu':'matrix(const string,const string,const vector)'})
call add(f,{'word':'texture3d','kind':'f','menu':'float(const string,const string,const vector)'})
call add(f,{'word':'texture3d','kind':'f','menu':'vector4(const string,const string,const vector)'})
call add(f,{'word':'texture3d','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['texture3d'] = f
let f = []
call add(f,{'word':'texture3dBox','kind':'f','menu':'void(const string,const string,vector,vector)'})
call add(f,{'word':'texture3dBox','kind':'f','menu':'vector(const string,const string,vector)'})
let c['texture3dBox'] = f
let f = []
call add(f,{'word':'titlecase','kind':'f','menu':'string(const string)'})
let c['titlecase'] = f
let f = []
call add(f,{'word':'toNDC','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'toNDC','kind':'f','menu':'vector(const vector)'})
let c['toNDC'] = f
let f = []
call add(f,{'word':'tolower','kind':'f','menu':'string(const string)'})
let c['tolower'] = f
let f = []
call add(f,{'word':'toupper','kind':'f','menu':'string(const string)'})
let c['toupper'] = f
let f = []
call add(f,{'word':'trace','kind':'f','menu':'int(const vector,const vector,const float)'})
call add(f,{'word':'trace','kind':'f','menu':'void(vector,vector,float,const vector,const vector,const float,const float)'})
call add(f,{'word':'trace','kind':'f','menu':'vector(vector,float,const vector,const vector,const float,const float)'})
let c['trace'] = f
let f = []
call add(f,{'word':'translate','kind':'f','menu':'void(export matrix,const vector4)'})
call add(f,{'word':'translate','kind':'f','menu':'void(export matrix,const vector)'})
let c['translate'] = f
let f = []
call add(f,{'word':'translucent','kind':'f','menu':'bsdf(const vector,const vector)'})
let c['translucent'] = f
let f = []
call add(f,{'word':'transpose','kind':'f','menu':'void(export matrix2)'})
call add(f,{'word':'transpose','kind':'f','menu':'matrix2(const matrix2)'})
call add(f,{'word':'transpose','kind':'f','menu':'void(export matrix3)'})
call add(f,{'word':'transpose','kind':'f','menu':'matrix3(const matrix3)'})
call add(f,{'word':'transpose','kind':'f','menu':'void(export matrix)'})
call add(f,{'word':'transpose','kind':'f','menu':'matrix(const matrix)'})
let c['transpose'] = f
let f = []
call add(f,{'word':'trunc','kind':'f','menu':'float(const float)'})
call add(f,{'word':'trunc','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'trunc','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'trunc','kind':'f','menu':'vector(const vector)'})
let c['trunc'] = f
let f = []
call add(f,{'word':'tw_nspace','kind':'f','menu':'vector(const vector)'})
let c['tw_nspace'] = f
let f = []
call add(f,{'word':'tw_space','kind':'f','menu':'matrix()'})
call add(f,{'word':'tw_space','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'tw_space','kind':'f','menu':'vector(const vector)'})
let c['tw_space'] = f
let f = []
call add(f,{'word':'tw_vspace','kind':'f','menu':'vector(const vector)'})
let c['tw_vspace'] = f
let f = []
call add(f,{'word':'uniqueval','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'uniqueval','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'uniqueval','kind':'f','menu':'string(const int,const string,const string,const int)'})
call add(f,{'word':'uniqueval','kind':'f','menu':'string(const string,const string,const string,const int)'})
let c['uniqueval'] = f
let f = []
call add(f,{'word':'uniquevals','kind':'f','menu':'int[](const int,const string,const string)'})
call add(f,{'word':'uniquevals','kind':'f','menu':'int[](const string,const string,const string)'})
call add(f,{'word':'uniquevals','kind':'f','menu':'string[](const int,const string,const string)'})
call add(f,{'word':'uniquevals','kind':'f','menu':'string[](const string,const string,const string)'})
let c['uniquevals'] = f
let f = []
call add(f,{'word':'unpack_intfromsafefloat','kind':'f','menu':'int(const float)'})
let c['unpack_intfromsafefloat'] = f
let f = []
call add(f,{'word':'unserialize','kind':'f','menu':'matrix2[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'matrix3[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'matrix[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'vector4[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'vector2[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'vector[](const float[])'})
let c['unserialize'] = f
let f = []
call add(f,{'word':'upush','kind':'f','menu':'void(export matrix2[],const matrix2)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export matrix3[],const matrix3)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export matrix[],const matrix)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export bsdf[],const bsdf)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export light[],const light)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export material[],const material)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export float[],const float)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export int[],const int)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export vector4[],const vector4)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export string[],const string)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export vector2[],const vector2)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export vector[],const vector)'})
let c['upush'] = f
let f = []
let c['urandom'] = f
let f = []
call add(f,{'word':'usd_addtransform','kind':'f','menu':'int(const int,const string,const string,const matrix)'})
let c['usd_addtransform'] = f
let f = []
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector[](const string,const string,const string)'})
let c['usd_attrib'] = f
let f = []
call add(f,{'word':'usd_attriblen','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_attriblen','kind':'f','menu':'int(const string,const string,const string)'})
let c['usd_attriblen'] = f
let f = []
call add(f,{'word':'usd_attribnames','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'usd_attribnames','kind':'f','menu':'string[](const string,const string)'})
let c['usd_attribnames'] = f
let f = []
call add(f,{'word':'usd_attribsize','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_attribsize','kind':'f','menu':'int(const string,const string,const string)'})
let c['usd_attribsize'] = f
let f = []
call add(f,{'word':'usd_attribtypename','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'usd_attribtypename','kind':'f','menu':'string(const string,const string,const string)'})
let c['usd_attribtypename'] = f
let f = []
call add(f,{'word':'usd_cleartransformorder','kind':'f','menu':'int(const int,const string)'})
let c['usd_cleartransformorder'] = f
let f = []
call add(f,{'word':'usd_drawmode','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_drawmode','kind':'f','menu':'string(const string,const string)'})
let c['usd_drawmode'] = f
let f = []
call add(f,{'word':'usd_isactive','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'usd_isactive','kind':'f','menu':'int(const string,const string)'})
let c['usd_isactive'] = f
let f = []
call add(f,{'word':'usd_isarray','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_isarray','kind':'f','menu':'int(const string,const string,const string)'})
let c['usd_isarray'] = f
let f = []
call add(f,{'word':'usd_isattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_isattrib','kind':'f','menu':'int(const string,const string,const string)'})
let c['usd_isattrib'] = f
let f = []
call add(f,{'word':'usd_isprim','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'usd_isprim','kind':'f','menu':'int(const string,const string)'})
let c['usd_isprim'] = f
let f = []
call add(f,{'word':'usd_isstage','kind':'f','menu':'int(const int)'})
call add(f,{'word':'usd_isstage','kind':'f','menu':'int(const string)'})
let c['usd_isstage'] = f
let f = []
call add(f,{'word':'usd_istransformreset','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'usd_istransformreset','kind':'f','menu':'int(const string,const string)'})
let c['usd_istransformreset'] = f
let f = []
call add(f,{'word':'usd_isvisible','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'usd_isvisible','kind':'f','menu':'int(const string,const string)'})
let c['usd_isvisible'] = f
let f = []
call add(f,{'word':'usd_kind','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_kind','kind':'f','menu':'string(const string,const string)'})
let c['usd_kind'] = f
let f = []
call add(f,{'word':'usd_localtransform','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'usd_localtransform','kind':'f','menu':'matrix(const string,const string)'})
let c['usd_localtransform'] = f
let f = []
call add(f,{'word':'usd_name','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_name','kind':'f','menu':'string(const string,const string)'})
let c['usd_name'] = f
let f = []
call add(f,{'word':'usd_parentpath','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_parentpath','kind':'f','menu':'string(const string,const string)'})
let c['usd_parentpath'] = f
let f = []
call add(f,{'word':'usd_purpose','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_purpose','kind':'f','menu':'string(const string,const string)'})
let c['usd_purpose'] = f
let f = []
call add(f,{'word':'usd_setactive','kind':'f','menu':'int(const int,const string,const int)'})
let c['usd_setactive'] = f
let f = []
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix2)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix3)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const float)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector4)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector2)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix2[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix3[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const float[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const int[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector4[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const string[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector2[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector[])'})
let c['usd_setattrib'] = f
let f = []
call add(f,{'word':'usd_setdrawmode','kind':'f','menu':'int(const int,const string,const string)'})
let c['usd_setdrawmode'] = f
let f = []
call add(f,{'word':'usd_setkind','kind':'f','menu':'int(const int,const string,const string)'})
let c['usd_setkind'] = f
let f = []
call add(f,{'word':'usd_setpurpose','kind':'f','menu':'int(const int,const string,const string)'})
let c['usd_setpurpose'] = f
let f = []
call add(f,{'word':'usd_setvariantselection','kind':'f','menu':'int(const int,const string,const string,const string)'})
let c['usd_setvariantselection'] = f
let f = []
call add(f,{'word':'usd_setvisible','kind':'f','menu':'int(const int,const string,const int)'})
let c['usd_setvisible'] = f
let f = []
call add(f,{'word':'usd_transformorder','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'usd_transformorder','kind':'f','menu':'string[](const string,const string)'})
let c['usd_transformorder'] = f
let f = []
call add(f,{'word':'usd_typename','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_typename','kind':'f','menu':'string(const string,const string)'})
let c['usd_typename'] = f
let f = []
call add(f,{'word':'usd_variants','kind':'f','menu':'string[](const int,const string,const string)'})
call add(f,{'word':'usd_variants','kind':'f','menu':'string[](const string,const string,const string)'})
let c['usd_variants'] = f
let f = []
call add(f,{'word':'usd_variantselection','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'usd_variantselection','kind':'f','menu':'string(const string,const string,const string)'})
let c['usd_variantselection'] = f
let f = []
call add(f,{'word':'usd_variantsets','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'usd_variantsets','kind':'f','menu':'string[](const string,const string)'})
let c['usd_variantsets'] = f
let f = []
call add(f,{'word':'usd_worldtransform','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'usd_worldtransform','kind':'f','menu':'matrix(const string,const string)'})
let c['usd_worldtransform'] = f
let f = []
call add(f,{'word':'uvdist','kind':'f','menu':'float(const int,const string,const string,const vector,int,vector)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const int,const string,const string,const vector,int,vector,const float)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const int,const string,const vector,int,vector)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const int,const string,const vector,int,vector,const float)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const string,const string,const string,const vector,int,vector)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const string,const string,const string,const vector,int,vector,const float)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const string,const string,const vector,int,vector)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const string,const string,const vector,int,vector,const float)'})
let c['uvdist'] = f
let f = []
call add(f,{'word':'uvintersect','kind':'f','menu':'int(const int,const string,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'uvintersect','kind':'f','menu':'int(const int,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'uvintersect','kind':'f','menu':'int(const string,const string,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'uvintersect','kind':'f','menu':'int(const string,const string,const vector,const vector,vector,vector)'})
let c['uvintersect'] = f
let f = []
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector[](const string,const string,const string,const vector)'})
let c['uvsample'] = f
let f = []
call add(f,{'word':'uvunwrap','kind':'f','menu':'int(const string,const float,const float,const float,vector,vector)'})
call add(f,{'word':'uvunwrap','kind':'f','menu':'int(const string,const float,const float,const float,vector,vector,vector,vector)'})
let c['uvunwrap'] = f
let f = []
call add(f,{'word':'variance','kind':'f','menu':'float(const float,float,int)'})
let c['variance'] = f
let f = []
call add(f,{'word':'vertex','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector[](const string,const string,const int,const int)'})
let c['vertex'] = f
let f = []
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix2(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix2(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix3(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix3(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'float(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'float(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'int(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'int(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector4(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector4(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'string(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'string(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector2(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector2(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix2[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix2[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix3[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix3[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'float[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'float[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'int[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'int[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector4[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector4[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'string[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'string[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector2[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector2[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector[](const string,const string,const int,int)'})
let c['vertexattrib'] = f
let f = []
call add(f,{'word':'vertexattribsize','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'vertexattribsize','kind':'f','menu':'int(const string,const string)'})
let c['vertexattribsize'] = f
let f = []
call add(f,{'word':'vertexattribtype','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'vertexattribtype','kind':'f','menu':'int(const string,const string)'})
let c['vertexattribtype'] = f
let f = []
call add(f,{'word':'vertexattribtypeinfo','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'vertexattribtypeinfo','kind':'f','menu':'string(const string,const string)'})
let c['vertexattribtypeinfo'] = f
let f = []
call add(f,{'word':'vertexhedge','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexhedge','kind':'f','menu':'int(const string,const int)'})
let c['vertexhedge'] = f
let f = []
call add(f,{'word':'vertexindex','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'vertexindex','kind':'f','menu':'int(const string,const int,const int)'})
let c['vertexindex'] = f
let f = []
call add(f,{'word':'vertexnext','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexnext','kind':'f','menu':'int(const string,const int)'})
let c['vertexnext'] = f
let f = []
call add(f,{'word':'vertexpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexpoint','kind':'f','menu':'int(const string,const int)'})
let c['vertexpoint'] = f
let f = []
call add(f,{'word':'vertexprev','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexprev','kind':'f','menu':'int(const string,const int)'})
let c['vertexprev'] = f
let f = []
call add(f,{'word':'vertexprim','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexprim','kind':'f','menu':'int(const string,const int)'})
let c['vertexprim'] = f
let f = []
call add(f,{'word':'vertexprimindex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexprimindex','kind':'f','menu':'int(const string,const int)'})
let c['vertexprimindex'] = f
let f = []
call add(f,{'word':'vnoise','kind':'f','menu':'void(const float,const float,const float,const float,int,float,float,float,float,float,float)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const float,const float,const float,const float,float,float,float,float,float,float)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const float,const float,const float,const float,int,float,float,float,float,float,float,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const float,const float,const float,const float,float,float,float,float,float,float,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const float,const float,float,float,float,float)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const float,const float,float,float,float,float,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector4,const vector4,int,float,float,vector4,vector4)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector4,const vector4,float,float,vector4,vector4)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector4,const vector4,int,float,float,vector4,vector4,const int,const int,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector4,const vector4,float,float,vector4,vector4,const int,const int,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector4,const vector4,int,float,float,vector4,vector4,const vector4)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector4,const vector4,float,float,vector4,vector4,const vector4)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector,const vector,int,float,float,vector,vector)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector,const vector,float,float,vector,vector)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector,const vector,int,float,float,vector,vector,const int,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector,const vector,float,float,vector,vector,const int,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector,const vector,int,float,float,vector,vector,const vector)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector,const vector,float,float,vector,vector,const vector)'})
let c['vnoise'] = f
let f = []
call add(f,{'word':'volume','kind':'f','menu':'float(const vector)'})
let c['volume'] = f
let f = []
call add(f,{'word':'volumegradient','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumegradient','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumegradient','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumegradient','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumegradient'] = f
let f = []
call add(f,{'word':'volumeindex','kind':'f','menu':'float(const int,const int,const vector)'})
call add(f,{'word':'volumeindex','kind':'f','menu':'float(const int,const string,const vector)'})
call add(f,{'word':'volumeindex','kind':'f','menu':'float(const string,const int,const vector)'})
call add(f,{'word':'volumeindex','kind':'f','menu':'float(const string,const string,const vector)'})
let c['volumeindex'] = f
let f = []
call add(f,{'word':'volumeindexactive','kind':'f','menu':'int(const int,const int,const vector)'})
call add(f,{'word':'volumeindexactive','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'volumeindexactive','kind':'f','menu':'int(const string,const int,const vector)'})
call add(f,{'word':'volumeindexactive','kind':'f','menu':'int(const string,const string,const vector)'})
let c['volumeindexactive'] = f
let f = []
call add(f,{'word':'volumeindexorigin','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'volumeindexorigin','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'volumeindexorigin','kind':'f','menu':'vector(const string,const int)'})
call add(f,{'word':'volumeindexorigin','kind':'f','menu':'vector(const string,const string)'})
let c['volumeindexorigin'] = f
let f = []
call add(f,{'word':'volumeindextopos','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumeindextopos','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumeindextopos','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumeindextopos','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumeindextopos'] = f
let f = []
call add(f,{'word':'volumeindexv','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumeindexv','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumeindexv','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumeindexv','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumeindexv'] = f
let f = []
call add(f,{'word':'volumepostoindex','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumepostoindex','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumepostoindex','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumepostoindex','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumepostoindex'] = f
let f = []
call add(f,{'word':'volumeres','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'volumeres','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'volumeres','kind':'f','menu':'vector(const string,const int)'})
call add(f,{'word':'volumeres','kind':'f','menu':'vector(const string,const string)'})
let c['volumeres'] = f
let f = []
call add(f,{'word':'volumesample','kind':'f','menu':'float(const int,const int,const vector)'})
call add(f,{'word':'volumesample','kind':'f','menu':'float(const int,const string,const vector)'})
call add(f,{'word':'volumesample','kind':'f','menu':'float(const string,const int,const vector)'})
call add(f,{'word':'volumesample','kind':'f','menu':'float(const string,const string,const vector)'})
let c['volumesample'] = f
let f = []
call add(f,{'word':'volumesamplev','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumesamplev','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumesamplev','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumesamplev','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumesamplev'] = f
let f = []
call add(f,{'word':'volumevoxeldiameter','kind':'f','menu':'float(const int,const int)'})
call add(f,{'word':'volumevoxeldiameter','kind':'f','menu':'float(const int,const string)'})
call add(f,{'word':'volumevoxeldiameter','kind':'f','menu':'float(const string,const int)'})
call add(f,{'word':'volumevoxeldiameter','kind':'f','menu':'float(const string,const string)'})
let c['volumevoxeldiameter'] = f
let f = []
call add(f,{'word':'vtransform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'vtransform','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'vtransform','kind':'f','menu':'vector(const vector,const matrix)'})
let c['vtransform'] = f
let f = []
call add(f,{'word':'warning','kind':'f','menu':'void(const string)'})
let c['warning'] = f
let f = []
let c['while'] = f
let f = []
call add(f,{'word':'wireblinn','kind':'f','menu':'bsdf(const vector,const float)'})
let c['wireblinn'] = f
let f = []
call add(f,{'word':'wirediffuse','kind':'f','menu':'bsdf(const vector)'})
let c['wirediffuse'] = f
let f = []
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,const float,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,const float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,const float,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,const float,float,float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,const float,int,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,const float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,int,float,float,float,float,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,float,float,float,float,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,int,float,float,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,float,float,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector4,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector4,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector4,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector4,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector4,int,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector4,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector2,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector2,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector2,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector2,float,float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector2,int,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector2,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector,int,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector,int,float,float,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector,float,float,const int,const int,const int)'})
let c['wnoise'] = f
let f = []
call add(f,{'word':'wo_nspace','kind':'f','menu':'vector(const vector)'})
let c['wo_nspace'] = f
let f = []
call add(f,{'word':'wo_space','kind':'f','menu':'matrix()'})
call add(f,{'word':'wo_space','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'wo_space','kind':'f','menu':'vector(const vector)'})
let c['wo_space'] = f
let f = []
call add(f,{'word':'wo_vspace','kind':'f','menu':'vector(const vector)'})
let c['wo_vspace'] = f
let f = []
call add(f,{'word':'writepixel','kind':'f','menu':'void(const string,const float,const float,const vector)'})
let c['writepixel'] = f
let f = []
call add(f,{'word':'wt_nspace','kind':'f','menu':'vector(const vector)'})
let c['wt_nspace'] = f
let f = []
call add(f,{'word':'wt_space','kind':'f','menu':'matrix()'})
call add(f,{'word':'wt_space','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'wt_space','kind':'f','menu':'vector(const vector)'})
let c['wt_space'] = f
let f = []
call add(f,{'word':'wt_vspace','kind':'f','menu':'vector(const vector)'})
let c['wt_vspace'] = f
let f = []
call add(f,{'word':'xnoise','kind':'f','menu':'float(const float)'})
call add(f,{'word':'xnoise','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'xnoise','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'xnoise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'xnoise','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'xnoise','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'xnoise','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'xnoise','kind':'f','menu':'vector(const vector)'})
let c['xnoise'] = f
let f = []
call add(f,{'word':'xnoised','kind':'f','menu':'void(const float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'float(const float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const float,const float,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'float(const float,const float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const float,const float,vector,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'vector(const float,const float,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const float,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'vector(const float,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const vector4,float,float,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'float(const vector4,float,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const vector4,vector,vector,vector,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'vector(const vector4,vector,vector,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const vector,float,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'float(const vector,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const vector,vector,vector,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'vector(const vector,vector,vector,vector)'})
let c['xnoised'] = f
let f = []
let c['xor'] = f
let f = []
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const string,const vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const string,const vector,int,vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const string,const vector,int,vector,const float)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const vector,int,vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const vector,int,vector,const float)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const string,const vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const string,const vector,int,vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const string,const vector,int,vector,const float)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const vector,int,vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const vector,int,vector,const float)'})
let c['xyzdist'] = f
let f = []
call add(f,{'word':'xyztorgb','kind':'f','menu':'vector(const vector)'})
let c['xyztorgb'] = f
let contexts['light'] = c
" CONTEXT: shadow 
let c = {}
let c['P'] = [{'word':'P','kind':'v','menu':'vector'}]
let c['I'] = [{'word':'I','kind':'v','menu':'vector'}]
let c['dPds'] = [{'word':'dPds','kind':'v','menu':'vector'}]
let c['dPdt'] = [{'word':'dPdt','kind':'v','menu':'vector'}]
let c['N'] = [{'word':'N','kind':'v','menu':'vector'}]
let c['Ng'] = [{'word':'Ng','kind':'v','menu':'vector'}]
let c['Cl'] = [{'word':'Cl','kind':'v','menu':'vector'}]
let c['L'] = [{'word':'L','kind':'v','menu':'vector'}]
let c['Ps'] = [{'word':'Ps','kind':'v','menu':'vector'}]
let c['Eye'] = [{'word':'Eye','kind':'v','menu':'vector'}]
let c['s'] = [{'word':'s','kind':'v','menu':'float'}]
let c['t'] = [{'word':'t','kind':'v','menu':'float'}]
let c['Time'] = [{'word':'Time','kind':'v','menu':'float'}]
let c['dPdz'] = [{'word':'dPdz','kind':'v','menu':'float'}]
let c['Lz'] = [{'word':'Lz','kind':'v','menu':'vector'}]
let c['SID'] = [{'word':'SID','kind':'v','menu':'int'}]
let f = []
call add(f,{'word':'Du','kind':'f','menu':'float(const float)'})
call add(f,{'word':'Du','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'Du','kind':'f','menu':'vector(const vector)'})
let c['Du'] = f
let f = []
call add(f,{'word':'Dv','kind':'f','menu':'float(const float)'})
call add(f,{'word':'Dv','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'Dv','kind':'f','menu':'vector(const vector)'})
let c['Dv'] = f
let f = []
call add(f,{'word':'Dw','kind':'f','menu':'float(const float)'})
call add(f,{'word':'Dw','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'Dw','kind':'f','menu':'vector(const vector)'})
let c['Dw'] = f
let f = []
let c['__nextgather'] = f
let f = []
let c['__ptexture_shift_coord'] = f
let f = []
let c['_export'] = f
let f = []
call add(f,{'word':'abs','kind':'f','menu':'float(const float)'})
call add(f,{'word':'abs','kind':'f','menu':'int(const int)'})
call add(f,{'word':'abs','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'abs','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'abs','kind':'f','menu':'vector(const vector)'})
let c['abs'] = f
let f = []
call add(f,{'word':'acos','kind':'f','menu':'float(const float)'})
call add(f,{'word':'acos','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'acos','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'acos','kind':'f','menu':'vector(const vector)'})
let c['acos'] = f
let f = []
let c['add'] = f
let f = []
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix2)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix3)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const float)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector4)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector2)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix2[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix3[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const float[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const int[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector4[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const string[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector2[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector[])'})
let c['addattrib'] = f
let f = []
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
let c['adddetailattrib'] = f
let f = []
call add(f,{'word':'addpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'addpoint','kind':'f','menu':'int(const int,const vector)'})
let c['addpoint'] = f
let f = []
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
let c['addpointattrib'] = f
let f = []
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,const int)'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,const int,const int)'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int,const int,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int[],int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int[],int[])'})
let c['addprim'] = f
let f = []
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
let c['addprimattrib'] = f
let f = []
call add(f,{'word':'addvariablename','kind':'f','menu':'int(const int,const string,const string)'})
let c['addvariablename'] = f
let f = []
call add(f,{'word':'addvertex','kind':'f','menu':'int(const int,const int,const int)'})
let c['addvertex'] = f
let f = []
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
let c['addvertexattrib'] = f
let f = []
call add(f,{'word':'addvisualizer','kind':'f','menu':'int(const int,const string)'})
let c['addvisualizer'] = f
let f = []
call add(f,{'word':'agentaddclip','kind':'f','menu':'int(const int,const int,const string,const string,const int)'})
let c['agentaddclip'] = f
let f = []
call add(f,{'word':'agentclipcatalog','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agentclipcatalog','kind':'f','menu':'string[](const string,const int)'})
let c['agentclipcatalog'] = f
let f = []
call add(f,{'word':'agentclipchannel','kind':'f','menu':'int(const int,const int,const string,const string)'})
call add(f,{'word':'agentclipchannel','kind':'f','menu':'int(const string,const int,const string,const string)'})
let c['agentclipchannel'] = f
let f = []
call add(f,{'word':'agentclipchannelnames','kind':'f','menu':'string[](const int,const int,const string)'})
call add(f,{'word':'agentclipchannelnames','kind':'f','menu':'string[](const string,const int,const string)'})
let c['agentclipchannelnames'] = f
let f = []
call add(f,{'word':'agentcliplength','kind':'f','menu':'float(const int,const int,const string)'})
call add(f,{'word':'agentcliplength','kind':'f','menu':'float(const string,const int,const string)'})
let c['agentcliplength'] = f
let f = []
call add(f,{'word':'agentclipnames','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agentclipnames','kind':'f','menu':'string[](const string,const int)'})
let c['agentclipnames'] = f
let f = []
call add(f,{'word':'agentclipsample','kind':'f','menu':'float(const int,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsample','kind':'f','menu':'float(const int,const int,const string,const float,const string)'})
call add(f,{'word':'agentclipsample','kind':'f','menu':'float(const string,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsample','kind':'f','menu':'float(const string,const int,const string,const float,const string)'})
let c['agentclipsample'] = f
let f = []
call add(f,{'word':'agentclipsamplelocal','kind':'f','menu':'matrix(const int,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsamplelocal','kind':'f','menu':'matrix(const string,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsamplelocal','kind':'f','menu':'matrix[](const int,const int,const string,const float)'})
call add(f,{'word':'agentclipsamplelocal','kind':'f','menu':'matrix[](const string,const int,const string,const float)'})
let c['agentclipsamplelocal'] = f
let f = []
call add(f,{'word':'agentclipsamplerate','kind':'f','menu':'float(const int,const int,const string)'})
call add(f,{'word':'agentclipsamplerate','kind':'f','menu':'float(const string,const int,const string)'})
let c['agentclipsamplerate'] = f
let f = []
call add(f,{'word':'agentclipsampleworld','kind':'f','menu':'matrix(const int,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsampleworld','kind':'f','menu':'matrix(const string,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsampleworld','kind':'f','menu':'matrix[](const int,const int,const string,const float)'})
call add(f,{'word':'agentclipsampleworld','kind':'f','menu':'matrix[](const string,const int,const string,const float)'})
let c['agentclipsampleworld'] = f
let f = []
call add(f,{'word':'agentcliptimes','kind':'f','menu':'float[](const int,const int)'})
call add(f,{'word':'agentcliptimes','kind':'f','menu':'float[](const string,const int)'})
let c['agentcliptimes'] = f
let f = []
call add(f,{'word':'agentcliptransformgroups','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agentcliptransformgroups','kind':'f','menu':'string[](const string,const int)'})
let c['agentcliptransformgroups'] = f
let f = []
call add(f,{'word':'agentclipweights','kind':'f','menu':'float[](const int,const int)'})
call add(f,{'word':'agentclipweights','kind':'f','menu':'float[](const string,const int)'})
let c['agentclipweights'] = f
let f = []
call add(f,{'word':'agentcollisionlayer','kind':'f','menu':'string(const int,const int)'})
call add(f,{'word':'agentcollisionlayer','kind':'f','menu':'string(const string,const int)'})
let c['agentcollisionlayer'] = f
let f = []
call add(f,{'word':'agentcurrentlayer','kind':'f','menu':'string(const int,const int)'})
call add(f,{'word':'agentcurrentlayer','kind':'f','menu':'string(const string,const int)'})
let c['agentcurrentlayer'] = f
let f = []
call add(f,{'word':'agentfindtransformgroup','kind':'f','menu':'int(const int,const int,const string)'})
call add(f,{'word':'agentfindtransformgroup','kind':'f','menu':'int(const string,const int,const string)'})
let c['agentfindtransformgroup'] = f
let f = []
call add(f,{'word':'agentlayerbindings','kind':'f','menu':'int[](const int,const int,const string,const string)'})
call add(f,{'word':'agentlayerbindings','kind':'f','menu':'int[](const string,const int,const string,const string)'})
let c['agentlayerbindings'] = f
let f = []
call add(f,{'word':'agentlayers','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agentlayers','kind':'f','menu':'string[](const string,const int)'})
let c['agentlayers'] = f
let f = []
call add(f,{'word':'agentlayershapes','kind':'f','menu':'string[](const int,const int,const string,const int)'})
call add(f,{'word':'agentlayershapes','kind':'f','menu':'string[](const int,const int,const string,const string)'})
call add(f,{'word':'agentlayershapes','kind':'f','menu':'string[](const string,const int,const string,const int)'})
call add(f,{'word':'agentlayershapes','kind':'f','menu':'string[](const string,const int,const string,const string)'})
let c['agentlayershapes'] = f
let f = []
call add(f,{'word':'agentlocaltransform','kind':'f','menu':'matrix(const int,const int,const int)'})
call add(f,{'word':'agentlocaltransform','kind':'f','menu':'matrix(const string,const int,const int)'})
let c['agentlocaltransform'] = f
let f = []
call add(f,{'word':'agentlocaltransforms','kind':'f','menu':'matrix[](const int,const int)'})
call add(f,{'word':'agentlocaltransforms','kind':'f','menu':'matrix[](const string,const int)'})
let c['agentlocaltransforms'] = f
let f = []
call add(f,{'word':'agentrigchildren','kind':'f','menu':'int[](const int,const int,const int)'})
call add(f,{'word':'agentrigchildren','kind':'f','menu':'int[](const string,const int,const int)'})
let c['agentrigchildren'] = f
let f = []
call add(f,{'word':'agentrigfind','kind':'f','menu':'int(const int,const int,const string)'})
call add(f,{'word':'agentrigfind','kind':'f','menu':'int(const string,const int,const string)'})
let c['agentrigfind'] = f
let f = []
call add(f,{'word':'agentrigparent','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'agentrigparent','kind':'f','menu':'int(const string,const int,const int)'})
let c['agentrigparent'] = f
let f = []
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const int,const int,const int,const int[],const matrix[],const int,const int)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const int,const int,const int,const int[],const matrix[],const int,const int,const float,const int)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const int,const int,const int,const int[],const matrix[],const int,const int,const float,const int,const float[],const int[],const int[])'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const int,const int,const int,const int[],const matrix[],const int,const int,const float,const int,const float[],const int[],const int[],const string,const string,const string)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const string,const int,const int,const int[],const matrix[],const int,const int)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const string,const int,const int,const int[],const matrix[],const int,const int,const float,const int)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const string,const int,const int,const int[],const matrix[],const int,const int,const float,const int,const float[],const int[],const int[])'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const string,const int,const int,const int[],const matrix[],const int,const int,const float,const int,const float[],const int[],const int[],const string,const string,const string)'})
let c['agentsolvefbik'] = f
let f = []
call add(f,{'word':'agenttransformcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'agenttransformcount','kind':'f','menu':'int(const string,const int)'})
let c['agenttransformcount'] = f
let f = []
call add(f,{'word':'agenttransformgroupmember','kind':'f','menu':'int(const int,const int,const int,const int)'})
call add(f,{'word':'agenttransformgroupmember','kind':'f','menu':'int(const int,const int,const string,const int)'})
call add(f,{'word':'agenttransformgroupmember','kind':'f','menu':'int(const string,const int,const int,const int)'})
call add(f,{'word':'agenttransformgroupmember','kind':'f','menu':'int(const string,const int,const string,const int)'})
let c['agenttransformgroupmember'] = f
let f = []
call add(f,{'word':'agenttransformgroups','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agenttransformgroups','kind':'f','menu':'string[](const string,const int)'})
let c['agenttransformgroups'] = f
let f = []
call add(f,{'word':'agenttransformgroupweight','kind':'f','menu':'float(const int,const int,const int,const int)'})
call add(f,{'word':'agenttransformgroupweight','kind':'f','menu':'float(const string,const int,const int,const int)'})
let c['agenttransformgroupweight'] = f
let f = []
call add(f,{'word':'agenttransformnames','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agenttransformnames','kind':'f','menu':'string[](const string,const int)'})
let c['agenttransformnames'] = f
let f = []
call add(f,{'word':'agenttransformtolocal','kind':'f','menu':'int(const int,const int,export matrix[])'})
call add(f,{'word':'agenttransformtolocal','kind':'f','menu':'int(const string,const int,export matrix[])'})
let c['agenttransformtolocal'] = f
let f = []
call add(f,{'word':'agenttransformtoworld','kind':'f','menu':'int(const int,const int,export matrix[])'})
call add(f,{'word':'agenttransformtoworld','kind':'f','menu':'int(const string,const int,export matrix[])'})
let c['agenttransformtoworld'] = f
let f = []
call add(f,{'word':'agentworldtransform','kind':'f','menu':'matrix(const int,const int,const int)'})
call add(f,{'word':'agentworldtransform','kind':'f','menu':'matrix(const string,const int,const int)'})
let c['agentworldtransform'] = f
let f = []
call add(f,{'word':'agentworldtransforms','kind':'f','menu':'matrix[](const int,const int)'})
call add(f,{'word':'agentworldtransforms','kind':'f','menu':'matrix[](const string,const int)'})
let c['agentworldtransforms'] = f
let f = []
call add(f,{'word':'albedo','kind':'f','menu':'vector(const bsdf,const int)'})
call add(f,{'word':'albedo','kind':'f','menu':'vector(const bsdf,const vector,const int)'})
call add(f,{'word':'albedo','kind':'f','menu':'vector(const bsdf,const vector)'})
call add(f,{'word':'albedo','kind':'f','menu':'vector(const bsdf)'})
let c['albedo'] = f
let f = []
let c['and'] = f
let f = []
call add(f,{'word':'anoise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'anoise','kind':'f','menu':'float(const vector,const int,const float,const float)'})
call add(f,{'word':'anoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'anoise','kind':'f','menu':'float(const vector,const int,const int,const int,const int,const float,const float)'})
call add(f,{'word':'anoise','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'anoise','kind':'f','menu':'vector(const vector,const int,const float,const float)'})
call add(f,{'word':'anoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
call add(f,{'word':'anoise','kind':'f','menu':'vector(const vector,const int,const int,const int,const int,const float,const float)'})
let c['anoise'] = f
let f = []
call add(f,{'word':'append','kind':'f','menu':'void(export string,const string)'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix2[],const matrix2)'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix2[],const matrix2[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix3[],const matrix3)'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix3[],const matrix3[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix[],const matrix)'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix[],const matrix[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export float[],const float)'})
call add(f,{'word':'append','kind':'f','menu':'void(export float[],const float[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export int[],const int)'})
call add(f,{'word':'append','kind':'f','menu':'void(export int[],const int[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector4[],const vector4)'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector4[],const vector4[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export string[],const string)'})
call add(f,{'word':'append','kind':'f','menu':'void(export string[],const string[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector2[],const vector2)'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector2[],const vector2[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector[],const vector)'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector[],const vector[])'})
let c['append'] = f
let f = []
call add(f,{'word':'area','kind':'f','menu':'float(const vector)'})
let c['area'] = f
let f = []
call add(f,{'word':'argsort','kind':'f','menu':'int[](const float[])'})
call add(f,{'word':'argsort','kind':'f','menu':'int[](const int[])'})
call add(f,{'word':'argsort','kind':'f','menu':'int[](const string[])'})
let c['argsort'] = f
let f = []
call add(f,{'word':'array','kind':'f','menu':'matrix2[]()'})
call add(f,{'word':'array','kind':'f','menu':'matrix3[]()'})
call add(f,{'word':'array','kind':'f','menu':'matrix[]()'})
call add(f,{'word':'array','kind':'f','menu':'float[]()'})
call add(f,{'word':'array','kind':'f','menu':'int[]()'})
call add(f,{'word':'array','kind':'f','menu':'vector4[]()'})
call add(f,{'word':'array','kind':'f','menu':'string[]()'})
call add(f,{'word':'array','kind':'f','menu':'vector2[]()'})
call add(f,{'word':'array','kind':'f','menu':'vector[]()'})
let c['array'] = f
let f = []
call add(f,{'word':'arraylength','kind':'f','menu':'int(const matrix3)'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const matrix)'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const vector4)'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const vector)'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const matrix3[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const matrix[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const bsdf[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const light[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const material[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const float[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const vector4[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const string[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const vector[])'})
let c['arraylength'] = f
let f = []
call add(f,{'word':'ashikhmin','kind':'f','menu':'bsdf(const float,const float,const vector,const vector)'})
call add(f,{'word':'ashikhmin','kind':'f','menu':'bsdf(const vector,const float,const float,const vector,const vector)'})
let c['ashikhmin'] = f
let f = []
call add(f,{'word':'asin','kind':'f','menu':'float(const float)'})
call add(f,{'word':'asin','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'asin','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'asin','kind':'f','menu':'vector(const vector)'})
let c['asin'] = f
let f = []
call add(f,{'word':'assert_enabled','kind':'f','menu':'int()'})
let c['assert_enabled'] = f
let f = []
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,float,const matrix2)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,float,const matrix2)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,float,float,float,float,float,float,const matrix3)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,float,float,float,float,float,float,const matrix3)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,const matrix)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,const matrix)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,float,const vector4)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,float,const vector4)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,const vector)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,const vector)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,const vector2)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,const vector2)'})
let c['assign'] = f
let f = []
call add(f,{'word':'atan','kind':'f','menu':'float(const float)'})
call add(f,{'word':'atan','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'atan','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'atan','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'atan','kind':'f','menu':'vector(const vector)'})
let c['atan'] = f
let f = []
call add(f,{'word':'atan2','kind':'f','menu':'float(const float,const float)'})
let c['atan2'] = f
let f = []
call add(f,{'word':'atof','kind':'f','menu':'float(const string)'})
let c['atof'] = f
let f = []
call add(f,{'word':'atoi','kind':'f','menu':'int(const string)'})
let c['atoi'] = f
let f = []
call add(f,{'word':'atten','kind':'f','menu':'float(const float,const float)'})
let c['atten'] = f
let f = []
call add(f,{'word':'attrib','kind':'f','menu':'matrix2(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix2(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix3(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix3(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'float(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'float(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector4(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector4(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'string(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'string(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector2(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector2(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix2[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix2[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix3[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix3[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'float[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'float[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'int[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'int[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector4[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector4[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'string[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'string[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector2[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector2[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector[](const string,const string,const string,const int)'})
let c['attrib'] = f
let f = []
call add(f,{'word':'attribclass','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'attribclass','kind':'f','menu':'string(const string,const string)'})
let c['attribclass'] = f
let f = []
call add(f,{'word':'attribdataid','kind':'f','menu':'int[](const int,const string,const string)'})
call add(f,{'word':'attribdataid','kind':'f','menu':'int[](const string,const string,const string)'})
let c['attribdataid'] = f
let f = []
call add(f,{'word':'attribsize','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'attribsize','kind':'f','menu':'int(const string,const string,const string)'})
let c['attribsize'] = f
let f = []
call add(f,{'word':'attribtype','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'attribtype','kind':'f','menu':'int(const string,const string,const string)'})
let c['attribtype'] = f
let f = []
call add(f,{'word':'attribtypeinfo','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'attribtypeinfo','kind':'f','menu':'string(const string,const string,const string)'})
let c['attribtypeinfo'] = f
let f = []
call add(f,{'word':'avg','kind':'f','menu':'float(const float)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'avg','kind':'f','menu':'int(const int)'})
call add(f,{'word':'avg','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'avg','kind':'f','menu':'vector4(const vector4,const vector4)'})
call add(f,{'word':'avg','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'avg','kind':'f','menu':'vector2(const vector2,const vector2)'})
call add(f,{'word':'avg','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'avg','kind':'f','menu':'vector(const vector,const vector)'})
call add(f,{'word':'avg','kind':'f','menu':'vector(const vector[])'})
let c['avg'] = f
let f = []
let c['band'] = f
let f = []
let c['bgather'] = f
let f = []
call add(f,{'word':'blackbody','kind':'f','menu':'vector(const float,const float)'})
let c['blackbody'] = f
let f = []
call add(f,{'word':'blinn','kind':'f','menu':'bsdf(const float)'})
call add(f,{'word':'blinn','kind':'f','menu':'bsdf(const vector,const float)'})
let c['blinn'] = f
let f = []
call add(f,{'word':'blinnBRDF','kind':'f','menu':'float(const vector,const vector,const vector,const float)'})
let c['blinnBRDF'] = f
let f = []
let c['bnot'] = f
let f = []
let c['bor'] = f
let f = []
call add(f,{'word':'bouncelabel','kind':'f','menu':'string(const int)'})
let c['bouncelabel'] = f
let f = []
call add(f,{'word':'bouncemask','kind':'f','menu':'int(const string)'})
let c['bouncemask'] = f
let f = []
let c['br'] = f
let f = []
let c['break'] = f
let f = []
call add(f,{'word':'bumpmap','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmap','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmap','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmap','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmap'] = f
let f = []
call add(f,{'word':'bumpmapA','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapA','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapA','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapA','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapA'] = f
let f = []
call add(f,{'word':'bumpmapB','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapB','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapB','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapB','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapB'] = f
let f = []
call add(f,{'word':'bumpmapG','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapG','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapG','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapG','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapG'] = f
let f = []
call add(f,{'word':'bumpmapL','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapL','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapL','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapL','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapL'] = f
let f = []
call add(f,{'word':'bumpmapR','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapR','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapR','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapR','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapR'] = f
let f = []
let c['bwhile'] = f
let f = []
let c['bxor'] = f
let f = []
call add(f,{'word':'cbrt','kind':'f','menu':'float(const float)'})
call add(f,{'word':'cbrt','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'cbrt','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'cbrt','kind':'f','menu':'vector(const vector)'})
let c['cbrt'] = f
let f = []
call add(f,{'word':'ceil','kind':'f','menu':'float(const float)'})
call add(f,{'word':'ceil','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'ceil','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'ceil','kind':'f','menu':'vector(const vector)'})
let c['ceil'] = f
let f = []
call add(f,{'word':'ch','kind':'f','menu':'float(const int,const int,const int)'})
call add(f,{'word':'ch','kind':'f','menu':'float(const int,const int,const int,const float)'})
call add(f,{'word':'ch','kind':'f','menu':'float(const string)'})
call add(f,{'word':'ch','kind':'f','menu':'float(const string,const float)'})
call add(f,{'word':'ch','kind':'f','menu':'string(const string)'})
call add(f,{'word':'ch','kind':'f','menu':'string(const string,const float)'})
let c['ch'] = f
let f = []
call add(f,{'word':'ch2','kind':'f','menu':'matrix2(const string)'})
call add(f,{'word':'ch2','kind':'f','menu':'matrix2(const string,const float)'})
let c['ch2'] = f
let f = []
call add(f,{'word':'ch3','kind':'f','menu':'matrix3(const string)'})
call add(f,{'word':'ch3','kind':'f','menu':'matrix3(const string,const float)'})
let c['ch3'] = f
let f = []
call add(f,{'word':'ch4','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'ch4','kind':'f','menu':'matrix(const string,const float)'})
let c['ch4'] = f
let f = []
call add(f,{'word':'chexpr','kind':'f','menu':'float(const string,const string)'})
let c['chexpr'] = f
let f = []
call add(f,{'word':'chexprf','kind':'f','menu':'float(const string,const string,const float)'})
let c['chexprf'] = f
let f = []
call add(f,{'word':'chexprt','kind':'f','menu':'float(const string,const string,const float)'})
let c['chexprt'] = f
let f = []
call add(f,{'word':'chf','kind':'f','menu':'float(const int,const int,const int)'})
call add(f,{'word':'chf','kind':'f','menu':'float(const int,const int,const int,const float)'})
call add(f,{'word':'chf','kind':'f','menu':'float(const string)'})
call add(f,{'word':'chf','kind':'f','menu':'float(const string,const float)'})
let c['chf'] = f
let f = []
call add(f,{'word':'chi','kind':'f','menu':'int(const string)'})
call add(f,{'word':'chi','kind':'f','menu':'int(const string,const float)'})
let c['chi'] = f
let f = []
call add(f,{'word':'chid','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'chid','kind':'f','menu':'void(const string,int,int,int)'})
call add(f,{'word':'chid','kind':'f','menu':'int(const string,int,int)'})
call add(f,{'word':'chid','kind':'f','menu':'void(const string,const string,int,int,int)'})
call add(f,{'word':'chid','kind':'f','menu':'int(const string,const string,int,int)'})
let c['chid'] = f
let f = []
call add(f,{'word':'chop','kind':'f','menu':'matrix(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'matrix(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'matrix(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'float(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'float(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'float(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector4(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector4(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector4(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector2(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector2(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector2(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector(const string,const string,const int)'})
let c['chop'] = f
let f = []
call add(f,{'word':'choplocal','kind':'f','menu':'matrix(const string,const int,const float)'})
call add(f,{'word':'choplocal','kind':'f','menu':'matrix(const string,const int,const int)'})
call add(f,{'word':'choplocal','kind':'f','menu':'matrix(const string,const string,const float)'})
call add(f,{'word':'choplocal','kind':'f','menu':'matrix(const string,const string,const int)'})
let c['choplocal'] = f
let f = []
call add(f,{'word':'choplocalt','kind':'f','menu':'matrix(const string,const int,const float,const float)'})
call add(f,{'word':'choplocalt','kind':'f','menu':'matrix(const string,const int,const int,const float)'})
call add(f,{'word':'choplocalt','kind':'f','menu':'matrix(const string,const string,const float,const float)'})
call add(f,{'word':'choplocalt','kind':'f','menu':'matrix(const string,const string,const int,const float)'})
let c['choplocalt'] = f
let f = []
call add(f,{'word':'chopt','kind':'f','menu':'matrix(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'matrix(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'matrix(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'matrix(const string,const string,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'float(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'float(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'float(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'float(const string,const string,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector4(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector4(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector4(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector4(const string,const string,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector2(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector2(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector2(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector2(const string,const string,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector(const string,const string,const int,const float)'})
let c['chopt'] = f
let f = []
call add(f,{'word':'chp','kind':'f','menu':'vector4(const string)'})
call add(f,{'word':'chp','kind':'f','menu':'vector4(const string,const float)'})
let c['chp'] = f
let f = []
call add(f,{'word':'chr','kind':'f','menu':'string(const int)'})
let c['chr'] = f
let f = []
call add(f,{'word':'chramp','kind':'f','menu':'float(const string,const float)'})
call add(f,{'word':'chramp','kind':'f','menu':'float(const string,const float,const float)'})
call add(f,{'word':'chramp','kind':'f','menu':'vector(const string,const float)'})
call add(f,{'word':'chramp','kind':'f','menu':'vector(const string,const float,const float)'})
let c['chramp'] = f
let f = []
call add(f,{'word':'chs','kind':'f','menu':'string(const string)'})
call add(f,{'word':'chs','kind':'f','menu':'string(const string,const float)'})
let c['chs'] = f
let f = []
call add(f,{'word':'chsraw','kind':'f','menu':'string(const string)'})
let c['chsraw'] = f
let f = []
call add(f,{'word':'chu','kind':'f','menu':'vector2(const string)'})
call add(f,{'word':'chu','kind':'f','menu':'vector2(const string,const float)'})
let c['chu'] = f
let f = []
call add(f,{'word':'chv','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'chv','kind':'f','menu':'vector(const int,const int,const float)'})
call add(f,{'word':'chv','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'chv','kind':'f','menu':'vector(const string,const float)'})
let c['chv'] = f
let f = []
call add(f,{'word':'ckspline','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'ckspline','kind':'f','menu':'vector4(const float,const vector4,const float)'})
call add(f,{'word':'ckspline','kind':'f','menu':'vector(const float,const vector,const float)'})
let c['ckspline'] = f
let f = []
call add(f,{'word':'clamp','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'clamp','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'clamp','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'clamp','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'clamp','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['clamp'] = f
let f = []
call add(f,{'word':'clip','kind':'f','menu':'void(int,export vector,export vector,const vector4)'})
call add(f,{'word':'clip','kind':'f','menu':'int(export vector,export vector,const vector4)'})
call add(f,{'word':'clip','kind':'f','menu':'void(int,export vector,export vector,const vector,const vector)'})
call add(f,{'word':'clip','kind':'f','menu':'int(export vector,export vector,const vector,const vector)'})
let c['clip'] = f
let f = []
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const float,const float)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const float,const float,const float,const float,const float,const float,const float,const float,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const vector)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const float,const float)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const float,const float,const float,const float,const float,const float,const float,const float,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector,const int)'})
let c['colormap'] = f
let f = []
call add(f,{'word':'computenormal','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'computenormal','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['computenormal'] = f
let f = []
call add(f,{'word':'concat','kind':'f','menu':'string(const string,const string)'})
let c['concat'] = f
let f = []
call add(f,{'word':'cone','kind':'f','menu':'bsdf(const vector,const float)'})
call add(f,{'word':'cone','kind':'f','menu':'bsdf(const vector,const vector,const float)'})
let c['cone'] = f
let f = []
call add(f,{'word':'cos','kind':'f','menu':'float(const float)'})
call add(f,{'word':'cos','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'cos','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'cos','kind':'f','menu':'vector(const vector)'})
let c['cos'] = f
let f = []
call add(f,{'word':'cosh','kind':'f','menu':'float(const float)'})
call add(f,{'word':'cosh','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'cosh','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'cosh','kind':'f','menu':'vector(const vector)'})
let c['cosh'] = f
let f = []
call add(f,{'word':'cout','kind':'f','menu':'void()'})
let c['cout'] = f
let f = []
call add(f,{'word':'cracktransform','kind':'f','menu':'void(const int,const int,const vector,const matrix,vector,vector,vector)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'vector(const int,const int,const vector,const matrix,vector,vector)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'void(const int,const int,const vector,const vector,const matrix,vector,vector,vector,vector)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'vector(const int,const int,const vector,const vector,const matrix,vector,vector,vector)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'vector(const int,const int,const int,const vector,const matrix)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'vector(const int,const int,const int,const vector,const vector,const matrix)'})
let c['cracktransform'] = f
let f = []
call add(f,{'word':'create_cdf','kind':'f','menu':'float[](const float[])'})
let c['create_cdf'] = f
let f = []
call add(f,{'word':'create_pdf','kind':'f','menu':'float[](const float[])'})
let c['create_pdf'] = f
let f = []
call add(f,{'word':'cross','kind':'f','menu':'vector(const vector,const vector)'})
let c['cross'] = f
let f = []
call add(f,{'word':'cspline','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'cspline','kind':'f','menu':'vector4(const float,const vector4)'})
call add(f,{'word':'cspline','kind':'f','menu':'vector(const float,const vector)'})
let c['cspline'] = f
let f = []
call add(f,{'word':'ctransform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'ctransform','kind':'f','menu':'vector(const string,const vector)'})
let c['ctransform'] = f
let f = []
call add(f,{'word':'curlnoise','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'curlnoise','kind':'f','menu':'vector(const vector)'})
let c['curlnoise'] = f
let f = []
call add(f,{'word':'curlnoise2d','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'curlnoise2d','kind':'f','menu':'vector(const vector)'})
let c['curlnoise2d'] = f
let f = []
call add(f,{'word':'curlxnoise','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'curlxnoise','kind':'f','menu':'vector(const vector)'})
let c['curlxnoise'] = f
let f = []
call add(f,{'word':'curlxnoise2d','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'curlxnoise2d','kind':'f','menu':'vector(const vector)'})
let c['curlxnoise2d'] = f
let f = []
call add(f,{'word':'cvex_bsdf','kind':'f','menu':'bsdf(const string,const string)'})
let c['cvex_bsdf'] = f
let f = []
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,const float,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,const float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,const float,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,const float,float,float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,const float,int,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,const float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,int,float,float,float,float,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,float,float,float,float,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,int,float,float,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,float,float,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector4,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector4,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector4,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector4,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector4,int,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector4,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector2,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector2,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector2,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector2,float,float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector2,int,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector2,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector,int,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector,int,float,float,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector,float,float,const int,const int,const int)'})
let c['cwnoise'] = f
let f = []
call add(f,{'word':'decode','kind':'f','menu':'string(const string)'})
let c['decode'] = f
let f = []
call add(f,{'word':'degrees','kind':'f','menu':'float(const float)'})
call add(f,{'word':'degrees','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'degrees','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'degrees','kind':'f','menu':'vector(const vector)'})
let c['degrees'] = f
let f = []
call add(f,{'word':'depthmap','kind':'f','menu':'float(const string,const float,const float)'})
call add(f,{'word':'depthmap','kind':'f','menu':'float(const string,const vector)'})
let c['depthmap'] = f
let f = []
call add(f,{'word':'detail','kind':'f','menu':'matrix2(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'float(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'float(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'int(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'string(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'float[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'float[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'int[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector[](const string,const string,const int)'})
let c['detail'] = f
let f = []
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix2(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix2(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix3(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix3(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'float(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'float(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'int(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'int(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector4(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector4(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'string(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'string(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector2(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector2(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix2[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix2[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix3[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix3[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'float[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'float[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'int[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'int[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector4[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector4[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'string[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'string[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector2[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector2[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector[](const string,const string,const int,int)'})
let c['detailattrib'] = f
let f = []
call add(f,{'word':'detailattribsize','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'detailattribsize','kind':'f','menu':'int(const string,const string)'})
let c['detailattribsize'] = f
let f = []
call add(f,{'word':'detailattribtype','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'detailattribtype','kind':'f','menu':'int(const string,const string)'})
let c['detailattribtype'] = f
let f = []
call add(f,{'word':'detailattribtypeinfo','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'detailattribtypeinfo','kind':'f','menu':'string(const string,const string)'})
let c['detailattribtypeinfo'] = f
let f = []
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix2(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix2(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix3(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix3(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'float(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'float(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'int(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector4(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector4(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'string(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector2(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector2(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix2[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix2[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix3[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix3[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'float[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'float[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'int[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector4[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector4[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector2[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector2[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector[](const string,const string)'})
let c['detailintrinsic'] = f
let f = []
call add(f,{'word':'determinant','kind':'f','menu':'float(const matrix2)'})
call add(f,{'word':'determinant','kind':'f','menu':'float(const matrix3)'})
call add(f,{'word':'determinant','kind':'f','menu':'float(const matrix)'})
let c['determinant'] = f
let f = []
call add(f,{'word':'diagonalizesymmetric','kind':'f','menu':'matrix3(const matrix3,vector)'})
let c['diagonalizesymmetric'] = f
let f = []
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf(const float)'})
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf(const vector,const float)'})
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf(const vector,const vector,const float)'})
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf(const vector,const vector)'})
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf(const vector)'})
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf()'})
let c['diffuse'] = f
let f = []
call add(f,{'word':'diffuseBRDF','kind':'f','menu':'float(const vector,const vector)'})
call add(f,{'word':'diffuseBRDF','kind':'f','menu':'float(const vector,const vector,const vector,const float)'})
let c['diffuseBRDF'] = f
let f = []
call add(f,{'word':'dihedral','kind':'f','menu':'matrix3(const vector,const vector)'})
call add(f,{'word':'dihedral','kind':'f','menu':'vector4(const vector,const vector)'})
let c['dihedral'] = f
let f = []
call add(f,{'word':'dimport','kind':'f','menu':'int(const string,export matrix2)'})
call add(f,{'word':'dimport','kind':'f','menu':'int(const string,export matrix3)'})
call add(f,{'word':'dimport','kind':'f','menu':'int(const string,export matrix)'})
call add(f,{'word':'dimport','kind':'f','menu':'int(const string,export float)'})
call add(f,{'word':'dimport','kind':'f','menu':'int(const string,export int)'})
call add(f,{'word':'dimport','kind':'f','menu':'int(const string,export vector4)'})
call add(f,{'word':'dimport','kind':'f','menu':'int(const string,export string)'})
call add(f,{'word':'dimport','kind':'f','menu':'int(const string,export vector2)'})
call add(f,{'word':'dimport','kind':'f','menu':'int(const string,export vector)'})
let c['dimport'] = f
let f = []
call add(f,{'word':'distance','kind':'f','menu':'float(const vector4,const vector4)'})
call add(f,{'word':'distance','kind':'f','menu':'float(const vector2,const vector2)'})
call add(f,{'word':'distance','kind':'f','menu':'float(const vector,const vector)'})
let c['distance'] = f
let f = []
call add(f,{'word':'distance2','kind':'f','menu':'float(const vector4,const vector4)'})
call add(f,{'word':'distance2','kind':'f','menu':'float(const vector2,const vector2)'})
call add(f,{'word':'distance2','kind':'f','menu':'float(const vector,const vector)'})
let c['distance2'] = f
let f = []
let c['div'] = f
let f = []
call add(f,{'word':'dot','kind':'f','menu':'float(const vector4,const vector4)'})
call add(f,{'word':'dot','kind':'f','menu':'float(const vector4,const vector)'})
call add(f,{'word':'dot','kind':'f','menu':'float(const vector2,const vector2)'})
call add(f,{'word':'dot','kind':'f','menu':'float(const vector,const vector4)'})
call add(f,{'word':'dot','kind':'f','menu':'float(const vector,const vector)'})
let c['dot'] = f
let f = []
call add(f,{'word':'dsmpixel','kind':'f','menu':'int(const string,const string,const int,const int,float[])'})
call add(f,{'word':'dsmpixel','kind':'f','menu':'int(const string,const string,const int,const int,vector4[])'})
call add(f,{'word':'dsmpixel','kind':'f','menu':'int(const string,const string,const int,const int,vector[])'})
let c['dsmpixel'] = f
let f = []
call add(f,{'word':'efit','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
call add(f,{'word':'efit','kind':'f','menu':'vector4(const vector4,const vector4,const vector4,const float,const float)'})
call add(f,{'word':'efit','kind':'f','menu':'vector4(const vector4,const vector4,const vector4,const vector4,const vector4)'})
call add(f,{'word':'efit','kind':'f','menu':'vector2(const vector2,const vector2,const vector2,const float,const float)'})
call add(f,{'word':'efit','kind':'f','menu':'vector2(const vector2,const vector2,const vector2,const vector2,const vector2)'})
call add(f,{'word':'efit','kind':'f','menu':'vector(const vector,const vector,const vector,const float,const float)'})
call add(f,{'word':'efit','kind':'f','menu':'vector(const vector,const vector,const vector,const vector,const vector)'})
let c['efit'] = f
let f = []
call add(f,{'word':'eigenvalues','kind':'f','menu':'void(int,const matrix3,vector,vector)'})
call add(f,{'word':'eigenvalues','kind':'f','menu':'int(const matrix3,vector,vector)'})
let c['eigenvalues'] = f
let f = []
let c['else'] = f
let f = []
call add(f,{'word':'encode','kind':'f','menu':'string(const string)'})
let c['encode'] = f
let f = []
let c['endel'] = f
let f = []
let c['endif'] = f
let f = []
let c['endnotif'] = f
let f = []
call add(f,{'word':'endswith','kind':'f','menu':'int(const string,const string)'})
let c['endswith'] = f
let f = []
call add(f,{'word':'environment','kind':'f','menu':'vector4(const string,const vector)'})
call add(f,{'word':'environment','kind':'f','menu':'vector4(const string,const vector,const float)'})
call add(f,{'word':'environment','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'environment','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'environment','kind':'f','menu':'vector(const string,const vector,const float)'})
call add(f,{'word':'environment','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector)'})
let c['environment'] = f
let f = []
let c['eq'] = f
let f = []
call add(f,{'word':'erf','kind':'f','menu':'float(const float)'})
call add(f,{'word':'erf','kind':'f','menu':'vector2(const vector2)'})
let c['erf'] = f
let f = []
call add(f,{'word':'erf_inv','kind':'f','menu':'float(const float)'})
let c['erf_inv'] = f
let f = []
call add(f,{'word':'erfc','kind':'f','menu':'float(const float)'})
let c['erfc'] = f
let f = []
call add(f,{'word':'error','kind':'f','menu':'void(const string)'})
let c['error'] = f
let f = []
call add(f,{'word':'eulertoquaternion','kind':'f','menu':'vector4(const vector,const int)'})
let c['eulertoquaternion'] = f
let f = []
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,float,const int)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,const int)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,const vector,float,const int)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,const vector,const int)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,const vector)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector)'})
let c['eval_bsdf'] = f
let f = []
call add(f,{'word':'exp','kind':'f','menu':'float(const float)'})
call add(f,{'word':'exp','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'exp','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'exp','kind':'f','menu':'vector(const vector)'})
let c['exp'] = f
let f = []
call add(f,{'word':'expand_udim','kind':'f','menu':'string(const float,const float,const string)'})
let c['expand_udim'] = f
let f = []
call add(f,{'word':'expandedgegroup','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'expandedgegroup','kind':'f','menu':'int[](const string,const string)'})
let c['expandedgegroup'] = f
let f = []
call add(f,{'word':'expandpointgroup','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'expandpointgroup','kind':'f','menu':'int[](const string,const string)'})
let c['expandpointgroup'] = f
let f = []
call add(f,{'word':'expandprimgroup','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'expandprimgroup','kind':'f','menu':'int[](const string,const string)'})
let c['expandprimgroup'] = f
let f = []
call add(f,{'word':'expandvertexgroup','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'expandvertexgroup','kind':'f','menu':'int[](const string,const string)'})
let c['expandvertexgroup'] = f
let f = []
call add(f,{'word':'fastshadow','kind':'f','menu':'float(const vector,const vector,const float)'})
let c['fastshadow'] = f
let f = []
call add(f,{'word':'filamentsample','kind':'f','menu':'vector(const int,const vector)'})
call add(f,{'word':'filamentsample','kind':'f','menu':'vector(const string,const vector)'})
let c['filamentsample'] = f
let f = []
call add(f,{'word':'file_stat','kind':'f','menu':'int(const string,int[])'})
let c['file_stat'] = f
let f = []
call add(f,{'word':'filtershadow','kind':'f','menu':'vector(const vector,const vector,const float)'})
let c['filtershadow'] = f
let f = []
call add(f,{'word':'filterstep','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'filterstep','kind':'f','menu':'float(const float,const float,const float)'})
let c['filterstep'] = f
let f = []
call add(f,{'word':'find','kind':'f','menu':'int(const string,const string)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string,const string,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix2[],const matrix2)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix2[],const matrix2,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix2[],const matrix2,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix3[],const matrix3)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix3[],const matrix3,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix3[],const matrix3,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix[],const matrix)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix[],const matrix,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix[],const matrix,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const float[],const float)'})
call add(f,{'word':'find','kind':'f','menu':'int(const float[],const float,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const float[],const float,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const int[],const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const int[],const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const int[],const int,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector4[],const vector4)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector4[],const vector4,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector4[],const vector4,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string[],const string)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string[],const string,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string[],const string,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector2[],const vector2)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector2[],const vector2,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector2[],const vector2,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector[],const vector)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector[],const vector,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector[],const vector,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string,const string)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string,const string,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix2[],const matrix2)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix2[],const matrix2,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix2[],const matrix2,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix3[],const matrix3)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix3[],const matrix3,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix3[],const matrix3,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix[],const matrix)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix[],const matrix,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix[],const matrix,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const float[],const float)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const float[],const float,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const float[],const float,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const int[],const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const int[],const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const int[],const int,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector4[],const vector4)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector4[],const vector4,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector4[],const vector4,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string[],const string)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string[],const string,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string[],const string,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector2[],const vector2)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector2[],const vector2,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector2[],const vector2,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector[],const vector)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector[],const vector,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector[],const vector,const int,const int)'})
let c['find'] = f
let f = []
call add(f,{'word':'findattribval','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const int,const string,const string,const int,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const int,const string,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const string,const string,const string,const int,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const string,const string,const string,const string)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const string,const string,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int[](const int,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int[](const int,const string,const string,const string)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int[](const string,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int[](const string,const string,const string,const string)'})
let c['findattribval'] = f
let f = []
call add(f,{'word':'findattribvalcount','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'findattribvalcount','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'findattribvalcount','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'findattribvalcount','kind':'f','menu':'int(const string,const string,const string,const string)'})
let c['findattribvalcount'] = f
let f = []
call add(f,{'word':'fit','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
call add(f,{'word':'fit','kind':'f','menu':'vector4(const vector4,const vector4,const vector4,const vector4,const vector4)'})
call add(f,{'word':'fit','kind':'f','menu':'vector2(const vector2,const vector2,const vector2,const vector2,const vector2)'})
call add(f,{'word':'fit','kind':'f','menu':'vector(const vector,const vector,const vector,const vector,const vector)'})
let c['fit'] = f
let f = []
call add(f,{'word':'fit01','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'fit01','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'fit01','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'fit01','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['fit01'] = f
let f = []
call add(f,{'word':'fit10','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'fit10','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'fit10','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'fit10','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['fit10'] = f
let f = []
call add(f,{'word':'fit11','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'fit11','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'fit11','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'fit11','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['fit11'] = f
let f = []
call add(f,{'word':'floor','kind':'f','menu':'float(const float)'})
call add(f,{'word':'floor','kind':'f','menu':'int(const float)'})
call add(f,{'word':'floor','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'floor','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'floor','kind':'f','menu':'vector(const vector)'})
let c['floor'] = f
let f = []
call add(f,{'word':'flownoise','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'float(const vector4,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'float(const vector,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'vector(const float,const float,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'vector(const vector4,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'vector(const vector,const float)'})
let c['flownoise'] = f
let f = []
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const float,const float,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const vector4,const int,const int,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const vector4,const vector4,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const vector,const int,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const vector,const vector,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const float,const float,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const vector4,const int,const int,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const vector4,const vector4,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const vector,const int,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const vector,const vector,const float)'})
let c['flowpnoise'] = f
let f = []
call add(f,{'word':'frac','kind':'f','menu':'float(const float)'})
call add(f,{'word':'frac','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'frac','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'frac','kind':'f','menu':'vector(const vector)'})
let c['frac'] = f
let f = []
call add(f,{'word':'fresnel','kind':'f','menu':'void(const vector,const vector,const float,float,float)'})
call add(f,{'word':'fresnel','kind':'f','menu':'float(const vector,const vector,const float,float)'})
call add(f,{'word':'fresnel','kind':'f','menu':'void(const vector,const vector,const float,float,float,vector,vector)'})
call add(f,{'word':'fresnel','kind':'f','menu':'float(const vector,const vector,const float,float,vector,vector)'})
let c['fresnel'] = f
let f = []
call add(f,{'word':'fromNDC','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'fromNDC','kind':'f','menu':'vector(const vector)'})
let c['fromNDC'] = f
let f = []
call add(f,{'word':'frontface','kind':'f','menu':'vector(const vector,const vector)'})
call add(f,{'word':'frontface','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['frontface'] = f
let f = []
call add(f,{'word':'fuzzify','kind':'f','menu':'float(const string[],const float[],const float[],const float,const float,const float)'})
let c['fuzzify'] = f
let f = []
call add(f,{'word':'fuzzy_and','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_and','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_and'] = f
let f = []
call add(f,{'word':'fuzzy_defuzz_centroid','kind':'f','menu':'float(const float[],const float,const float)'})
let c['fuzzy_defuzz_centroid'] = f
let f = []
call add(f,{'word':'fuzzy_nand','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_nand','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_nand'] = f
let f = []
call add(f,{'word':'fuzzy_nor','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_nor','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_nor'] = f
let f = []
call add(f,{'word':'fuzzy_not','kind':'f','menu':'float(const float)'})
call add(f,{'word':'fuzzy_not','kind':'f','menu':'int(const int)'})
let c['fuzzy_not'] = f
let f = []
call add(f,{'word':'fuzzy_nxor','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_nxor','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_nxor'] = f
let f = []
call add(f,{'word':'fuzzy_or','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_or','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_or'] = f
let f = []
call add(f,{'word':'fuzzy_xor','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_xor','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_xor'] = f
let f = []
let c['ge'] = f
let f = []
call add(f,{'word':'geoself','kind':'f','menu':'int()'})
let c['geoself'] = f
let f = []
call add(f,{'word':'geounwrap','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'geounwrap','kind':'f','menu':'string(const string,const string)'})
let c['geounwrap'] = f
let f = []
call add(f,{'word':'getattrib','kind':'f','menu':'matrix2(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix2(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix3(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix3(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'float(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'float(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'int(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'int(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector4(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector4(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'string(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'string(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector2(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector2(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix2[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix2[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix3[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix3[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'float[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'float[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'int[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'int[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector4[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector4[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'string[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'string[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector2[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector2[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector[](const string,const string,const string,const int,int)'})
let c['getattrib'] = f
let f = []
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,matrix3,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,matrix,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,float,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,int,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,vector4,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,string,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,vector,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,float[],const string,const string,const int,const int)'})
let c['getattribute'] = f
let f = []
call add(f,{'word':'getbbox','kind':'f','menu':'void(const int,const string,vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(const int,const string,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'void(const int,vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(const int,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'void(const string,const string,vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(const string,const string,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'void(const string,vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(const string,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'void(vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(vector)'})
let c['getbbox'] = f
let f = []
call add(f,{'word':'getbbox_center','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getbbox_center','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getbbox_center','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getbbox_center','kind':'f','menu':'vector(const string,const string)'})
let c['getbbox_center'] = f
let f = []
call add(f,{'word':'getbbox_max','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getbbox_max','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getbbox_max','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getbbox_max','kind':'f','menu':'vector(const string,const string)'})
let c['getbbox_max'] = f
let f = []
call add(f,{'word':'getbbox_min','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getbbox_min','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getbbox_min','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getbbox_min','kind':'f','menu':'vector(const string,const string)'})
let c['getbbox_min'] = f
let f = []
call add(f,{'word':'getbbox_size','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getbbox_size','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getbbox_size','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getbbox_size','kind':'f','menu':'vector(const string,const string)'})
let c['getbbox_size'] = f
let f = []
call add(f,{'word':'getblurP','kind':'f','menu':'vector(const float)'})
let c['getblurP'] = f
let f = []
call add(f,{'word':'getbounces','kind':'f','menu':'int(const bsdf)'})
let c['getbounces'] = f
let f = []
call add(f,{'word':'getbounds','kind':'f','menu':'int(const string,const string,vector,vector)'})
call add(f,{'word':'getbounds','kind':'f','menu':'int(const string,vector,vector)'})
let c['getbounds'] = f
let f = []
call add(f,{'word':'getcomp','kind':'f','menu':'matrix2(const matrix2[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'matrix3(const matrix3[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'matrix(const matrix[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'bsdf(const bsdf[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'light(const light[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'material(const material[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const matrix2,const int,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const matrix3,const int,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const matrix,const int,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const vector4,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const vector2,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const vector,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const float[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'int(const int[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'vector4(const vector4[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'string(const string,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'string(const string[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'vector2(const vector2[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'vector(const vector[],const int)'})
let c['getcomp'] = f
let f = []
call add(f,{'word':'getcomponents','kind':'f','menu':'string[]()'})
let c['getcomponents'] = f
let f = []
call add(f,{'word':'getderiv','kind':'f','menu':'void(const float,const string,const int,const float,const float,float,float)'})
call add(f,{'word':'getderiv','kind':'f','menu':'float(const float,const string,const int,const float,const float,float)'})
call add(f,{'word':'getderiv','kind':'f','menu':'void(const vector4,const string,const int,const float,const float,vector4,vector4)'})
call add(f,{'word':'getderiv','kind':'f','menu':'vector4(const vector4,const string,const int,const float,const float,vector4)'})
call add(f,{'word':'getderiv','kind':'f','menu':'void(const vector,const string,const int,const float,const float,vector,vector)'})
call add(f,{'word':'getderiv','kind':'f','menu':'vector(const vector,const string,const int,const float,const float,vector)'})
let c['getderiv'] = f
let f = []
let c['getelem'] = f
let f = []
call add(f,{'word':'getfogname','kind':'f','menu':'string()'})
let c['getfogname'] = f
let f = []
call add(f,{'word':'getglobalraylevel','kind':'f','menu':'int()'})
let c['getglobalraylevel'] = f
let f = []
call add(f,{'word':'getgroupid','kind':'f','menu':'int()'})
let c['getgroupid'] = f
let f = []
call add(f,{'word':'getlight','kind':'f','menu':'light(const int)'})
let c['getlight'] = f
let f = []
call add(f,{'word':'getlightname','kind':'f','menu':'string()'})
let c['getlightname'] = f
let f = []
call add(f,{'word':'getlights','kind':'f','menu':'int[](const material,const vector)'})
let c['getlights'] = f
let f = []
call add(f,{'word':'getlightscope','kind':'f','menu':'void(const material,string,string)'})
call add(f,{'word':'getlightscope','kind':'f','menu':'string(const material,string)'})
let c['getlightscope'] = f
let f = []
call add(f,{'word':'getlocalcurvature','kind':'f','menu':'vector(const float,const float)'})
let c['getlocalcurvature'] = f
let f = []
call add(f,{'word':'getmaterial','kind':'f','menu':'material()'})
let c['getmaterial'] = f
let f = []
call add(f,{'word':'getmaterialid','kind':'f','menu':'int()'})
let c['getmaterialid'] = f
let f = []
call add(f,{'word':'getobjectid','kind':'f','menu':'int()'})
let c['getobjectid'] = f
let f = []
call add(f,{'word':'getobjectname','kind':'f','menu':'string()'})
let c['getobjectname'] = f
let f = []
call add(f,{'word':'getpackedtransform','kind':'f','menu':'matrix(const int,const int)'})
let c['getpackedtransform'] = f
let f = []
call add(f,{'word':'getphotonlight','kind':'f','menu':'int()'})
let c['getphotonlight'] = f
let f = []
call add(f,{'word':'getpointbbox','kind':'f','menu':'void(const int,const string,vector,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'vector(const int,const string,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'void(const int,vector,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'vector(const int,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'void(const string,const string,vector,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'vector(const string,const string,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'void(const string,vector,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'vector(const string,vector)'})
let c['getpointbbox'] = f
let f = []
call add(f,{'word':'getpointbbox_center','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getpointbbox_center','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getpointbbox_center','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getpointbbox_center','kind':'f','menu':'vector(const string,const string)'})
let c['getpointbbox_center'] = f
let f = []
call add(f,{'word':'getpointbbox_max','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getpointbbox_max','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getpointbbox_max','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getpointbbox_max','kind':'f','menu':'vector(const string,const string)'})
let c['getpointbbox_max'] = f
let f = []
call add(f,{'word':'getpointbbox_min','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getpointbbox_min','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getpointbbox_min','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getpointbbox_min','kind':'f','menu':'vector(const string,const string)'})
let c['getpointbbox_min'] = f
let f = []
call add(f,{'word':'getpointbbox_size','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getpointbbox_size','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getpointbbox_size','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getpointbbox_size','kind':'f','menu':'vector(const string,const string)'})
let c['getpointbbox_size'] = f
let f = []
call add(f,{'word':'getprimid','kind':'f','menu':'int()'})
let c['getprimid'] = f
let f = []
call add(f,{'word':'getptextureid','kind':'f','menu':'int()'})
let c['getptextureid'] = f
let f = []
call add(f,{'word':'getraylevel','kind':'f','menu':'int()'})
let c['getraylevel'] = f
let f = []
call add(f,{'word':'getrayweight','kind':'f','menu':'float()'})
let c['getrayweight'] = f
let f = []
call add(f,{'word':'getsamplestore','kind':'f','menu':'int(const string,const vector,float)'})
call add(f,{'word':'getsamplestore','kind':'f','menu':'int(const string,const vector,int)'})
call add(f,{'word':'getsamplestore','kind':'f','menu':'int(const string,const vector,vector4)'})
call add(f,{'word':'getsamplestore','kind':'f','menu':'int(const string,const vector,vector)'})
let c['getsamplestore'] = f
let f = []
call add(f,{'word':'getscope','kind':'f','menu':'void(const material,const string,string,string)'})
call add(f,{'word':'getscope','kind':'f','menu':'string(const material,const string,string)'})
let c['getscope'] = f
let f = []
call add(f,{'word':'getsmoothP','kind':'f','menu':'int(vector,const vector)'})
call add(f,{'word':'getsmoothP','kind':'f','menu':'vector()'})
let c['getsmoothP'] = f
let f = []
call add(f,{'word':'getspace','kind':'f','menu':'matrix(const string,const string)'})
let c['getspace'] = f
let f = []
call add(f,{'word':'getuvtangents','kind':'f','menu':'void(const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'getuvtangents','kind':'f','menu':'vector(const string,const vector,const vector,vector)'})
call add(f,{'word':'getuvtangents','kind':'f','menu':'void(const string,const vector,const vector,vector,vector,vector)'})
call add(f,{'word':'getuvtangents','kind':'f','menu':'vector(const string,const vector,const vector,vector,vector)'})
let c['getuvtangents'] = f
let f = []
call add(f,{'word':'gradient','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'gradient','kind':'f','menu':'vector(const vector,const float)'})
let c['gradient'] = f
let f = []
call add(f,{'word':'gradient3d','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['gradient3d'] = f
let f = []
let c['gt'] = f
let f = []
call add(f,{'word':'hair','kind':'f','menu':'bsdf(const vector,const vector,const float,const float,const float,const float,const float)'})
call add(f,{'word':'hair','kind':'f','menu':'bsdf(const vector,const vector,const float,const float,const float)'})
call add(f,{'word':'hair','kind':'f','menu':'bsdf(const vector,const vector,const float,const float)'})
let c['hair'] = f
let f = []
call add(f,{'word':'has_udim','kind':'f','menu':'int(const string)'})
let c['has_udim'] = f
let f = []
call add(f,{'word':'hasattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'hasattrib','kind':'f','menu':'int(const string,const string,const string)'})
let c['hasattrib'] = f
let f = []
call add(f,{'word':'hasdetailattrib','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'hasdetailattrib','kind':'f','menu':'int(const string,const string)'})
let c['hasdetailattrib'] = f
let f = []
call add(f,{'word':'haslight','kind':'f','menu':'int(const material,const vector,const int)'})
let c['haslight'] = f
let f = []
call add(f,{'word':'haspointattrib','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'haspointattrib','kind':'f','menu':'int(const string,const string)'})
let c['haspointattrib'] = f
let f = []
call add(f,{'word':'hasprimattrib','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'hasprimattrib','kind':'f','menu':'int(const string,const string)'})
let c['hasprimattrib'] = f
let f = []
call add(f,{'word':'hasvertexattrib','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'hasvertexattrib','kind':'f','menu':'int(const string,const string)'})
let c['hasvertexattrib'] = f
let f = []
call add(f,{'word':'hedge_dstpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_dstpoint','kind':'f','menu':'int(const string,const int)'})
let c['hedge_dstpoint'] = f
let f = []
call add(f,{'word':'hedge_dstvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_dstvertex','kind':'f','menu':'int(const string,const int)'})
let c['hedge_dstvertex'] = f
let f = []
call add(f,{'word':'hedge_equivcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_equivcount','kind':'f','menu':'int(const string,const int)'})
let c['hedge_equivcount'] = f
let f = []
call add(f,{'word':'hedge_isequiv','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'hedge_isequiv','kind':'f','menu':'int(const string,const int,const int)'})
let c['hedge_isequiv'] = f
let f = []
call add(f,{'word':'hedge_isprimary','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_isprimary','kind':'f','menu':'int(const string,const int)'})
let c['hedge_isprimary'] = f
let f = []
call add(f,{'word':'hedge_isvalid','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_isvalid','kind':'f','menu':'int(const string,const int)'})
let c['hedge_isvalid'] = f
let f = []
call add(f,{'word':'hedge_next','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_next','kind':'f','menu':'int(const string,const int)'})
let c['hedge_next'] = f
let f = []
call add(f,{'word':'hedge_nextequiv','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_nextequiv','kind':'f','menu':'int(const string,const int)'})
let c['hedge_nextequiv'] = f
let f = []
call add(f,{'word':'hedge_postdstpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_postdstpoint','kind':'f','menu':'int(const string,const int)'})
let c['hedge_postdstpoint'] = f
let f = []
call add(f,{'word':'hedge_postdstvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_postdstvertex','kind':'f','menu':'int(const string,const int)'})
let c['hedge_postdstvertex'] = f
let f = []
call add(f,{'word':'hedge_presrcpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_presrcpoint','kind':'f','menu':'int(const string,const int)'})
let c['hedge_presrcpoint'] = f
let f = []
call add(f,{'word':'hedge_presrcvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_presrcvertex','kind':'f','menu':'int(const string,const int)'})
let c['hedge_presrcvertex'] = f
let f = []
call add(f,{'word':'hedge_prev','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_prev','kind':'f','menu':'int(const string,const int)'})
let c['hedge_prev'] = f
let f = []
call add(f,{'word':'hedge_prim','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_prim','kind':'f','menu':'int(const string,const int)'})
let c['hedge_prim'] = f
let f = []
call add(f,{'word':'hedge_primary','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_primary','kind':'f','menu':'int(const string,const int)'})
let c['hedge_primary'] = f
let f = []
call add(f,{'word':'hedge_srcpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_srcpoint','kind':'f','menu':'int(const string,const int)'})
let c['hedge_srcpoint'] = f
let f = []
call add(f,{'word':'hedge_srcvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_srcvertex','kind':'f','menu':'int(const string,const int)'})
let c['hedge_srcvertex'] = f
let f = []
call add(f,{'word':'henyeygreenstein','kind':'f','menu':'bsdf(const float)'})
let c['henyeygreenstein'] = f
let f = []
call add(f,{'word':'hscript_noise','kind':'f','menu':'float(const vector)'})
let c['hscript_noise'] = f
let f = []
call add(f,{'word':'hscript_rand','kind':'f','menu':'float(const float)'})
call add(f,{'word':'hscript_rand','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'hscript_rand','kind':'f','menu':'vector(const float)'})
let c['hscript_rand'] = f
let f = []
call add(f,{'word':'hscript_snoise','kind':'f','menu':'float(const vector)'})
let c['hscript_snoise'] = f
let f = []
call add(f,{'word':'hscript_sturb','kind':'f','menu':'float(const vector,const int)'})
let c['hscript_sturb'] = f
let f = []
call add(f,{'word':'hscript_turb','kind':'f','menu':'float(const vector,const int)'})
let c['hscript_turb'] = f
let f = []
call add(f,{'word':'hsvtorgb','kind':'f','menu':'vector(const float,const float,const float)'})
call add(f,{'word':'hsvtorgb','kind':'f','menu':'vector(const vector)'})
let c['hsvtorgb'] = f
let f = []
call add(f,{'word':'ident','kind':'f','menu':'matrix2()'})
call add(f,{'word':'ident','kind':'f','menu':'matrix3()'})
call add(f,{'word':'ident','kind':'f','menu':'matrix()'})
let c['ident'] = f
let f = []
call add(f,{'word':'idtopoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'idtopoint','kind':'f','menu':'int(const string,const int)'})
let c['idtopoint'] = f
let f = []
call add(f,{'word':'idtoprim','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'idtoprim','kind':'f','menu':'int(const string,const int)'})
let c['idtoprim'] = f
let f = []
let c['if'] = f
let f = []
call add(f,{'word':'inedgegroup','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'inedgegroup','kind':'f','menu':'int(const string,const string,const int,const int)'})
let c['inedgegroup'] = f
let f = []
call add(f,{'word':'inpointgroup','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'inpointgroup','kind':'f','menu':'int(const string,const string,const int)'})
let c['inpointgroup'] = f
let f = []
call add(f,{'word':'inprimgroup','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'inprimgroup','kind':'f','menu':'int(const string,const string,const int)'})
let c['inprimgroup'] = f
let f = []
call add(f,{'word':'insert','kind':'f','menu':'void(export string,const int,const string)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix2[],const int,const matrix2)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix2[],const int,const matrix2[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix3[],const int,const matrix3)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix3[],const int,const matrix3[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix[],const int,const matrix)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix[],const int,const matrix[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export float[],const int,const float)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export float[],const int,const float[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export int[],const int,const int)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export int[],const int,const int[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector4[],const int,const vector4)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector4[],const int,const vector4[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export string[],const int,const string)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export string[],const int,const string[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector2[],const int,const vector2)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector2[],const int,const vector2[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector[],const int,const vector)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector[],const int,const vector[])'})
let c['insert'] = f
let f = []
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector4,const vector4)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector4,const vector4,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector4,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector4,const vector,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector)'})
let c['instance'] = f
let f = []
call add(f,{'word':'integrate3d','kind':'f','menu':'float(const string,const string,const vector,const vector)'})
call add(f,{'word':'integrate3d','kind':'f','menu':'vector4(const string,const string,const vector,const vector)'})
call add(f,{'word':'integrate3d','kind':'f','menu':'vector(const string,const string,const vector,const vector)'})
let c['integrate3d'] = f
let f = []
call add(f,{'word':'integrate3dClip','kind':'f','menu':'int(const string,const string,export vector,export vector,const float)'})
let c['integrate3dClip'] = f
let f = []
call add(f,{'word':'interpolate','kind':'f','menu':'bsdf(const bsdf,const float,const float)'})
call add(f,{'word':'interpolate','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'interpolate','kind':'f','menu':'vector4(const vector4,const float,const float)'})
call add(f,{'word':'interpolate','kind':'f','menu':'vector(const vector,const float,const float)'})
let c['interpolate'] = f
let f = []
call add(f,{'word':'intersect','kind':'f','menu':'int(const int,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const int,const vector,const vector,vector,float,float)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const int,const vector,const vector,vector,vector)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const string,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const string,const vector,const vector,vector,float,float)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const string,const vector,const vector,vector,vector)'})
let c['intersect'] = f
let f = []
call add(f,{'word':'intersect3d','kind':'f','menu':'int(const string,const string,const vector,const vector,const float)'})
let c['intersect3d'] = f
let f = []
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const int,const string,const vector,const vector,vector[],int[],vector[])'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const int,const string,const vector,const vector,vector[],int[],vector[],const float,const float)'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const int,const vector,const vector,vector[],int[],vector[])'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const int,const vector,const vector,vector[],int[],vector[],const float,const float)'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const string,const string,const vector,const vector,vector[],int[],vector[])'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const string,const string,const vector,const vector,vector[],int[],vector[],const float,const float)'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const string,const vector,const vector,vector[],int[],vector[])'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const string,const vector,const vector,vector[],int[],vector[],const float,const float)'})
let c['intersect_all'] = f
let f = []
call add(f,{'word':'invert','kind':'f','menu':'matrix2(const matrix2)'})
call add(f,{'word':'invert','kind':'f','menu':'matrix3(const matrix3)'})
call add(f,{'word':'invert','kind':'f','menu':'matrix(const matrix)'})
let c['invert'] = f
let f = []
call add(f,{'word':'invertexgroup','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'invertexgroup','kind':'f','menu':'int(const string,const string,const int)'})
let c['invertexgroup'] = f
let f = []
call add(f,{'word':'irradiance','kind':'f','menu':'vector(const vector,const vector)'})
let c['irradiance'] = f
let f = []
call add(f,{'word':'isalpha','kind':'f','menu':'int(const string)'})
let c['isalpha'] = f
let f = []
call add(f,{'word':'isbound','kind':'f','menu':'int(const string)'})
let c['isbound'] = f
let f = []
call add(f,{'word':'isdigit','kind':'f','menu':'int(const string)'})
let c['isdigit'] = f
let f = []
call add(f,{'word':'isfinite','kind':'f','menu':'int(const float)'})
let c['isfinite'] = f
let f = []
call add(f,{'word':'isfogray','kind':'f','menu':'int()'})
let c['isfogray'] = f
let f = []
call add(f,{'word':'isnan','kind':'f','menu':'int(const float)'})
let c['isnan'] = f
let f = []
call add(f,{'word':'isotropic','kind':'f','menu':'bsdf()'})
let c['isotropic'] = f
let f = []
call add(f,{'word':'israytracing','kind':'f','menu':'int()'})
let c['israytracing'] = f
let f = []
call add(f,{'word':'isuvrendering','kind':'f','menu':'int()'})
let c['isuvrendering'] = f
let f = []
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(const string,const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export matrix2[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export matrix3[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export matrix[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export float[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export int[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export vector4[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export string[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export vector2[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export vector[],const int)'})
let c['isvalidindex'] = f
let f = []
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix2)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix3)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const bsdf)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const light)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const material)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const float)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const int)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector4)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const string)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector2)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix2[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix3[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const bsdf[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const light[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const material[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const float[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector4[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const string[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector2[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector[])'})
let c['isvarying'] = f
let f = []
call add(f,{'word':'itoa','kind':'f','menu':'string(const int)'})
let c['itoa'] = f
let f = []
call add(f,{'word':'join','kind':'f','menu':'string(const string[],const string)'})
let c['join'] = f
let f = []
let c['jump'] = f
let f = []
call add(f,{'word':'kspline','kind':'f','menu':'float(const string,const float,const float,const float)'})
call add(f,{'word':'kspline','kind':'f','menu':'vector4(const string,const float,const vector4,const float)'})
call add(f,{'word':'kspline','kind':'f','menu':'vector(const string,const float,const vector,const float)'})
let c['kspline'] = f
let f = []
let c['le'] = f
let f = []
call add(f,{'word':'len','kind':'f','menu':'int(const matrix2)'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix3)'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix)'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector4)'})
call add(f,{'word':'len','kind':'f','menu':'int(const string)'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector2)'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector)'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix2[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix3[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const bsdf[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const light[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const material[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const float[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector4[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const string[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector2[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector[])'})
let c['len'] = f
let f = []
call add(f,{'word':'length','kind':'f','menu':'float(const float)'})
call add(f,{'word':'length','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'length','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'length','kind':'f','menu':'float(const vector)'})
let c['length'] = f
let f = []
call add(f,{'word':'length2','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'length2','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'length2','kind':'f','menu':'float(const vector)'})
let c['length2'] = f
let f = []
call add(f,{'word':'lerp','kind':'f','menu':'bsdf(const bsdf,const bsdf,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector4(const vector4,const vector4,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector2(const vector2,const vector2,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector(const vector,const vector,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['lerp'] = f
let f = []
call add(f,{'word':'lightbounces','kind':'f','menu':'int(const light)'})
let c['lightbounces'] = f
let f = []
call add(f,{'word':'lightid','kind':'f','menu':'int(const light)'})
let c['lightid'] = f
let f = []
call add(f,{'word':'limit_sample_space','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'limit_sample_space','kind':'f','menu':'float(const float,const float,const float)'})
let c['limit_sample_space'] = f
let f = []
call add(f,{'word':'limport','kind':'f','menu':'int(const string,export matrix2)'})
call add(f,{'word':'limport','kind':'f','menu':'int(const string,export matrix3)'})
call add(f,{'word':'limport','kind':'f','menu':'int(const string,export matrix)'})
call add(f,{'word':'limport','kind':'f','menu':'int(const string,export float)'})
call add(f,{'word':'limport','kind':'f','menu':'int(const string,export int)'})
call add(f,{'word':'limport','kind':'f','menu':'int(const string,export vector4)'})
call add(f,{'word':'limport','kind':'f','menu':'int(const string,export string)'})
call add(f,{'word':'limport','kind':'f','menu':'int(const string,export vector2)'})
call add(f,{'word':'limport','kind':'f','menu':'int(const string,export vector)'})
let c['limport'] = f
let f = []
call add(f,{'word':'lkspline','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'lkspline','kind':'f','menu':'vector4(const float,const vector4,const float)'})
call add(f,{'word':'lkspline','kind':'f','menu':'vector(const float,const vector,const float)'})
let c['lkspline'] = f
let f = []
call add(f,{'word':'log','kind':'f','menu':'float(const float)'})
call add(f,{'word':'log','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'log','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'log','kind':'f','menu':'vector(const vector)'})
let c['log'] = f
let f = []
call add(f,{'word':'log10','kind':'f','menu':'float(const float)'})
call add(f,{'word':'log10','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'log10','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'log10','kind':'f','menu':'vector(const vector)'})
let c['log10'] = f
let f = []
call add(f,{'word':'lookat','kind':'f','menu':'matrix3(const vector,const vector)'})
call add(f,{'word':'lookat','kind':'f','menu':'matrix3(const vector,const vector,const float)'})
call add(f,{'word':'lookat','kind':'f','menu':'matrix3(const vector,const vector,const vector)'})
call add(f,{'word':'lookat','kind':'f','menu':'vector(const vector,const vector,const float,const int)'})
call add(f,{'word':'lookat','kind':'f','menu':'vector(const vector,const vector,const vector,const int)'})
let c['lookat'] = f
let f = []
let c['loop'] = f
let f = []
call add(f,{'word':'lspline','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'lspline','kind':'f','menu':'vector4(const float,const vector4)'})
call add(f,{'word':'lspline','kind':'f','menu':'vector(const float,const vector)'})
let c['lspline'] = f
let f = []
call add(f,{'word':'lstrip','kind':'f','menu':'string(const string)'})
call add(f,{'word':'lstrip','kind':'f','menu':'string(const string,const string)'})
let c['lstrip'] = f
let f = []
let c['lt'] = f
let f = []
call add(f,{'word':'luminance','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'luminance','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'luminance','kind':'f','menu':'float(const vector)'})
let c['luminance'] = f
let f = []
call add(f,{'word':'makebasis','kind':'f','menu':'void(vector,vector,const vector)'})
call add(f,{'word':'makebasis','kind':'f','menu':'vector(vector,const vector)'})
call add(f,{'word':'makebasis','kind':'f','menu':'void(export vector,export vector,const vector,const vector)'})
let c['makebasis'] = f
let f = []
call add(f,{'word':'maketransform','kind':'f','menu':'matrix3(const int,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix3(const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const int,const int,const vector,const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const int,const int,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const int,const int,const vector,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const int,const int,const vector,const vector,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const vector,const vector,const vector)'})
let c['maketransform'] = f
let f = []
call add(f,{'word':'mask_bsdf','kind':'f','menu':'bsdf(const bsdf,const int)'})
let c['mask_bsdf'] = f
let f = []
call add(f,{'word':'match','kind':'f','menu':'int(const string,const string)'})
let c['match'] = f
let f = []
call add(f,{'word':'matchvex_blinn','kind':'f','menu':'bsdf(const float)'})
call add(f,{'word':'matchvex_blinn','kind':'f','menu':'bsdf(const vector,const float)'})
let c['matchvex_blinn'] = f
let f = []
call add(f,{'word':'matchvex_specular','kind':'f','menu':'bsdf(const float)'})
call add(f,{'word':'matchvex_specular','kind':'f','menu':'bsdf(const vector,const float)'})
let c['matchvex_specular'] = f
let f = []
call add(f,{'word':'max','kind':'f','menu':'float(const float)'})
call add(f,{'word':'max','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'max','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'max','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'max','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'max','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'max','kind':'f','menu':'int(const int)'})
call add(f,{'word':'max','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'max','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'max','kind':'f','menu':'vector4(const vector4,const vector4)'})
call add(f,{'word':'max','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'max','kind':'f','menu':'vector2(const vector2,const vector2)'})
call add(f,{'word':'max','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'max','kind':'f','menu':'vector(const vector,const vector)'})
call add(f,{'word':'max','kind':'f','menu':'vector(const vector[])'})
let c['max'] = f
let f = []
let c['measured'] = f
let f = []
let c['merge'] = f
let f = []
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,matrix2)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,matrix3)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,matrix)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,float)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,int)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,vector4)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,vector2)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'matrix3[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'matrix[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'float[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'vector4[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'vector[](const string,const string,const vector)'})
let c['metaimport'] = f
let f = []
call add(f,{'word':'metamarch','kind':'f','menu':'int(export int,const string,export vector,export vector,const float)'})
let c['metamarch'] = f
let f = []
call add(f,{'word':'metanext','kind':'f','menu':'int(const int)'})
let c['metanext'] = f
let f = []
call add(f,{'word':'metastart','kind':'f','menu':'int(const string,const vector)'})
let c['metastart'] = f
let f = []
call add(f,{'word':'metaweight','kind':'f','menu':'float(const string,const vector)'})
let c['metaweight'] = f
let f = []
call add(f,{'word':'min','kind':'f','menu':'float(const float)'})
call add(f,{'word':'min','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'min','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'min','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'min','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'min','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'min','kind':'f','menu':'int(const int)'})
call add(f,{'word':'min','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'min','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'min','kind':'f','menu':'vector4(const vector4,const vector4)'})
call add(f,{'word':'min','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'min','kind':'f','menu':'vector2(const vector2,const vector2)'})
call add(f,{'word':'min','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'min','kind':'f','menu':'vector(const vector,const vector)'})
call add(f,{'word':'min','kind':'f','menu':'vector(const vector[])'})
let c['min'] = f
let f = []
call add(f,{'word':'minpos','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const int,const string,const vector,const float)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const int,const vector)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const int,const vector,const float)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const string,const string,const vector,const float)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const string,const vector,const float)'})
let c['minpos'] = f
let f = []
let c['mod'] = f
let f = []
let c['mul'] = f
let f = []
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,const float,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,const float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,const float,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,const float,float,float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,const float,int,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,const float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,int,float,float,float,float,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,float,float,float,float,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,int,float,float,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,float,float,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector4,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector4,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector4,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector4,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector4,int,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector4,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector2,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector2,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector2,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector2,float,float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector2,int,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector2,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector,int,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector,int,float,float,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector,float,float,const int,const int,const int)'})
let c['mwnoise'] = f
let f = []
call add(f,{'word':'nametopoint','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nametopoint','kind':'f','menu':'int(const string,const string)'})
let c['nametopoint'] = f
let f = []
call add(f,{'word':'nametoprim','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nametoprim','kind':'f','menu':'int(const string,const string)'})
let c['nametoprim'] = f
let f = []
call add(f,{'word':'nbouncetypes','kind':'f','menu':'int()'})
let c['nbouncetypes'] = f
let f = []
let c['ne'] = f
let f = []
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const int,const string,const vector,const float)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const int,const vector)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const int,const vector,const float)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const string,const string,const vector)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const string,const string,const vector,const float)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const string,const vector)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const string,const vector,const float)'})
let c['nearpoint'] = f
let f = []
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const int,const string,const vector,const float)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const int,const string,const vector,const float,const int)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const int,const vector,const float)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const int,const vector,const float,const int)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const string,const string,const vector,const float)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const string,const string,const vector,const float,const int)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const string,const vector,const float)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const string,const vector,const float,const int)'})
let c['nearpoints'] = f
let f = []
call add(f,{'word':'nedgesgroup','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nedgesgroup','kind':'f','menu':'int(const string,const string)'})
let c['nedgesgroup'] = f
let f = []
let c['neg'] = f
let f = []
call add(f,{'word':'neighbour','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'neighbour','kind':'f','menu':'int(const string,const int,const int)'})
let c['neighbour'] = f
let f = []
call add(f,{'word':'neighbourcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'neighbourcount','kind':'f','menu':'int(const string,const int)'})
let c['neighbourcount'] = f
let f = []
call add(f,{'word':'neighbours','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'neighbours','kind':'f','menu':'int[](const string,const int)'})
let c['neighbours'] = f
let f = []
call add(f,{'word':'newsampler','kind':'f','menu':'int()'})
call add(f,{'word':'newsampler','kind':'f','menu':'int(const int)'})
let c['newsampler'] = f
let f = []
call add(f,{'word':'nextsample','kind':'f','menu':'void(export int,float,float)'})
call add(f,{'word':'nextsample','kind':'f','menu':'float(export int,float)'})
call add(f,{'word':'nextsample','kind':'f','menu':'void(export int,vector)'})
call add(f,{'word':'nextsample','kind':'f','menu':'vector(export int)'})
let c['nextsample'] = f
let f = []
let c['ngather'] = f
let f = []
call add(f,{'word':'noise','kind':'f','menu':'float(const float)'})
call add(f,{'word':'noise','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'noise','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'noise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'noise','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'noise','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'noise','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'noise','kind':'f','menu':'vector(const vector)'})
let c['noise'] = f
let f = []
call add(f,{'word':'noised','kind':'f','menu':'void(const float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'float(const float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const float,const float,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'float(const float,const float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const float,const float,vector,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'vector(const float,const float,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const float,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'vector(const float,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const vector4,float,float,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'float(const vector4,float,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const vector4,vector,vector,vector,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'vector(const vector4,vector,vector,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const vector,float,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'float(const vector,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const vector,vector,vector,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'vector(const vector,vector,vector,vector)'})
let c['noised'] = f
let f = []
let c['nop'] = f
let f = []
call add(f,{'word':'normal_bsdf','kind':'f','menu':'vector(const bsdf)'})
let c['normal_bsdf'] = f
let f = []
call add(f,{'word':'normalize','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'normalize','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'normalize','kind':'f','menu':'vector(const vector)'})
let c['normalize'] = f
let f = []
let c['not'] = f
let f = []
let c['notif'] = f
let f = []
call add(f,{'word':'npoints','kind':'f','menu':'int(const int)'})
call add(f,{'word':'npoints','kind':'f','menu':'int(const string)'})
let c['npoints'] = f
let f = []
call add(f,{'word':'npointsgroup','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'npointsgroup','kind':'f','menu':'int(const string,const string)'})
let c['npointsgroup'] = f
let f = []
call add(f,{'word':'nprimitives','kind':'f','menu':'int(const int)'})
call add(f,{'word':'nprimitives','kind':'f','menu':'int(const string)'})
let c['nprimitives'] = f
let f = []
call add(f,{'word':'nprimitivesgroup','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nprimitivesgroup','kind':'f','menu':'int(const string,const string)'})
let c['nprimitivesgroup'] = f
let f = []
call add(f,{'word':'nrandom','kind':'f','menu':'float()'})
call add(f,{'word':'nrandom','kind':'f','menu':'void(float,float)'})
call add(f,{'word':'nrandom','kind':'f','menu':'float(float)'})
call add(f,{'word':'nrandom','kind':'f','menu':'vector4()'})
call add(f,{'word':'nrandom','kind':'f','menu':'vector()'})
let c['nrandom'] = f
let f = []
call add(f,{'word':'ntransform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'ntransform','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'ntransform','kind':'f','menu':'vector(const vector,const matrix)'})
let c['ntransform'] = f
let f = []
call add(f,{'word':'nuniqueval','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'nuniqueval','kind':'f','menu':'int(const string,const string,const string)'})
let c['nuniqueval'] = f
let f = []
call add(f,{'word':'nvertices','kind':'f','menu':'int(const int)'})
call add(f,{'word':'nvertices','kind':'f','menu':'int(const string)'})
let c['nvertices'] = f
let f = []
call add(f,{'word':'nverticesgroup','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nverticesgroup','kind':'f','menu':'int(const string,const string)'})
let c['nverticesgroup'] = f
let f = []
call add(f,{'word':'occlusion','kind':'f','menu':'void(float,vector,const vector,const vector)'})
call add(f,{'word':'occlusion','kind':'f','menu':'float(vector,const vector,const vector)'})
call add(f,{'word':'occlusion','kind':'f','menu':'vector(const vector,const vector)'})
let c['occlusion'] = f
let f = []
call add(f,{'word':'ocean_sample','kind':'f','menu':'vector(const string,const int,const int,const int,const float,const float,const int,const int,const vector)'})
let c['ocean_sample'] = f
let f = []
call add(f,{'word':'ocio_activedisplays','kind':'f','menu':'string[]()'})
let c['ocio_activedisplays'] = f
let f = []
call add(f,{'word':'ocio_activeviews','kind':'f','menu':'string[]()'})
let c['ocio_activeviews'] = f
let f = []
call add(f,{'word':'ocio_import','kind':'f','menu':'int(const string,const string,int)'})
call add(f,{'word':'ocio_import','kind':'f','menu':'int(const string,const string,string)'})
call add(f,{'word':'ocio_import','kind':'f','menu':'int(const string,const string,vector)'})
let c['ocio_import'] = f
let f = []
call add(f,{'word':'ocio_roles','kind':'f','menu':'string[]()'})
let c['ocio_roles'] = f
let f = []
call add(f,{'word':'ocio_spaces','kind':'f','menu':'string[]()'})
let c['ocio_spaces'] = f
let f = []
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector4(const string,const vector4)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector4(const string,const string,const vector4)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector4(const string,const string,const string,const vector4)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector(const string,const string,const string,const vector)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector(const string,const vector)'})
let c['ocio_transform'] = f
let f = []
call add(f,{'word':'onoise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'onoise','kind':'f','menu':'float(const vector,const int,const float,const float)'})
call add(f,{'word':'onoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'onoise','kind':'f','menu':'float(const vector,const int,const int,const int,const int,const float,const float)'})
call add(f,{'word':'onoise','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'onoise','kind':'f','menu':'vector(const vector,const int,const float,const float)'})
call add(f,{'word':'onoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
call add(f,{'word':'onoise','kind':'f','menu':'vector(const vector,const int,const int,const int,const int,const float,const float)'})
let c['onoise'] = f
let f = []
call add(f,{'word':'opdigits','kind':'f','menu':'int()'})
call add(f,{'word':'opdigits','kind':'f','menu':'int(const string)'})
let c['opdigits'] = f
let f = []
call add(f,{'word':'opend','kind':'f','menu':'void(const int)'})
let c['opend'] = f
let f = []
call add(f,{'word':'opfullpath','kind':'f','menu':'string(const string)'})
let c['opfullpath'] = f
let f = []
call add(f,{'word':'opid','kind':'f','menu':'int(const int)'})
call add(f,{'word':'opid','kind':'f','menu':'int(const string)'})
let c['opid'] = f
let f = []
call add(f,{'word':'opparentbonetransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'opparentbonetransform','kind':'f','menu':'matrix(const string,const float)'})
let c['opparentbonetransform'] = f
let f = []
call add(f,{'word':'opparenttransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'opparenttransform','kind':'f','menu':'matrix(const string,const float)'})
let c['opparenttransform'] = f
let f = []
call add(f,{'word':'opparmtransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'opparmtransform','kind':'f','menu':'matrix(const string,const float)'})
let c['opparmtransform'] = f
let f = []
call add(f,{'word':'oppreconstrainttransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'oppreconstrainttransform','kind':'f','menu':'matrix(const string,const float)'})
let c['oppreconstrainttransform'] = f
let f = []
call add(f,{'word':'oppretransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'oppretransform','kind':'f','menu':'matrix(const string,const float)'})
let c['oppretransform'] = f
let f = []
call add(f,{'word':'opstart','kind':'f','menu':'int(const string)'})
let c['opstart'] = f
let f = []
call add(f,{'word':'optransform','kind':'f','menu':'matrix(const int)'})
call add(f,{'word':'optransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'optransform','kind':'f','menu':'matrix(const string,const float)'})
let c['optransform'] = f
let f = []
let c['or'] = f
let f = []
call add(f,{'word':'ord','kind':'f','menu':'int(const string)'})
let c['ord'] = f
let f = []
call add(f,{'word':'orthographic','kind':'f','menu':'matrix(const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'orthographic','kind':'f','menu':'matrix(const float,const float,const float,const float,const float,const float,const vector4)'})
let c['orthographic'] = f
let f = []
call add(f,{'word':'osd_facecount','kind':'f','menu':'int(const int)'})
call add(f,{'word':'osd_facecount','kind':'f','menu':'int(const string)'})
let c['osd_facecount'] = f
let f = []
call add(f,{'word':'osd_firstpatch','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'osd_firstpatch','kind':'f','menu':'int(const string,const int)'})
let c['osd_firstpatch'] = f
let f = []
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix2)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix3)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,float)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector4)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector2)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,float[])'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix2)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix3)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,float)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector4)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector2)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,float[])'})
let c['osd_limitsurface'] = f
let f = []
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix2)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix3)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,float)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector4)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector2)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,float[])'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix2)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix3)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,float)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector4)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector2)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,float[])'})
let c['osd_limitsurfacevertex'] = f
let f = []
call add(f,{'word':'osd_lookupface','kind':'f','menu':'int(const int,const int,const float,const float,int,float,float)'})
call add(f,{'word':'osd_lookupface','kind':'f','menu':'int(const int,const int,const float,const float,int,float,float,const string)'})
call add(f,{'word':'osd_lookupface','kind':'f','menu':'int(const string,const int,const float,const float,int,float,float)'})
call add(f,{'word':'osd_lookupface','kind':'f','menu':'int(const string,const int,const float,const float,int,float,float,const string)'})
let c['osd_lookupface'] = f
let f = []
call add(f,{'word':'osd_lookuppatch','kind':'f','menu':'int(const int,const int,const float,const float,int,float,float)'})
call add(f,{'word':'osd_lookuppatch','kind':'f','menu':'int(const int,const int,const float,const float,int,float,float,const string)'})
call add(f,{'word':'osd_lookuppatch','kind':'f','menu':'int(const string,const int,const float,const float,int,float,float)'})
call add(f,{'word':'osd_lookuppatch','kind':'f','menu':'int(const string,const int,const float,const float,int,float,float,const string)'})
let c['osd_lookuppatch'] = f
let f = []
call add(f,{'word':'osd_patchcount','kind':'f','menu':'int(const int)'})
call add(f,{'word':'osd_patchcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'osd_patchcount','kind':'f','menu':'int(const string)'})
call add(f,{'word':'osd_patchcount','kind':'f','menu':'int(const string,const int)'})
let c['osd_patchcount'] = f
let f = []
call add(f,{'word':'osd_patches','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'osd_patches','kind':'f','menu':'int[](const string,const int)'})
let c['osd_patches'] = f
let f = []
call add(f,{'word':'outerproduct','kind':'f','menu':'matrix2(const vector2,const vector2)'})
call add(f,{'word':'outerproduct','kind':'f','menu':'matrix3(const vector,const vector)'})
call add(f,{'word':'outerproduct','kind':'f','menu':'matrix(const vector4,const vector4)'})
let c['outerproduct'] = f
let f = []
call add(f,{'word':'ow_nspace','kind':'f','menu':'vector(const vector)'})
let c['ow_nspace'] = f
let f = []
call add(f,{'word':'ow_space','kind':'f','menu':'matrix()'})
call add(f,{'word':'ow_space','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'ow_space','kind':'f','menu':'vector(const vector)'})
let c['ow_space'] = f
let f = []
call add(f,{'word':'ow_vspace','kind':'f','menu':'vector(const vector)'})
let c['ow_vspace'] = f
let f = []
call add(f,{'word':'pack_inttosafefloat','kind':'f','menu':'float(const int)'})
let c['pack_inttosafefloat'] = f
let f = []
call add(f,{'word':'packedtransform','kind':'f','menu':'void(const int,const int,const matrix)'})
let c['packedtransform'] = f
let f = []
call add(f,{'word':'pathtrace','kind':'f','menu':'vector(const vector,const vector)'})
let c['pathtrace'] = f
let f = []
call add(f,{'word':'pcclose','kind':'f','menu':'void(export int)'})
let c['pcclose'] = f
let f = []
call add(f,{'word':'pcconvex','kind':'f','menu':'float(const int,const string,const vector)'})
let c['pcconvex'] = f
let f = []
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const vector,const float)'})
let c['pcexport'] = f
let f = []
call add(f,{'word':'pcfarthest','kind':'f','menu':'float(const int)'})
let c['pcfarthest'] = f
let f = []
call add(f,{'word':'pcfilter','kind':'f','menu':'matrix3(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'float(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'vector4(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'vector(const int,const string)'})
let c['pcfilter'] = f
let f = []
call add(f,{'word':'pcfind','kind':'f','menu':'int[](const int,const string,const string,const vector,const float,const int)'})
call add(f,{'word':'pcfind','kind':'f','menu':'int[](const int,const string,const vector,const float,const int)'})
call add(f,{'word':'pcfind','kind':'f','menu':'int[](const string,const string,const string,const vector,const float,const int)'})
call add(f,{'word':'pcfind','kind':'f','menu':'int[](const string,const string,const vector,const float,const int)'})
let c['pcfind'] = f
let f = []
call add(f,{'word':'pcfind_radius','kind':'f','menu':'int[](const int,const string,const string,const float,const vector,const float,const int)'})
call add(f,{'word':'pcfind_radius','kind':'f','menu':'int[](const int,const string,const string,const string,const float,const vector,const float,const int)'})
call add(f,{'word':'pcfind_radius','kind':'f','menu':'int[](const string,const string,const string,const float,const vector,const float,const int)'})
call add(f,{'word':'pcfind_radius','kind':'f','menu':'int[](const string,const string,const string,const string,const float,const vector,const float,const int)'})
let c['pcfind_radius'] = f
let f = []
call add(f,{'word':'pcgenerate','kind':'f','menu':'int(const string,const int)'})
let c['pcgenerate'] = f
let f = []
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,matrix3)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,matrix)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,float)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,int)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,vector4)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,string)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,vector)'})
let c['pcimport'] = f
let f = []
call add(f,{'word':'pcimportbyidx3','kind':'f','menu':'matrix3(const int,const string,const int)'})
let c['pcimportbyidx3'] = f
let f = []
call add(f,{'word':'pcimportbyidx4','kind':'f','menu':'matrix(const int,const string,const int)'})
let c['pcimportbyidx4'] = f
let f = []
call add(f,{'word':'pcimportbyidxf','kind':'f','menu':'float(const int,const string,const int)'})
let c['pcimportbyidxf'] = f
let f = []
call add(f,{'word':'pcimportbyidxi','kind':'f','menu':'int(const int,const string,const int)'})
let c['pcimportbyidxi'] = f
let f = []
call add(f,{'word':'pcimportbyidxp','kind':'f','menu':'vector4(const int,const string,const int)'})
let c['pcimportbyidxp'] = f
let f = []
call add(f,{'word':'pcimportbyidxs','kind':'f','menu':'string(const int,const string,const int)'})
let c['pcimportbyidxs'] = f
let f = []
call add(f,{'word':'pcimportbyidxv','kind':'f','menu':'vector(const int,const string,const int)'})
let c['pcimportbyidxv'] = f
let f = []
call add(f,{'word':'pciterate','kind':'f','menu':'int(const int)'})
let c['pciterate'] = f
let f = []
call add(f,{'word':'pcnumfound','kind':'f','menu':'int(const int)'})
let c['pcnumfound'] = f
let f = []
call add(f,{'word':'pcopen','kind':'f','menu':'int(const int,const string,const vector,const float,const int)'})
call add(f,{'word':'pcopen','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'pcopen','kind':'f','menu':'int(const string,const string,const vector,const float,const int)'})
call add(f,{'word':'pcopen','kind':'f','menu':'int(const string,const string,const vector,const string,const vector,const float,const int)'})
let c['pcopen'] = f
let f = []
call add(f,{'word':'pcopenlod','kind':'f','menu':'int(const string,const string,const vector,const int)'})
let c['pcopenlod'] = f
let f = []
call add(f,{'word':'pcsampleleaf','kind':'f','menu':'void(const int,const float)'})
let c['pcsampleleaf'] = f
let f = []
call add(f,{'word':'pcsize','kind':'f','menu':'int(const int)'})
let c['pcsize'] = f
let f = []
call add(f,{'word':'pcunshaded','kind':'f','menu':'int(const int,const string)'})
let c['pcunshaded'] = f
let f = []
call add(f,{'word':'pcwrite','kind':'f','menu':'int(const string)'})
let c['pcwrite'] = f
let f = []
call add(f,{'word':'perspective','kind':'f','menu':'matrix(const float,const float,const float,const float,const float)'})
call add(f,{'word':'perspective','kind':'f','menu':'matrix(const float,const float,const float,const float,const float,const vector4)'})
let c['perspective'] = f
let f = []
call add(f,{'word':'pgfind','kind':'f','menu':'int[](const int,const string,const vector,const float,const int,const float)'})
call add(f,{'word':'pgfind','kind':'f','menu':'int[](const int,const vector,const float,const int,const float)'})
call add(f,{'word':'pgfind','kind':'f','menu':'int[](const string,const string,const vector,const float,const int,const float)'})
call add(f,{'word':'pgfind','kind':'f','menu':'int[](const string,const vector,const float,const int,const float)'})
let c['pgfind'] = f
let f = []
call add(f,{'word':'phong','kind':'f','menu':'bsdf(const float)'})
call add(f,{'word':'phong','kind':'f','menu':'bsdf(const vector,const float)'})
let c['phong'] = f
let f = []
call add(f,{'word':'phongBRDF','kind':'f','menu':'float(const vector,const vector,const vector,const float)'})
let c['phongBRDF'] = f
let f = []
call add(f,{'word':'phonglobe','kind':'f','menu':'bsdf(const vector,const float,const float,const vector,const vector)'})
call add(f,{'word':'phonglobe','kind':'f','menu':'bsdf(const vector,const float)'})
call add(f,{'word':'phonglobe','kind':'f','menu':'bsdf(const vector,const vector,const float,const float,const vector,const vector)'})
call add(f,{'word':'phonglobe','kind':'f','menu':'bsdf(const vector,const vector,const float)'})
let c['phonglobe'] = f
let f = []
call add(f,{'word':'photonmap','kind':'f','menu':'vector(const string,const vector,const vector)'})
call add(f,{'word':'photonmap','kind':'f','menu':'void(const string,const vector,const vector,vector,float)'})
call add(f,{'word':'photonmap','kind':'f','menu':'vector(const string,const vector,const vector,float)'})
let c['photonmap'] = f
let f = []
call add(f,{'word':'planepointdistance','kind':'f','menu':'float(const vector,const vector,const vector,vector)'})
let c['planepointdistance'] = f
let f = []
call add(f,{'word':'planesphereintersect','kind':'f','menu':'int(const vector,const vector,const vector,const float,vector,float,float)'})
let c['planesphereintersect'] = f
let f = []
call add(f,{'word':'pluralize','kind':'f','menu':'string(const string)'})
let c['pluralize'] = f
let f = []
call add(f,{'word':'pnoise','kind':'f','menu':'float(const float,const float,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const float,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const vector4,const vector4)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const vector,const vector)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const float,const float,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const float,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const vector4,const vector4)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const vector,const vector)'})
let c['pnoise'] = f
let f = []
call add(f,{'word':'point','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector[](const string,const string,const int)'})
let c['point'] = f
let f = []
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix2(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix2(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix3(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix3(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'float(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'float(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'int(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'int(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector4(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector4(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'string(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'string(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector2(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector2(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix2[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix2[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix3[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix3[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'float[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'float[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'int[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'int[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector4[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector4[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'string[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'string[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector2[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector2[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector[](const string,const string,const int,int)'})
let c['pointattrib'] = f
let f = []
call add(f,{'word':'pointattribsize','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'pointattribsize','kind':'f','menu':'int(const string,const string)'})
let c['pointattribsize'] = f
let f = []
call add(f,{'word':'pointattribtype','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'pointattribtype','kind':'f','menu':'int(const string,const string)'})
let c['pointattribtype'] = f
let f = []
call add(f,{'word':'pointattribtypeinfo','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'pointattribtypeinfo','kind':'f','menu':'string(const string,const string)'})
let c['pointattribtypeinfo'] = f
let f = []
call add(f,{'word':'pointedge','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'pointedge','kind':'f','menu':'int(const string,const int,const int)'})
let c['pointedge'] = f
let f = []
call add(f,{'word':'pointhedge','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'pointhedge','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'pointhedge','kind':'f','menu':'int(const string,const int)'})
call add(f,{'word':'pointhedge','kind':'f','menu':'int(const string,const int,const int)'})
let c['pointhedge'] = f
let f = []
call add(f,{'word':'pointhedgenext','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'pointhedgenext','kind':'f','menu':'int(const string,const int)'})
let c['pointhedgenext'] = f
let f = []
call add(f,{'word':'pointprims','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'pointprims','kind':'f','menu':'int[](const string,const int)'})
let c['pointprims'] = f
let f = []
call add(f,{'word':'pointvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'pointvertex','kind':'f','menu':'int(const string,const int)'})
let c['pointvertex'] = f
let f = []
call add(f,{'word':'pointvertices','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'pointvertices','kind':'f','menu':'int[](const string,const int)'})
let c['pointvertices'] = f
let f = []
call add(f,{'word':'polardecomp','kind':'f','menu':'matrix3(const matrix3)'})
let c['polardecomp'] = f
let f = []
call add(f,{'word':'polyneighbours','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'polyneighbours','kind':'f','menu':'int[](const string,const int)'})
let c['polyneighbours'] = f
let f = []
call add(f,{'word':'pop','kind':'f','menu':'matrix2(export matrix2[])'})
call add(f,{'word':'pop','kind':'f','menu':'matrix2(export matrix2[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'matrix3(export matrix3[])'})
call add(f,{'word':'pop','kind':'f','menu':'matrix3(export matrix3[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'matrix(export matrix[])'})
call add(f,{'word':'pop','kind':'f','menu':'matrix(export matrix[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'bsdf(export bsdf[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'light(export light[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'material(export material[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'bsdf(export bsdf[])'})
call add(f,{'word':'pop','kind':'f','menu':'light(export light[])'})
call add(f,{'word':'pop','kind':'f','menu':'material(export material[])'})
call add(f,{'word':'pop','kind':'f','menu':'float(export float[])'})
call add(f,{'word':'pop','kind':'f','menu':'float(export float[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'int(export int[])'})
call add(f,{'word':'pop','kind':'f','menu':'int(export int[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'vector4(export vector4[])'})
call add(f,{'word':'pop','kind':'f','menu':'vector4(export vector4[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'string(export string[])'})
call add(f,{'word':'pop','kind':'f','menu':'string(export string[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'vector2(export vector2[])'})
call add(f,{'word':'pop','kind':'f','menu':'vector2(export vector2[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'vector(export vector[])'})
call add(f,{'word':'pop','kind':'f','menu':'vector(export vector[],const int)'})
let c['pop'] = f
let f = []
let c['popinline'] = f
let f = []
call add(f,{'word':'pow','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'pow','kind':'f','menu':'vector4(const vector4,const float)'})
call add(f,{'word':'pow','kind':'f','menu':'vector2(const vector2,const float)'})
call add(f,{'word':'pow','kind':'f','menu':'vector(const vector,const float)'})
let c['pow'] = f
let f = []
call add(f,{'word':'predicate_incircle','kind':'f','menu':'float(const vector2,const vector2,const vector2,const vector2)'})
let c['predicate_incircle'] = f
let f = []
call add(f,{'word':'predicate_insphere','kind':'f','menu':'float(const vector,const vector,const vector,const vector,const vector)'})
let c['predicate_insphere'] = f
let f = []
call add(f,{'word':'predicate_orient2d','kind':'f','menu':'float(const vector2,const vector2,const vector2)'})
let c['predicate_orient2d'] = f
let f = []
call add(f,{'word':'predicate_orient3d','kind':'f','menu':'float(const vector,const vector,const vector,const vector)'})
let c['predicate_orient3d'] = f
let f = []
call add(f,{'word':'prerotate','kind':'f','menu':'void(export matrix3,const float,const vector)'})
call add(f,{'word':'prerotate','kind':'f','menu':'void(export matrix3,const vector,const int)'})
call add(f,{'word':'prerotate','kind':'f','menu':'void(export matrix,const float,const vector)'})
call add(f,{'word':'prerotate','kind':'f','menu':'void(export matrix,const vector,const int)'})
let c['prerotate'] = f
let f = []
call add(f,{'word':'prescale','kind':'f','menu':'void(export matrix3,const vector)'})
call add(f,{'word':'prescale','kind':'f','menu':'void(export matrix,const vector)'})
let c['prescale'] = f
let f = []
call add(f,{'word':'pretranslate','kind':'f','menu':'void(export matrix,const vector)'})
let c['pretranslate'] = f
let f = []
call add(f,{'word':'prim','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector[](const string,const string,const int)'})
let c['prim'] = f
let f = []
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix2,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix3,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix3,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,float,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,float,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,int,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,int,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector4,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector4,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector2,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix2[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix3[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,float[],const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,float[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,int[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector4[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector2[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector[],const string,const int,const vector)'})
let c['prim_attribute'] = f
let f = []
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const int,const int,const float,const float)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const int,const int,const float,const float,const float)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const string,const int,const float,const float)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const string,const int,const float,const float,const float)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const string,const int,const vector)'})
let c['prim_normal'] = f
let f = []
call add(f,{'word':'primarclen','kind':'f','menu':'float(const string,const vector2,const vector2,const int)'})
call add(f,{'word':'primarclen','kind':'f','menu':'float(const string,const vector2,const vector2,const int,const int)'})
let c['primarclen'] = f
let f = []
call add(f,{'word':'primattrib','kind':'f','menu':'matrix2(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix2(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix3(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix3(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'float(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'float(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'int(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'int(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector4(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector4(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'string(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'string(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector2(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector2(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix2[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix2[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix3[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix3[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'float[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'float[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'int[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'int[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector4[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector4[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'string[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'string[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector2[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector2[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector[](const string,const string,const int,int)'})
let c['primattrib'] = f
let f = []
call add(f,{'word':'primattribsize','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'primattribsize','kind':'f','menu':'int(const string,const string)'})
let c['primattribsize'] = f
let f = []
call add(f,{'word':'primattribtype','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'primattribtype','kind':'f','menu':'int(const string,const string)'})
let c['primattribtype'] = f
let f = []
call add(f,{'word':'primattribtypeinfo','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'primattribtypeinfo','kind':'f','menu':'string(const string,const string)'})
let c['primattribtypeinfo'] = f
let f = []
call add(f,{'word':'primduv','kind':'f','menu':'vector(const string,const int,const vector2,const int,const int)'})
let c['primduv'] = f
let f = []
call add(f,{'word':'primfind','kind':'f','menu':'int[](const int,const string,const vector,const vector)'})
call add(f,{'word':'primfind','kind':'f','menu':'int[](const int,const vector,const vector)'})
call add(f,{'word':'primfind','kind':'f','menu':'int[](const string,const string,const vector,const vector)'})
call add(f,{'word':'primfind','kind':'f','menu':'int[](const string,const vector,const vector)'})
let c['primfind'] = f
let f = []
call add(f,{'word':'primhedge','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'primhedge','kind':'f','menu':'int(const string,const int)'})
let c['primhedge'] = f
let f = []
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector[](const string,const string,const int)'})
let c['primintrinsic'] = f
let f = []
call add(f,{'word':'primpoint','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'primpoint','kind':'f','menu':'int(const string,const int,const int)'})
let c['primpoint'] = f
let f = []
call add(f,{'word':'primpoints','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'primpoints','kind':'f','menu':'int[](const string,const int)'})
let c['primpoints'] = f
let f = []
call add(f,{'word':'primuv','kind':'f','menu':'matrix2(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix2(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix3(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix3(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'float(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'float(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'int(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'int(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector4(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector4(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector2(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector2(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix2[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix2[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix3[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix3[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'float[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'float[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'int[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'int[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector4[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector4[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector2[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector2[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector[](const string,const string,const int,const vector)'})
let c['primuv'] = f
let f = []
call add(f,{'word':'primuvconvert','kind':'f','menu':'vector2(const string,const vector2,const int,const int)'})
call add(f,{'word':'primuvconvert','kind':'f','menu':'vector2(const string,const vector2,const int,const int,const float)'})
let c['primuvconvert'] = f
let f = []
call add(f,{'word':'primvertex','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'primvertex','kind':'f','menu':'int(const string,const int,const int)'})
let c['primvertex'] = f
let f = []
call add(f,{'word':'primvertexcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'primvertexcount','kind':'f','menu':'int(const string,const int)'})
let c['primvertexcount'] = f
let f = []
call add(f,{'word':'primvertices','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'primvertices','kind':'f','menu':'int[](const string,const int)'})
let c['primvertices'] = f
let f = []
call add(f,{'word':'print_once','kind':'f','menu':'void(const string)'})
let c['print_once'] = f
let f = []
call add(f,{'word':'printf','kind':'f','menu':'void(const string)'})
let c['printf'] = f
let f = []
call add(f,{'word':'product','kind':'f','menu':'float(const float)'})
call add(f,{'word':'product','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'product','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'product','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'product','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'product','kind':'f','menu':'int(const int)'})
call add(f,{'word':'product','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'product','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'product','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'product','kind':'f','menu':'vector(const vector[])'})
let c['product'] = f
let f = []
call add(f,{'word':'ptexture','kind':'f','menu':'matrix3(const string,const int)'})
call add(f,{'word':'ptexture','kind':'f','menu':'matrix3(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'matrix3(const string,const int,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'matrix(const string,const int)'})
call add(f,{'word':'ptexture','kind':'f','menu':'matrix(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'matrix(const string,const int,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'float(const string,const int)'})
call add(f,{'word':'ptexture','kind':'f','menu':'float(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'float(const string,const int,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector4(const string,const int)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector4(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector4(const string,const int,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector(const string,const int)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector(const string,const int,const float,const float,const float,const float,const float,const float)'})
let c['ptexture'] = f
let f = []
call add(f,{'word':'ptlined','kind':'f','menu':'float(const vector,const vector,const vector)'})
let c['ptlined'] = f
let f = []
call add(f,{'word':'ptransform','kind':'f','menu':'vector4(const vector4,const matrix)'})
call add(f,{'word':'ptransform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'ptransform','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'ptransform','kind':'f','menu':'vector(const vector,const matrix)'})
let c['ptransform'] = f
let f = []
call add(f,{'word':'push','kind':'f','menu':'void(export matrix2[],const matrix2)'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix2[],const matrix2[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix3[],const matrix3)'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix3[],const matrix3[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix[],const matrix)'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix[],const matrix[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export bsdf[],const bsdf)'})
call add(f,{'word':'push','kind':'f','menu':'void(export light[],const light)'})
call add(f,{'word':'push','kind':'f','menu':'void(export material[],const material)'})
call add(f,{'word':'push','kind':'f','menu':'void(export bsdf[],const bsdf[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export light[],const light[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export material[],const material[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export float[],const float)'})
call add(f,{'word':'push','kind':'f','menu':'void(export float[],const float[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export int[],const int)'})
call add(f,{'word':'push','kind':'f','menu':'void(export int[],const int[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector4[],const vector4)'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector4[],const vector4[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export string[],const string)'})
call add(f,{'word':'push','kind':'f','menu':'void(export string[],const string[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector2[],const vector2)'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector2[],const vector2[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector[],const vector)'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector[],const vector[])'})
let c['push'] = f
let f = []
let c['pushinline'] = f
let f = []
call add(f,{'word':'pxnoise','kind':'f','menu':'float(const float,const float,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'float(const float,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'float(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'vector(const float,const float,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'vector(const float,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'vector(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
let c['pxnoise'] = f
let f = []
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const float,const float,const int,const int,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'float(const float,const float,const int,const int,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const float,const float,const int,const int,vector,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'vector(const float,const float,const int,const int,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const float,const int,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'float(const float,const int,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const float,const int,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'vector(const float,const int,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const vector4,const int,const int,const int,const int,float,float,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'float(const vector4,const int,const int,const int,const int,float,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const vector4,const int,const int,const int,const int,vector,vector,vector,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'vector(const vector4,const int,const int,const int,const int,vector,vector,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const vector,const int,const int,const int,float,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'float(const vector,const int,const int,const int,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const vector,const int,const int,const int,vector,vector,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'vector(const vector,const int,const int,const int,vector,vector,vector)'})
let c['pxnoised'] = f
let f = []
call add(f,{'word':'qconvert','kind':'f','menu':'matrix3(const vector4)'})
call add(f,{'word':'qconvert','kind':'f','menu':'vector(const vector4)'})
let c['qconvert'] = f
let f = []
call add(f,{'word':'qdistance','kind':'f','menu':'float(const vector4,const vector4)'})
let c['qdistance'] = f
let f = []
call add(f,{'word':'qinvert','kind':'f','menu':'vector4(const vector4)'})
let c['qinvert'] = f
let f = []
call add(f,{'word':'qmultiply','kind':'f','menu':'vector4(const vector4,const vector4)'})
let c['qmultiply'] = f
let f = []
call add(f,{'word':'qrotate','kind':'f','menu':'vector(const vector4,const vector)'})
let c['qrotate'] = f
let f = []
call add(f,{'word':'quaternion','kind':'f','menu':'vector4(const matrix3)'})
call add(f,{'word':'quaternion','kind':'f','menu':'vector4(const float,const vector)'})
call add(f,{'word':'quaternion','kind':'f','menu':'vector4(const vector)'})
let c['quaternion'] = f
let f = []
call add(f,{'word':'quaterniontoeuler','kind':'f','menu':'vector(const vector4,const int)'})
let c['quaterniontoeuler'] = f
let f = []
call add(f,{'word':'radians','kind':'f','menu':'float(const float)'})
call add(f,{'word':'radians','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'radians','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'radians','kind':'f','menu':'vector(const vector)'})
let c['radians'] = f
let f = []
call add(f,{'word':'rand','kind':'f','menu':'float(const float)'})
call add(f,{'word':'rand','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'rand','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'rand','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'rand','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const float,const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const vector2)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const vector)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const float,const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const vector4)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const vector)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const vector2)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const vector)'})
let c['rand'] = f
let f = []
call add(f,{'word':'random','kind':'f','menu':'float(const float)'})
call add(f,{'word':'random','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'random','kind':'f','menu':'float(const int)'})
call add(f,{'word':'random','kind':'f','menu':'float(const int,const int)'})
call add(f,{'word':'random','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'random','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const float,const float)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const int,const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const vector)'})
call add(f,{'word':'random','kind':'f','menu':'vector2(const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const vector)'})
let c['random'] = f
let f = []
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const float)'})
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const float,const float)'})
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const vector4)'})
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const vector2)'})
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const vector)'})
let c['random_fhash'] = f
let f = []
let c['random_hash'] = f
let f = []
call add(f,{'word':'random_ihash','kind':'f','menu':'int(const int)'})
let c['random_ihash'] = f
let f = []
call add(f,{'word':'random_poisson','kind':'f','menu':'int(const int,const float)'})
call add(f,{'word':'random_poisson','kind':'f','menu':'int(const int,const float,const int,const int)'})
let c['random_poisson'] = f
let f = []
call add(f,{'word':'random_shash','kind':'f','menu':'int(const string)'})
let c['random_shash'] = f
let f = []
call add(f,{'word':'random_sobol','kind':'f','menu':'float(const float,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'float(const int,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'float(const vector4,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'float(const vector,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector4(const float,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector4(const int,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector4(const vector4,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector4(const vector,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector(const float,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector(const vector4,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector(const vector,const int)'})
let c['random_sobol'] = f
let f = []
call add(f,{'word':'randomf','kind':'f','menu':'float(const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'randomf','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector4(const float,const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector4(const vector)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector(const vector)'})
let c['randomf'] = f
let f = []
call add(f,{'word':'rawbumpmap','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmap','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmap','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmap','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmap'] = f
let f = []
call add(f,{'word':'rawbumpmapA','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapA','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapA','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapA','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapA'] = f
let f = []
call add(f,{'word':'rawbumpmapB','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapB','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapB','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapB','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapB'] = f
let f = []
call add(f,{'word':'rawbumpmapG','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapG','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapG','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapG','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapG'] = f
let f = []
call add(f,{'word':'rawbumpmapL','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapL','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapL','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapL','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapL'] = f
let f = []
call add(f,{'word':'rawbumpmapR','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapR','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapR','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapR','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapR'] = f
let f = []
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const float,const float)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const float,const float,const float,const float,const float,const float,const float,const float,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const vector)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const float,const float)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const float,const float,const float,const float,const float,const float,const float,const float,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector,const int)'})
let c['rawcolormap'] = f
let f = []
call add(f,{'word':'rayhittest','kind':'f','menu':'float(const vector,const vector,const float)'})
call add(f,{'word':'rayhittest','kind':'f','menu':'float(const vector,const vector,vector,vector,const float)'})
let c['rayhittest'] = f
let f = []
call add(f,{'word':'rayimport','kind':'f','menu':'int(const string,export matrix2)'})
call add(f,{'word':'rayimport','kind':'f','menu':'int(const string,export matrix3)'})
call add(f,{'word':'rayimport','kind':'f','menu':'int(const string,export matrix)'})
call add(f,{'word':'rayimport','kind':'f','menu':'int(const string,export float)'})
call add(f,{'word':'rayimport','kind':'f','menu':'int(const string,export int)'})
call add(f,{'word':'rayimport','kind':'f','menu':'int(const string,export vector4)'})
call add(f,{'word':'rayimport','kind':'f','menu':'int(const string,export string)'})
call add(f,{'word':'rayimport','kind':'f','menu':'int(const string,export vector2)'})
call add(f,{'word':'rayimport','kind':'f','menu':'int(const string,export vector)'})
let c['rayimport'] = f
let f = []
call add(f,{'word':'re_find','kind':'f','menu':'int(const string,const string)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(const string,const string,const int,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(int[],int[],const string,const string)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(int[],int[],const string,const string,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(int[],int[],const string,const string,const int,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'string(const string,const string)'})
call add(f,{'word':'re_find','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'string(const string,const string,const int,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'re_find','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'string[](const string,const string,const int,const int)'})
let c['re_find'] = f
let f = []
call add(f,{'word':'re_findall','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'re_findall','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'re_findall','kind':'f','menu':'string[](const string,const string,const int,const int)'})
let c['re_findall'] = f
let f = []
call add(f,{'word':'re_match','kind':'f','menu':'int(const string,const string)'})
let c['re_match'] = f
let f = []
call add(f,{'word':'re_replace','kind':'f','menu':'string(const string,const string,const string)'})
call add(f,{'word':'re_replace','kind':'f','menu':'string(const string,const string,const string,const int)'})
let c['re_replace'] = f
let f = []
call add(f,{'word':'re_split','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'re_split','kind':'f','menu':'string[](const string,const string,const int)'})
let c['re_split'] = f
let f = []
call add(f,{'word':'reflect','kind':'f','menu':'vector(const vector,const vector)'})
let c['reflect'] = f
let f = []
call add(f,{'word':'reflectlight','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'reflectlight','kind':'f','menu':'vector(const vector,const vector,const float,const float)'})
call add(f,{'word':'reflectlight','kind':'f','menu':'vector(const vector,const vector,const vector,const float,const float)'})
let c['reflectlight'] = f
let f = []
call add(f,{'word':'refract','kind':'f','menu':'vector(const vector,const vector,const float)'})
let c['refract'] = f
let f = []
call add(f,{'word':'refractlight','kind':'f','menu':'void(vector,vector,float,const vector,const vector,const float,const float)'})
call add(f,{'word':'refractlight','kind':'f','menu':'vector(vector,float,const vector,const vector,const float,const float)'})
call add(f,{'word':'refractlight','kind':'f','menu':'void(vector,vector,float,const vector,const vector,const vector,const float,const float,const float)'})
call add(f,{'word':'refractlight','kind':'f','menu':'vector(vector,float,const vector,const vector,const vector,const float,const float,const float)'})
let c['refractlight'] = f
let f = []
call add(f,{'word':'relativepath','kind':'f','menu':'string(const string,const string)'})
let c['relativepath'] = f
let f = []
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const int,const vector)'})
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const vector)'})
let c['relbbox'] = f
let f = []
call add(f,{'word':'relpointbbox','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'relpointbbox','kind':'f','menu':'vector(const int,const vector)'})
call add(f,{'word':'relpointbbox','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'relpointbbox','kind':'f','menu':'vector(const string,const vector)'})
let c['relpointbbox'] = f
let f = []
call add(f,{'word':'removeindex','kind':'f','menu':'matrix2(export matrix2[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'matrix3(export matrix3[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'matrix(export matrix[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'float(export float[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'int(export int[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'vector4(export vector4[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'string(export string[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'vector2(export vector2[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'vector(export vector[],const int)'})
let c['removeindex'] = f
let f = []
call add(f,{'word':'removepoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'removepoint','kind':'f','menu':'int(const int,const int,const int)'})
let c['removepoint'] = f
let f = []
call add(f,{'word':'removeprim','kind':'f','menu':'int(const int,const int,const int)'})
let c['removeprim'] = f
let f = []
call add(f,{'word':'removevalue','kind':'f','menu':'int(export matrix2[],const matrix2)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export matrix3[],const matrix3)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export matrix[],const matrix)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export float[],const float)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export int[],const int)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export vector4[],const vector4)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export string[],const string)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export vector2[],const vector2)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export vector[],const vector)'})
let c['removevalue'] = f
let f = []
call add(f,{'word':'renderstate','kind':'f','menu':'int(const material,const string,export matrix3)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const material,const string,export matrix)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const material,const string,export float)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const material,const string,export int)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const material,const string,export vector4)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const material,const string,export string)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const material,const string,export vector)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const string,export matrix3)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const string,export matrix)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const string,export float)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const string,export int)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const string,export vector4)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const string,export string)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const string,export vector)'})
let c['renderstate'] = f
let f = []
call add(f,{'word':'reorder','kind':'f','menu':'string(const string,const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'matrix2[](const matrix2[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'matrix3[](const matrix3[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'matrix[](const matrix[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'float[](const float[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'int[](const int[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'vector4[](const vector4[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'string[](const string[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'vector2[](const vector2[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'vector[](const vector[],const int[])'})
let c['reorder'] = f
let f = []
call add(f,{'word':'resample_linear','kind':'f','menu':'float[](const float[],const int)'})
call add(f,{'word':'resample_linear','kind':'f','menu':'vector4[](const vector4[],const int)'})
call add(f,{'word':'resample_linear','kind':'f','menu':'vector2[](const vector2[],const int)'})
call add(f,{'word':'resample_linear','kind':'f','menu':'vector[](const vector[],const int)'})
let c['resample_linear'] = f
let f = []
call add(f,{'word':'resize','kind':'f','menu':'void(export matrix2[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export matrix3[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export matrix[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export bsdf[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export light[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export material[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export float[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export int[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export vector4[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export string[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export vector2[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export vector[],const int)'})
let c['resize'] = f
let f = []
call add(f,{'word':'resolvemissedray','kind':'f','menu':'vector(const vector,const float,const int)'})
let c['resolvemissedray'] = f
let f = []
let c['returninline'] = f
let f = []
call add(f,{'word':'reverse','kind':'f','menu':'string(const string)'})
call add(f,{'word':'reverse','kind':'f','menu':'matrix2[](const matrix2[])'})
call add(f,{'word':'reverse','kind':'f','menu':'matrix3[](const matrix3[])'})
call add(f,{'word':'reverse','kind':'f','menu':'matrix[](const matrix[])'})
call add(f,{'word':'reverse','kind':'f','menu':'float[](const float[])'})
call add(f,{'word':'reverse','kind':'f','menu':'int[](const int[])'})
call add(f,{'word':'reverse','kind':'f','menu':'vector4[](const vector4[])'})
call add(f,{'word':'reverse','kind':'f','menu':'string[](const string[])'})
call add(f,{'word':'reverse','kind':'f','menu':'vector2[](const vector2[])'})
call add(f,{'word':'reverse','kind':'f','menu':'vector[](const vector[])'})
let c['reverse'] = f
let f = []
call add(f,{'word':'rgbtohsv','kind':'f','menu':'vector(const float,const float,const float)'})
call add(f,{'word':'rgbtohsv','kind':'f','menu':'vector(const vector)'})
let c['rgbtohsv'] = f
let f = []
call add(f,{'word':'rgbtoxyz','kind':'f','menu':'vector(const vector)'})
let c['rgbtoxyz'] = f
let f = []
call add(f,{'word':'rint','kind':'f','menu':'float(const float)'})
call add(f,{'word':'rint','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'rint','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'rint','kind':'f','menu':'vector(const vector)'})
let c['rint'] = f
let f = []
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix2,const float)'})
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix3,const float,const vector)'})
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix3,const vector,const int)'})
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix,const float,const vector)'})
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix,const vector,const int)'})
let c['rotate'] = f
let f = []
call add(f,{'word':'rotate_x_to','kind':'f','menu':'vector4(const vector4,const vector4)'})
call add(f,{'word':'rotate_x_to','kind':'f','menu':'vector2(const vector2,const vector2)'})
call add(f,{'word':'rotate_x_to','kind':'f','menu':'vector(const vector,const vector)'})
let c['rotate_x_to'] = f
let f = []
call add(f,{'word':'rstrip','kind':'f','menu':'string(const string)'})
call add(f,{'word':'rstrip','kind':'f','menu':'string(const string,const string)'})
let c['rstrip'] = f
let f = []
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,const vector,int,vector,vector,float,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'int(const bsdf,const vector,const vector,vector,vector,float,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,vector,vector,float,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'vector(const bsdf,const vector,vector,float,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,vector,vector,float,int,const float,const float)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'vector(const bsdf,const vector,vector,float,int,const float,const float)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,vector,vector,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'vector(const bsdf,const vector,vector,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,vector,vector,int,const float,const float)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'vector(const bsdf,const vector,vector,int,const float,const float)'})
let c['sample_bsdf'] = f
let f = []
call add(f,{'word':'sample_cauchy','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'float(const float,const float,const float,const float)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'vector2(const float,const vector2)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'vector(const vector)'})
let c['sample_cauchy'] = f
let f = []
call add(f,{'word':'sample_cdf','kind':'f','menu':'int(const float[],const float)'})
call add(f,{'word':'sample_cdf','kind':'f','menu':'void(const float[],const float,int,float)'})
call add(f,{'word':'sample_cdf','kind':'f','menu':'int(const float[],const float,float)'})
call add(f,{'word':'sample_cdf','kind':'f','menu':'void(const float[],const float,int,float,float)'})
call add(f,{'word':'sample_cdf','kind':'f','menu':'int(const float[],const float,float,float)'})
let c['sample_cdf'] = f
let f = []
call add(f,{'word':'sample_circle_arc','kind':'f','menu':'vector2(const vector2,const float,const float)'})
let c['sample_circle_arc'] = f
let f = []
call add(f,{'word':'sample_circle_edge_uniform','kind':'f','menu':'vector2(const float)'})
let c['sample_circle_edge_uniform'] = f
let f = []
call add(f,{'word':'sample_circle_ring_uniform','kind':'f','menu':'vector2(const vector2,const float)'})
let c['sample_circle_ring_uniform'] = f
let f = []
call add(f,{'word':'sample_circle_slice','kind':'f','menu':'vector2(const vector2,const float,const vector2)'})
let c['sample_circle_slice'] = f
let f = []
call add(f,{'word':'sample_circle_uniform','kind':'f','menu':'vector2(const vector2)'})
let c['sample_circle_uniform'] = f
let f = []
call add(f,{'word':'sample_direction_cone','kind':'f','menu':'vector(const vector,const float,const vector2)'})
let c['sample_direction_cone'] = f
let f = []
call add(f,{'word':'sample_direction_uniform','kind':'f','menu':'vector(const vector2)'})
let c['sample_direction_uniform'] = f
let f = []
call add(f,{'word':'sample_discrete','kind':'f','menu':'int(const int,const float)'})
call add(f,{'word':'sample_discrete','kind':'f','menu':'int(const float[],const float)'})
let c['sample_discrete'] = f
let f = []
call add(f,{'word':'sample_exponential','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sample_exponential','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'sample_exponential','kind':'f','menu':'float(const float,const float,const float)'})
let c['sample_exponential'] = f
let f = []
call add(f,{'word':'sample_geometry','kind':'f','menu':'int(const vector,const vector,const float)'})
let c['sample_geometry'] = f
let f = []
call add(f,{'word':'sample_hemisphere','kind':'f','menu':'vector(const float,const vector2)'})
call add(f,{'word':'sample_hemisphere','kind':'f','menu':'vector(const vector2)'})
call add(f,{'word':'sample_hemisphere','kind':'f','menu':'vector(const vector,const float,const vector2)'})
call add(f,{'word':'sample_hemisphere','kind':'f','menu':'vector(const vector,const vector2)'})
let c['sample_hemisphere'] = f
let f = []
call add(f,{'word':'sample_hypersphere_cone','kind':'f','menu':'vector4(const vector4,const float,const vector4)'})
let c['sample_hypersphere_cone'] = f
let f = []
call add(f,{'word':'sample_hypersphere_uniform','kind':'f','menu':'vector4(const vector4)'})
let c['sample_hypersphere_uniform'] = f
let f = []
call add(f,{'word':'sample_lognormal','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'sample_lognormal','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
let c['sample_lognormal'] = f
let f = []
call add(f,{'word':'sample_lognormal_by_median','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'sample_lognormal_by_median','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
let c['sample_lognormal_by_median'] = f
let f = []
call add(f,{'word':'sample_normal','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'vector(const vector)'})
let c['sample_normal'] = f
let f = []
call add(f,{'word':'sample_orientation_cone','kind':'f','menu':'vector4(const vector4,const float,const vector)'})
let c['sample_orientation_cone'] = f
let f = []
call add(f,{'word':'sample_orientation_uniform','kind':'f','menu':'vector4(const vector)'})
let c['sample_orientation_uniform'] = f
let f = []
call add(f,{'word':'sample_photon','kind':'f','menu':'int(const light,vector,vector,float,const float)'})
let c['sample_photon'] = f
let f = []
call add(f,{'word':'sample_sphere_cone','kind':'f','menu':'vector(const vector,const float,const vector)'})
let c['sample_sphere_cone'] = f
let f = []
call add(f,{'word':'sample_sphere_shell_uniform','kind':'f','menu':'vector(const vector,const float)'})
let c['sample_sphere_shell_uniform'] = f
let f = []
call add(f,{'word':'sample_sphere_uniform','kind':'f','menu':'vector(const vector)'})
let c['sample_sphere_uniform'] = f
let f = []
call add(f,{'word':'sampledisk','kind':'f','menu':'void(float,float,const float,const float)'})
call add(f,{'word':'sampledisk','kind':'f','menu':'float(float,const float,const float)'})
let c['sampledisk'] = f
let f = []
call add(f,{'word':'scale','kind':'f','menu':'void(export matrix2,const vector2)'})
call add(f,{'word':'scale','kind':'f','menu':'void(export matrix3,const vector)'})
call add(f,{'word':'scale','kind':'f','menu':'void(export matrix,const vector)'})
let c['scale'] = f
let f = []
call add(f,{'word':'scatter','kind':'f','menu':'int(const vector,const vector,const vector,const vector,const float,const float,vector,vector,vector)'})
let c['scatter'] = f
let f = []
call add(f,{'word':'select','kind':'f','menu':'matrix2(const int,const matrix2,const matrix2)'})
call add(f,{'word':'select','kind':'f','menu':'matrix3(const int,const matrix3,const matrix3)'})
call add(f,{'word':'select','kind':'f','menu':'matrix(const int,const matrix,const matrix)'})
call add(f,{'word':'select','kind':'f','menu':'bsdf(const int,const bsdf,const bsdf)'})
call add(f,{'word':'select','kind':'f','menu':'light(const int,const light,const light)'})
call add(f,{'word':'select','kind':'f','menu':'material(const int,const material,const material)'})
call add(f,{'word':'select','kind':'f','menu':'float(const int,const float,const float)'})
call add(f,{'word':'select','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'select','kind':'f','menu':'vector4(const int,const vector4,const vector4)'})
call add(f,{'word':'select','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'select','kind':'f','menu':'vector2(const int,const vector2,const vector2)'})
call add(f,{'word':'select','kind':'f','menu':'vector(const int,const vector,const vector)'})
call add(f,{'word':'select','kind':'f','menu':'matrix2[](const int,const matrix2[],const matrix2[])'})
call add(f,{'word':'select','kind':'f','menu':'matrix3[](const int,const matrix3[],const matrix3[])'})
call add(f,{'word':'select','kind':'f','menu':'matrix[](const int,const matrix[],const matrix[])'})
call add(f,{'word':'select','kind':'f','menu':'bsdf[](const int,const bsdf[],const bsdf[])'})
call add(f,{'word':'select','kind':'f','menu':'light[](const int,const light[],const light[])'})
call add(f,{'word':'select','kind':'f','menu':'material[](const int,const material[],const material[])'})
call add(f,{'word':'select','kind':'f','menu':'float[](const int,const float[],const float[])'})
call add(f,{'word':'select','kind':'f','menu':'int[](const int,const int[],const int[])'})
call add(f,{'word':'select','kind':'f','menu':'vector4[](const int,const vector4[],const vector4[])'})
call add(f,{'word':'select','kind':'f','menu':'string[](const int,const string[],const string[])'})
call add(f,{'word':'select','kind':'f','menu':'vector2[](const int,const vector2[],const vector2[])'})
call add(f,{'word':'select','kind':'f','menu':'vector[](const int,const vector[],const vector[])'})
let c['select'] = f
let f = []
call add(f,{'word':'sensor_panorama_create','kind':'f','menu':'int(const float,const vector,const int,const float,const float,const string,const string,const string,const int)'})
let c['sensor_panorama_create'] = f
let f = []
call add(f,{'word':'sensor_panorama_getcolor','kind':'f','menu':'vector(const int,const vector)'})
let c['sensor_panorama_getcolor'] = f
let f = []
call add(f,{'word':'sensor_panorama_getcone','kind':'f','menu':'void(const int,const vector,const float,const vector,const vector,const float,const float,float,vector,vector,float)'})
call add(f,{'word':'sensor_panorama_getcone','kind':'f','menu':'float(const int,const vector,const float,const vector,const vector,const float,const float,vector,vector,float)'})
let c['sensor_panorama_getcone'] = f
let f = []
call add(f,{'word':'sensor_panorama_getdepth','kind':'f','menu':'float(const int,const vector)'})
let c['sensor_panorama_getdepth'] = f
let f = []
call add(f,{'word':'sensor_save','kind':'f','menu':'int(const int,const string,const string)'})
let c['sensor_save'] = f
let f = []
call add(f,{'word':'serialize','kind':'f','menu':'float[](const matrix2[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const matrix3[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const matrix[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const vector4[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const vector2[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const vector[])'})
let c['serialize'] = f
let f = []
call add(f,{'word':'set','kind':'f','menu':'matrix2(const matrix2)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const float,const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const int)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const vector2,const vector2)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const matrix2)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const float,const float,const float,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const int)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const vector,const vector,const vector)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const vector[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const matrix2)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const int)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const vector4,const vector4,const vector4,const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const vector4[])'})
call add(f,{'word':'set','kind':'f','menu':'bsdf(const bsdf)'})
call add(f,{'word':'set','kind':'f','menu':'light(const light)'})
call add(f,{'word':'set','kind':'f','menu':'material(const material)'})
call add(f,{'word':'set','kind':'f','menu':'float(const float)'})
call add(f,{'word':'set','kind':'f','menu':'float(const int)'})
call add(f,{'word':'set','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'set','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'int(const float)'})
call add(f,{'word':'set','kind':'f','menu':'int(const int)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const float,const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const int)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const vector2)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const vector)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'string(const string)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const int)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const vector)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const vector2)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix2[](const matrix2[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix2[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix3[](const matrix3[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix3[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix[](const matrix[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'bsdf[](const bsdf[])'})
call add(f,{'word':'set','kind':'f','menu':'light[](const light[])'})
call add(f,{'word':'set','kind':'f','menu':'material[](const material[])'})
call add(f,{'word':'set','kind':'f','menu':'float[](const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const float)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const vector)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'float[](const int[])'})
call add(f,{'word':'set','kind':'f','menu':'int[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'int[](const int[])'})
call add(f,{'word':'set','kind':'f','menu':'vector4[](const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'vector4[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'vector4[](const vector4[])'})
call add(f,{'word':'set','kind':'f','menu':'string[](const string[])'})
call add(f,{'word':'set','kind':'f','menu':'vector2[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'vector2[](const vector2[])'})
call add(f,{'word':'set','kind':'f','menu':'vector[](const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'vector[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'vector[](const vector[])'})
let c['set'] = f
let f = []
call add(f,{'word':'setagentclipnames','kind':'f','menu':'void(const int,const int,const string[])'})
let c['setagentclipnames'] = f
let f = []
call add(f,{'word':'setagentclips','kind':'f','menu':'int(const int,const int,const string[],const float[],const float[],const string[],const int[],const int[],const float[],const int[])'})
let c['setagentclips'] = f
let f = []
call add(f,{'word':'setagentcliptimes','kind':'f','menu':'void(const int,const int,const float[])'})
let c['setagentcliptimes'] = f
let f = []
call add(f,{'word':'setagentclipweights','kind':'f','menu':'void(const int,const int,const float[])'})
let c['setagentclipweights'] = f
let f = []
call add(f,{'word':'setagentcollisionlayer','kind':'f','menu':'void(const int,const int,const string)'})
let c['setagentcollisionlayer'] = f
let f = []
call add(f,{'word':'setagentcurrentlayer','kind':'f','menu':'void(const int,const int,const string)'})
let c['setagentcurrentlayer'] = f
let f = []
call add(f,{'word':'setagentlocaltransform','kind':'f','menu':'int(const int,const int,const matrix,const int)'})
let c['setagentlocaltransform'] = f
let f = []
call add(f,{'word':'setagentlocaltransforms','kind':'f','menu':'void(const int,const int,const matrix[])'})
let c['setagentlocaltransforms'] = f
let f = []
call add(f,{'word':'setagentworldtransform','kind':'f','menu':'int(const int,const int,const matrix,const int)'})
let c['setagentworldtransform'] = f
let f = []
call add(f,{'word':'setagentworldtransforms','kind':'f','menu':'void(const int,const int,const matrix[])'})
let c['setagentworldtransforms'] = f
let f = []
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix2)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix2,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix3)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix3,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const float)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const float,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const int)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const int,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector4)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector4,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const string,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector2)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector2,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix2[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix2[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix3[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix3[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const float[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const float[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const int[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const int[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector4[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector4[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const string[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const string[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector2[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector2[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector[],const string)'})
let c['setattrib'] = f
let f = []
call add(f,{'word':'setattribtypeinfo','kind':'f','menu':'int(const int,const string,const string,const string)'})
let c['setattribtypeinfo'] = f
let f = []
call add(f,{'word':'setcomp','kind':'f','menu':'void(export matrix2,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'matrix2(export matrix2[],const matrix2,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export matrix3,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'matrix3(export matrix3[],const matrix3,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export matrix,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'matrix(export matrix[],const matrix,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'bsdf(export bsdf[],const bsdf,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'light(export light[],const light,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'material(export material[],const material,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export matrix2,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export matrix3,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export matrix,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export vector4,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export vector2,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export vector,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export float[],const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'int(export int[],const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export vector4,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'vector4(export vector4[],const vector4,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'string(export string[],const string,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export vector2,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'vector2(export vector2[],const vector2,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export vector,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'vector(export vector[],const vector,const int)'})
let c['setcomp'] = f
let f = []
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix2[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix2[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix3[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix3[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector4[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector4[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector2[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector2[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector[],const string)'})
let c['setdetailattrib'] = f
let f = []
call add(f,{'word':'setedgegroup','kind':'f','menu':'int(const int,const string,const int,const int,const int)'})
let c['setedgegroup'] = f
let f = []
let c['setelem'] = f
let f = []
call add(f,{'word':'setpackedtransform','kind':'f','menu':'void(const int,const int,const matrix)'})
let c['setpackedtransform'] = f
let f = []
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const float)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const float,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector4)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector4,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const string,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector2)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector2,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const float[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const float[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const int[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const int[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector4[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector4[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const string[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const string[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector2[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector2[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector[],const string)'})
let c['setpointattrib'] = f
let f = []
call add(f,{'word':'setpointgroup','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setpointgroup','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
let c['setpointgroup'] = f
let f = []
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const float)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const float,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector4)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector4,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const string,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector2)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector2,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const float[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const float[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const int[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const int[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector4[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector4[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const string[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const string[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector2[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector2[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector[],const string)'})
let c['setprimattrib'] = f
let f = []
call add(f,{'word':'setprimgroup','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setprimgroup','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
let c['setprimgroup'] = f
let f = []
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix2)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix2,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix3)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix3,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const float)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const float,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector4)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector4,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const string,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector2)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector2,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix2[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix2[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix3[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix3[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const float[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const float[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const int[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const int[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector4[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector4[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const string[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const string[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector2[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector2[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector[],const string)'})
let c['setprimintrinsic'] = f
let f = []
call add(f,{'word':'setprimvertex','kind':'f','menu':'int(const int,const int,const int,const int)'})
let c['setprimvertex'] = f
let f = []
call add(f,{'word':'setsamplestore','kind':'f','menu':'int(const string,const vector,const float)'})
call add(f,{'word':'setsamplestore','kind':'f','menu':'int(const string,const vector,const int)'})
call add(f,{'word':'setsamplestore','kind':'f','menu':'int(const string,const vector,const vector4)'})
call add(f,{'word':'setsamplestore','kind':'f','menu':'int(const string,const vector,const vector)'})
let c['setsamplestore'] = f
let f = []
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix2)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix2,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix3)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix3,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const float)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const float,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const int)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const int,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector4)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector4,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector2)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector2,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix2[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix2[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix3[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix3[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const float[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const float[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const int[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const int[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector4[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector4[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector2[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector2[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector[],const string)'})
let c['setvertexattrib'] = f
let f = []
call add(f,{'word':'setvertexgroup','kind':'f','menu':'int(const int,const string,const int,const int,const int)'})
call add(f,{'word':'setvertexgroup','kind':'f','menu':'int(const int,const string,const int,const int,const int,const string)'})
let c['setvertexgroup'] = f
let f = []
call add(f,{'word':'setvertexpoint','kind':'f','menu':'int(const int,const int,const int,const int)'})
let c['setvertexpoint'] = f
let f = []
call add(f,{'word':'shadowmap','kind':'f','menu':'float(const string,const vector,const float,const float,const float)'})
call add(f,{'word':'shadowmap','kind':'f','menu':'vector(const string,const vector,const float,const float,const float)'})
call add(f,{'word':'shadowmap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector,const float,const float,const float)'})
let c['shadowmap'] = f
let f = []
call add(f,{'word':'shl','kind':'f','menu':'int(const int,const int)'})
let c['shl'] = f
let f = []
call add(f,{'word':'shr','kind':'f','menu':'int(const int,const int)'})
let c['shr'] = f
let f = []
call add(f,{'word':'shrz','kind':'f','menu':'int(const int,const int)'})
let c['shrz'] = f
let f = []
call add(f,{'word':'sign','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sign','kind':'f','menu':'int(const int)'})
call add(f,{'word':'sign','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sign','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sign','kind':'f','menu':'vector(const vector)'})
let c['sign'] = f
let f = []
call add(f,{'word':'simport','kind':'f','menu':'int(const string,export matrix2)'})
call add(f,{'word':'simport','kind':'f','menu':'int(const string,export matrix3)'})
call add(f,{'word':'simport','kind':'f','menu':'int(const string,export matrix)'})
call add(f,{'word':'simport','kind':'f','menu':'int(const string,export float)'})
call add(f,{'word':'simport','kind':'f','menu':'int(const string,export int)'})
call add(f,{'word':'simport','kind':'f','menu':'int(const string,export vector4)'})
call add(f,{'word':'simport','kind':'f','menu':'int(const string,export string)'})
call add(f,{'word':'simport','kind':'f','menu':'int(const string,export vector2)'})
call add(f,{'word':'simport','kind':'f','menu':'int(const string,export vector)'})
let c['simport'] = f
let f = []
call add(f,{'word':'sin','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sin','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sin','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sin','kind':'f','menu':'vector(const vector)'})
let c['sin'] = f
let f = []
call add(f,{'word':'sinh','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sinh','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sinh','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sinh','kind':'f','menu':'vector(const vector)'})
let c['sinh'] = f
let f = []
call add(f,{'word':'sleep','kind':'f','menu':'void(const int)'})
let c['sleep'] = f
let f = []
call add(f,{'word':'slerp','kind':'f','menu':'vector4(const vector4,const vector4,const float)'})
call add(f,{'word':'slerp','kind':'f','menu':'vector4(const vector4[],const float[])'})
let c['slerp'] = f
let f = []
call add(f,{'word':'slice','kind':'f','menu':'string(const string,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string(const string,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string(const string,const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix2[](const matrix2[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix2[](const matrix2[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix2[](const matrix2[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix3[](const matrix3[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix3[](const matrix3[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix3[](const matrix3[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix[](const matrix[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix[](const matrix[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix[](const matrix[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'float[](const float[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'float[](const float[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'float[](const float[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'int[](const int[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'int[](const int[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'int[](const int[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector4[](const vector4[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector4[](const vector4[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector4[](const vector4[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string[](const string[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string[](const string[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string[](const string[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector2[](const vector2[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector2[](const vector2[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector2[](const vector2[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector[](const vector[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector[](const vector[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector[](const vector[],const int,const int,const int,const int,const int,const int)'})
let c['slice'] = f
let f = []
call add(f,{'word':'slideframe','kind':'f','menu':'vector(const vector,const vector,const vector,const vector,const vector)'})
let c['slideframe'] = f
let f = []
call add(f,{'word':'smooth','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'smooth','kind':'f','menu':'float(const float,const float,const float,const float)'})
let c['smooth'] = f
let f = []
call add(f,{'word':'smoothrotation','kind':'f','menu':'vector(const int,const vector,const vector)'})
let c['smoothrotation'] = f
let f = []
call add(f,{'word':'snoise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'snoise','kind':'f','menu':'float(const vector,const int,const float,const float)'})
call add(f,{'word':'snoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'snoise','kind':'f','menu':'float(const vector,const int,const int,const int,const int,const float,const float)'})
call add(f,{'word':'snoise','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'snoise','kind':'f','menu':'vector(const vector,const int,const float,const float)'})
call add(f,{'word':'snoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
call add(f,{'word':'snoise','kind':'f','menu':'vector(const vector,const int,const int,const int,const int,const float,const float)'})
let c['snoise'] = f
let f = []
call add(f,{'word':'solid_angle','kind':'f','menu':'float(const bsdf,const int)'})
let c['solid_angle'] = f
let f = []
call add(f,{'word':'solveconstraint','kind':'f','menu':'vector[](const float[],const vector,const float,const matrix,const vector[])'})
let c['solveconstraint'] = f
let f = []
call add(f,{'word':'solvecubic','kind':'f','menu':'int(const float,const float,const float,const float,float,float,float)'})
call add(f,{'word':'solvecubic','kind':'f','menu':'int(const float,const float,const float,const float,vector2,vector2,vector2)'})
let c['solvecubic'] = f
let f = []
call add(f,{'word':'solvecurve','kind':'f','menu':'vector[](const string,const float[],const int,const int,const vector,const int,const matrix)'})
call add(f,{'word':'solvecurve','kind':'f','menu':'vector[](const float[],const int,const int,const vector,const vector[],const vector[])'})
let c['solvecurve'] = f
let f = []
call add(f,{'word':'solvefbik','kind':'f','menu':'matrix[](const matrix[],const int[],const int[],const matrix[],const int)'})
call add(f,{'word':'solvefbik','kind':'f','menu':'matrix[](const matrix[],const int[],const int[],const matrix[],const int,const float,const int)'})
call add(f,{'word':'solvefbik','kind':'f','menu':'matrix[](const matrix[],const int[],const int[],const matrix[],const int,const float,const int,const float[],const int[],const int[])'})
call add(f,{'word':'solvefbik','kind':'f','menu':'matrix[](const matrix[],const int[],const int[],const matrix[],const int,const float,const int,const float[],const int[],const int[],const matrix[],const vector4[],const vector[])'})
let c['solvefbik'] = f
let f = []
call add(f,{'word':'solveik','kind':'f','menu':'vector[](const float[],const vector,const vector,const float,const int,const float,const int,const float,const matrix,const vector[])'})
let c['solveik'] = f
let f = []
call add(f,{'word':'solvepoly','kind':'f','menu':'int(const float[],float[])'})
call add(f,{'word':'solvepoly','kind':'f','menu':'int(const float[],float[],const int)'})
let c['solvepoly'] = f
let f = []
call add(f,{'word':'solvequadratic','kind':'f','menu':'int(const float,const float,const float,float,float)'})
call add(f,{'word':'solvequadratic','kind':'f','menu':'int(const float,const float,const float,vector2,vector2)'})
let c['solvequadratic'] = f
let f = []
call add(f,{'word':'sort','kind':'f','menu':'float[](const float[])'})
call add(f,{'word':'sort','kind':'f','menu':'int[](const int[])'})
call add(f,{'word':'sort','kind':'f','menu':'string[](const string[])'})
let c['sort'] = f
let f = []
call add(f,{'word':'specular','kind':'f','menu':'bsdf(const vector)'})
let c['specular'] = f
let f = []
call add(f,{'word':'specularBRDF','kind':'f','menu':'float(const vector,const vector,const vector,const float)'})
let c['specularBRDF'] = f
let f = []
call add(f,{'word':'spline','kind':'f','menu':'float(const string,const float,const float)'})
call add(f,{'word':'spline','kind':'f','menu':'float(const string,const float,const float[])'})
call add(f,{'word':'spline','kind':'f','menu':'float(const string[],const float,const float[])'})
call add(f,{'word':'spline','kind':'f','menu':'float(const string[],const float,const float[],const float[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector4(const string,const float,const vector4)'})
call add(f,{'word':'spline','kind':'f','menu':'vector4(const string,const float,const vector4[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector4(const string[],const float,const vector4[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector4(const string[],const float,const vector4[],const float[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector(const string,const float,const vector)'})
call add(f,{'word':'spline','kind':'f','menu':'vector(const string,const float,const vector[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector(const string[],const float,const vector[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector(const string[],const float,const vector[],const float[])'})
let c['spline'] = f
let f = []
call add(f,{'word':'split','kind':'f','menu':'string[](const string)'})
call add(f,{'word':'split','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'split','kind':'f','menu':'string[](const string,const string,const int)'})
let c['split'] = f
let f = []
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[],const int,const int,const float,const float[])'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[],const int,const int,const float,const float[])'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[],const int,const int,const float)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[],const int,const int,const float)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[],const int,const int)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[],const int,const int)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[],const int)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[],const int)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[])'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[])'})
let c['split_bsdf'] = f
let f = []
call add(f,{'word':'splitpath','kind':'f','menu':'void(const string,string,string)'})
call add(f,{'word':'splitpath','kind':'f','menu':'string(const string,string)'})
let c['splitpath'] = f
let f = []
call add(f,{'word':'sprintf','kind':'f','menu':'string(const string)'})
let c['sprintf'] = f
let f = []
call add(f,{'word':'sqrt','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sqrt','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sqrt','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sqrt','kind':'f','menu':'vector(const vector)'})
let c['sqrt'] = f
let f = []
call add(f,{'word':'sssapprox','kind':'f','menu':'bsdf(const vector,const float,const float,const float)'})
let c['sssapprox'] = f
let f = []
call add(f,{'word':'startswith','kind':'f','menu':'int(const string,const string)'})
let c['startswith'] = f
let f = []
call add(f,{'word':'strip','kind':'f','menu':'string(const string)'})
call add(f,{'word':'strip','kind':'f','menu':'string(const string,const string)'})
let c['strip'] = f
let f = []
call add(f,{'word':'strlen','kind':'f','menu':'int(const string)'})
let c['strlen'] = f
let f = []
let c['struct'] = f
let f = []
let c['sub'] = f
let f = []
call add(f,{'word':'sum','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sum','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'sum','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'sum','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'sum','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'sum','kind':'f','menu':'int(const int)'})
call add(f,{'word':'sum','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'sum','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'sum','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'sum','kind':'f','menu':'vector(const vector[])'})
let c['sum'] = f
let f = []
call add(f,{'word':'surfacedist','kind':'f','menu':'float(const int,const string,const string,const int,const float,int,const string)'})
call add(f,{'word':'surfacedist','kind':'f','menu':'float(const string,const string,const string,const int,const float,int,const string)'})
let c['surfacedist'] = f
let f = []
let c['swap'] = f
let f = []
call add(f,{'word':'switch','kind':'f','menu':'bsdf(const bsdf,const bsdf)'})
let c['switch'] = f
let f = []
call add(f,{'word':'swizzle','kind':'f','menu':'vector4(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'swizzle','kind':'f','menu':'vector2(const vector2,const int,const int)'})
call add(f,{'word':'swizzle','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
let c['swizzle'] = f
let f = []
call add(f,{'word':'tan','kind':'f','menu':'float(const float)'})
call add(f,{'word':'tan','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'tan','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'tan','kind':'f','menu':'vector(const vector)'})
let c['tan'] = f
let f = []
call add(f,{'word':'tanh','kind':'f','menu':'float(const float)'})
call add(f,{'word':'tanh','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'tanh','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'tanh','kind':'f','menu':'vector(const vector)'})
let c['tanh'] = f
let f = []
call add(f,{'word':'tet_adjacent','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'tet_adjacent','kind':'f','menu':'int(const string,const int,const int)'})
let c['tet_adjacent'] = f
let f = []
call add(f,{'word':'tet_faceindex','kind':'f','menu':'int(const int,const int)'})
let c['tet_faceindex'] = f
let f = []
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export matrix3)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export matrix)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export float)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export int)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export vector4)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export string)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export vector)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export int[])'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export string[])'})
let c['teximport'] = f
let f = []
call add(f,{'word':'texprintf','kind':'f','menu':'string(const float,const float,const string)'})
let c['texprintf'] = f
let f = []
call add(f,{'word':'texture','kind':'f','menu':'vector4(const string)'})
call add(f,{'word':'texture','kind':'f','menu':'vector4(const string,const float,const float)'})
call add(f,{'word':'texture','kind':'f','menu':'vector4(const string,const float,const float,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'texture','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'texture','kind':'f','menu':'vector(const string,const float,const float)'})
call add(f,{'word':'texture','kind':'f','menu':'vector(const string,const float,const float,const float,const float,const float,const float,const float,const float)'})
let c['texture'] = f
let f = []
call add(f,{'word':'texture3d','kind':'f','menu':'matrix3(const string,const string,const vector)'})
call add(f,{'word':'texture3d','kind':'f','menu':'matrix(const string,const string,const vector)'})
call add(f,{'word':'texture3d','kind':'f','menu':'float(const string,const string,const vector)'})
call add(f,{'word':'texture3d','kind':'f','menu':'vector4(const string,const string,const vector)'})
call add(f,{'word':'texture3d','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['texture3d'] = f
let f = []
call add(f,{'word':'texture3dBox','kind':'f','menu':'void(const string,const string,vector,vector)'})
call add(f,{'word':'texture3dBox','kind':'f','menu':'vector(const string,const string,vector)'})
let c['texture3dBox'] = f
let f = []
call add(f,{'word':'titlecase','kind':'f','menu':'string(const string)'})
let c['titlecase'] = f
let f = []
call add(f,{'word':'toNDC','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'toNDC','kind':'f','menu':'vector(const vector)'})
let c['toNDC'] = f
let f = []
call add(f,{'word':'tolower','kind':'f','menu':'string(const string)'})
let c['tolower'] = f
let f = []
call add(f,{'word':'toupper','kind':'f','menu':'string(const string)'})
let c['toupper'] = f
let f = []
call add(f,{'word':'trace','kind':'f','menu':'int(const vector,const vector,const float)'})
call add(f,{'word':'trace','kind':'f','menu':'void(vector,vector,float,const vector,const vector,const float,const float)'})
call add(f,{'word':'trace','kind':'f','menu':'vector(vector,float,const vector,const vector,const float,const float)'})
let c['trace'] = f
let f = []
call add(f,{'word':'translate','kind':'f','menu':'void(export matrix,const vector4)'})
call add(f,{'word':'translate','kind':'f','menu':'void(export matrix,const vector)'})
let c['translate'] = f
let f = []
call add(f,{'word':'translucent','kind':'f','menu':'bsdf(const vector,const vector)'})
let c['translucent'] = f
let f = []
call add(f,{'word':'transpose','kind':'f','menu':'void(export matrix2)'})
call add(f,{'word':'transpose','kind':'f','menu':'matrix2(const matrix2)'})
call add(f,{'word':'transpose','kind':'f','menu':'void(export matrix3)'})
call add(f,{'word':'transpose','kind':'f','menu':'matrix3(const matrix3)'})
call add(f,{'word':'transpose','kind':'f','menu':'void(export matrix)'})
call add(f,{'word':'transpose','kind':'f','menu':'matrix(const matrix)'})
let c['transpose'] = f
let f = []
call add(f,{'word':'trunc','kind':'f','menu':'float(const float)'})
call add(f,{'word':'trunc','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'trunc','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'trunc','kind':'f','menu':'vector(const vector)'})
let c['trunc'] = f
let f = []
call add(f,{'word':'tw_nspace','kind':'f','menu':'vector(const vector)'})
let c['tw_nspace'] = f
let f = []
call add(f,{'word':'tw_space','kind':'f','menu':'matrix()'})
call add(f,{'word':'tw_space','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'tw_space','kind':'f','menu':'vector(const vector)'})
let c['tw_space'] = f
let f = []
call add(f,{'word':'tw_vspace','kind':'f','menu':'vector(const vector)'})
let c['tw_vspace'] = f
let f = []
call add(f,{'word':'uniqueval','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'uniqueval','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'uniqueval','kind':'f','menu':'string(const int,const string,const string,const int)'})
call add(f,{'word':'uniqueval','kind':'f','menu':'string(const string,const string,const string,const int)'})
let c['uniqueval'] = f
let f = []
call add(f,{'word':'uniquevals','kind':'f','menu':'int[](const int,const string,const string)'})
call add(f,{'word':'uniquevals','kind':'f','menu':'int[](const string,const string,const string)'})
call add(f,{'word':'uniquevals','kind':'f','menu':'string[](const int,const string,const string)'})
call add(f,{'word':'uniquevals','kind':'f','menu':'string[](const string,const string,const string)'})
let c['uniquevals'] = f
let f = []
call add(f,{'word':'unpack_intfromsafefloat','kind':'f','menu':'int(const float)'})
let c['unpack_intfromsafefloat'] = f
let f = []
call add(f,{'word':'unserialize','kind':'f','menu':'matrix2[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'matrix3[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'matrix[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'vector4[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'vector2[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'vector[](const float[])'})
let c['unserialize'] = f
let f = []
call add(f,{'word':'upush','kind':'f','menu':'void(export matrix2[],const matrix2)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export matrix3[],const matrix3)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export matrix[],const matrix)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export bsdf[],const bsdf)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export light[],const light)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export material[],const material)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export float[],const float)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export int[],const int)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export vector4[],const vector4)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export string[],const string)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export vector2[],const vector2)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export vector[],const vector)'})
let c['upush'] = f
let f = []
let c['urandom'] = f
let f = []
call add(f,{'word':'usd_addtransform','kind':'f','menu':'int(const int,const string,const string,const matrix)'})
let c['usd_addtransform'] = f
let f = []
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector[](const string,const string,const string)'})
let c['usd_attrib'] = f
let f = []
call add(f,{'word':'usd_attriblen','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_attriblen','kind':'f','menu':'int(const string,const string,const string)'})
let c['usd_attriblen'] = f
let f = []
call add(f,{'word':'usd_attribnames','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'usd_attribnames','kind':'f','menu':'string[](const string,const string)'})
let c['usd_attribnames'] = f
let f = []
call add(f,{'word':'usd_attribsize','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_attribsize','kind':'f','menu':'int(const string,const string,const string)'})
let c['usd_attribsize'] = f
let f = []
call add(f,{'word':'usd_attribtypename','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'usd_attribtypename','kind':'f','menu':'string(const string,const string,const string)'})
let c['usd_attribtypename'] = f
let f = []
call add(f,{'word':'usd_cleartransformorder','kind':'f','menu':'int(const int,const string)'})
let c['usd_cleartransformorder'] = f
let f = []
call add(f,{'word':'usd_drawmode','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_drawmode','kind':'f','menu':'string(const string,const string)'})
let c['usd_drawmode'] = f
let f = []
call add(f,{'word':'usd_isactive','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'usd_isactive','kind':'f','menu':'int(const string,const string)'})
let c['usd_isactive'] = f
let f = []
call add(f,{'word':'usd_isarray','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_isarray','kind':'f','menu':'int(const string,const string,const string)'})
let c['usd_isarray'] = f
let f = []
call add(f,{'word':'usd_isattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_isattrib','kind':'f','menu':'int(const string,const string,const string)'})
let c['usd_isattrib'] = f
let f = []
call add(f,{'word':'usd_isprim','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'usd_isprim','kind':'f','menu':'int(const string,const string)'})
let c['usd_isprim'] = f
let f = []
call add(f,{'word':'usd_isstage','kind':'f','menu':'int(const int)'})
call add(f,{'word':'usd_isstage','kind':'f','menu':'int(const string)'})
let c['usd_isstage'] = f
let f = []
call add(f,{'word':'usd_istransformreset','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'usd_istransformreset','kind':'f','menu':'int(const string,const string)'})
let c['usd_istransformreset'] = f
let f = []
call add(f,{'word':'usd_isvisible','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'usd_isvisible','kind':'f','menu':'int(const string,const string)'})
let c['usd_isvisible'] = f
let f = []
call add(f,{'word':'usd_kind','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_kind','kind':'f','menu':'string(const string,const string)'})
let c['usd_kind'] = f
let f = []
call add(f,{'word':'usd_localtransform','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'usd_localtransform','kind':'f','menu':'matrix(const string,const string)'})
let c['usd_localtransform'] = f
let f = []
call add(f,{'word':'usd_name','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_name','kind':'f','menu':'string(const string,const string)'})
let c['usd_name'] = f
let f = []
call add(f,{'word':'usd_parentpath','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_parentpath','kind':'f','menu':'string(const string,const string)'})
let c['usd_parentpath'] = f
let f = []
call add(f,{'word':'usd_purpose','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_purpose','kind':'f','menu':'string(const string,const string)'})
let c['usd_purpose'] = f
let f = []
call add(f,{'word':'usd_setactive','kind':'f','menu':'int(const int,const string,const int)'})
let c['usd_setactive'] = f
let f = []
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix2)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix3)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const float)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector4)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector2)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix2[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix3[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const float[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const int[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector4[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const string[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector2[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector[])'})
let c['usd_setattrib'] = f
let f = []
call add(f,{'word':'usd_setdrawmode','kind':'f','menu':'int(const int,const string,const string)'})
let c['usd_setdrawmode'] = f
let f = []
call add(f,{'word':'usd_setkind','kind':'f','menu':'int(const int,const string,const string)'})
let c['usd_setkind'] = f
let f = []
call add(f,{'word':'usd_setpurpose','kind':'f','menu':'int(const int,const string,const string)'})
let c['usd_setpurpose'] = f
let f = []
call add(f,{'word':'usd_setvariantselection','kind':'f','menu':'int(const int,const string,const string,const string)'})
let c['usd_setvariantselection'] = f
let f = []
call add(f,{'word':'usd_setvisible','kind':'f','menu':'int(const int,const string,const int)'})
let c['usd_setvisible'] = f
let f = []
call add(f,{'word':'usd_transformorder','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'usd_transformorder','kind':'f','menu':'string[](const string,const string)'})
let c['usd_transformorder'] = f
let f = []
call add(f,{'word':'usd_typename','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_typename','kind':'f','menu':'string(const string,const string)'})
let c['usd_typename'] = f
let f = []
call add(f,{'word':'usd_variants','kind':'f','menu':'string[](const int,const string,const string)'})
call add(f,{'word':'usd_variants','kind':'f','menu':'string[](const string,const string,const string)'})
let c['usd_variants'] = f
let f = []
call add(f,{'word':'usd_variantselection','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'usd_variantselection','kind':'f','menu':'string(const string,const string,const string)'})
let c['usd_variantselection'] = f
let f = []
call add(f,{'word':'usd_variantsets','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'usd_variantsets','kind':'f','menu':'string[](const string,const string)'})
let c['usd_variantsets'] = f
let f = []
call add(f,{'word':'usd_worldtransform','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'usd_worldtransform','kind':'f','menu':'matrix(const string,const string)'})
let c['usd_worldtransform'] = f
let f = []
call add(f,{'word':'uvdist','kind':'f','menu':'float(const int,const string,const string,const vector,int,vector)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const int,const string,const string,const vector,int,vector,const float)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const int,const string,const vector,int,vector)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const int,const string,const vector,int,vector,const float)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const string,const string,const string,const vector,int,vector)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const string,const string,const string,const vector,int,vector,const float)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const string,const string,const vector,int,vector)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const string,const string,const vector,int,vector,const float)'})
let c['uvdist'] = f
let f = []
call add(f,{'word':'uvintersect','kind':'f','menu':'int(const int,const string,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'uvintersect','kind':'f','menu':'int(const int,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'uvintersect','kind':'f','menu':'int(const string,const string,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'uvintersect','kind':'f','menu':'int(const string,const string,const vector,const vector,vector,vector)'})
let c['uvintersect'] = f
let f = []
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector[](const string,const string,const string,const vector)'})
let c['uvsample'] = f
let f = []
call add(f,{'word':'uvunwrap','kind':'f','menu':'int(const string,const float,const float,const float,vector,vector)'})
call add(f,{'word':'uvunwrap','kind':'f','menu':'int(const string,const float,const float,const float,vector,vector,vector,vector)'})
let c['uvunwrap'] = f
let f = []
call add(f,{'word':'variance','kind':'f','menu':'float(const float,float,int)'})
let c['variance'] = f
let f = []
call add(f,{'word':'vertex','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector[](const string,const string,const int,const int)'})
let c['vertex'] = f
let f = []
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix2(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix2(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix3(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix3(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'float(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'float(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'int(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'int(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector4(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector4(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'string(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'string(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector2(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector2(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix2[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix2[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix3[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix3[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'float[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'float[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'int[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'int[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector4[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector4[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'string[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'string[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector2[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector2[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector[](const string,const string,const int,int)'})
let c['vertexattrib'] = f
let f = []
call add(f,{'word':'vertexattribsize','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'vertexattribsize','kind':'f','menu':'int(const string,const string)'})
let c['vertexattribsize'] = f
let f = []
call add(f,{'word':'vertexattribtype','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'vertexattribtype','kind':'f','menu':'int(const string,const string)'})
let c['vertexattribtype'] = f
let f = []
call add(f,{'word':'vertexattribtypeinfo','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'vertexattribtypeinfo','kind':'f','menu':'string(const string,const string)'})
let c['vertexattribtypeinfo'] = f
let f = []
call add(f,{'word':'vertexhedge','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexhedge','kind':'f','menu':'int(const string,const int)'})
let c['vertexhedge'] = f
let f = []
call add(f,{'word':'vertexindex','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'vertexindex','kind':'f','menu':'int(const string,const int,const int)'})
let c['vertexindex'] = f
let f = []
call add(f,{'word':'vertexnext','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexnext','kind':'f','menu':'int(const string,const int)'})
let c['vertexnext'] = f
let f = []
call add(f,{'word':'vertexpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexpoint','kind':'f','menu':'int(const string,const int)'})
let c['vertexpoint'] = f
let f = []
call add(f,{'word':'vertexprev','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexprev','kind':'f','menu':'int(const string,const int)'})
let c['vertexprev'] = f
let f = []
call add(f,{'word':'vertexprim','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexprim','kind':'f','menu':'int(const string,const int)'})
let c['vertexprim'] = f
let f = []
call add(f,{'word':'vertexprimindex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexprimindex','kind':'f','menu':'int(const string,const int)'})
let c['vertexprimindex'] = f
let f = []
call add(f,{'word':'vnoise','kind':'f','menu':'void(const float,const float,const float,const float,int,float,float,float,float,float,float)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const float,const float,const float,const float,float,float,float,float,float,float)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const float,const float,const float,const float,int,float,float,float,float,float,float,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const float,const float,const float,const float,float,float,float,float,float,float,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const float,const float,float,float,float,float)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const float,const float,float,float,float,float,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector4,const vector4,int,float,float,vector4,vector4)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector4,const vector4,float,float,vector4,vector4)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector4,const vector4,int,float,float,vector4,vector4,const int,const int,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector4,const vector4,float,float,vector4,vector4,const int,const int,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector4,const vector4,int,float,float,vector4,vector4,const vector4)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector4,const vector4,float,float,vector4,vector4,const vector4)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector,const vector,int,float,float,vector,vector)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector,const vector,float,float,vector,vector)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector,const vector,int,float,float,vector,vector,const int,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector,const vector,float,float,vector,vector,const int,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector,const vector,int,float,float,vector,vector,const vector)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector,const vector,float,float,vector,vector,const vector)'})
let c['vnoise'] = f
let f = []
call add(f,{'word':'volume','kind':'f','menu':'float(const vector)'})
let c['volume'] = f
let f = []
call add(f,{'word':'volumegradient','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumegradient','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumegradient','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumegradient','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumegradient'] = f
let f = []
call add(f,{'word':'volumeindex','kind':'f','menu':'float(const int,const int,const vector)'})
call add(f,{'word':'volumeindex','kind':'f','menu':'float(const int,const string,const vector)'})
call add(f,{'word':'volumeindex','kind':'f','menu':'float(const string,const int,const vector)'})
call add(f,{'word':'volumeindex','kind':'f','menu':'float(const string,const string,const vector)'})
let c['volumeindex'] = f
let f = []
call add(f,{'word':'volumeindexactive','kind':'f','menu':'int(const int,const int,const vector)'})
call add(f,{'word':'volumeindexactive','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'volumeindexactive','kind':'f','menu':'int(const string,const int,const vector)'})
call add(f,{'word':'volumeindexactive','kind':'f','menu':'int(const string,const string,const vector)'})
let c['volumeindexactive'] = f
let f = []
call add(f,{'word':'volumeindexorigin','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'volumeindexorigin','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'volumeindexorigin','kind':'f','menu':'vector(const string,const int)'})
call add(f,{'word':'volumeindexorigin','kind':'f','menu':'vector(const string,const string)'})
let c['volumeindexorigin'] = f
let f = []
call add(f,{'word':'volumeindextopos','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumeindextopos','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumeindextopos','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumeindextopos','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumeindextopos'] = f
let f = []
call add(f,{'word':'volumeindexv','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumeindexv','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumeindexv','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumeindexv','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumeindexv'] = f
let f = []
call add(f,{'word':'volumepostoindex','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumepostoindex','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumepostoindex','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumepostoindex','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumepostoindex'] = f
let f = []
call add(f,{'word':'volumeres','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'volumeres','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'volumeres','kind':'f','menu':'vector(const string,const int)'})
call add(f,{'word':'volumeres','kind':'f','menu':'vector(const string,const string)'})
let c['volumeres'] = f
let f = []
call add(f,{'word':'volumesample','kind':'f','menu':'float(const int,const int,const vector)'})
call add(f,{'word':'volumesample','kind':'f','menu':'float(const int,const string,const vector)'})
call add(f,{'word':'volumesample','kind':'f','menu':'float(const string,const int,const vector)'})
call add(f,{'word':'volumesample','kind':'f','menu':'float(const string,const string,const vector)'})
let c['volumesample'] = f
let f = []
call add(f,{'word':'volumesamplev','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumesamplev','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumesamplev','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumesamplev','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumesamplev'] = f
let f = []
call add(f,{'word':'volumevoxeldiameter','kind':'f','menu':'float(const int,const int)'})
call add(f,{'word':'volumevoxeldiameter','kind':'f','menu':'float(const int,const string)'})
call add(f,{'word':'volumevoxeldiameter','kind':'f','menu':'float(const string,const int)'})
call add(f,{'word':'volumevoxeldiameter','kind':'f','menu':'float(const string,const string)'})
let c['volumevoxeldiameter'] = f
let f = []
call add(f,{'word':'vtransform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'vtransform','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'vtransform','kind':'f','menu':'vector(const vector,const matrix)'})
let c['vtransform'] = f
let f = []
call add(f,{'word':'warning','kind':'f','menu':'void(const string)'})
let c['warning'] = f
let f = []
let c['while'] = f
let f = []
call add(f,{'word':'wireblinn','kind':'f','menu':'bsdf(const vector,const float)'})
let c['wireblinn'] = f
let f = []
call add(f,{'word':'wirediffuse','kind':'f','menu':'bsdf(const vector)'})
let c['wirediffuse'] = f
let f = []
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,const float,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,const float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,const float,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,const float,float,float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,const float,int,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,const float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,int,float,float,float,float,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,float,float,float,float,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,int,float,float,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,float,float,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector4,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector4,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector4,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector4,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector4,int,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector4,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector2,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector2,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector2,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector2,float,float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector2,int,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector2,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector,int,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector,int,float,float,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector,float,float,const int,const int,const int)'})
let c['wnoise'] = f
let f = []
call add(f,{'word':'wo_nspace','kind':'f','menu':'vector(const vector)'})
let c['wo_nspace'] = f
let f = []
call add(f,{'word':'wo_space','kind':'f','menu':'matrix()'})
call add(f,{'word':'wo_space','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'wo_space','kind':'f','menu':'vector(const vector)'})
let c['wo_space'] = f
let f = []
call add(f,{'word':'wo_vspace','kind':'f','menu':'vector(const vector)'})
let c['wo_vspace'] = f
let f = []
call add(f,{'word':'writepixel','kind':'f','menu':'void(const string,const float,const float,const vector)'})
let c['writepixel'] = f
let f = []
call add(f,{'word':'wt_nspace','kind':'f','menu':'vector(const vector)'})
let c['wt_nspace'] = f
let f = []
call add(f,{'word':'wt_space','kind':'f','menu':'matrix()'})
call add(f,{'word':'wt_space','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'wt_space','kind':'f','menu':'vector(const vector)'})
let c['wt_space'] = f
let f = []
call add(f,{'word':'wt_vspace','kind':'f','menu':'vector(const vector)'})
let c['wt_vspace'] = f
let f = []
call add(f,{'word':'xnoise','kind':'f','menu':'float(const float)'})
call add(f,{'word':'xnoise','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'xnoise','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'xnoise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'xnoise','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'xnoise','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'xnoise','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'xnoise','kind':'f','menu':'vector(const vector)'})
let c['xnoise'] = f
let f = []
call add(f,{'word':'xnoised','kind':'f','menu':'void(const float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'float(const float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const float,const float,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'float(const float,const float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const float,const float,vector,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'vector(const float,const float,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const float,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'vector(const float,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const vector4,float,float,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'float(const vector4,float,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const vector4,vector,vector,vector,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'vector(const vector4,vector,vector,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const vector,float,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'float(const vector,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const vector,vector,vector,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'vector(const vector,vector,vector,vector)'})
let c['xnoised'] = f
let f = []
let c['xor'] = f
let f = []
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const string,const vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const string,const vector,int,vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const string,const vector,int,vector,const float)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const vector,int,vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const vector,int,vector,const float)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const string,const vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const string,const vector,int,vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const string,const vector,int,vector,const float)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const vector,int,vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const vector,int,vector,const float)'})
let c['xyzdist'] = f
let f = []
call add(f,{'word':'xyztorgb','kind':'f','menu':'vector(const vector)'})
let c['xyztorgb'] = f
let contexts['shadow'] = c
" CONTEXT: fog 
let c = {}
let c['Cf'] = [{'word':'Cf','kind':'v','menu':'vector'}]
let c['Of'] = [{'word':'Of','kind':'v','menu':'vector'}]
let c['Af'] = [{'word':'Af','kind':'v','menu':'float'}]
let c['P'] = [{'word':'P','kind':'v','menu':'vector'}]
let c['Pz'] = [{'word':'Pz','kind':'v','menu':'float'}]
let c['I'] = [{'word':'I','kind':'v','menu':'vector'}]
let c['dPds'] = [{'word':'dPds','kind':'v','menu':'vector'}]
let c['dPdt'] = [{'word':'dPdt','kind':'v','menu':'vector'}]
let c['N'] = [{'word':'N','kind':'v','menu':'vector'}]
let c['Ng'] = [{'word':'Ng','kind':'v','menu':'vector'}]
let c['Cl'] = [{'word':'Cl','kind':'v','menu':'vector'}]
let c['L'] = [{'word':'L','kind':'v','menu':'vector'}]
let c['Eye'] = [{'word':'Eye','kind':'v','menu':'vector'}]
let c['s'] = [{'word':'s','kind':'v','menu':'float'}]
let c['t'] = [{'word':'t','kind':'v','menu':'float'}]
let c['Time'] = [{'word':'Time','kind':'v','menu':'float'}]
let c['dPdz'] = [{'word':'dPdz','kind':'v','menu':'float'}]
let c['F'] = [{'word':'F','kind':'v','menu':'bsdf'}]
let c['SID'] = [{'word':'SID','kind':'v','menu':'int'}]
let f = []
call add(f,{'word':'Du','kind':'f','menu':'float(const float)'})
call add(f,{'word':'Du','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'Du','kind':'f','menu':'vector(const vector)'})
let c['Du'] = f
let f = []
call add(f,{'word':'Dv','kind':'f','menu':'float(const float)'})
call add(f,{'word':'Dv','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'Dv','kind':'f','menu':'vector(const vector)'})
let c['Dv'] = f
let f = []
call add(f,{'word':'Dw','kind':'f','menu':'float(const float)'})
call add(f,{'word':'Dw','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'Dw','kind':'f','menu':'vector(const vector)'})
let c['Dw'] = f
let f = []
let c['__jumplight'] = f
let f = []
let c['__nextgather'] = f
let f = []
let c['__nextlight'] = f
let f = []
let c['__ptexture_shift_coord'] = f
let f = []
let c['__resetlights'] = f
let f = []
let c['__testactivelight'] = f
let f = []
let c['_export'] = f
let f = []
call add(f,{'word':'abs','kind':'f','menu':'float(const float)'})
call add(f,{'word':'abs','kind':'f','menu':'int(const int)'})
call add(f,{'word':'abs','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'abs','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'abs','kind':'f','menu':'vector(const vector)'})
let c['abs'] = f
let f = []
call add(f,{'word':'acos','kind':'f','menu':'float(const float)'})
call add(f,{'word':'acos','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'acos','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'acos','kind':'f','menu':'vector(const vector)'})
let c['acos'] = f
let f = []
let c['add'] = f
let f = []
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix2)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix3)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const float)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector4)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector2)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix2[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix3[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const float[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const int[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector4[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const string[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector2[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector[])'})
let c['addattrib'] = f
let f = []
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
let c['adddetailattrib'] = f
let f = []
call add(f,{'word':'addpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'addpoint','kind':'f','menu':'int(const int,const vector)'})
let c['addpoint'] = f
let f = []
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
let c['addpointattrib'] = f
let f = []
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,const int)'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,const int,const int)'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int,const int,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int[],int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int[],int[])'})
let c['addprim'] = f
let f = []
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
let c['addprimattrib'] = f
let f = []
call add(f,{'word':'addvariablename','kind':'f','menu':'int(const int,const string,const string)'})
let c['addvariablename'] = f
let f = []
call add(f,{'word':'addvertex','kind':'f','menu':'int(const int,const int,const int)'})
let c['addvertex'] = f
let f = []
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
let c['addvertexattrib'] = f
let f = []
call add(f,{'word':'addvisualizer','kind':'f','menu':'int(const int,const string)'})
let c['addvisualizer'] = f
let f = []
call add(f,{'word':'agentaddclip','kind':'f','menu':'int(const int,const int,const string,const string,const int)'})
let c['agentaddclip'] = f
let f = []
call add(f,{'word':'agentclipcatalog','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agentclipcatalog','kind':'f','menu':'string[](const string,const int)'})
let c['agentclipcatalog'] = f
let f = []
call add(f,{'word':'agentclipchannel','kind':'f','menu':'int(const int,const int,const string,const string)'})
call add(f,{'word':'agentclipchannel','kind':'f','menu':'int(const string,const int,const string,const string)'})
let c['agentclipchannel'] = f
let f = []
call add(f,{'word':'agentclipchannelnames','kind':'f','menu':'string[](const int,const int,const string)'})
call add(f,{'word':'agentclipchannelnames','kind':'f','menu':'string[](const string,const int,const string)'})
let c['agentclipchannelnames'] = f
let f = []
call add(f,{'word':'agentcliplength','kind':'f','menu':'float(const int,const int,const string)'})
call add(f,{'word':'agentcliplength','kind':'f','menu':'float(const string,const int,const string)'})
let c['agentcliplength'] = f
let f = []
call add(f,{'word':'agentclipnames','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agentclipnames','kind':'f','menu':'string[](const string,const int)'})
let c['agentclipnames'] = f
let f = []
call add(f,{'word':'agentclipsample','kind':'f','menu':'float(const int,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsample','kind':'f','menu':'float(const int,const int,const string,const float,const string)'})
call add(f,{'word':'agentclipsample','kind':'f','menu':'float(const string,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsample','kind':'f','menu':'float(const string,const int,const string,const float,const string)'})
let c['agentclipsample'] = f
let f = []
call add(f,{'word':'agentclipsamplelocal','kind':'f','menu':'matrix(const int,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsamplelocal','kind':'f','menu':'matrix(const string,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsamplelocal','kind':'f','menu':'matrix[](const int,const int,const string,const float)'})
call add(f,{'word':'agentclipsamplelocal','kind':'f','menu':'matrix[](const string,const int,const string,const float)'})
let c['agentclipsamplelocal'] = f
let f = []
call add(f,{'word':'agentclipsamplerate','kind':'f','menu':'float(const int,const int,const string)'})
call add(f,{'word':'agentclipsamplerate','kind':'f','menu':'float(const string,const int,const string)'})
let c['agentclipsamplerate'] = f
let f = []
call add(f,{'word':'agentclipsampleworld','kind':'f','menu':'matrix(const int,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsampleworld','kind':'f','menu':'matrix(const string,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsampleworld','kind':'f','menu':'matrix[](const int,const int,const string,const float)'})
call add(f,{'word':'agentclipsampleworld','kind':'f','menu':'matrix[](const string,const int,const string,const float)'})
let c['agentclipsampleworld'] = f
let f = []
call add(f,{'word':'agentcliptimes','kind':'f','menu':'float[](const int,const int)'})
call add(f,{'word':'agentcliptimes','kind':'f','menu':'float[](const string,const int)'})
let c['agentcliptimes'] = f
let f = []
call add(f,{'word':'agentcliptransformgroups','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agentcliptransformgroups','kind':'f','menu':'string[](const string,const int)'})
let c['agentcliptransformgroups'] = f
let f = []
call add(f,{'word':'agentclipweights','kind':'f','menu':'float[](const int,const int)'})
call add(f,{'word':'agentclipweights','kind':'f','menu':'float[](const string,const int)'})
let c['agentclipweights'] = f
let f = []
call add(f,{'word':'agentcollisionlayer','kind':'f','menu':'string(const int,const int)'})
call add(f,{'word':'agentcollisionlayer','kind':'f','menu':'string(const string,const int)'})
let c['agentcollisionlayer'] = f
let f = []
call add(f,{'word':'agentcurrentlayer','kind':'f','menu':'string(const int,const int)'})
call add(f,{'word':'agentcurrentlayer','kind':'f','menu':'string(const string,const int)'})
let c['agentcurrentlayer'] = f
let f = []
call add(f,{'word':'agentfindtransformgroup','kind':'f','menu':'int(const int,const int,const string)'})
call add(f,{'word':'agentfindtransformgroup','kind':'f','menu':'int(const string,const int,const string)'})
let c['agentfindtransformgroup'] = f
let f = []
call add(f,{'word':'agentlayerbindings','kind':'f','menu':'int[](const int,const int,const string,const string)'})
call add(f,{'word':'agentlayerbindings','kind':'f','menu':'int[](const string,const int,const string,const string)'})
let c['agentlayerbindings'] = f
let f = []
call add(f,{'word':'agentlayers','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agentlayers','kind':'f','menu':'string[](const string,const int)'})
let c['agentlayers'] = f
let f = []
call add(f,{'word':'agentlayershapes','kind':'f','menu':'string[](const int,const int,const string,const int)'})
call add(f,{'word':'agentlayershapes','kind':'f','menu':'string[](const int,const int,const string,const string)'})
call add(f,{'word':'agentlayershapes','kind':'f','menu':'string[](const string,const int,const string,const int)'})
call add(f,{'word':'agentlayershapes','kind':'f','menu':'string[](const string,const int,const string,const string)'})
let c['agentlayershapes'] = f
let f = []
call add(f,{'word':'agentlocaltransform','kind':'f','menu':'matrix(const int,const int,const int)'})
call add(f,{'word':'agentlocaltransform','kind':'f','menu':'matrix(const string,const int,const int)'})
let c['agentlocaltransform'] = f
let f = []
call add(f,{'word':'agentlocaltransforms','kind':'f','menu':'matrix[](const int,const int)'})
call add(f,{'word':'agentlocaltransforms','kind':'f','menu':'matrix[](const string,const int)'})
let c['agentlocaltransforms'] = f
let f = []
call add(f,{'word':'agentrigchildren','kind':'f','menu':'int[](const int,const int,const int)'})
call add(f,{'word':'agentrigchildren','kind':'f','menu':'int[](const string,const int,const int)'})
let c['agentrigchildren'] = f
let f = []
call add(f,{'word':'agentrigfind','kind':'f','menu':'int(const int,const int,const string)'})
call add(f,{'word':'agentrigfind','kind':'f','menu':'int(const string,const int,const string)'})
let c['agentrigfind'] = f
let f = []
call add(f,{'word':'agentrigparent','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'agentrigparent','kind':'f','menu':'int(const string,const int,const int)'})
let c['agentrigparent'] = f
let f = []
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const int,const int,const int,const int[],const matrix[],const int,const int)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const int,const int,const int,const int[],const matrix[],const int,const int,const float,const int)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const int,const int,const int,const int[],const matrix[],const int,const int,const float,const int,const float[],const int[],const int[])'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const int,const int,const int,const int[],const matrix[],const int,const int,const float,const int,const float[],const int[],const int[],const string,const string,const string)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const string,const int,const int,const int[],const matrix[],const int,const int)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const string,const int,const int,const int[],const matrix[],const int,const int,const float,const int)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const string,const int,const int,const int[],const matrix[],const int,const int,const float,const int,const float[],const int[],const int[])'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const string,const int,const int,const int[],const matrix[],const int,const int,const float,const int,const float[],const int[],const int[],const string,const string,const string)'})
let c['agentsolvefbik'] = f
let f = []
call add(f,{'word':'agenttransformcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'agenttransformcount','kind':'f','menu':'int(const string,const int)'})
let c['agenttransformcount'] = f
let f = []
call add(f,{'word':'agenttransformgroupmember','kind':'f','menu':'int(const int,const int,const int,const int)'})
call add(f,{'word':'agenttransformgroupmember','kind':'f','menu':'int(const int,const int,const string,const int)'})
call add(f,{'word':'agenttransformgroupmember','kind':'f','menu':'int(const string,const int,const int,const int)'})
call add(f,{'word':'agenttransformgroupmember','kind':'f','menu':'int(const string,const int,const string,const int)'})
let c['agenttransformgroupmember'] = f
let f = []
call add(f,{'word':'agenttransformgroups','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agenttransformgroups','kind':'f','menu':'string[](const string,const int)'})
let c['agenttransformgroups'] = f
let f = []
call add(f,{'word':'agenttransformgroupweight','kind':'f','menu':'float(const int,const int,const int,const int)'})
call add(f,{'word':'agenttransformgroupweight','kind':'f','menu':'float(const string,const int,const int,const int)'})
let c['agenttransformgroupweight'] = f
let f = []
call add(f,{'word':'agenttransformnames','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agenttransformnames','kind':'f','menu':'string[](const string,const int)'})
let c['agenttransformnames'] = f
let f = []
call add(f,{'word':'agenttransformtolocal','kind':'f','menu':'int(const int,const int,export matrix[])'})
call add(f,{'word':'agenttransformtolocal','kind':'f','menu':'int(const string,const int,export matrix[])'})
let c['agenttransformtolocal'] = f
let f = []
call add(f,{'word':'agenttransformtoworld','kind':'f','menu':'int(const int,const int,export matrix[])'})
call add(f,{'word':'agenttransformtoworld','kind':'f','menu':'int(const string,const int,export matrix[])'})
let c['agenttransformtoworld'] = f
let f = []
call add(f,{'word':'agentworldtransform','kind':'f','menu':'matrix(const int,const int,const int)'})
call add(f,{'word':'agentworldtransform','kind':'f','menu':'matrix(const string,const int,const int)'})
let c['agentworldtransform'] = f
let f = []
call add(f,{'word':'agentworldtransforms','kind':'f','menu':'matrix[](const int,const int)'})
call add(f,{'word':'agentworldtransforms','kind':'f','menu':'matrix[](const string,const int)'})
let c['agentworldtransforms'] = f
let f = []
call add(f,{'word':'albedo','kind':'f','menu':'vector(const bsdf,const int)'})
call add(f,{'word':'albedo','kind':'f','menu':'vector(const bsdf,const vector,const int)'})
call add(f,{'word':'albedo','kind':'f','menu':'vector(const bsdf,const vector)'})
call add(f,{'word':'albedo','kind':'f','menu':'vector(const bsdf)'})
let c['albedo'] = f
let f = []
call add(f,{'word':'ambient','kind':'f','menu':'vector()'})
let c['ambient'] = f
let f = []
let c['and'] = f
let f = []
call add(f,{'word':'anoise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'anoise','kind':'f','menu':'float(const vector,const int,const float,const float)'})
call add(f,{'word':'anoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'anoise','kind':'f','menu':'float(const vector,const int,const int,const int,const int,const float,const float)'})
call add(f,{'word':'anoise','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'anoise','kind':'f','menu':'vector(const vector,const int,const float,const float)'})
call add(f,{'word':'anoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
call add(f,{'word':'anoise','kind':'f','menu':'vector(const vector,const int,const int,const int,const int,const float,const float)'})
let c['anoise'] = f
let f = []
call add(f,{'word':'append','kind':'f','menu':'void(export string,const string)'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix2[],const matrix2)'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix2[],const matrix2[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix3[],const matrix3)'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix3[],const matrix3[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix[],const matrix)'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix[],const matrix[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export float[],const float)'})
call add(f,{'word':'append','kind':'f','menu':'void(export float[],const float[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export int[],const int)'})
call add(f,{'word':'append','kind':'f','menu':'void(export int[],const int[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector4[],const vector4)'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector4[],const vector4[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export string[],const string)'})
call add(f,{'word':'append','kind':'f','menu':'void(export string[],const string[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector2[],const vector2)'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector2[],const vector2[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector[],const vector)'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector[],const vector[])'})
let c['append'] = f
let f = []
call add(f,{'word':'area','kind':'f','menu':'float(const vector)'})
let c['area'] = f
let f = []
call add(f,{'word':'argsort','kind':'f','menu':'int[](const float[])'})
call add(f,{'word':'argsort','kind':'f','menu':'int[](const int[])'})
call add(f,{'word':'argsort','kind':'f','menu':'int[](const string[])'})
let c['argsort'] = f
let f = []
call add(f,{'word':'array','kind':'f','menu':'matrix2[]()'})
call add(f,{'word':'array','kind':'f','menu':'matrix3[]()'})
call add(f,{'word':'array','kind':'f','menu':'matrix[]()'})
call add(f,{'word':'array','kind':'f','menu':'float[]()'})
call add(f,{'word':'array','kind':'f','menu':'int[]()'})
call add(f,{'word':'array','kind':'f','menu':'vector4[]()'})
call add(f,{'word':'array','kind':'f','menu':'string[]()'})
call add(f,{'word':'array','kind':'f','menu':'vector2[]()'})
call add(f,{'word':'array','kind':'f','menu':'vector[]()'})
let c['array'] = f
let f = []
call add(f,{'word':'arraylength','kind':'f','menu':'int(const matrix3)'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const matrix)'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const vector4)'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const vector)'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const matrix3[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const matrix[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const bsdf[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const light[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const material[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const float[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const vector4[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const string[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const vector[])'})
let c['arraylength'] = f
let f = []
call add(f,{'word':'ashikhmin','kind':'f','menu':'bsdf(const float,const float,const vector,const vector)'})
call add(f,{'word':'ashikhmin','kind':'f','menu':'bsdf(const vector,const float,const float,const vector,const vector)'})
let c['ashikhmin'] = f
let f = []
call add(f,{'word':'asin','kind':'f','menu':'float(const float)'})
call add(f,{'word':'asin','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'asin','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'asin','kind':'f','menu':'vector(const vector)'})
let c['asin'] = f
let f = []
call add(f,{'word':'assert_enabled','kind':'f','menu':'int()'})
let c['assert_enabled'] = f
let f = []
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,float,const matrix2)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,float,const matrix2)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,float,float,float,float,float,float,const matrix3)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,float,float,float,float,float,float,const matrix3)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,const matrix)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,const matrix)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,float,const vector4)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,float,const vector4)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,const vector)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,const vector)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,const vector2)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,const vector2)'})
let c['assign'] = f
let f = []
call add(f,{'word':'atan','kind':'f','menu':'float(const float)'})
call add(f,{'word':'atan','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'atan','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'atan','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'atan','kind':'f','menu':'vector(const vector)'})
let c['atan'] = f
let f = []
call add(f,{'word':'atan2','kind':'f','menu':'float(const float,const float)'})
let c['atan2'] = f
let f = []
call add(f,{'word':'atof','kind':'f','menu':'float(const string)'})
let c['atof'] = f
let f = []
call add(f,{'word':'atoi','kind':'f','menu':'int(const string)'})
let c['atoi'] = f
let f = []
call add(f,{'word':'atten','kind':'f','menu':'float(const float,const float)'})
let c['atten'] = f
let f = []
call add(f,{'word':'attrib','kind':'f','menu':'matrix2(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix2(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix3(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix3(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'float(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'float(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector4(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector4(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'string(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'string(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector2(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector2(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix2[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix2[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix3[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix3[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'float[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'float[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'int[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'int[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector4[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector4[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'string[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'string[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector2[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector2[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector[](const string,const string,const string,const int)'})
let c['attrib'] = f
let f = []
call add(f,{'word':'attribclass','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'attribclass','kind':'f','menu':'string(const string,const string)'})
let c['attribclass'] = f
let f = []
call add(f,{'word':'attribdataid','kind':'f','menu':'int[](const int,const string,const string)'})
call add(f,{'word':'attribdataid','kind':'f','menu':'int[](const string,const string,const string)'})
let c['attribdataid'] = f
let f = []
call add(f,{'word':'attribsize','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'attribsize','kind':'f','menu':'int(const string,const string,const string)'})
let c['attribsize'] = f
let f = []
call add(f,{'word':'attribtype','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'attribtype','kind':'f','menu':'int(const string,const string,const string)'})
let c['attribtype'] = f
let f = []
call add(f,{'word':'attribtypeinfo','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'attribtypeinfo','kind':'f','menu':'string(const string,const string,const string)'})
let c['attribtypeinfo'] = f
let f = []
call add(f,{'word':'avg','kind':'f','menu':'float(const float)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'avg','kind':'f','menu':'int(const int)'})
call add(f,{'word':'avg','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'avg','kind':'f','menu':'vector4(const vector4,const vector4)'})
call add(f,{'word':'avg','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'avg','kind':'f','menu':'vector2(const vector2,const vector2)'})
call add(f,{'word':'avg','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'avg','kind':'f','menu':'vector(const vector,const vector)'})
call add(f,{'word':'avg','kind':'f','menu':'vector(const vector[])'})
let c['avg'] = f
let f = []
let c['band'] = f
let f = []
let c['bgather'] = f
let f = []
call add(f,{'word':'blackbody','kind':'f','menu':'vector(const float,const float)'})
let c['blackbody'] = f
let f = []
let c['blight'] = f
let f = []
call add(f,{'word':'blinn','kind':'f','menu':'bsdf(const float)'})
call add(f,{'word':'blinn','kind':'f','menu':'bsdf(const vector,const float)'})
call add(f,{'word':'blinn','kind':'f','menu':'vector(const vector,const vector,const float)'})
let c['blinn'] = f
let f = []
call add(f,{'word':'blinnBRDF','kind':'f','menu':'float(const vector,const vector,const vector,const float)'})
let c['blinnBRDF'] = f
let f = []
let c['bnot'] = f
let f = []
let c['bor'] = f
let f = []
call add(f,{'word':'bouncelabel','kind':'f','menu':'string(const int)'})
let c['bouncelabel'] = f
let f = []
call add(f,{'word':'bouncemask','kind':'f','menu':'int(const string)'})
let c['bouncemask'] = f
let f = []
let c['br'] = f
let f = []
let c['break'] = f
let f = []
call add(f,{'word':'bumpmap','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmap','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmap','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmap','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmap'] = f
let f = []
call add(f,{'word':'bumpmapA','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapA','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapA','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapA','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapA'] = f
let f = []
call add(f,{'word':'bumpmapB','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapB','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapB','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapB','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapB'] = f
let f = []
call add(f,{'word':'bumpmapG','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapG','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapG','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapG','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapG'] = f
let f = []
call add(f,{'word':'bumpmapL','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapL','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapL','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapL','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapL'] = f
let f = []
call add(f,{'word':'bumpmapR','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapR','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapR','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapR','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapR'] = f
let f = []
let c['bwhile'] = f
let f = []
let c['bxor'] = f
let f = []
call add(f,{'word':'cbrt','kind':'f','menu':'float(const float)'})
call add(f,{'word':'cbrt','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'cbrt','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'cbrt','kind':'f','menu':'vector(const vector)'})
let c['cbrt'] = f
let f = []
call add(f,{'word':'ceil','kind':'f','menu':'float(const float)'})
call add(f,{'word':'ceil','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'ceil','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'ceil','kind':'f','menu':'vector(const vector)'})
let c['ceil'] = f
let f = []
call add(f,{'word':'ch','kind':'f','menu':'float(const int,const int,const int)'})
call add(f,{'word':'ch','kind':'f','menu':'float(const int,const int,const int,const float)'})
call add(f,{'word':'ch','kind':'f','menu':'float(const string)'})
call add(f,{'word':'ch','kind':'f','menu':'float(const string,const float)'})
call add(f,{'word':'ch','kind':'f','menu':'string(const string)'})
call add(f,{'word':'ch','kind':'f','menu':'string(const string,const float)'})
let c['ch'] = f
let f = []
call add(f,{'word':'ch2','kind':'f','menu':'matrix2(const string)'})
call add(f,{'word':'ch2','kind':'f','menu':'matrix2(const string,const float)'})
let c['ch2'] = f
let f = []
call add(f,{'word':'ch3','kind':'f','menu':'matrix3(const string)'})
call add(f,{'word':'ch3','kind':'f','menu':'matrix3(const string,const float)'})
let c['ch3'] = f
let f = []
call add(f,{'word':'ch4','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'ch4','kind':'f','menu':'matrix(const string,const float)'})
let c['ch4'] = f
let f = []
call add(f,{'word':'chexpr','kind':'f','menu':'float(const string,const string)'})
let c['chexpr'] = f
let f = []
call add(f,{'word':'chexprf','kind':'f','menu':'float(const string,const string,const float)'})
let c['chexprf'] = f
let f = []
call add(f,{'word':'chexprt','kind':'f','menu':'float(const string,const string,const float)'})
let c['chexprt'] = f
let f = []
call add(f,{'word':'chf','kind':'f','menu':'float(const int,const int,const int)'})
call add(f,{'word':'chf','kind':'f','menu':'float(const int,const int,const int,const float)'})
call add(f,{'word':'chf','kind':'f','menu':'float(const string)'})
call add(f,{'word':'chf','kind':'f','menu':'float(const string,const float)'})
let c['chf'] = f
let f = []
call add(f,{'word':'chi','kind':'f','menu':'int(const string)'})
call add(f,{'word':'chi','kind':'f','menu':'int(const string,const float)'})
let c['chi'] = f
let f = []
call add(f,{'word':'chid','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'chid','kind':'f','menu':'void(const string,int,int,int)'})
call add(f,{'word':'chid','kind':'f','menu':'int(const string,int,int)'})
call add(f,{'word':'chid','kind':'f','menu':'void(const string,const string,int,int,int)'})
call add(f,{'word':'chid','kind':'f','menu':'int(const string,const string,int,int)'})
let c['chid'] = f
let f = []
call add(f,{'word':'chop','kind':'f','menu':'matrix(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'matrix(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'matrix(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'float(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'float(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'float(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector4(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector4(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector4(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector2(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector2(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector2(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector(const string,const string,const int)'})
let c['chop'] = f
let f = []
call add(f,{'word':'choplocal','kind':'f','menu':'matrix(const string,const int,const float)'})
call add(f,{'word':'choplocal','kind':'f','menu':'matrix(const string,const int,const int)'})
call add(f,{'word':'choplocal','kind':'f','menu':'matrix(const string,const string,const float)'})
call add(f,{'word':'choplocal','kind':'f','menu':'matrix(const string,const string,const int)'})
let c['choplocal'] = f
let f = []
call add(f,{'word':'choplocalt','kind':'f','menu':'matrix(const string,const int,const float,const float)'})
call add(f,{'word':'choplocalt','kind':'f','menu':'matrix(const string,const int,const int,const float)'})
call add(f,{'word':'choplocalt','kind':'f','menu':'matrix(const string,const string,const float,const float)'})
call add(f,{'word':'choplocalt','kind':'f','menu':'matrix(const string,const string,const int,const float)'})
let c['choplocalt'] = f
let f = []
call add(f,{'word':'chopt','kind':'f','menu':'matrix(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'matrix(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'matrix(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'matrix(const string,const string,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'float(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'float(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'float(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'float(const string,const string,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector4(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector4(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector4(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector4(const string,const string,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector2(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector2(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector2(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector2(const string,const string,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector(const string,const string,const int,const float)'})
let c['chopt'] = f
let f = []
call add(f,{'word':'chp','kind':'f','menu':'vector4(const string)'})
call add(f,{'word':'chp','kind':'f','menu':'vector4(const string,const float)'})
let c['chp'] = f
let f = []
call add(f,{'word':'chr','kind':'f','menu':'string(const int)'})
let c['chr'] = f
let f = []
call add(f,{'word':'chramp','kind':'f','menu':'float(const string,const float)'})
call add(f,{'word':'chramp','kind':'f','menu':'float(const string,const float,const float)'})
call add(f,{'word':'chramp','kind':'f','menu':'vector(const string,const float)'})
call add(f,{'word':'chramp','kind':'f','menu':'vector(const string,const float,const float)'})
let c['chramp'] = f
let f = []
call add(f,{'word':'chs','kind':'f','menu':'string(const string)'})
call add(f,{'word':'chs','kind':'f','menu':'string(const string,const float)'})
let c['chs'] = f
let f = []
call add(f,{'word':'chsraw','kind':'f','menu':'string(const string)'})
let c['chsraw'] = f
let f = []
call add(f,{'word':'chu','kind':'f','menu':'vector2(const string)'})
call add(f,{'word':'chu','kind':'f','menu':'vector2(const string,const float)'})
let c['chu'] = f
let f = []
call add(f,{'word':'chv','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'chv','kind':'f','menu':'vector(const int,const int,const float)'})
call add(f,{'word':'chv','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'chv','kind':'f','menu':'vector(const string,const float)'})
let c['chv'] = f
let f = []
call add(f,{'word':'ckspline','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'ckspline','kind':'f','menu':'vector4(const float,const vector4,const float)'})
call add(f,{'word':'ckspline','kind':'f','menu':'vector(const float,const vector,const float)'})
let c['ckspline'] = f
let f = []
call add(f,{'word':'clamp','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'clamp','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'clamp','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'clamp','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'clamp','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['clamp'] = f
let f = []
call add(f,{'word':'clip','kind':'f','menu':'void(int,export vector,export vector,const vector4)'})
call add(f,{'word':'clip','kind':'f','menu':'int(export vector,export vector,const vector4)'})
call add(f,{'word':'clip','kind':'f','menu':'void(int,export vector,export vector,const vector,const vector)'})
call add(f,{'word':'clip','kind':'f','menu':'int(export vector,export vector,const vector,const vector)'})
let c['clip'] = f
let f = []
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const float,const float)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const float,const float,const float,const float,const float,const float,const float,const float,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const vector)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const float,const float)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const float,const float,const float,const float,const float,const float,const float,const float,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector,const int)'})
let c['colormap'] = f
let f = []
call add(f,{'word':'computenormal','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'computenormal','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['computenormal'] = f
let f = []
call add(f,{'word':'concat','kind':'f','menu':'string(const string,const string)'})
let c['concat'] = f
let f = []
call add(f,{'word':'cone','kind':'f','menu':'bsdf(const vector,const float)'})
call add(f,{'word':'cone','kind':'f','menu':'bsdf(const vector,const vector,const float)'})
let c['cone'] = f
let f = []
call add(f,{'word':'cos','kind':'f','menu':'float(const float)'})
call add(f,{'word':'cos','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'cos','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'cos','kind':'f','menu':'vector(const vector)'})
let c['cos'] = f
let f = []
call add(f,{'word':'cosh','kind':'f','menu':'float(const float)'})
call add(f,{'word':'cosh','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'cosh','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'cosh','kind':'f','menu':'vector(const vector)'})
let c['cosh'] = f
let f = []
call add(f,{'word':'cout','kind':'f','menu':'void()'})
let c['cout'] = f
let f = []
call add(f,{'word':'cracktransform','kind':'f','menu':'void(const int,const int,const vector,const matrix,vector,vector,vector)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'vector(const int,const int,const vector,const matrix,vector,vector)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'void(const int,const int,const vector,const vector,const matrix,vector,vector,vector,vector)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'vector(const int,const int,const vector,const vector,const matrix,vector,vector,vector)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'vector(const int,const int,const int,const vector,const matrix)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'vector(const int,const int,const int,const vector,const vector,const matrix)'})
let c['cracktransform'] = f
let f = []
call add(f,{'word':'create_cdf','kind':'f','menu':'float[](const float[])'})
let c['create_cdf'] = f
let f = []
call add(f,{'word':'create_pdf','kind':'f','menu':'float[](const float[])'})
let c['create_pdf'] = f
let f = []
call add(f,{'word':'cross','kind':'f','menu':'vector(const vector,const vector)'})
let c['cross'] = f
let f = []
call add(f,{'word':'cspline','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'cspline','kind':'f','menu':'vector4(const float,const vector4)'})
call add(f,{'word':'cspline','kind':'f','menu':'vector(const float,const vector)'})
let c['cspline'] = f
let f = []
call add(f,{'word':'ctransform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'ctransform','kind':'f','menu':'vector(const string,const vector)'})
let c['ctransform'] = f
let f = []
call add(f,{'word':'curlnoise','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'curlnoise','kind':'f','menu':'vector(const vector)'})
let c['curlnoise'] = f
let f = []
call add(f,{'word':'curlnoise2d','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'curlnoise2d','kind':'f','menu':'vector(const vector)'})
let c['curlnoise2d'] = f
let f = []
call add(f,{'word':'curlxnoise','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'curlxnoise','kind':'f','menu':'vector(const vector)'})
let c['curlxnoise'] = f
let f = []
call add(f,{'word':'curlxnoise2d','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'curlxnoise2d','kind':'f','menu':'vector(const vector)'})
let c['curlxnoise2d'] = f
let f = []
call add(f,{'word':'cvex_bsdf','kind':'f','menu':'bsdf(const string,const string)'})
let c['cvex_bsdf'] = f
let f = []
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,const float,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,const float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,const float,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,const float,float,float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,const float,int,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,const float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,int,float,float,float,float,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,float,float,float,float,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,int,float,float,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,float,float,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector4,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector4,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector4,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector4,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector4,int,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector4,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector2,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector2,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector2,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector2,float,float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector2,int,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector2,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector,int,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector,int,float,float,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector,float,float,const int,const int,const int)'})
let c['cwnoise'] = f
let f = []
call add(f,{'word':'decode','kind':'f','menu':'string(const string)'})
let c['decode'] = f
let f = []
call add(f,{'word':'degrees','kind':'f','menu':'float(const float)'})
call add(f,{'word':'degrees','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'degrees','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'degrees','kind':'f','menu':'vector(const vector)'})
let c['degrees'] = f
let f = []
call add(f,{'word':'depthmap','kind':'f','menu':'float(const string,const float,const float)'})
call add(f,{'word':'depthmap','kind':'f','menu':'float(const string,const vector)'})
let c['depthmap'] = f
let f = []
call add(f,{'word':'detail','kind':'f','menu':'matrix2(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'float(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'float(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'int(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'string(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'float[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'float[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'int[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector[](const string,const string,const int)'})
let c['detail'] = f
let f = []
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix2(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix2(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix3(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix3(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'float(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'float(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'int(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'int(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector4(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector4(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'string(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'string(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector2(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector2(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix2[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix2[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix3[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix3[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'float[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'float[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'int[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'int[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector4[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector4[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'string[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'string[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector2[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector2[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector[](const string,const string,const int,int)'})
let c['detailattrib'] = f
let f = []
call add(f,{'word':'detailattribsize','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'detailattribsize','kind':'f','menu':'int(const string,const string)'})
let c['detailattribsize'] = f
let f = []
call add(f,{'word':'detailattribtype','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'detailattribtype','kind':'f','menu':'int(const string,const string)'})
let c['detailattribtype'] = f
let f = []
call add(f,{'word':'detailattribtypeinfo','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'detailattribtypeinfo','kind':'f','menu':'string(const string,const string)'})
let c['detailattribtypeinfo'] = f
let f = []
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix2(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix2(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix3(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix3(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'float(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'float(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'int(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector4(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector4(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'string(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector2(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector2(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix2[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix2[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix3[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix3[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'float[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'float[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'int[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector4[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector4[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector2[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector2[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector[](const string,const string)'})
let c['detailintrinsic'] = f
let f = []
call add(f,{'word':'determinant','kind':'f','menu':'float(const matrix2)'})
call add(f,{'word':'determinant','kind':'f','menu':'float(const matrix3)'})
call add(f,{'word':'determinant','kind':'f','menu':'float(const matrix)'})
let c['determinant'] = f
let f = []
call add(f,{'word':'diagonalizesymmetric','kind':'f','menu':'matrix3(const matrix3,vector)'})
let c['diagonalizesymmetric'] = f
let f = []
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf(const float)'})
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf(const vector,const float)'})
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf(const vector,const vector,const float)'})
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf(const vector,const vector)'})
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf(const vector)'})
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf()'})
call add(f,{'word':'diffuse','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'diffuse','kind':'f','menu':'vector(const vector,const vector,const float)'})
let c['diffuse'] = f
let f = []
call add(f,{'word':'diffuseBRDF','kind':'f','menu':'float(const vector,const vector)'})
call add(f,{'word':'diffuseBRDF','kind':'f','menu':'float(const vector,const vector,const vector,const float)'})
let c['diffuseBRDF'] = f
let f = []
call add(f,{'word':'dihedral','kind':'f','menu':'matrix3(const vector,const vector)'})
call add(f,{'word':'dihedral','kind':'f','menu':'vector4(const vector,const vector)'})
let c['dihedral'] = f
let f = []
call add(f,{'word':'dimport','kind':'f','menu':'int(const string,export matrix2)'})
call add(f,{'word':'dimport','kind':'f','menu':'int(const string,export matrix3)'})
call add(f,{'word':'dimport','kind':'f','menu':'int(const string,export matrix)'})
call add(f,{'word':'dimport','kind':'f','menu':'int(const string,export float)'})
call add(f,{'word':'dimport','kind':'f','menu':'int(const string,export int)'})
call add(f,{'word':'dimport','kind':'f','menu':'int(const string,export vector4)'})
call add(f,{'word':'dimport','kind':'f','menu':'int(const string,export string)'})
call add(f,{'word':'dimport','kind':'f','menu':'int(const string,export vector2)'})
call add(f,{'word':'dimport','kind':'f','menu':'int(const string,export vector)'})
let c['dimport'] = f
let f = []
call add(f,{'word':'distance','kind':'f','menu':'float(const vector4,const vector4)'})
call add(f,{'word':'distance','kind':'f','menu':'float(const vector2,const vector2)'})
call add(f,{'word':'distance','kind':'f','menu':'float(const vector,const vector)'})
let c['distance'] = f
let f = []
call add(f,{'word':'distance2','kind':'f','menu':'float(const vector4,const vector4)'})
call add(f,{'word':'distance2','kind':'f','menu':'float(const vector2,const vector2)'})
call add(f,{'word':'distance2','kind':'f','menu':'float(const vector,const vector)'})
let c['distance2'] = f
let f = []
let c['div'] = f
let f = []
call add(f,{'word':'dot','kind':'f','menu':'float(const vector4,const vector4)'})
call add(f,{'word':'dot','kind':'f','menu':'float(const vector4,const vector)'})
call add(f,{'word':'dot','kind':'f','menu':'float(const vector2,const vector2)'})
call add(f,{'word':'dot','kind':'f','menu':'float(const vector,const vector4)'})
call add(f,{'word':'dot','kind':'f','menu':'float(const vector,const vector)'})
let c['dot'] = f
let f = []
call add(f,{'word':'dsmpixel','kind':'f','menu':'int(const string,const string,const int,const int,float[])'})
call add(f,{'word':'dsmpixel','kind':'f','menu':'int(const string,const string,const int,const int,vector4[])'})
call add(f,{'word':'dsmpixel','kind':'f','menu':'int(const string,const string,const int,const int,vector[])'})
let c['dsmpixel'] = f
let f = []
call add(f,{'word':'efit','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
call add(f,{'word':'efit','kind':'f','menu':'vector4(const vector4,const vector4,const vector4,const float,const float)'})
call add(f,{'word':'efit','kind':'f','menu':'vector4(const vector4,const vector4,const vector4,const vector4,const vector4)'})
call add(f,{'word':'efit','kind':'f','menu':'vector2(const vector2,const vector2,const vector2,const float,const float)'})
call add(f,{'word':'efit','kind':'f','menu':'vector2(const vector2,const vector2,const vector2,const vector2,const vector2)'})
call add(f,{'word':'efit','kind':'f','menu':'vector(const vector,const vector,const vector,const float,const float)'})
call add(f,{'word':'efit','kind':'f','menu':'vector(const vector,const vector,const vector,const vector,const vector)'})
let c['efit'] = f
let f = []
call add(f,{'word':'eigenvalues','kind':'f','menu':'void(int,const matrix3,vector,vector)'})
call add(f,{'word':'eigenvalues','kind':'f','menu':'int(const matrix3,vector,vector)'})
let c['eigenvalues'] = f
let f = []
let c['else'] = f
let f = []
call add(f,{'word':'encode','kind':'f','menu':'string(const string)'})
let c['encode'] = f
let f = []
let c['endel'] = f
let f = []
let c['endif'] = f
let f = []
let c['endnotif'] = f
let f = []
call add(f,{'word':'endswith','kind':'f','menu':'int(const string,const string)'})
let c['endswith'] = f
let f = []
call add(f,{'word':'environment','kind':'f','menu':'vector4(const string,const vector)'})
call add(f,{'word':'environment','kind':'f','menu':'vector4(const string,const vector,const float)'})
call add(f,{'word':'environment','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'environment','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'environment','kind':'f','menu':'vector(const string,const vector,const float)'})
call add(f,{'word':'environment','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector)'})
let c['environment'] = f
let f = []
let c['eq'] = f
let f = []
call add(f,{'word':'erf','kind':'f','menu':'float(const float)'})
call add(f,{'word':'erf','kind':'f','menu':'vector2(const vector2)'})
let c['erf'] = f
let f = []
call add(f,{'word':'erf_inv','kind':'f','menu':'float(const float)'})
let c['erf_inv'] = f
let f = []
call add(f,{'word':'erfc','kind':'f','menu':'float(const float)'})
let c['erfc'] = f
let f = []
call add(f,{'word':'error','kind':'f','menu':'void(const string)'})
let c['error'] = f
let f = []
call add(f,{'word':'eulertoquaternion','kind':'f','menu':'vector4(const vector,const int)'})
let c['eulertoquaternion'] = f
let f = []
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,float,const int)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,const int)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,const vector,float,const int)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,const vector,const int)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,const vector)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector)'})
let c['eval_bsdf'] = f
let f = []
call add(f,{'word':'exp','kind':'f','menu':'float(const float)'})
call add(f,{'word':'exp','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'exp','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'exp','kind':'f','menu':'vector(const vector)'})
let c['exp'] = f
let f = []
call add(f,{'word':'expand_udim','kind':'f','menu':'string(const float,const float,const string)'})
let c['expand_udim'] = f
let f = []
call add(f,{'word':'expandedgegroup','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'expandedgegroup','kind':'f','menu':'int[](const string,const string)'})
let c['expandedgegroup'] = f
let f = []
call add(f,{'word':'expandpointgroup','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'expandpointgroup','kind':'f','menu':'int[](const string,const string)'})
let c['expandpointgroup'] = f
let f = []
call add(f,{'word':'expandprimgroup','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'expandprimgroup','kind':'f','menu':'int[](const string,const string)'})
let c['expandprimgroup'] = f
let f = []
call add(f,{'word':'expandvertexgroup','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'expandvertexgroup','kind':'f','menu':'int[](const string,const string)'})
let c['expandvertexgroup'] = f
let f = []
call add(f,{'word':'fastshadow','kind':'f','menu':'float(const vector,const vector,const float)'})
let c['fastshadow'] = f
let f = []
call add(f,{'word':'filamentsample','kind':'f','menu':'vector(const int,const vector)'})
call add(f,{'word':'filamentsample','kind':'f','menu':'vector(const string,const vector)'})
let c['filamentsample'] = f
let f = []
call add(f,{'word':'file_stat','kind':'f','menu':'int(const string,int[])'})
let c['file_stat'] = f
let f = []
call add(f,{'word':'filtershadow','kind':'f','menu':'vector(const vector,const vector,const float)'})
let c['filtershadow'] = f
let f = []
call add(f,{'word':'filterstep','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'filterstep','kind':'f','menu':'float(const float,const float,const float)'})
let c['filterstep'] = f
let f = []
call add(f,{'word':'find','kind':'f','menu':'int(const string,const string)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string,const string,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix2[],const matrix2)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix2[],const matrix2,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix2[],const matrix2,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix3[],const matrix3)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix3[],const matrix3,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix3[],const matrix3,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix[],const matrix)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix[],const matrix,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix[],const matrix,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const float[],const float)'})
call add(f,{'word':'find','kind':'f','menu':'int(const float[],const float,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const float[],const float,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const int[],const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const int[],const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const int[],const int,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector4[],const vector4)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector4[],const vector4,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector4[],const vector4,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string[],const string)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string[],const string,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string[],const string,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector2[],const vector2)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector2[],const vector2,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector2[],const vector2,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector[],const vector)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector[],const vector,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector[],const vector,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string,const string)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string,const string,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix2[],const matrix2)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix2[],const matrix2,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix2[],const matrix2,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix3[],const matrix3)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix3[],const matrix3,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix3[],const matrix3,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix[],const matrix)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix[],const matrix,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix[],const matrix,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const float[],const float)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const float[],const float,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const float[],const float,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const int[],const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const int[],const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const int[],const int,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector4[],const vector4)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector4[],const vector4,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector4[],const vector4,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string[],const string)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string[],const string,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string[],const string,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector2[],const vector2)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector2[],const vector2,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector2[],const vector2,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector[],const vector)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector[],const vector,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector[],const vector,const int,const int)'})
let c['find'] = f
let f = []
call add(f,{'word':'findattribval','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const int,const string,const string,const int,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const int,const string,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const string,const string,const string,const int,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const string,const string,const string,const string)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const string,const string,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int[](const int,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int[](const int,const string,const string,const string)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int[](const string,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int[](const string,const string,const string,const string)'})
let c['findattribval'] = f
let f = []
call add(f,{'word':'findattribvalcount','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'findattribvalcount','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'findattribvalcount','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'findattribvalcount','kind':'f','menu':'int(const string,const string,const string,const string)'})
let c['findattribvalcount'] = f
let f = []
call add(f,{'word':'fit','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
call add(f,{'word':'fit','kind':'f','menu':'vector4(const vector4,const vector4,const vector4,const vector4,const vector4)'})
call add(f,{'word':'fit','kind':'f','menu':'vector2(const vector2,const vector2,const vector2,const vector2,const vector2)'})
call add(f,{'word':'fit','kind':'f','menu':'vector(const vector,const vector,const vector,const vector,const vector)'})
let c['fit'] = f
let f = []
call add(f,{'word':'fit01','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'fit01','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'fit01','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'fit01','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['fit01'] = f
let f = []
call add(f,{'word':'fit10','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'fit10','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'fit10','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'fit10','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['fit10'] = f
let f = []
call add(f,{'word':'fit11','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'fit11','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'fit11','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'fit11','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['fit11'] = f
let f = []
call add(f,{'word':'floor','kind':'f','menu':'float(const float)'})
call add(f,{'word':'floor','kind':'f','menu':'int(const float)'})
call add(f,{'word':'floor','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'floor','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'floor','kind':'f','menu':'vector(const vector)'})
let c['floor'] = f
let f = []
call add(f,{'word':'flownoise','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'float(const vector4,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'float(const vector,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'vector(const float,const float,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'vector(const vector4,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'vector(const vector,const float)'})
let c['flownoise'] = f
let f = []
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const float,const float,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const vector4,const int,const int,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const vector4,const vector4,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const vector,const int,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const vector,const vector,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const float,const float,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const vector4,const int,const int,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const vector4,const vector4,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const vector,const int,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const vector,const vector,const float)'})
let c['flowpnoise'] = f
let f = []
call add(f,{'word':'frac','kind':'f','menu':'float(const float)'})
call add(f,{'word':'frac','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'frac','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'frac','kind':'f','menu':'vector(const vector)'})
let c['frac'] = f
let f = []
call add(f,{'word':'fresnel','kind':'f','menu':'void(const vector,const vector,const float,float,float)'})
call add(f,{'word':'fresnel','kind':'f','menu':'float(const vector,const vector,const float,float)'})
call add(f,{'word':'fresnel','kind':'f','menu':'void(const vector,const vector,const float,float,float,vector,vector)'})
call add(f,{'word':'fresnel','kind':'f','menu':'float(const vector,const vector,const float,float,vector,vector)'})
let c['fresnel'] = f
let f = []
call add(f,{'word':'fromNDC','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'fromNDC','kind':'f','menu':'vector(const vector)'})
let c['fromNDC'] = f
let f = []
call add(f,{'word':'frontface','kind':'f','menu':'vector(const vector,const vector)'})
call add(f,{'word':'frontface','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['frontface'] = f
let f = []
call add(f,{'word':'fuzzify','kind':'f','menu':'float(const string[],const float[],const float[],const float,const float,const float)'})
let c['fuzzify'] = f
let f = []
call add(f,{'word':'fuzzy_and','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_and','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_and'] = f
let f = []
call add(f,{'word':'fuzzy_defuzz_centroid','kind':'f','menu':'float(const float[],const float,const float)'})
let c['fuzzy_defuzz_centroid'] = f
let f = []
call add(f,{'word':'fuzzy_nand','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_nand','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_nand'] = f
let f = []
call add(f,{'word':'fuzzy_nor','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_nor','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_nor'] = f
let f = []
call add(f,{'word':'fuzzy_not','kind':'f','menu':'float(const float)'})
call add(f,{'word':'fuzzy_not','kind':'f','menu':'int(const int)'})
let c['fuzzy_not'] = f
let f = []
call add(f,{'word':'fuzzy_nxor','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_nxor','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_nxor'] = f
let f = []
call add(f,{'word':'fuzzy_or','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_or','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_or'] = f
let f = []
call add(f,{'word':'fuzzy_xor','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_xor','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_xor'] = f
let f = []
let c['ge'] = f
let f = []
call add(f,{'word':'geoself','kind':'f','menu':'int()'})
let c['geoself'] = f
let f = []
call add(f,{'word':'geounwrap','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'geounwrap','kind':'f','menu':'string(const string,const string)'})
let c['geounwrap'] = f
let f = []
call add(f,{'word':'getattrib','kind':'f','menu':'matrix2(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix2(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix3(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix3(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'float(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'float(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'int(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'int(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector4(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector4(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'string(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'string(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector2(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector2(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix2[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix2[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix3[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix3[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'float[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'float[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'int[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'int[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector4[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector4[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'string[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'string[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector2[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector2[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector[](const string,const string,const string,const int,int)'})
let c['getattrib'] = f
let f = []
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,matrix3,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,matrix,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,float,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,int,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,vector4,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,string,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,vector,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,float[],const string,const string,const int,const int)'})
let c['getattribute'] = f
let f = []
call add(f,{'word':'getbbox','kind':'f','menu':'void(const int,const string,vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(const int,const string,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'void(const int,vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(const int,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'void(const string,const string,vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(const string,const string,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'void(const string,vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(const string,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'void(vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(vector)'})
let c['getbbox'] = f
let f = []
call add(f,{'word':'getbbox_center','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getbbox_center','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getbbox_center','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getbbox_center','kind':'f','menu':'vector(const string,const string)'})
let c['getbbox_center'] = f
let f = []
call add(f,{'word':'getbbox_max','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getbbox_max','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getbbox_max','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getbbox_max','kind':'f','menu':'vector(const string,const string)'})
let c['getbbox_max'] = f
let f = []
call add(f,{'word':'getbbox_min','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getbbox_min','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getbbox_min','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getbbox_min','kind':'f','menu':'vector(const string,const string)'})
let c['getbbox_min'] = f
let f = []
call add(f,{'word':'getbbox_size','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getbbox_size','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getbbox_size','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getbbox_size','kind':'f','menu':'vector(const string,const string)'})
let c['getbbox_size'] = f
let f = []
call add(f,{'word':'getblurP','kind':'f','menu':'vector(const float)'})
let c['getblurP'] = f
let f = []
call add(f,{'word':'getbounces','kind':'f','menu':'int(const bsdf)'})
let c['getbounces'] = f
let f = []
call add(f,{'word':'getbounds','kind':'f','menu':'int(const string,const string,vector,vector)'})
call add(f,{'word':'getbounds','kind':'f','menu':'int(const string,vector,vector)'})
let c['getbounds'] = f
let f = []
call add(f,{'word':'getcomp','kind':'f','menu':'matrix2(const matrix2[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'matrix3(const matrix3[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'matrix(const matrix[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'bsdf(const bsdf[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'light(const light[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'material(const material[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const matrix2,const int,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const matrix3,const int,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const matrix,const int,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const vector4,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const vector2,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const vector,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const float[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'int(const int[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'vector4(const vector4[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'string(const string,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'string(const string[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'vector2(const vector2[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'vector(const vector[],const int)'})
let c['getcomp'] = f
let f = []
call add(f,{'word':'getcomponents','kind':'f','menu':'string[]()'})
let c['getcomponents'] = f
let f = []
call add(f,{'word':'getderiv','kind':'f','menu':'void(const float,const string,const int,const float,const float,float,float)'})
call add(f,{'word':'getderiv','kind':'f','menu':'float(const float,const string,const int,const float,const float,float)'})
call add(f,{'word':'getderiv','kind':'f','menu':'void(const vector4,const string,const int,const float,const float,vector4,vector4)'})
call add(f,{'word':'getderiv','kind':'f','menu':'vector4(const vector4,const string,const int,const float,const float,vector4)'})
call add(f,{'word':'getderiv','kind':'f','menu':'void(const vector,const string,const int,const float,const float,vector,vector)'})
call add(f,{'word':'getderiv','kind':'f','menu':'vector(const vector,const string,const int,const float,const float,vector)'})
let c['getderiv'] = f
let f = []
let c['getelem'] = f
let f = []
call add(f,{'word':'getfogname','kind':'f','menu':'string()'})
let c['getfogname'] = f
let f = []
call add(f,{'word':'getglobalraylevel','kind':'f','menu':'int()'})
let c['getglobalraylevel'] = f
let f = []
call add(f,{'word':'getgroupid','kind':'f','menu':'int()'})
let c['getgroupid'] = f
let f = []
call add(f,{'word':'getlight','kind':'f','menu':'light(const int)'})
let c['getlight'] = f
let f = []
call add(f,{'word':'getlightid','kind':'f','menu':'int(const string)'})
let c['getlightid'] = f
let f = []
call add(f,{'word':'getlightname','kind':'f','menu':'string()'})
call add(f,{'word':'getlightname','kind':'f','menu':'string(const int)'})
let c['getlightname'] = f
let f = []
call add(f,{'word':'getlights','kind':'f','menu':'int[]()'})
call add(f,{'word':'getlights','kind':'f','menu':'int[](const material,const vector)'})
call add(f,{'word':'getlights','kind':'f','menu':'int[](const vector)'})
let c['getlights'] = f
let f = []
call add(f,{'word':'getlightscope','kind':'f','menu':'void(const material,string,string)'})
call add(f,{'word':'getlightscope','kind':'f','menu':'string(const material,string)'})
let c['getlightscope'] = f
let f = []
call add(f,{'word':'getlocalcurvature','kind':'f','menu':'vector(const float,const float)'})
let c['getlocalcurvature'] = f
let f = []
call add(f,{'word':'getmaterial','kind':'f','menu':'material()'})
let c['getmaterial'] = f
let f = []
call add(f,{'word':'getmaterialid','kind':'f','menu':'int()'})
let c['getmaterialid'] = f
let f = []
call add(f,{'word':'getobjectid','kind':'f','menu':'int()'})
let c['getobjectid'] = f
let f = []
call add(f,{'word':'getobjectname','kind':'f','menu':'string()'})
let c['getobjectname'] = f
let f = []
call add(f,{'word':'getpackedtransform','kind':'f','menu':'matrix(const int,const int)'})
let c['getpackedtransform'] = f
let f = []
call add(f,{'word':'getphotonlight','kind':'f','menu':'int()'})
let c['getphotonlight'] = f
let f = []
call add(f,{'word':'getpointbbox','kind':'f','menu':'void(const int,const string,vector,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'vector(const int,const string,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'void(const int,vector,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'vector(const int,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'void(const string,const string,vector,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'vector(const string,const string,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'void(const string,vector,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'vector(const string,vector)'})
let c['getpointbbox'] = f
let f = []
call add(f,{'word':'getpointbbox_center','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getpointbbox_center','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getpointbbox_center','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getpointbbox_center','kind':'f','menu':'vector(const string,const string)'})
let c['getpointbbox_center'] = f
let f = []
call add(f,{'word':'getpointbbox_max','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getpointbbox_max','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getpointbbox_max','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getpointbbox_max','kind':'f','menu':'vector(const string,const string)'})
let c['getpointbbox_max'] = f
let f = []
call add(f,{'word':'getpointbbox_min','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getpointbbox_min','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getpointbbox_min','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getpointbbox_min','kind':'f','menu':'vector(const string,const string)'})
let c['getpointbbox_min'] = f
let f = []
call add(f,{'word':'getpointbbox_size','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getpointbbox_size','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getpointbbox_size','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getpointbbox_size','kind':'f','menu':'vector(const string,const string)'})
let c['getpointbbox_size'] = f
let f = []
call add(f,{'word':'getprimid','kind':'f','menu':'int()'})
let c['getprimid'] = f
let f = []
call add(f,{'word':'getptextureid','kind':'f','menu':'int()'})
let c['getptextureid'] = f
let f = []
call add(f,{'word':'getraylevel','kind':'f','menu':'int()'})
let c['getraylevel'] = f
let f = []
call add(f,{'word':'getrayweight','kind':'f','menu':'float()'})
let c['getrayweight'] = f
let f = []
call add(f,{'word':'getsamplestore','kind':'f','menu':'int(const string,const vector,float)'})
call add(f,{'word':'getsamplestore','kind':'f','menu':'int(const string,const vector,int)'})
call add(f,{'word':'getsamplestore','kind':'f','menu':'int(const string,const vector,vector4)'})
call add(f,{'word':'getsamplestore','kind':'f','menu':'int(const string,const vector,vector)'})
let c['getsamplestore'] = f
let f = []
call add(f,{'word':'getscope','kind':'f','menu':'void(const material,const string,string,string)'})
call add(f,{'word':'getscope','kind':'f','menu':'string(const material,const string,string)'})
let c['getscope'] = f
let f = []
call add(f,{'word':'getsmoothP','kind':'f','menu':'int(vector,const vector)'})
call add(f,{'word':'getsmoothP','kind':'f','menu':'vector()'})
let c['getsmoothP'] = f
let f = []
call add(f,{'word':'getspace','kind':'f','menu':'matrix(const string,const string)'})
let c['getspace'] = f
let f = []
call add(f,{'word':'getuvtangents','kind':'f','menu':'void(const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'getuvtangents','kind':'f','menu':'vector(const string,const vector,const vector,vector)'})
call add(f,{'word':'getuvtangents','kind':'f','menu':'void(const string,const vector,const vector,vector,vector,vector)'})
call add(f,{'word':'getuvtangents','kind':'f','menu':'vector(const string,const vector,const vector,vector,vector)'})
let c['getuvtangents'] = f
let f = []
call add(f,{'word':'gradient','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'gradient','kind':'f','menu':'vector(const vector,const float)'})
let c['gradient'] = f
let f = []
call add(f,{'word':'gradient3d','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['gradient3d'] = f
let f = []
let c['gt'] = f
let f = []
call add(f,{'word':'hair','kind':'f','menu':'bsdf(const vector,const vector,const float,const float,const float,const float,const float)'})
call add(f,{'word':'hair','kind':'f','menu':'bsdf(const vector,const vector,const float,const float,const float)'})
call add(f,{'word':'hair','kind':'f','menu':'bsdf(const vector,const vector,const float,const float)'})
let c['hair'] = f
let f = []
call add(f,{'word':'has_udim','kind':'f','menu':'int(const string)'})
let c['has_udim'] = f
let f = []
call add(f,{'word':'hasattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'hasattrib','kind':'f','menu':'int(const string,const string,const string)'})
let c['hasattrib'] = f
let f = []
call add(f,{'word':'hasdetailattrib','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'hasdetailattrib','kind':'f','menu':'int(const string,const string)'})
let c['hasdetailattrib'] = f
let f = []
call add(f,{'word':'haslight','kind':'f','menu':'int(const material,const vector,const int)'})
let c['haslight'] = f
let f = []
call add(f,{'word':'haspointattrib','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'haspointattrib','kind':'f','menu':'int(const string,const string)'})
let c['haspointattrib'] = f
let f = []
call add(f,{'word':'hasprimattrib','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'hasprimattrib','kind':'f','menu':'int(const string,const string)'})
let c['hasprimattrib'] = f
let f = []
call add(f,{'word':'hasvertexattrib','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'hasvertexattrib','kind':'f','menu':'int(const string,const string)'})
let c['hasvertexattrib'] = f
let f = []
call add(f,{'word':'hedge_dstpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_dstpoint','kind':'f','menu':'int(const string,const int)'})
let c['hedge_dstpoint'] = f
let f = []
call add(f,{'word':'hedge_dstvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_dstvertex','kind':'f','menu':'int(const string,const int)'})
let c['hedge_dstvertex'] = f
let f = []
call add(f,{'word':'hedge_equivcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_equivcount','kind':'f','menu':'int(const string,const int)'})
let c['hedge_equivcount'] = f
let f = []
call add(f,{'word':'hedge_isequiv','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'hedge_isequiv','kind':'f','menu':'int(const string,const int,const int)'})
let c['hedge_isequiv'] = f
let f = []
call add(f,{'word':'hedge_isprimary','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_isprimary','kind':'f','menu':'int(const string,const int)'})
let c['hedge_isprimary'] = f
let f = []
call add(f,{'word':'hedge_isvalid','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_isvalid','kind':'f','menu':'int(const string,const int)'})
let c['hedge_isvalid'] = f
let f = []
call add(f,{'word':'hedge_next','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_next','kind':'f','menu':'int(const string,const int)'})
let c['hedge_next'] = f
let f = []
call add(f,{'word':'hedge_nextequiv','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_nextequiv','kind':'f','menu':'int(const string,const int)'})
let c['hedge_nextequiv'] = f
let f = []
call add(f,{'word':'hedge_postdstpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_postdstpoint','kind':'f','menu':'int(const string,const int)'})
let c['hedge_postdstpoint'] = f
let f = []
call add(f,{'word':'hedge_postdstvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_postdstvertex','kind':'f','menu':'int(const string,const int)'})
let c['hedge_postdstvertex'] = f
let f = []
call add(f,{'word':'hedge_presrcpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_presrcpoint','kind':'f','menu':'int(const string,const int)'})
let c['hedge_presrcpoint'] = f
let f = []
call add(f,{'word':'hedge_presrcvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_presrcvertex','kind':'f','menu':'int(const string,const int)'})
let c['hedge_presrcvertex'] = f
let f = []
call add(f,{'word':'hedge_prev','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_prev','kind':'f','menu':'int(const string,const int)'})
let c['hedge_prev'] = f
let f = []
call add(f,{'word':'hedge_prim','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_prim','kind':'f','menu':'int(const string,const int)'})
let c['hedge_prim'] = f
let f = []
call add(f,{'word':'hedge_primary','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_primary','kind':'f','menu':'int(const string,const int)'})
let c['hedge_primary'] = f
let f = []
call add(f,{'word':'hedge_srcpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_srcpoint','kind':'f','menu':'int(const string,const int)'})
let c['hedge_srcpoint'] = f
let f = []
call add(f,{'word':'hedge_srcvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_srcvertex','kind':'f','menu':'int(const string,const int)'})
let c['hedge_srcvertex'] = f
let f = []
call add(f,{'word':'henyeygreenstein','kind':'f','menu':'bsdf(const float)'})
let c['henyeygreenstein'] = f
let f = []
call add(f,{'word':'hscript_noise','kind':'f','menu':'float(const vector)'})
let c['hscript_noise'] = f
let f = []
call add(f,{'word':'hscript_rand','kind':'f','menu':'float(const float)'})
call add(f,{'word':'hscript_rand','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'hscript_rand','kind':'f','menu':'vector(const float)'})
let c['hscript_rand'] = f
let f = []
call add(f,{'word':'hscript_snoise','kind':'f','menu':'float(const vector)'})
let c['hscript_snoise'] = f
let f = []
call add(f,{'word':'hscript_sturb','kind':'f','menu':'float(const vector,const int)'})
let c['hscript_sturb'] = f
let f = []
call add(f,{'word':'hscript_turb','kind':'f','menu':'float(const vector,const int)'})
let c['hscript_turb'] = f
let f = []
call add(f,{'word':'hsvtorgb','kind':'f','menu':'vector(const float,const float,const float)'})
call add(f,{'word':'hsvtorgb','kind':'f','menu':'vector(const vector)'})
let c['hsvtorgb'] = f
let f = []
call add(f,{'word':'ident','kind':'f','menu':'matrix2()'})
call add(f,{'word':'ident','kind':'f','menu':'matrix3()'})
call add(f,{'word':'ident','kind':'f','menu':'matrix()'})
let c['ident'] = f
let f = []
call add(f,{'word':'idtopoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'idtopoint','kind':'f','menu':'int(const string,const int)'})
let c['idtopoint'] = f
let f = []
call add(f,{'word':'idtoprim','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'idtoprim','kind':'f','menu':'int(const string,const int)'})
let c['idtoprim'] = f
let f = []
let c['if'] = f
let f = []
call add(f,{'word':'importance_light','kind':'f','menu':'float(const int)'})
let c['importance_light'] = f
let f = []
call add(f,{'word':'inedgegroup','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'inedgegroup','kind':'f','menu':'int(const string,const string,const int,const int)'})
let c['inedgegroup'] = f
let f = []
call add(f,{'word':'inpointgroup','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'inpointgroup','kind':'f','menu':'int(const string,const string,const int)'})
let c['inpointgroup'] = f
let f = []
call add(f,{'word':'inprimgroup','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'inprimgroup','kind':'f','menu':'int(const string,const string,const int)'})
let c['inprimgroup'] = f
let f = []
call add(f,{'word':'insert','kind':'f','menu':'void(export string,const int,const string)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix2[],const int,const matrix2)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix2[],const int,const matrix2[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix3[],const int,const matrix3)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix3[],const int,const matrix3[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix[],const int,const matrix)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix[],const int,const matrix[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export float[],const int,const float)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export float[],const int,const float[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export int[],const int,const int)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export int[],const int,const int[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector4[],const int,const vector4)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector4[],const int,const vector4[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export string[],const int,const string)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export string[],const int,const string[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector2[],const int,const vector2)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector2[],const int,const vector2[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector[],const int,const vector)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector[],const int,const vector[])'})
let c['insert'] = f
let f = []
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector4,const vector4)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector4,const vector4,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector4,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector4,const vector,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector)'})
let c['instance'] = f
let f = []
call add(f,{'word':'integrate3d','kind':'f','menu':'float(const string,const string,const vector,const vector)'})
call add(f,{'word':'integrate3d','kind':'f','menu':'vector4(const string,const string,const vector,const vector)'})
call add(f,{'word':'integrate3d','kind':'f','menu':'vector(const string,const string,const vector,const vector)'})
let c['integrate3d'] = f
let f = []
call add(f,{'word':'integrate3dClip','kind':'f','menu':'int(const string,const string,export vector,export vector,const float)'})
let c['integrate3dClip'] = f
let f = []
call add(f,{'word':'interpolate','kind':'f','menu':'bsdf(const bsdf,const float,const float)'})
call add(f,{'word':'interpolate','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'interpolate','kind':'f','menu':'vector4(const vector4,const float,const float)'})
call add(f,{'word':'interpolate','kind':'f','menu':'vector(const vector,const float,const float)'})
let c['interpolate'] = f
let f = []
call add(f,{'word':'intersect','kind':'f','menu':'int(const int,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const int,const vector,const vector,vector,float,float)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const int,const vector,const vector,vector,vector)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const string,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const string,const vector,const vector,vector,float,float)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const string,const vector,const vector,vector,vector)'})
let c['intersect'] = f
let f = []
call add(f,{'word':'intersect3d','kind':'f','menu':'int(const string,const string,const vector,const vector,const float)'})
let c['intersect3d'] = f
let f = []
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const int,const string,const vector,const vector,vector[],int[],vector[])'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const int,const string,const vector,const vector,vector[],int[],vector[],const float,const float)'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const int,const vector,const vector,vector[],int[],vector[])'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const int,const vector,const vector,vector[],int[],vector[],const float,const float)'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const string,const string,const vector,const vector,vector[],int[],vector[])'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const string,const string,const vector,const vector,vector[],int[],vector[],const float,const float)'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const string,const vector,const vector,vector[],int[],vector[])'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const string,const vector,const vector,vector[],int[],vector[],const float,const float)'})
let c['intersect_all'] = f
let f = []
call add(f,{'word':'intersect_lights','kind':'f','menu':'int(const int[],const vector,const vector,const float,int,float,vector,float)'})
let c['intersect_lights'] = f
let f = []
call add(f,{'word':'invert','kind':'f','menu':'matrix2(const matrix2)'})
call add(f,{'word':'invert','kind':'f','menu':'matrix3(const matrix3)'})
call add(f,{'word':'invert','kind':'f','menu':'matrix(const matrix)'})
let c['invert'] = f
let f = []
call add(f,{'word':'invertexgroup','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'invertexgroup','kind':'f','menu':'int(const string,const string,const int)'})
let c['invertexgroup'] = f
let f = []
call add(f,{'word':'irradiance','kind':'f','menu':'vector(const vector,const vector)'})
let c['irradiance'] = f
let f = []
call add(f,{'word':'isalpha','kind':'f','menu':'int(const string)'})
let c['isalpha'] = f
let f = []
call add(f,{'word':'isbound','kind':'f','menu':'int(const string)'})
let c['isbound'] = f
let f = []
call add(f,{'word':'isdigit','kind':'f','menu':'int(const string)'})
let c['isdigit'] = f
let f = []
call add(f,{'word':'isfinite','kind':'f','menu':'int(const float)'})
let c['isfinite'] = f
let f = []
call add(f,{'word':'isnan','kind':'f','menu':'int(const float)'})
let c['isnan'] = f
let f = []
call add(f,{'word':'isotropic','kind':'f','menu':'bsdf()'})
let c['isotropic'] = f
let f = []
call add(f,{'word':'israytracing','kind':'f','menu':'int()'})
let c['israytracing'] = f
let f = []
call add(f,{'word':'isuvrendering','kind':'f','menu':'int()'})
let c['isuvrendering'] = f
let f = []
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(const string,const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export matrix2[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export matrix3[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export matrix[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export float[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export int[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export vector4[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export string[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export vector2[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export vector[],const int)'})
let c['isvalidindex'] = f
let f = []
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix2)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix3)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const bsdf)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const light)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const material)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const float)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const int)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector4)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const string)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector2)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix2[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix3[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const bsdf[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const light[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const material[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const float[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector4[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const string[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector2[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector[])'})
let c['isvarying'] = f
let f = []
call add(f,{'word':'itoa','kind':'f','menu':'string(const int)'})
let c['itoa'] = f
let f = []
call add(f,{'word':'join','kind':'f','menu':'string(const string[],const string)'})
let c['join'] = f
let f = []
let c['jump'] = f
let f = []
call add(f,{'word':'kspline','kind':'f','menu':'float(const string,const float,const float,const float)'})
call add(f,{'word':'kspline','kind':'f','menu':'vector4(const string,const float,const vector4,const float)'})
call add(f,{'word':'kspline','kind':'f','menu':'vector(const string,const float,const vector,const float)'})
let c['kspline'] = f
let f = []
let c['le'] = f
let f = []
call add(f,{'word':'len','kind':'f','menu':'int(const matrix2)'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix3)'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix)'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector4)'})
call add(f,{'word':'len','kind':'f','menu':'int(const string)'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector2)'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector)'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix2[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix3[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const bsdf[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const light[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const material[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const float[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector4[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const string[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector2[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector[])'})
let c['len'] = f
let f = []
call add(f,{'word':'length','kind':'f','menu':'float(const float)'})
call add(f,{'word':'length','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'length','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'length','kind':'f','menu':'float(const vector)'})
let c['length'] = f
let f = []
call add(f,{'word':'length2','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'length2','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'length2','kind':'f','menu':'float(const vector)'})
let c['length2'] = f
let f = []
call add(f,{'word':'lerp','kind':'f','menu':'bsdf(const bsdf,const bsdf,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector4(const vector4,const vector4,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector2(const vector2,const vector2,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector(const vector,const vector,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['lerp'] = f
let f = []
call add(f,{'word':'lightbounces','kind':'f','menu':'int(const light)'})
let c['lightbounces'] = f
let f = []
call add(f,{'word':'lightid','kind':'f','menu':'int(const light)'})
let c['lightid'] = f
let f = []
call add(f,{'word':'limit_sample_space','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'limit_sample_space','kind':'f','menu':'float(const float,const float,const float)'})
let c['limit_sample_space'] = f
let f = []
call add(f,{'word':'limport','kind':'f','menu':'int(const string,export matrix2)'})
call add(f,{'word':'limport','kind':'f','menu':'int(const string,export matrix3)'})
call add(f,{'word':'limport','kind':'f','menu':'int(const string,export matrix)'})
call add(f,{'word':'limport','kind':'f','menu':'int(const string,export float)'})
call add(f,{'word':'limport','kind':'f','menu':'int(const string,export int)'})
call add(f,{'word':'limport','kind':'f','menu':'int(const string,export vector4)'})
call add(f,{'word':'limport','kind':'f','menu':'int(const string,export string)'})
call add(f,{'word':'limport','kind':'f','menu':'int(const string,export vector2)'})
call add(f,{'word':'limport','kind':'f','menu':'int(const string,export vector)'})
let c['limport'] = f
let f = []
call add(f,{'word':'lkspline','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'lkspline','kind':'f','menu':'vector4(const float,const vector4,const float)'})
call add(f,{'word':'lkspline','kind':'f','menu':'vector(const float,const vector,const float)'})
let c['lkspline'] = f
let f = []
call add(f,{'word':'log','kind':'f','menu':'float(const float)'})
call add(f,{'word':'log','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'log','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'log','kind':'f','menu':'vector(const vector)'})
let c['log'] = f
let f = []
call add(f,{'word':'log10','kind':'f','menu':'float(const float)'})
call add(f,{'word':'log10','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'log10','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'log10','kind':'f','menu':'vector(const vector)'})
let c['log10'] = f
let f = []
call add(f,{'word':'lookat','kind':'f','menu':'matrix3(const vector,const vector)'})
call add(f,{'word':'lookat','kind':'f','menu':'matrix3(const vector,const vector,const float)'})
call add(f,{'word':'lookat','kind':'f','menu':'matrix3(const vector,const vector,const vector)'})
call add(f,{'word':'lookat','kind':'f','menu':'vector(const vector,const vector,const float,const int)'})
call add(f,{'word':'lookat','kind':'f','menu':'vector(const vector,const vector,const vector,const int)'})
let c['lookat'] = f
let f = []
let c['loop'] = f
let f = []
call add(f,{'word':'lspline','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'lspline','kind':'f','menu':'vector4(const float,const vector4)'})
call add(f,{'word':'lspline','kind':'f','menu':'vector(const float,const vector)'})
let c['lspline'] = f
let f = []
call add(f,{'word':'lstrip','kind':'f','menu':'string(const string)'})
call add(f,{'word':'lstrip','kind':'f','menu':'string(const string,const string)'})
let c['lstrip'] = f
let f = []
let c['lt'] = f
let f = []
call add(f,{'word':'luminance','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'luminance','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'luminance','kind':'f','menu':'float(const vector)'})
let c['luminance'] = f
let f = []
call add(f,{'word':'makebasis','kind':'f','menu':'void(vector,vector,const vector)'})
call add(f,{'word':'makebasis','kind':'f','menu':'vector(vector,const vector)'})
call add(f,{'word':'makebasis','kind':'f','menu':'void(export vector,export vector,const vector,const vector)'})
let c['makebasis'] = f
let f = []
call add(f,{'word':'maketransform','kind':'f','menu':'matrix3(const int,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix3(const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const int,const int,const vector,const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const int,const int,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const int,const int,const vector,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const int,const int,const vector,const vector,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const vector,const vector,const vector)'})
let c['maketransform'] = f
let f = []
call add(f,{'word':'mask_bsdf','kind':'f','menu':'bsdf(const bsdf,const int)'})
let c['mask_bsdf'] = f
let f = []
call add(f,{'word':'match','kind':'f','menu':'int(const string,const string)'})
let c['match'] = f
let f = []
call add(f,{'word':'matchvex_blinn','kind':'f','menu':'bsdf(const float)'})
call add(f,{'word':'matchvex_blinn','kind':'f','menu':'bsdf(const vector,const float)'})
let c['matchvex_blinn'] = f
let f = []
call add(f,{'word':'matchvex_specular','kind':'f','menu':'bsdf(const float)'})
call add(f,{'word':'matchvex_specular','kind':'f','menu':'bsdf(const vector,const float)'})
let c['matchvex_specular'] = f
let f = []
call add(f,{'word':'max','kind':'f','menu':'float(const float)'})
call add(f,{'word':'max','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'max','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'max','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'max','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'max','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'max','kind':'f','menu':'int(const int)'})
call add(f,{'word':'max','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'max','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'max','kind':'f','menu':'vector4(const vector4,const vector4)'})
call add(f,{'word':'max','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'max','kind':'f','menu':'vector2(const vector2,const vector2)'})
call add(f,{'word':'max','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'max','kind':'f','menu':'vector(const vector,const vector)'})
call add(f,{'word':'max','kind':'f','menu':'vector(const vector[])'})
let c['max'] = f
let f = []
let c['measured'] = f
let f = []
let c['merge'] = f
let f = []
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,matrix2)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,matrix3)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,matrix)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,float)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,int)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,vector4)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,vector2)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'matrix3[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'matrix[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'float[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'vector4[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'vector[](const string,const string,const vector)'})
let c['metaimport'] = f
let f = []
call add(f,{'word':'metamarch','kind':'f','menu':'int(export int,const string,export vector,export vector,const float)'})
let c['metamarch'] = f
let f = []
call add(f,{'word':'metanext','kind':'f','menu':'int(const int)'})
let c['metanext'] = f
let f = []
call add(f,{'word':'metastart','kind':'f','menu':'int(const string,const vector)'})
let c['metastart'] = f
let f = []
call add(f,{'word':'metaweight','kind':'f','menu':'float(const string,const vector)'})
let c['metaweight'] = f
let f = []
call add(f,{'word':'min','kind':'f','menu':'float(const float)'})
call add(f,{'word':'min','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'min','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'min','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'min','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'min','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'min','kind':'f','menu':'int(const int)'})
call add(f,{'word':'min','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'min','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'min','kind':'f','menu':'vector4(const vector4,const vector4)'})
call add(f,{'word':'min','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'min','kind':'f','menu':'vector2(const vector2,const vector2)'})
call add(f,{'word':'min','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'min','kind':'f','menu':'vector(const vector,const vector)'})
call add(f,{'word':'min','kind':'f','menu':'vector(const vector[])'})
let c['min'] = f
let f = []
call add(f,{'word':'minpos','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const int,const string,const vector,const float)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const int,const vector)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const int,const vector,const float)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const string,const string,const vector,const float)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const string,const vector,const float)'})
let c['minpos'] = f
let f = []
let c['mod'] = f
let f = []
let c['mul'] = f
let f = []
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,const float,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,const float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,const float,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,const float,float,float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,const float,int,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,const float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,int,float,float,float,float,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,float,float,float,float,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,int,float,float,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,float,float,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector4,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector4,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector4,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector4,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector4,int,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector4,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector2,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector2,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector2,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector2,float,float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector2,int,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector2,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector,int,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector,int,float,float,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector,float,float,const int,const int,const int)'})
let c['mwnoise'] = f
let f = []
call add(f,{'word':'nametopoint','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nametopoint','kind':'f','menu':'int(const string,const string)'})
let c['nametopoint'] = f
let f = []
call add(f,{'word':'nametoprim','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nametoprim','kind':'f','menu':'int(const string,const string)'})
let c['nametoprim'] = f
let f = []
call add(f,{'word':'nbouncetypes','kind':'f','menu':'int()'})
let c['nbouncetypes'] = f
let f = []
let c['ne'] = f
let f = []
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const int,const string,const vector,const float)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const int,const vector)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const int,const vector,const float)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const string,const string,const vector)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const string,const string,const vector,const float)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const string,const vector)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const string,const vector,const float)'})
let c['nearpoint'] = f
let f = []
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const int,const string,const vector,const float)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const int,const string,const vector,const float,const int)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const int,const vector,const float)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const int,const vector,const float,const int)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const string,const string,const vector,const float)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const string,const string,const vector,const float,const int)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const string,const vector,const float)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const string,const vector,const float,const int)'})
let c['nearpoints'] = f
let f = []
call add(f,{'word':'nedgesgroup','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nedgesgroup','kind':'f','menu':'int(const string,const string)'})
let c['nedgesgroup'] = f
let f = []
let c['neg'] = f
let f = []
call add(f,{'word':'neighbour','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'neighbour','kind':'f','menu':'int(const string,const int,const int)'})
let c['neighbour'] = f
let f = []
call add(f,{'word':'neighbourcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'neighbourcount','kind':'f','menu':'int(const string,const int)'})
let c['neighbourcount'] = f
let f = []
call add(f,{'word':'neighbours','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'neighbours','kind':'f','menu':'int[](const string,const int)'})
let c['neighbours'] = f
let f = []
call add(f,{'word':'newsampler','kind':'f','menu':'int()'})
call add(f,{'word':'newsampler','kind':'f','menu':'int(const int)'})
let c['newsampler'] = f
let f = []
call add(f,{'word':'nextsample','kind':'f','menu':'void(export int,float,float)'})
call add(f,{'word':'nextsample','kind':'f','menu':'float(export int,float)'})
call add(f,{'word':'nextsample','kind':'f','menu':'void(export int,vector)'})
call add(f,{'word':'nextsample','kind':'f','menu':'vector(export int)'})
let c['nextsample'] = f
let f = []
let c['ngather'] = f
let f = []
let c['nlight'] = f
let f = []
call add(f,{'word':'noise','kind':'f','menu':'float(const float)'})
call add(f,{'word':'noise','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'noise','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'noise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'noise','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'noise','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'noise','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'noise','kind':'f','menu':'vector(const vector)'})
let c['noise'] = f
let f = []
call add(f,{'word':'noised','kind':'f','menu':'void(const float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'float(const float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const float,const float,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'float(const float,const float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const float,const float,vector,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'vector(const float,const float,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const float,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'vector(const float,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const vector4,float,float,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'float(const vector4,float,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const vector4,vector,vector,vector,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'vector(const vector4,vector,vector,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const vector,float,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'float(const vector,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const vector,vector,vector,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'vector(const vector,vector,vector,vector)'})
let c['noised'] = f
let f = []
let c['nop'] = f
let f = []
call add(f,{'word':'normal_bsdf','kind':'f','menu':'vector(const bsdf)'})
let c['normal_bsdf'] = f
let f = []
call add(f,{'word':'normalize','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'normalize','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'normalize','kind':'f','menu':'vector(const vector)'})
let c['normalize'] = f
let f = []
let c['not'] = f
let f = []
let c['notif'] = f
let f = []
call add(f,{'word':'npoints','kind':'f','menu':'int(const int)'})
call add(f,{'word':'npoints','kind':'f','menu':'int(const string)'})
let c['npoints'] = f
let f = []
call add(f,{'word':'npointsgroup','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'npointsgroup','kind':'f','menu':'int(const string,const string)'})
let c['npointsgroup'] = f
let f = []
call add(f,{'word':'nprimitives','kind':'f','menu':'int(const int)'})
call add(f,{'word':'nprimitives','kind':'f','menu':'int(const string)'})
let c['nprimitives'] = f
let f = []
call add(f,{'word':'nprimitivesgroup','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nprimitivesgroup','kind':'f','menu':'int(const string,const string)'})
let c['nprimitivesgroup'] = f
let f = []
call add(f,{'word':'nrandom','kind':'f','menu':'float()'})
call add(f,{'word':'nrandom','kind':'f','menu':'void(float,float)'})
call add(f,{'word':'nrandom','kind':'f','menu':'float(float)'})
call add(f,{'word':'nrandom','kind':'f','menu':'vector4()'})
call add(f,{'word':'nrandom','kind':'f','menu':'vector()'})
let c['nrandom'] = f
let f = []
call add(f,{'word':'ntransform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'ntransform','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'ntransform','kind':'f','menu':'vector(const vector,const matrix)'})
let c['ntransform'] = f
let f = []
call add(f,{'word':'nuniqueval','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'nuniqueval','kind':'f','menu':'int(const string,const string,const string)'})
let c['nuniqueval'] = f
let f = []
call add(f,{'word':'nvertices','kind':'f','menu':'int(const int)'})
call add(f,{'word':'nvertices','kind':'f','menu':'int(const string)'})
let c['nvertices'] = f
let f = []
call add(f,{'word':'nverticesgroup','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nverticesgroup','kind':'f','menu':'int(const string,const string)'})
let c['nverticesgroup'] = f
let f = []
call add(f,{'word':'occlusion','kind':'f','menu':'void(float,vector,const vector,const vector)'})
call add(f,{'word':'occlusion','kind':'f','menu':'float(vector,const vector,const vector)'})
call add(f,{'word':'occlusion','kind':'f','menu':'vector(const vector,const vector)'})
let c['occlusion'] = f
let f = []
call add(f,{'word':'ocean_sample','kind':'f','menu':'vector(const string,const int,const int,const int,const float,const float,const int,const int,const vector)'})
let c['ocean_sample'] = f
let f = []
call add(f,{'word':'ocio_activedisplays','kind':'f','menu':'string[]()'})
let c['ocio_activedisplays'] = f
let f = []
call add(f,{'word':'ocio_activeviews','kind':'f','menu':'string[]()'})
let c['ocio_activeviews'] = f
let f = []
call add(f,{'word':'ocio_import','kind':'f','menu':'int(const string,const string,int)'})
call add(f,{'word':'ocio_import','kind':'f','menu':'int(const string,const string,string)'})
call add(f,{'word':'ocio_import','kind':'f','menu':'int(const string,const string,vector)'})
let c['ocio_import'] = f
let f = []
call add(f,{'word':'ocio_roles','kind':'f','menu':'string[]()'})
let c['ocio_roles'] = f
let f = []
call add(f,{'word':'ocio_spaces','kind':'f','menu':'string[]()'})
let c['ocio_spaces'] = f
let f = []
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector4(const string,const vector4)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector4(const string,const string,const vector4)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector4(const string,const string,const string,const vector4)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector(const string,const string,const string,const vector)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector(const string,const vector)'})
let c['ocio_transform'] = f
let f = []
call add(f,{'word':'onoise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'onoise','kind':'f','menu':'float(const vector,const int,const float,const float)'})
call add(f,{'word':'onoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'onoise','kind':'f','menu':'float(const vector,const int,const int,const int,const int,const float,const float)'})
call add(f,{'word':'onoise','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'onoise','kind':'f','menu':'vector(const vector,const int,const float,const float)'})
call add(f,{'word':'onoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
call add(f,{'word':'onoise','kind':'f','menu':'vector(const vector,const int,const int,const int,const int,const float,const float)'})
let c['onoise'] = f
let f = []
call add(f,{'word':'opdigits','kind':'f','menu':'int()'})
call add(f,{'word':'opdigits','kind':'f','menu':'int(const string)'})
let c['opdigits'] = f
let f = []
call add(f,{'word':'opend','kind':'f','menu':'void(const int)'})
let c['opend'] = f
let f = []
call add(f,{'word':'opfullpath','kind':'f','menu':'string(const string)'})
let c['opfullpath'] = f
let f = []
call add(f,{'word':'opid','kind':'f','menu':'int(const int)'})
call add(f,{'word':'opid','kind':'f','menu':'int(const string)'})
let c['opid'] = f
let f = []
call add(f,{'word':'opparentbonetransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'opparentbonetransform','kind':'f','menu':'matrix(const string,const float)'})
let c['opparentbonetransform'] = f
let f = []
call add(f,{'word':'opparenttransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'opparenttransform','kind':'f','menu':'matrix(const string,const float)'})
let c['opparenttransform'] = f
let f = []
call add(f,{'word':'opparmtransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'opparmtransform','kind':'f','menu':'matrix(const string,const float)'})
let c['opparmtransform'] = f
let f = []
call add(f,{'word':'oppreconstrainttransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'oppreconstrainttransform','kind':'f','menu':'matrix(const string,const float)'})
let c['oppreconstrainttransform'] = f
let f = []
call add(f,{'word':'oppretransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'oppretransform','kind':'f','menu':'matrix(const string,const float)'})
let c['oppretransform'] = f
let f = []
call add(f,{'word':'opstart','kind':'f','menu':'int(const string)'})
let c['opstart'] = f
let f = []
call add(f,{'word':'optransform','kind':'f','menu':'matrix(const int)'})
call add(f,{'word':'optransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'optransform','kind':'f','menu':'matrix(const string,const float)'})
let c['optransform'] = f
let f = []
let c['or'] = f
let f = []
call add(f,{'word':'ord','kind':'f','menu':'int(const string)'})
let c['ord'] = f
let f = []
call add(f,{'word':'orthographic','kind':'f','menu':'matrix(const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'orthographic','kind':'f','menu':'matrix(const float,const float,const float,const float,const float,const float,const vector4)'})
let c['orthographic'] = f
let f = []
call add(f,{'word':'osd_facecount','kind':'f','menu':'int(const int)'})
call add(f,{'word':'osd_facecount','kind':'f','menu':'int(const string)'})
let c['osd_facecount'] = f
let f = []
call add(f,{'word':'osd_firstpatch','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'osd_firstpatch','kind':'f','menu':'int(const string,const int)'})
let c['osd_firstpatch'] = f
let f = []
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix2)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix3)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,float)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector4)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector2)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,float[])'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix2)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix3)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,float)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector4)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector2)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,float[])'})
let c['osd_limitsurface'] = f
let f = []
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix2)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix3)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,float)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector4)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector2)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,float[])'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix2)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix3)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,float)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector4)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector2)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,float[])'})
let c['osd_limitsurfacevertex'] = f
let f = []
call add(f,{'word':'osd_lookupface','kind':'f','menu':'int(const int,const int,const float,const float,int,float,float)'})
call add(f,{'word':'osd_lookupface','kind':'f','menu':'int(const int,const int,const float,const float,int,float,float,const string)'})
call add(f,{'word':'osd_lookupface','kind':'f','menu':'int(const string,const int,const float,const float,int,float,float)'})
call add(f,{'word':'osd_lookupface','kind':'f','menu':'int(const string,const int,const float,const float,int,float,float,const string)'})
let c['osd_lookupface'] = f
let f = []
call add(f,{'word':'osd_lookuppatch','kind':'f','menu':'int(const int,const int,const float,const float,int,float,float)'})
call add(f,{'word':'osd_lookuppatch','kind':'f','menu':'int(const int,const int,const float,const float,int,float,float,const string)'})
call add(f,{'word':'osd_lookuppatch','kind':'f','menu':'int(const string,const int,const float,const float,int,float,float)'})
call add(f,{'word':'osd_lookuppatch','kind':'f','menu':'int(const string,const int,const float,const float,int,float,float,const string)'})
let c['osd_lookuppatch'] = f
let f = []
call add(f,{'word':'osd_patchcount','kind':'f','menu':'int(const int)'})
call add(f,{'word':'osd_patchcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'osd_patchcount','kind':'f','menu':'int(const string)'})
call add(f,{'word':'osd_patchcount','kind':'f','menu':'int(const string,const int)'})
let c['osd_patchcount'] = f
let f = []
call add(f,{'word':'osd_patches','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'osd_patches','kind':'f','menu':'int[](const string,const int)'})
let c['osd_patches'] = f
let f = []
call add(f,{'word':'outerproduct','kind':'f','menu':'matrix2(const vector2,const vector2)'})
call add(f,{'word':'outerproduct','kind':'f','menu':'matrix3(const vector,const vector)'})
call add(f,{'word':'outerproduct','kind':'f','menu':'matrix(const vector4,const vector4)'})
let c['outerproduct'] = f
let f = []
call add(f,{'word':'ow_nspace','kind':'f','menu':'vector(const vector)'})
let c['ow_nspace'] = f
let f = []
call add(f,{'word':'ow_space','kind':'f','menu':'matrix()'})
call add(f,{'word':'ow_space','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'ow_space','kind':'f','menu':'vector(const vector)'})
let c['ow_space'] = f
let f = []
call add(f,{'word':'ow_vspace','kind':'f','menu':'vector(const vector)'})
let c['ow_vspace'] = f
let f = []
call add(f,{'word':'pack_inttosafefloat','kind':'f','menu':'float(const int)'})
let c['pack_inttosafefloat'] = f
let f = []
call add(f,{'word':'packedtransform','kind':'f','menu':'void(const int,const int,const matrix)'})
let c['packedtransform'] = f
let f = []
call add(f,{'word':'pathtrace','kind':'f','menu':'vector(const vector,const vector)'})
let c['pathtrace'] = f
let f = []
call add(f,{'word':'pcclose','kind':'f','menu':'void(export int)'})
let c['pcclose'] = f
let f = []
call add(f,{'word':'pcconvex','kind':'f','menu':'float(const int,const string,const vector)'})
let c['pcconvex'] = f
let f = []
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const vector,const float)'})
let c['pcexport'] = f
let f = []
call add(f,{'word':'pcfarthest','kind':'f','menu':'float(const int)'})
let c['pcfarthest'] = f
let f = []
call add(f,{'word':'pcfilter','kind':'f','menu':'matrix3(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'float(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'vector4(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'vector(const int,const string)'})
let c['pcfilter'] = f
let f = []
call add(f,{'word':'pcfind','kind':'f','menu':'int[](const int,const string,const string,const vector,const float,const int)'})
call add(f,{'word':'pcfind','kind':'f','menu':'int[](const int,const string,const vector,const float,const int)'})
call add(f,{'word':'pcfind','kind':'f','menu':'int[](const string,const string,const string,const vector,const float,const int)'})
call add(f,{'word':'pcfind','kind':'f','menu':'int[](const string,const string,const vector,const float,const int)'})
let c['pcfind'] = f
let f = []
call add(f,{'word':'pcfind_radius','kind':'f','menu':'int[](const int,const string,const string,const float,const vector,const float,const int)'})
call add(f,{'word':'pcfind_radius','kind':'f','menu':'int[](const int,const string,const string,const string,const float,const vector,const float,const int)'})
call add(f,{'word':'pcfind_radius','kind':'f','menu':'int[](const string,const string,const string,const float,const vector,const float,const int)'})
call add(f,{'word':'pcfind_radius','kind':'f','menu':'int[](const string,const string,const string,const string,const float,const vector,const float,const int)'})
let c['pcfind_radius'] = f
let f = []
call add(f,{'word':'pcgenerate','kind':'f','menu':'int(const string,const int)'})
let c['pcgenerate'] = f
let f = []
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,matrix3)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,matrix)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,float)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,int)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,vector4)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,string)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,vector)'})
let c['pcimport'] = f
let f = []
call add(f,{'word':'pcimportbyidx3','kind':'f','menu':'matrix3(const int,const string,const int)'})
let c['pcimportbyidx3'] = f
let f = []
call add(f,{'word':'pcimportbyidx4','kind':'f','menu':'matrix(const int,const string,const int)'})
let c['pcimportbyidx4'] = f
let f = []
call add(f,{'word':'pcimportbyidxf','kind':'f','menu':'float(const int,const string,const int)'})
let c['pcimportbyidxf'] = f
let f = []
call add(f,{'word':'pcimportbyidxi','kind':'f','menu':'int(const int,const string,const int)'})
let c['pcimportbyidxi'] = f
let f = []
call add(f,{'word':'pcimportbyidxp','kind':'f','menu':'vector4(const int,const string,const int)'})
let c['pcimportbyidxp'] = f
let f = []
call add(f,{'word':'pcimportbyidxs','kind':'f','menu':'string(const int,const string,const int)'})
let c['pcimportbyidxs'] = f
let f = []
call add(f,{'word':'pcimportbyidxv','kind':'f','menu':'vector(const int,const string,const int)'})
let c['pcimportbyidxv'] = f
let f = []
call add(f,{'word':'pciterate','kind':'f','menu':'int(const int)'})
let c['pciterate'] = f
let f = []
call add(f,{'word':'pcnumfound','kind':'f','menu':'int(const int)'})
let c['pcnumfound'] = f
let f = []
call add(f,{'word':'pcopen','kind':'f','menu':'int(const int,const string,const vector,const float,const int)'})
call add(f,{'word':'pcopen','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'pcopen','kind':'f','menu':'int(const string,const string,const vector,const float,const int)'})
call add(f,{'word':'pcopen','kind':'f','menu':'int(const string,const string,const vector,const string,const vector,const float,const int)'})
let c['pcopen'] = f
let f = []
call add(f,{'word':'pcopenlod','kind':'f','menu':'int(const string,const string,const vector,const int)'})
let c['pcopenlod'] = f
let f = []
call add(f,{'word':'pcsampleleaf','kind':'f','menu':'void(const int,const float)'})
let c['pcsampleleaf'] = f
let f = []
call add(f,{'word':'pcsize','kind':'f','menu':'int(const int)'})
let c['pcsize'] = f
let f = []
call add(f,{'word':'pcunshaded','kind':'f','menu':'int(const int,const string)'})
let c['pcunshaded'] = f
let f = []
call add(f,{'word':'pcwrite','kind':'f','menu':'int(const string)'})
let c['pcwrite'] = f
let f = []
call add(f,{'word':'perspective','kind':'f','menu':'matrix(const float,const float,const float,const float,const float)'})
call add(f,{'word':'perspective','kind':'f','menu':'matrix(const float,const float,const float,const float,const float,const vector4)'})
let c['perspective'] = f
let f = []
call add(f,{'word':'pgfind','kind':'f','menu':'int[](const int,const string,const vector,const float,const int,const float)'})
call add(f,{'word':'pgfind','kind':'f','menu':'int[](const int,const vector,const float,const int,const float)'})
call add(f,{'word':'pgfind','kind':'f','menu':'int[](const string,const string,const vector,const float,const int,const float)'})
call add(f,{'word':'pgfind','kind':'f','menu':'int[](const string,const vector,const float,const int,const float)'})
let c['pgfind'] = f
let f = []
call add(f,{'word':'phong','kind':'f','menu':'bsdf(const float)'})
call add(f,{'word':'phong','kind':'f','menu':'bsdf(const vector,const float)'})
call add(f,{'word':'phong','kind':'f','menu':'vector(const vector,const vector,const float)'})
let c['phong'] = f
let f = []
call add(f,{'word':'phongBRDF','kind':'f','menu':'float(const vector,const vector,const vector,const float)'})
let c['phongBRDF'] = f
let f = []
call add(f,{'word':'phonglobe','kind':'f','menu':'bsdf(const vector,const float,const float,const vector,const vector)'})
call add(f,{'word':'phonglobe','kind':'f','menu':'bsdf(const vector,const float)'})
call add(f,{'word':'phonglobe','kind':'f','menu':'bsdf(const vector,const vector,const float,const float,const vector,const vector)'})
call add(f,{'word':'phonglobe','kind':'f','menu':'bsdf(const vector,const vector,const float)'})
let c['phonglobe'] = f
let f = []
call add(f,{'word':'photonmap','kind':'f','menu':'vector(const string,const vector,const vector)'})
call add(f,{'word':'photonmap','kind':'f','menu':'void(const string,const vector,const vector,vector,float)'})
call add(f,{'word':'photonmap','kind':'f','menu':'vector(const string,const vector,const vector,float)'})
let c['photonmap'] = f
let f = []
call add(f,{'word':'planepointdistance','kind':'f','menu':'float(const vector,const vector,const vector,vector)'})
let c['planepointdistance'] = f
let f = []
call add(f,{'word':'planesphereintersect','kind':'f','menu':'int(const vector,const vector,const vector,const float,vector,float,float)'})
let c['planesphereintersect'] = f
let f = []
call add(f,{'word':'pluralize','kind':'f','menu':'string(const string)'})
let c['pluralize'] = f
let f = []
call add(f,{'word':'pnoise','kind':'f','menu':'float(const float,const float,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const float,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const vector4,const vector4)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const vector,const vector)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const float,const float,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const float,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const vector4,const vector4)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const vector,const vector)'})
let c['pnoise'] = f
let f = []
call add(f,{'word':'point','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector[](const string,const string,const int)'})
let c['point'] = f
let f = []
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix2(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix2(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix3(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix3(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'float(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'float(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'int(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'int(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector4(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector4(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'string(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'string(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector2(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector2(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix2[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix2[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix3[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix3[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'float[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'float[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'int[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'int[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector4[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector4[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'string[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'string[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector2[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector2[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector[](const string,const string,const int,int)'})
let c['pointattrib'] = f
let f = []
call add(f,{'word':'pointattribsize','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'pointattribsize','kind':'f','menu':'int(const string,const string)'})
let c['pointattribsize'] = f
let f = []
call add(f,{'word':'pointattribtype','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'pointattribtype','kind':'f','menu':'int(const string,const string)'})
let c['pointattribtype'] = f
let f = []
call add(f,{'word':'pointattribtypeinfo','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'pointattribtypeinfo','kind':'f','menu':'string(const string,const string)'})
let c['pointattribtypeinfo'] = f
let f = []
call add(f,{'word':'pointedge','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'pointedge','kind':'f','menu':'int(const string,const int,const int)'})
let c['pointedge'] = f
let f = []
call add(f,{'word':'pointhedge','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'pointhedge','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'pointhedge','kind':'f','menu':'int(const string,const int)'})
call add(f,{'word':'pointhedge','kind':'f','menu':'int(const string,const int,const int)'})
let c['pointhedge'] = f
let f = []
call add(f,{'word':'pointhedgenext','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'pointhedgenext','kind':'f','menu':'int(const string,const int)'})
let c['pointhedgenext'] = f
let f = []
call add(f,{'word':'pointprims','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'pointprims','kind':'f','menu':'int[](const string,const int)'})
let c['pointprims'] = f
let f = []
call add(f,{'word':'pointvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'pointvertex','kind':'f','menu':'int(const string,const int)'})
let c['pointvertex'] = f
let f = []
call add(f,{'word':'pointvertices','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'pointvertices','kind':'f','menu':'int[](const string,const int)'})
let c['pointvertices'] = f
let f = []
call add(f,{'word':'polardecomp','kind':'f','menu':'matrix3(const matrix3)'})
let c['polardecomp'] = f
let f = []
call add(f,{'word':'polyneighbours','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'polyneighbours','kind':'f','menu':'int[](const string,const int)'})
let c['polyneighbours'] = f
let f = []
call add(f,{'word':'pop','kind':'f','menu':'matrix2(export matrix2[])'})
call add(f,{'word':'pop','kind':'f','menu':'matrix2(export matrix2[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'matrix3(export matrix3[])'})
call add(f,{'word':'pop','kind':'f','menu':'matrix3(export matrix3[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'matrix(export matrix[])'})
call add(f,{'word':'pop','kind':'f','menu':'matrix(export matrix[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'bsdf(export bsdf[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'light(export light[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'material(export material[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'bsdf(export bsdf[])'})
call add(f,{'word':'pop','kind':'f','menu':'light(export light[])'})
call add(f,{'word':'pop','kind':'f','menu':'material(export material[])'})
call add(f,{'word':'pop','kind':'f','menu':'float(export float[])'})
call add(f,{'word':'pop','kind':'f','menu':'float(export float[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'int(export int[])'})
call add(f,{'word':'pop','kind':'f','menu':'int(export int[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'vector4(export vector4[])'})
call add(f,{'word':'pop','kind':'f','menu':'vector4(export vector4[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'string(export string[])'})
call add(f,{'word':'pop','kind':'f','menu':'string(export string[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'vector2(export vector2[])'})
call add(f,{'word':'pop','kind':'f','menu':'vector2(export vector2[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'vector(export vector[])'})
call add(f,{'word':'pop','kind':'f','menu':'vector(export vector[],const int)'})
let c['pop'] = f
let f = []
let c['popinline'] = f
let f = []
call add(f,{'word':'pow','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'pow','kind':'f','menu':'vector4(const vector4,const float)'})
call add(f,{'word':'pow','kind':'f','menu':'vector2(const vector2,const float)'})
call add(f,{'word':'pow','kind':'f','menu':'vector(const vector,const float)'})
let c['pow'] = f
let f = []
call add(f,{'word':'predicate_incircle','kind':'f','menu':'float(const vector2,const vector2,const vector2,const vector2)'})
let c['predicate_incircle'] = f
let f = []
call add(f,{'word':'predicate_insphere','kind':'f','menu':'float(const vector,const vector,const vector,const vector,const vector)'})
let c['predicate_insphere'] = f
let f = []
call add(f,{'word':'predicate_orient2d','kind':'f','menu':'float(const vector2,const vector2,const vector2)'})
let c['predicate_orient2d'] = f
let f = []
call add(f,{'word':'predicate_orient3d','kind':'f','menu':'float(const vector,const vector,const vector,const vector)'})
let c['predicate_orient3d'] = f
let f = []
call add(f,{'word':'prerotate','kind':'f','menu':'void(export matrix3,const float,const vector)'})
call add(f,{'word':'prerotate','kind':'f','menu':'void(export matrix3,const vector,const int)'})
call add(f,{'word':'prerotate','kind':'f','menu':'void(export matrix,const float,const vector)'})
call add(f,{'word':'prerotate','kind':'f','menu':'void(export matrix,const vector,const int)'})
let c['prerotate'] = f
let f = []
call add(f,{'word':'prescale','kind':'f','menu':'void(export matrix3,const vector)'})
call add(f,{'word':'prescale','kind':'f','menu':'void(export matrix,const vector)'})
let c['prescale'] = f
let f = []
call add(f,{'word':'pretranslate','kind':'f','menu':'void(export matrix,const vector)'})
let c['pretranslate'] = f
let f = []
call add(f,{'word':'prim','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector[](const string,const string,const int)'})
let c['prim'] = f
let f = []
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix2,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix3,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix3,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,float,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,float,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,int,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,int,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector4,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector4,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector2,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix2[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix3[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,float[],const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,float[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,int[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector4[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector2[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector[],const string,const int,const vector)'})
let c['prim_attribute'] = f
let f = []
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const int,const int,const float,const float)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const int,const int,const float,const float,const float)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const string,const int,const float,const float)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const string,const int,const float,const float,const float)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const string,const int,const vector)'})
let c['prim_normal'] = f
let f = []
call add(f,{'word':'primarclen','kind':'f','menu':'float(const string,const vector2,const vector2,const int)'})
call add(f,{'word':'primarclen','kind':'f','menu':'float(const string,const vector2,const vector2,const int,const int)'})
let c['primarclen'] = f
let f = []
call add(f,{'word':'primattrib','kind':'f','menu':'matrix2(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix2(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix3(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix3(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'float(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'float(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'int(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'int(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector4(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector4(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'string(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'string(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector2(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector2(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix2[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix2[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix3[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix3[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'float[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'float[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'int[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'int[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector4[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector4[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'string[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'string[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector2[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector2[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector[](const string,const string,const int,int)'})
let c['primattrib'] = f
let f = []
call add(f,{'word':'primattribsize','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'primattribsize','kind':'f','menu':'int(const string,const string)'})
let c['primattribsize'] = f
let f = []
call add(f,{'word':'primattribtype','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'primattribtype','kind':'f','menu':'int(const string,const string)'})
let c['primattribtype'] = f
let f = []
call add(f,{'word':'primattribtypeinfo','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'primattribtypeinfo','kind':'f','menu':'string(const string,const string)'})
let c['primattribtypeinfo'] = f
let f = []
call add(f,{'word':'primduv','kind':'f','menu':'vector(const string,const int,const vector2,const int,const int)'})
let c['primduv'] = f
let f = []
call add(f,{'word':'primfind','kind':'f','menu':'int[](const int,const string,const vector,const vector)'})
call add(f,{'word':'primfind','kind':'f','menu':'int[](const int,const vector,const vector)'})
call add(f,{'word':'primfind','kind':'f','menu':'int[](const string,const string,const vector,const vector)'})
call add(f,{'word':'primfind','kind':'f','menu':'int[](const string,const vector,const vector)'})
let c['primfind'] = f
let f = []
call add(f,{'word':'primhedge','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'primhedge','kind':'f','menu':'int(const string,const int)'})
let c['primhedge'] = f
let f = []
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector[](const string,const string,const int)'})
let c['primintrinsic'] = f
let f = []
call add(f,{'word':'primpoint','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'primpoint','kind':'f','menu':'int(const string,const int,const int)'})
let c['primpoint'] = f
let f = []
call add(f,{'word':'primpoints','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'primpoints','kind':'f','menu':'int[](const string,const int)'})
let c['primpoints'] = f
let f = []
call add(f,{'word':'primuv','kind':'f','menu':'matrix2(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix2(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix3(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix3(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'float(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'float(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'int(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'int(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector4(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector4(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector2(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector2(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix2[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix2[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix3[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix3[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'float[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'float[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'int[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'int[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector4[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector4[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector2[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector2[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector[](const string,const string,const int,const vector)'})
let c['primuv'] = f
let f = []
call add(f,{'word':'primuvconvert','kind':'f','menu':'vector2(const string,const vector2,const int,const int)'})
call add(f,{'word':'primuvconvert','kind':'f','menu':'vector2(const string,const vector2,const int,const int,const float)'})
let c['primuvconvert'] = f
let f = []
call add(f,{'word':'primvertex','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'primvertex','kind':'f','menu':'int(const string,const int,const int)'})
let c['primvertex'] = f
let f = []
call add(f,{'word':'primvertexcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'primvertexcount','kind':'f','menu':'int(const string,const int)'})
let c['primvertexcount'] = f
let f = []
call add(f,{'word':'primvertices','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'primvertices','kind':'f','menu':'int[](const string,const int)'})
let c['primvertices'] = f
let f = []
call add(f,{'word':'print_once','kind':'f','menu':'void(const string)'})
let c['print_once'] = f
let f = []
call add(f,{'word':'printf','kind':'f','menu':'void(const string)'})
let c['printf'] = f
let f = []
call add(f,{'word':'product','kind':'f','menu':'float(const float)'})
call add(f,{'word':'product','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'product','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'product','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'product','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'product','kind':'f','menu':'int(const int)'})
call add(f,{'word':'product','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'product','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'product','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'product','kind':'f','menu':'vector(const vector[])'})
let c['product'] = f
let f = []
call add(f,{'word':'ptexture','kind':'f','menu':'matrix3(const string,const int)'})
call add(f,{'word':'ptexture','kind':'f','menu':'matrix3(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'matrix3(const string,const int,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'matrix(const string,const int)'})
call add(f,{'word':'ptexture','kind':'f','menu':'matrix(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'matrix(const string,const int,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'float(const string,const int)'})
call add(f,{'word':'ptexture','kind':'f','menu':'float(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'float(const string,const int,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector4(const string,const int)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector4(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector4(const string,const int,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector(const string,const int)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector(const string,const int,const float,const float,const float,const float,const float,const float)'})
let c['ptexture'] = f
let f = []
call add(f,{'word':'ptlined','kind':'f','menu':'float(const vector,const vector,const vector)'})
let c['ptlined'] = f
let f = []
call add(f,{'word':'ptransform','kind':'f','menu':'vector4(const vector4,const matrix)'})
call add(f,{'word':'ptransform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'ptransform','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'ptransform','kind':'f','menu':'vector(const vector,const matrix)'})
let c['ptransform'] = f
let f = []
call add(f,{'word':'push','kind':'f','menu':'void(export matrix2[],const matrix2)'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix2[],const matrix2[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix3[],const matrix3)'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix3[],const matrix3[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix[],const matrix)'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix[],const matrix[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export bsdf[],const bsdf)'})
call add(f,{'word':'push','kind':'f','menu':'void(export light[],const light)'})
call add(f,{'word':'push','kind':'f','menu':'void(export material[],const material)'})
call add(f,{'word':'push','kind':'f','menu':'void(export bsdf[],const bsdf[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export light[],const light[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export material[],const material[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export float[],const float)'})
call add(f,{'word':'push','kind':'f','menu':'void(export float[],const float[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export int[],const int)'})
call add(f,{'word':'push','kind':'f','menu':'void(export int[],const int[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector4[],const vector4)'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector4[],const vector4[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export string[],const string)'})
call add(f,{'word':'push','kind':'f','menu':'void(export string[],const string[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector2[],const vector2)'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector2[],const vector2[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector[],const vector)'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector[],const vector[])'})
let c['push'] = f
let f = []
let c['pushinline'] = f
let f = []
call add(f,{'word':'pxnoise','kind':'f','menu':'float(const float,const float,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'float(const float,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'float(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'vector(const float,const float,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'vector(const float,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'vector(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
let c['pxnoise'] = f
let f = []
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const float,const float,const int,const int,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'float(const float,const float,const int,const int,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const float,const float,const int,const int,vector,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'vector(const float,const float,const int,const int,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const float,const int,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'float(const float,const int,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const float,const int,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'vector(const float,const int,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const vector4,const int,const int,const int,const int,float,float,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'float(const vector4,const int,const int,const int,const int,float,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const vector4,const int,const int,const int,const int,vector,vector,vector,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'vector(const vector4,const int,const int,const int,const int,vector,vector,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const vector,const int,const int,const int,float,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'float(const vector,const int,const int,const int,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const vector,const int,const int,const int,vector,vector,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'vector(const vector,const int,const int,const int,vector,vector,vector)'})
let c['pxnoised'] = f
let f = []
call add(f,{'word':'qconvert','kind':'f','menu':'matrix3(const vector4)'})
call add(f,{'word':'qconvert','kind':'f','menu':'vector(const vector4)'})
let c['qconvert'] = f
let f = []
call add(f,{'word':'qdistance','kind':'f','menu':'float(const vector4,const vector4)'})
let c['qdistance'] = f
let f = []
call add(f,{'word':'qinvert','kind':'f','menu':'vector4(const vector4)'})
let c['qinvert'] = f
let f = []
call add(f,{'word':'qmultiply','kind':'f','menu':'vector4(const vector4,const vector4)'})
let c['qmultiply'] = f
let f = []
call add(f,{'word':'qrotate','kind':'f','menu':'vector(const vector4,const vector)'})
let c['qrotate'] = f
let f = []
call add(f,{'word':'quaternion','kind':'f','menu':'vector4(const matrix3)'})
call add(f,{'word':'quaternion','kind':'f','menu':'vector4(const float,const vector)'})
call add(f,{'word':'quaternion','kind':'f','menu':'vector4(const vector)'})
let c['quaternion'] = f
let f = []
call add(f,{'word':'quaterniontoeuler','kind':'f','menu':'vector(const vector4,const int)'})
let c['quaterniontoeuler'] = f
let f = []
call add(f,{'word':'radians','kind':'f','menu':'float(const float)'})
call add(f,{'word':'radians','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'radians','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'radians','kind':'f','menu':'vector(const vector)'})
let c['radians'] = f
let f = []
call add(f,{'word':'rand','kind':'f','menu':'float(const float)'})
call add(f,{'word':'rand','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'rand','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'rand','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'rand','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const float,const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const vector2)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const vector)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const float,const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const vector4)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const vector)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const vector2)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const vector)'})
let c['rand'] = f
let f = []
call add(f,{'word':'random','kind':'f','menu':'float(const float)'})
call add(f,{'word':'random','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'random','kind':'f','menu':'float(const int)'})
call add(f,{'word':'random','kind':'f','menu':'float(const int,const int)'})
call add(f,{'word':'random','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'random','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const float,const float)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const int,const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const vector)'})
call add(f,{'word':'random','kind':'f','menu':'vector2(const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const vector)'})
let c['random'] = f
let f = []
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const float)'})
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const float,const float)'})
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const vector4)'})
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const vector2)'})
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const vector)'})
let c['random_fhash'] = f
let f = []
let c['random_hash'] = f
let f = []
call add(f,{'word':'random_ihash','kind':'f','menu':'int(const int)'})
let c['random_ihash'] = f
let f = []
call add(f,{'word':'random_poisson','kind':'f','menu':'int(const int,const float)'})
call add(f,{'word':'random_poisson','kind':'f','menu':'int(const int,const float,const int,const int)'})
let c['random_poisson'] = f
let f = []
call add(f,{'word':'random_shash','kind':'f','menu':'int(const string)'})
let c['random_shash'] = f
let f = []
call add(f,{'word':'random_sobol','kind':'f','menu':'float(const float,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'float(const int,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'float(const vector4,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'float(const vector,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector4(const float,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector4(const int,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector4(const vector4,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector4(const vector,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector(const float,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector(const vector4,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector(const vector,const int)'})
let c['random_sobol'] = f
let f = []
call add(f,{'word':'randomf','kind':'f','menu':'float(const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'randomf','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector4(const float,const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector4(const vector)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector(const vector)'})
let c['randomf'] = f
let f = []
call add(f,{'word':'rawbumpmap','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmap','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmap','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmap','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmap'] = f
let f = []
call add(f,{'word':'rawbumpmapA','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapA','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapA','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapA','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapA'] = f
let f = []
call add(f,{'word':'rawbumpmapB','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapB','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapB','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapB','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapB'] = f
let f = []
call add(f,{'word':'rawbumpmapG','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapG','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapG','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapG','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapG'] = f
let f = []
call add(f,{'word':'rawbumpmapL','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapL','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapL','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapL','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapL'] = f
let f = []
call add(f,{'word':'rawbumpmapR','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapR','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapR','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapR','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapR'] = f
let f = []
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const float,const float)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const float,const float,const float,const float,const float,const float,const float,const float,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const vector)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const float,const float)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const float,const float,const float,const float,const float,const float,const float,const float,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector,const int)'})
let c['rawcolormap'] = f
let f = []
call add(f,{'word':'rayhittest','kind':'f','menu':'float(const vector,const vector,const float)'})
call add(f,{'word':'rayhittest','kind':'f','menu':'float(const vector,const vector,vector,vector,const float)'})
let c['rayhittest'] = f
let f = []
call add(f,{'word':'rayimport','kind':'f','menu':'int(const string,export matrix2)'})
call add(f,{'word':'rayimport','kind':'f','menu':'int(const string,export matrix3)'})
call add(f,{'word':'rayimport','kind':'f','menu':'int(const string,export matrix)'})
call add(f,{'word':'rayimport','kind':'f','menu':'int(const string,export float)'})
call add(f,{'word':'rayimport','kind':'f','menu':'int(const string,export int)'})
call add(f,{'word':'rayimport','kind':'f','menu':'int(const string,export vector4)'})
call add(f,{'word':'rayimport','kind':'f','menu':'int(const string,export string)'})
call add(f,{'word':'rayimport','kind':'f','menu':'int(const string,export vector2)'})
call add(f,{'word':'rayimport','kind':'f','menu':'int(const string,export vector)'})
let c['rayimport'] = f
let f = []
call add(f,{'word':'re_find','kind':'f','menu':'int(const string,const string)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(const string,const string,const int,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(int[],int[],const string,const string)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(int[],int[],const string,const string,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(int[],int[],const string,const string,const int,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'string(const string,const string)'})
call add(f,{'word':'re_find','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'string(const string,const string,const int,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'re_find','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'string[](const string,const string,const int,const int)'})
let c['re_find'] = f
let f = []
call add(f,{'word':'re_findall','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'re_findall','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'re_findall','kind':'f','menu':'string[](const string,const string,const int,const int)'})
let c['re_findall'] = f
let f = []
call add(f,{'word':'re_match','kind':'f','menu':'int(const string,const string)'})
let c['re_match'] = f
let f = []
call add(f,{'word':'re_replace','kind':'f','menu':'string(const string,const string,const string)'})
call add(f,{'word':'re_replace','kind':'f','menu':'string(const string,const string,const string,const int)'})
let c['re_replace'] = f
let f = []
call add(f,{'word':'re_split','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'re_split','kind':'f','menu':'string[](const string,const string,const int)'})
let c['re_split'] = f
let f = []
call add(f,{'word':'reflect','kind':'f','menu':'vector(const vector,const vector)'})
let c['reflect'] = f
let f = []
call add(f,{'word':'reflectlight','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'reflectlight','kind':'f','menu':'vector(const vector,const vector,const float,const float)'})
call add(f,{'word':'reflectlight','kind':'f','menu':'vector(const vector,const vector,const vector,const float,const float)'})
let c['reflectlight'] = f
let f = []
call add(f,{'word':'refract','kind':'f','menu':'vector(const vector,const vector,const float)'})
let c['refract'] = f
let f = []
call add(f,{'word':'refractlight','kind':'f','menu':'void(vector,vector,float,const vector,const vector,const float,const float)'})
call add(f,{'word':'refractlight','kind':'f','menu':'vector(vector,float,const vector,const vector,const float,const float)'})
call add(f,{'word':'refractlight','kind':'f','menu':'void(vector,vector,float,const vector,const vector,const vector,const float,const float,const float)'})
call add(f,{'word':'refractlight','kind':'f','menu':'vector(vector,float,const vector,const vector,const vector,const float,const float,const float)'})
let c['refractlight'] = f
let f = []
call add(f,{'word':'relativepath','kind':'f','menu':'string(const string,const string)'})
let c['relativepath'] = f
let f = []
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const int,const vector)'})
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const vector)'})
let c['relbbox'] = f
let f = []
call add(f,{'word':'relpointbbox','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'relpointbbox','kind':'f','menu':'vector(const int,const vector)'})
call add(f,{'word':'relpointbbox','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'relpointbbox','kind':'f','menu':'vector(const string,const vector)'})
let c['relpointbbox'] = f
let f = []
call add(f,{'word':'removeindex','kind':'f','menu':'matrix2(export matrix2[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'matrix3(export matrix3[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'matrix(export matrix[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'float(export float[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'int(export int[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'vector4(export vector4[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'string(export string[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'vector2(export vector2[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'vector(export vector[],const int)'})
let c['removeindex'] = f
let f = []
call add(f,{'word':'removepoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'removepoint','kind':'f','menu':'int(const int,const int,const int)'})
let c['removepoint'] = f
let f = []
call add(f,{'word':'removeprim','kind':'f','menu':'int(const int,const int,const int)'})
let c['removeprim'] = f
let f = []
call add(f,{'word':'removevalue','kind':'f','menu':'int(export matrix2[],const matrix2)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export matrix3[],const matrix3)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export matrix[],const matrix)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export float[],const float)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export int[],const int)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export vector4[],const vector4)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export string[],const string)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export vector2[],const vector2)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export vector[],const vector)'})
let c['removevalue'] = f
let f = []
call add(f,{'word':'renderstate','kind':'f','menu':'int(const material,const string,export matrix3)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const material,const string,export matrix)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const material,const string,export float)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const material,const string,export int)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const material,const string,export vector4)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const material,const string,export string)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const material,const string,export vector)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const string,export matrix3)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const string,export matrix)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const string,export float)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const string,export int)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const string,export vector4)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const string,export string)'})
call add(f,{'word':'renderstate','kind':'f','menu':'int(const string,export vector)'})
let c['renderstate'] = f
let f = []
call add(f,{'word':'reorder','kind':'f','menu':'string(const string,const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'matrix2[](const matrix2[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'matrix3[](const matrix3[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'matrix[](const matrix[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'float[](const float[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'int[](const int[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'vector4[](const vector4[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'string[](const string[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'vector2[](const vector2[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'vector[](const vector[],const int[])'})
let c['reorder'] = f
let f = []
call add(f,{'word':'resample_linear','kind':'f','menu':'float[](const float[],const int)'})
call add(f,{'word':'resample_linear','kind':'f','menu':'vector4[](const vector4[],const int)'})
call add(f,{'word':'resample_linear','kind':'f','menu':'vector2[](const vector2[],const int)'})
call add(f,{'word':'resample_linear','kind':'f','menu':'vector[](const vector[],const int)'})
let c['resample_linear'] = f
let f = []
call add(f,{'word':'resize','kind':'f','menu':'void(export matrix2[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export matrix3[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export matrix[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export bsdf[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export light[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export material[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export float[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export int[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export vector4[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export string[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export vector2[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export vector[],const int)'})
let c['resize'] = f
let f = []
call add(f,{'word':'resolvemissedray','kind':'f','menu':'vector(const vector,const float,const int)'})
let c['resolvemissedray'] = f
let f = []
let c['returninline'] = f
let f = []
call add(f,{'word':'reverse','kind':'f','menu':'string(const string)'})
call add(f,{'word':'reverse','kind':'f','menu':'matrix2[](const matrix2[])'})
call add(f,{'word':'reverse','kind':'f','menu':'matrix3[](const matrix3[])'})
call add(f,{'word':'reverse','kind':'f','menu':'matrix[](const matrix[])'})
call add(f,{'word':'reverse','kind':'f','menu':'float[](const float[])'})
call add(f,{'word':'reverse','kind':'f','menu':'int[](const int[])'})
call add(f,{'word':'reverse','kind':'f','menu':'vector4[](const vector4[])'})
call add(f,{'word':'reverse','kind':'f','menu':'string[](const string[])'})
call add(f,{'word':'reverse','kind':'f','menu':'vector2[](const vector2[])'})
call add(f,{'word':'reverse','kind':'f','menu':'vector[](const vector[])'})
let c['reverse'] = f
let f = []
call add(f,{'word':'rgbtohsv','kind':'f','menu':'vector(const float,const float,const float)'})
call add(f,{'word':'rgbtohsv','kind':'f','menu':'vector(const vector)'})
let c['rgbtohsv'] = f
let f = []
call add(f,{'word':'rgbtoxyz','kind':'f','menu':'vector(const vector)'})
let c['rgbtoxyz'] = f
let f = []
call add(f,{'word':'rint','kind':'f','menu':'float(const float)'})
call add(f,{'word':'rint','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'rint','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'rint','kind':'f','menu':'vector(const vector)'})
let c['rint'] = f
let f = []
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix2,const float)'})
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix3,const float,const vector)'})
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix3,const vector,const int)'})
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix,const float,const vector)'})
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix,const vector,const int)'})
let c['rotate'] = f
let f = []
call add(f,{'word':'rotate_x_to','kind':'f','menu':'vector4(const vector4,const vector4)'})
call add(f,{'word':'rotate_x_to','kind':'f','menu':'vector2(const vector2,const vector2)'})
call add(f,{'word':'rotate_x_to','kind':'f','menu':'vector(const vector,const vector)'})
let c['rotate_x_to'] = f
let f = []
call add(f,{'word':'rstrip','kind':'f','menu':'string(const string)'})
call add(f,{'word':'rstrip','kind':'f','menu':'string(const string,const string)'})
let c['rstrip'] = f
let f = []
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,const vector,int,vector,vector,float,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'int(const bsdf,const vector,const vector,vector,vector,float,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,vector,vector,float,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'vector(const bsdf,const vector,vector,float,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,vector,vector,float,int,const float,const float)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'vector(const bsdf,const vector,vector,float,int,const float,const float)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,vector,vector,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'vector(const bsdf,const vector,vector,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,vector,vector,int,const float,const float)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'vector(const bsdf,const vector,vector,int,const float,const float)'})
let c['sample_bsdf'] = f
let f = []
call add(f,{'word':'sample_cauchy','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'float(const float,const float,const float,const float)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'vector2(const float,const vector2)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'vector(const vector)'})
let c['sample_cauchy'] = f
let f = []
call add(f,{'word':'sample_cdf','kind':'f','menu':'int(const float[],const float)'})
call add(f,{'word':'sample_cdf','kind':'f','menu':'void(const float[],const float,int,float)'})
call add(f,{'word':'sample_cdf','kind':'f','menu':'int(const float[],const float,float)'})
call add(f,{'word':'sample_cdf','kind':'f','menu':'void(const float[],const float,int,float,float)'})
call add(f,{'word':'sample_cdf','kind':'f','menu':'int(const float[],const float,float,float)'})
let c['sample_cdf'] = f
let f = []
call add(f,{'word':'sample_circle_arc','kind':'f','menu':'vector2(const vector2,const float,const float)'})
let c['sample_circle_arc'] = f
let f = []
call add(f,{'word':'sample_circle_edge_uniform','kind':'f','menu':'vector2(const float)'})
let c['sample_circle_edge_uniform'] = f
let f = []
call add(f,{'word':'sample_circle_ring_uniform','kind':'f','menu':'vector2(const vector2,const float)'})
let c['sample_circle_ring_uniform'] = f
let f = []
call add(f,{'word':'sample_circle_slice','kind':'f','menu':'vector2(const vector2,const float,const vector2)'})
let c['sample_circle_slice'] = f
let f = []
call add(f,{'word':'sample_circle_uniform','kind':'f','menu':'vector2(const vector2)'})
let c['sample_circle_uniform'] = f
let f = []
call add(f,{'word':'sample_direction_cone','kind':'f','menu':'vector(const vector,const float,const vector2)'})
let c['sample_direction_cone'] = f
let f = []
call add(f,{'word':'sample_direction_uniform','kind':'f','menu':'vector(const vector2)'})
let c['sample_direction_uniform'] = f
let f = []
call add(f,{'word':'sample_discrete','kind':'f','menu':'int(const int,const float)'})
call add(f,{'word':'sample_discrete','kind':'f','menu':'int(const float[],const float)'})
let c['sample_discrete'] = f
let f = []
call add(f,{'word':'sample_exponential','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sample_exponential','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'sample_exponential','kind':'f','menu':'float(const float,const float,const float)'})
let c['sample_exponential'] = f
let f = []
call add(f,{'word':'sample_geometry','kind':'f','menu':'int(const vector,const vector,const float)'})
let c['sample_geometry'] = f
let f = []
call add(f,{'word':'sample_hemisphere','kind':'f','menu':'vector(const float,const vector2)'})
call add(f,{'word':'sample_hemisphere','kind':'f','menu':'vector(const vector2)'})
call add(f,{'word':'sample_hemisphere','kind':'f','menu':'vector(const vector,const float,const vector2)'})
call add(f,{'word':'sample_hemisphere','kind':'f','menu':'vector(const vector,const vector2)'})
let c['sample_hemisphere'] = f
let f = []
call add(f,{'word':'sample_hypersphere_cone','kind':'f','menu':'vector4(const vector4,const float,const vector4)'})
let c['sample_hypersphere_cone'] = f
let f = []
call add(f,{'word':'sample_hypersphere_uniform','kind':'f','menu':'vector4(const vector4)'})
let c['sample_hypersphere_uniform'] = f
let f = []
call add(f,{'word':'sample_light','kind':'f','menu':'int(const int,const vector,const vector,const float,vector,vector,float)'})
let c['sample_light'] = f
let f = []
call add(f,{'word':'sample_lognormal','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'sample_lognormal','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
let c['sample_lognormal'] = f
let f = []
call add(f,{'word':'sample_lognormal_by_median','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'sample_lognormal_by_median','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
let c['sample_lognormal_by_median'] = f
let f = []
call add(f,{'word':'sample_normal','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'vector(const vector)'})
let c['sample_normal'] = f
let f = []
call add(f,{'word':'sample_orientation_cone','kind':'f','menu':'vector4(const vector4,const float,const vector)'})
let c['sample_orientation_cone'] = f
let f = []
call add(f,{'word':'sample_orientation_uniform','kind':'f','menu':'vector4(const vector)'})
let c['sample_orientation_uniform'] = f
let f = []
call add(f,{'word':'sample_photon','kind':'f','menu':'int(const light,vector,vector,float,const float)'})
let c['sample_photon'] = f
let f = []
call add(f,{'word':'sample_sphere_cone','kind':'f','menu':'vector(const vector,const float,const vector)'})
let c['sample_sphere_cone'] = f
let f = []
call add(f,{'word':'sample_sphere_shell_uniform','kind':'f','menu':'vector(const vector,const float)'})
let c['sample_sphere_shell_uniform'] = f
let f = []
call add(f,{'word':'sample_sphere_uniform','kind':'f','menu':'vector(const vector)'})
let c['sample_sphere_uniform'] = f
let f = []
call add(f,{'word':'sampledisk','kind':'f','menu':'void(float,float,const float,const float)'})
call add(f,{'word':'sampledisk','kind':'f','menu':'float(float,const float,const float)'})
let c['sampledisk'] = f
let f = []
call add(f,{'word':'scale','kind':'f','menu':'void(export matrix2,const vector2)'})
call add(f,{'word':'scale','kind':'f','menu':'void(export matrix3,const vector)'})
call add(f,{'word':'scale','kind':'f','menu':'void(export matrix,const vector)'})
let c['scale'] = f
let f = []
call add(f,{'word':'scatter','kind':'f','menu':'int(const vector,const vector,const vector,const vector,const float,const float,vector,vector,vector)'})
let c['scatter'] = f
let f = []
call add(f,{'word':'select','kind':'f','menu':'matrix2(const int,const matrix2,const matrix2)'})
call add(f,{'word':'select','kind':'f','menu':'matrix3(const int,const matrix3,const matrix3)'})
call add(f,{'word':'select','kind':'f','menu':'matrix(const int,const matrix,const matrix)'})
call add(f,{'word':'select','kind':'f','menu':'bsdf(const int,const bsdf,const bsdf)'})
call add(f,{'word':'select','kind':'f','menu':'light(const int,const light,const light)'})
call add(f,{'word':'select','kind':'f','menu':'material(const int,const material,const material)'})
call add(f,{'word':'select','kind':'f','menu':'float(const int,const float,const float)'})
call add(f,{'word':'select','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'select','kind':'f','menu':'vector4(const int,const vector4,const vector4)'})
call add(f,{'word':'select','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'select','kind':'f','menu':'vector2(const int,const vector2,const vector2)'})
call add(f,{'word':'select','kind':'f','menu':'vector(const int,const vector,const vector)'})
call add(f,{'word':'select','kind':'f','menu':'matrix2[](const int,const matrix2[],const matrix2[])'})
call add(f,{'word':'select','kind':'f','menu':'matrix3[](const int,const matrix3[],const matrix3[])'})
call add(f,{'word':'select','kind':'f','menu':'matrix[](const int,const matrix[],const matrix[])'})
call add(f,{'word':'select','kind':'f','menu':'bsdf[](const int,const bsdf[],const bsdf[])'})
call add(f,{'word':'select','kind':'f','menu':'light[](const int,const light[],const light[])'})
call add(f,{'word':'select','kind':'f','menu':'material[](const int,const material[],const material[])'})
call add(f,{'word':'select','kind':'f','menu':'float[](const int,const float[],const float[])'})
call add(f,{'word':'select','kind':'f','menu':'int[](const int,const int[],const int[])'})
call add(f,{'word':'select','kind':'f','menu':'vector4[](const int,const vector4[],const vector4[])'})
call add(f,{'word':'select','kind':'f','menu':'string[](const int,const string[],const string[])'})
call add(f,{'word':'select','kind':'f','menu':'vector2[](const int,const vector2[],const vector2[])'})
call add(f,{'word':'select','kind':'f','menu':'vector[](const int,const vector[],const vector[])'})
let c['select'] = f
let f = []
call add(f,{'word':'sensor_panorama_create','kind':'f','menu':'int(const float,const vector,const int,const float,const float,const string,const string,const string,const int)'})
let c['sensor_panorama_create'] = f
let f = []
call add(f,{'word':'sensor_panorama_getcolor','kind':'f','menu':'vector(const int,const vector)'})
let c['sensor_panorama_getcolor'] = f
let f = []
call add(f,{'word':'sensor_panorama_getcone','kind':'f','menu':'void(const int,const vector,const float,const vector,const vector,const float,const float,float,vector,vector,float)'})
call add(f,{'word':'sensor_panorama_getcone','kind':'f','menu':'float(const int,const vector,const float,const vector,const vector,const float,const float,vector,vector,float)'})
let c['sensor_panorama_getcone'] = f
let f = []
call add(f,{'word':'sensor_panorama_getdepth','kind':'f','menu':'float(const int,const vector)'})
let c['sensor_panorama_getdepth'] = f
let f = []
call add(f,{'word':'sensor_save','kind':'f','menu':'int(const int,const string,const string)'})
let c['sensor_save'] = f
let f = []
call add(f,{'word':'serialize','kind':'f','menu':'float[](const matrix2[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const matrix3[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const matrix[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const vector4[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const vector2[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const vector[])'})
let c['serialize'] = f
let f = []
call add(f,{'word':'set','kind':'f','menu':'matrix2(const matrix2)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const float,const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const int)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const vector2,const vector2)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const matrix2)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const float,const float,const float,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const int)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const vector,const vector,const vector)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const vector[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const matrix2)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const int)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const vector4,const vector4,const vector4,const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const vector4[])'})
call add(f,{'word':'set','kind':'f','menu':'bsdf(const bsdf)'})
call add(f,{'word':'set','kind':'f','menu':'light(const light)'})
call add(f,{'word':'set','kind':'f','menu':'material(const material)'})
call add(f,{'word':'set','kind':'f','menu':'float(const float)'})
call add(f,{'word':'set','kind':'f','menu':'float(const int)'})
call add(f,{'word':'set','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'set','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'int(const float)'})
call add(f,{'word':'set','kind':'f','menu':'int(const int)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const float,const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const int)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const vector2)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const vector)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'string(const string)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const int)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const vector)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const vector2)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix2[](const matrix2[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix2[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix3[](const matrix3[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix3[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix[](const matrix[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'bsdf[](const bsdf[])'})
call add(f,{'word':'set','kind':'f','menu':'light[](const light[])'})
call add(f,{'word':'set','kind':'f','menu':'material[](const material[])'})
call add(f,{'word':'set','kind':'f','menu':'float[](const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const float)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const vector)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'float[](const int[])'})
call add(f,{'word':'set','kind':'f','menu':'int[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'int[](const int[])'})
call add(f,{'word':'set','kind':'f','menu':'vector4[](const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'vector4[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'vector4[](const vector4[])'})
call add(f,{'word':'set','kind':'f','menu':'string[](const string[])'})
call add(f,{'word':'set','kind':'f','menu':'vector2[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'vector2[](const vector2[])'})
call add(f,{'word':'set','kind':'f','menu':'vector[](const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'vector[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'vector[](const vector[])'})
let c['set'] = f
let f = []
call add(f,{'word':'setagentclipnames','kind':'f','menu':'void(const int,const int,const string[])'})
let c['setagentclipnames'] = f
let f = []
call add(f,{'word':'setagentclips','kind':'f','menu':'int(const int,const int,const string[],const float[],const float[],const string[],const int[],const int[],const float[],const int[])'})
let c['setagentclips'] = f
let f = []
call add(f,{'word':'setagentcliptimes','kind':'f','menu':'void(const int,const int,const float[])'})
let c['setagentcliptimes'] = f
let f = []
call add(f,{'word':'setagentclipweights','kind':'f','menu':'void(const int,const int,const float[])'})
let c['setagentclipweights'] = f
let f = []
call add(f,{'word':'setagentcollisionlayer','kind':'f','menu':'void(const int,const int,const string)'})
let c['setagentcollisionlayer'] = f
let f = []
call add(f,{'word':'setagentcurrentlayer','kind':'f','menu':'void(const int,const int,const string)'})
let c['setagentcurrentlayer'] = f
let f = []
call add(f,{'word':'setagentlocaltransform','kind':'f','menu':'int(const int,const int,const matrix,const int)'})
let c['setagentlocaltransform'] = f
let f = []
call add(f,{'word':'setagentlocaltransforms','kind':'f','menu':'void(const int,const int,const matrix[])'})
let c['setagentlocaltransforms'] = f
let f = []
call add(f,{'word':'setagentworldtransform','kind':'f','menu':'int(const int,const int,const matrix,const int)'})
let c['setagentworldtransform'] = f
let f = []
call add(f,{'word':'setagentworldtransforms','kind':'f','menu':'void(const int,const int,const matrix[])'})
let c['setagentworldtransforms'] = f
let f = []
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix2)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix2,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix3)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix3,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const float)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const float,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const int)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const int,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector4)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector4,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const string,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector2)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector2,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix2[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix2[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix3[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix3[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const float[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const float[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const int[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const int[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector4[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector4[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const string[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const string[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector2[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector2[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector[],const string)'})
let c['setattrib'] = f
let f = []
call add(f,{'word':'setattribtypeinfo','kind':'f','menu':'int(const int,const string,const string,const string)'})
let c['setattribtypeinfo'] = f
let f = []
call add(f,{'word':'setcomp','kind':'f','menu':'void(export matrix2,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'matrix2(export matrix2[],const matrix2,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export matrix3,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'matrix3(export matrix3[],const matrix3,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export matrix,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'matrix(export matrix[],const matrix,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'bsdf(export bsdf[],const bsdf,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'light(export light[],const light,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'material(export material[],const material,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export matrix2,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export matrix3,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export matrix,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export vector4,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export vector2,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export vector,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export float[],const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'int(export int[],const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export vector4,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'vector4(export vector4[],const vector4,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'string(export string[],const string,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export vector2,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'vector2(export vector2[],const vector2,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export vector,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'vector(export vector[],const vector,const int)'})
let c['setcomp'] = f
let f = []
call add(f,{'word':'setcurrentlight','kind':'f','menu':'int(const int)'})
let c['setcurrentlight'] = f
let f = []
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix2[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix2[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix3[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix3[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector4[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector4[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector2[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector2[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector[],const string)'})
let c['setdetailattrib'] = f
let f = []
call add(f,{'word':'setedgegroup','kind':'f','menu':'int(const int,const string,const int,const int,const int)'})
let c['setedgegroup'] = f
let f = []
let c['setelem'] = f
let f = []
call add(f,{'word':'setpackedtransform','kind':'f','menu':'void(const int,const int,const matrix)'})
let c['setpackedtransform'] = f
let f = []
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const float)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const float,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector4)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector4,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const string,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector2)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector2,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const float[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const float[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const int[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const int[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector4[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector4[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const string[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const string[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector2[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector2[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector[],const string)'})
let c['setpointattrib'] = f
let f = []
call add(f,{'word':'setpointgroup','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setpointgroup','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
let c['setpointgroup'] = f
let f = []
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const float)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const float,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector4)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector4,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const string,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector2)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector2,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const float[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const float[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const int[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const int[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector4[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector4[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const string[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const string[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector2[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector2[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector[],const string)'})
let c['setprimattrib'] = f
let f = []
call add(f,{'word':'setprimgroup','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setprimgroup','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
let c['setprimgroup'] = f
let f = []
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix2)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix2,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix3)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix3,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const float)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const float,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector4)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector4,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const string,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector2)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector2,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix2[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix2[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix3[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix3[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const float[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const float[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const int[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const int[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector4[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector4[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const string[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const string[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector2[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector2[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector[],const string)'})
let c['setprimintrinsic'] = f
let f = []
call add(f,{'word':'setprimvertex','kind':'f','menu':'int(const int,const int,const int,const int)'})
let c['setprimvertex'] = f
let f = []
call add(f,{'word':'setsamplestore','kind':'f','menu':'int(const string,const vector,const float)'})
call add(f,{'word':'setsamplestore','kind':'f','menu':'int(const string,const vector,const int)'})
call add(f,{'word':'setsamplestore','kind':'f','menu':'int(const string,const vector,const vector4)'})
call add(f,{'word':'setsamplestore','kind':'f','menu':'int(const string,const vector,const vector)'})
let c['setsamplestore'] = f
let f = []
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix2)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix2,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix3)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix3,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const float)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const float,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const int)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const int,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector4)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector4,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector2)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector2,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix2[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix2[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix3[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix3[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const float[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const float[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const int[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const int[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector4[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector4[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector2[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector2[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector[],const string)'})
let c['setvertexattrib'] = f
let f = []
call add(f,{'word':'setvertexgroup','kind':'f','menu':'int(const int,const string,const int,const int,const int)'})
call add(f,{'word':'setvertexgroup','kind':'f','menu':'int(const int,const string,const int,const int,const int,const string)'})
let c['setvertexgroup'] = f
let f = []
call add(f,{'word':'setvertexpoint','kind':'f','menu':'int(const int,const int,const int,const int)'})
let c['setvertexpoint'] = f
let f = []
call add(f,{'word':'shadow','kind':'f','menu':'void(export vector)'})
call add(f,{'word':'shadow','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'shadow','kind':'f','menu':'void(export vector,const vector,const vector)'})
call add(f,{'word':'shadow','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['shadow'] = f
let f = []
call add(f,{'word':'shadow_light','kind':'f','menu':'vector(const int,const vector,const vector,const float)'})
let c['shadow_light'] = f
let f = []
call add(f,{'word':'shadowmap','kind':'f','menu':'float(const string,const vector,const float,const float,const float)'})
call add(f,{'word':'shadowmap','kind':'f','menu':'vector(const string,const vector,const float,const float,const float)'})
call add(f,{'word':'shadowmap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector,const float,const float,const float)'})
let c['shadowmap'] = f
let f = []
call add(f,{'word':'shimport','kind':'f','menu':'int(const string,export matrix2)'})
call add(f,{'word':'shimport','kind':'f','menu':'int(const string,export matrix3)'})
call add(f,{'word':'shimport','kind':'f','menu':'int(const string,export matrix)'})
call add(f,{'word':'shimport','kind':'f','menu':'int(const string,export float)'})
call add(f,{'word':'shimport','kind':'f','menu':'int(const string,export int)'})
call add(f,{'word':'shimport','kind':'f','menu':'int(const string,export vector4)'})
call add(f,{'word':'shimport','kind':'f','menu':'int(const string,export string)'})
call add(f,{'word':'shimport','kind':'f','menu':'int(const string,export vector2)'})
call add(f,{'word':'shimport','kind':'f','menu':'int(const string,export vector)'})
let c['shimport'] = f
let f = []
call add(f,{'word':'shl','kind':'f','menu':'int(const int,const int)'})
let c['shl'] = f
let f = []
call add(f,{'word':'shr','kind':'f','menu':'int(const int,const int)'})
let c['shr'] = f
let f = []
call add(f,{'word':'shrz','kind':'f','menu':'int(const int,const int)'})
let c['shrz'] = f
let f = []
call add(f,{'word':'sign','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sign','kind':'f','menu':'int(const int)'})
call add(f,{'word':'sign','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sign','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sign','kind':'f','menu':'vector(const vector)'})
let c['sign'] = f
let f = []
call add(f,{'word':'simport','kind':'f','menu':'int(const string,export matrix2)'})
call add(f,{'word':'simport','kind':'f','menu':'int(const string,export matrix3)'})
call add(f,{'word':'simport','kind':'f','menu':'int(const string,export matrix)'})
call add(f,{'word':'simport','kind':'f','menu':'int(const string,export float)'})
call add(f,{'word':'simport','kind':'f','menu':'int(const string,export int)'})
call add(f,{'word':'simport','kind':'f','menu':'int(const string,export vector4)'})
call add(f,{'word':'simport','kind':'f','menu':'int(const string,export string)'})
call add(f,{'word':'simport','kind':'f','menu':'int(const string,export vector2)'})
call add(f,{'word':'simport','kind':'f','menu':'int(const string,export vector)'})
let c['simport'] = f
let f = []
call add(f,{'word':'sin','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sin','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sin','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sin','kind':'f','menu':'vector(const vector)'})
let c['sin'] = f
let f = []
call add(f,{'word':'sinh','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sinh','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sinh','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sinh','kind':'f','menu':'vector(const vector)'})
let c['sinh'] = f
let f = []
call add(f,{'word':'sleep','kind':'f','menu':'void(const int)'})
let c['sleep'] = f
let f = []
call add(f,{'word':'slerp','kind':'f','menu':'vector4(const vector4,const vector4,const float)'})
call add(f,{'word':'slerp','kind':'f','menu':'vector4(const vector4[],const float[])'})
let c['slerp'] = f
let f = []
call add(f,{'word':'slice','kind':'f','menu':'string(const string,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string(const string,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string(const string,const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix2[](const matrix2[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix2[](const matrix2[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix2[](const matrix2[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix3[](const matrix3[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix3[](const matrix3[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix3[](const matrix3[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix[](const matrix[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix[](const matrix[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix[](const matrix[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'float[](const float[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'float[](const float[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'float[](const float[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'int[](const int[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'int[](const int[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'int[](const int[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector4[](const vector4[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector4[](const vector4[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector4[](const vector4[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string[](const string[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string[](const string[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string[](const string[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector2[](const vector2[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector2[](const vector2[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector2[](const vector2[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector[](const vector[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector[](const vector[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector[](const vector[],const int,const int,const int,const int,const int,const int)'})
let c['slice'] = f
let f = []
call add(f,{'word':'slideframe','kind':'f','menu':'vector(const vector,const vector,const vector,const vector,const vector)'})
let c['slideframe'] = f
let f = []
call add(f,{'word':'smooth','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'smooth','kind':'f','menu':'float(const float,const float,const float,const float)'})
let c['smooth'] = f
let f = []
call add(f,{'word':'smoothrotation','kind':'f','menu':'vector(const int,const vector,const vector)'})
let c['smoothrotation'] = f
let f = []
call add(f,{'word':'snoise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'snoise','kind':'f','menu':'float(const vector,const int,const float,const float)'})
call add(f,{'word':'snoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'snoise','kind':'f','menu':'float(const vector,const int,const int,const int,const int,const float,const float)'})
call add(f,{'word':'snoise','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'snoise','kind':'f','menu':'vector(const vector,const int,const float,const float)'})
call add(f,{'word':'snoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
call add(f,{'word':'snoise','kind':'f','menu':'vector(const vector,const int,const int,const int,const int,const float,const float)'})
let c['snoise'] = f
let f = []
call add(f,{'word':'solid_angle','kind':'f','menu':'float(const bsdf,const int)'})
let c['solid_angle'] = f
let f = []
call add(f,{'word':'solveconstraint','kind':'f','menu':'vector[](const float[],const vector,const float,const matrix,const vector[])'})
let c['solveconstraint'] = f
let f = []
call add(f,{'word':'solvecubic','kind':'f','menu':'int(const float,const float,const float,const float,float,float,float)'})
call add(f,{'word':'solvecubic','kind':'f','menu':'int(const float,const float,const float,const float,vector2,vector2,vector2)'})
let c['solvecubic'] = f
let f = []
call add(f,{'word':'solvecurve','kind':'f','menu':'vector[](const string,const float[],const int,const int,const vector,const int,const matrix)'})
call add(f,{'word':'solvecurve','kind':'f','menu':'vector[](const float[],const int,const int,const vector,const vector[],const vector[])'})
let c['solvecurve'] = f
let f = []
call add(f,{'word':'solvefbik','kind':'f','menu':'matrix[](const matrix[],const int[],const int[],const matrix[],const int)'})
call add(f,{'word':'solvefbik','kind':'f','menu':'matrix[](const matrix[],const int[],const int[],const matrix[],const int,const float,const int)'})
call add(f,{'word':'solvefbik','kind':'f','menu':'matrix[](const matrix[],const int[],const int[],const matrix[],const int,const float,const int,const float[],const int[],const int[])'})
call add(f,{'word':'solvefbik','kind':'f','menu':'matrix[](const matrix[],const int[],const int[],const matrix[],const int,const float,const int,const float[],const int[],const int[],const matrix[],const vector4[],const vector[])'})
let c['solvefbik'] = f
let f = []
call add(f,{'word':'solveik','kind':'f','menu':'vector[](const float[],const vector,const vector,const float,const int,const float,const int,const float,const matrix,const vector[])'})
let c['solveik'] = f
let f = []
call add(f,{'word':'solvepoly','kind':'f','menu':'int(const float[],float[])'})
call add(f,{'word':'solvepoly','kind':'f','menu':'int(const float[],float[],const int)'})
let c['solvepoly'] = f
let f = []
call add(f,{'word':'solvequadratic','kind':'f','menu':'int(const float,const float,const float,float,float)'})
call add(f,{'word':'solvequadratic','kind':'f','menu':'int(const float,const float,const float,vector2,vector2)'})
let c['solvequadratic'] = f
let f = []
call add(f,{'word':'sort','kind':'f','menu':'float[](const float[])'})
call add(f,{'word':'sort','kind':'f','menu':'int[](const int[])'})
call add(f,{'word':'sort','kind':'f','menu':'string[](const string[])'})
let c['sort'] = f
let f = []
call add(f,{'word':'specular','kind':'f','menu':'bsdf(const vector)'})
call add(f,{'word':'specular','kind':'f','menu':'vector(const vector,const vector,const float)'})
let c['specular'] = f
let f = []
call add(f,{'word':'specularBRDF','kind':'f','menu':'float(const vector,const vector,const vector,const float)'})
let c['specularBRDF'] = f
let f = []
call add(f,{'word':'spline','kind':'f','menu':'float(const string,const float,const float)'})
call add(f,{'word':'spline','kind':'f','menu':'float(const string,const float,const float[])'})
call add(f,{'word':'spline','kind':'f','menu':'float(const string[],const float,const float[])'})
call add(f,{'word':'spline','kind':'f','menu':'float(const string[],const float,const float[],const float[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector4(const string,const float,const vector4)'})
call add(f,{'word':'spline','kind':'f','menu':'vector4(const string,const float,const vector4[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector4(const string[],const float,const vector4[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector4(const string[],const float,const vector4[],const float[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector(const string,const float,const vector)'})
call add(f,{'word':'spline','kind':'f','menu':'vector(const string,const float,const vector[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector(const string[],const float,const vector[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector(const string[],const float,const vector[],const float[])'})
let c['spline'] = f
let f = []
call add(f,{'word':'split','kind':'f','menu':'string[](const string)'})
call add(f,{'word':'split','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'split','kind':'f','menu':'string[](const string,const string,const int)'})
let c['split'] = f
let f = []
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[],const int,const int,const float,const float[])'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[],const int,const int,const float,const float[])'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[],const int,const int,const float)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[],const int,const int,const float)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[],const int,const int)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[],const int,const int)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[],const int)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[],const int)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[])'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[])'})
let c['split_bsdf'] = f
let f = []
call add(f,{'word':'splitpath','kind':'f','menu':'void(const string,string,string)'})
call add(f,{'word':'splitpath','kind':'f','menu':'string(const string,string)'})
let c['splitpath'] = f
let f = []
call add(f,{'word':'sprintf','kind':'f','menu':'string(const string)'})
let c['sprintf'] = f
let f = []
call add(f,{'word':'sqrt','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sqrt','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sqrt','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sqrt','kind':'f','menu':'vector(const vector)'})
let c['sqrt'] = f
let f = []
call add(f,{'word':'sssapprox','kind':'f','menu':'bsdf(const vector,const float,const float,const float)'})
let c['sssapprox'] = f
let f = []
call add(f,{'word':'startswith','kind':'f','menu':'int(const string,const string)'})
let c['startswith'] = f
let f = []
call add(f,{'word':'storelightexport','kind':'f','menu':'void(const string,const string,const float)'})
call add(f,{'word':'storelightexport','kind':'f','menu':'void(const string,const string,const int)'})
call add(f,{'word':'storelightexport','kind':'f','menu':'void(const string,const string,const vector4)'})
call add(f,{'word':'storelightexport','kind':'f','menu':'void(const string,const string,const vector)'})
call add(f,{'word':'storelightexport','kind':'f','menu':'void(const string,const string,const float[])'})
call add(f,{'word':'storelightexport','kind':'f','menu':'void(const string,const string,const int[])'})
call add(f,{'word':'storelightexport','kind':'f','menu':'void(const string,const string,const vector4[])'})
call add(f,{'word':'storelightexport','kind':'f','menu':'void(const string,const string,const vector[])'})
let c['storelightexport'] = f
let f = []
call add(f,{'word':'storelightexports','kind':'f','menu':'void(const string)'})
let c['storelightexports'] = f
let f = []
call add(f,{'word':'strip','kind':'f','menu':'string(const string)'})
call add(f,{'word':'strip','kind':'f','menu':'string(const string,const string)'})
let c['strip'] = f
let f = []
call add(f,{'word':'strlen','kind':'f','menu':'int(const string)'})
let c['strlen'] = f
let f = []
let c['struct'] = f
let f = []
let c['sub'] = f
let f = []
call add(f,{'word':'sum','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sum','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'sum','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'sum','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'sum','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'sum','kind':'f','menu':'int(const int)'})
call add(f,{'word':'sum','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'sum','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'sum','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'sum','kind':'f','menu':'vector(const vector[])'})
let c['sum'] = f
let f = []
call add(f,{'word':'surfacedist','kind':'f','menu':'float(const int,const string,const string,const int,const float,int,const string)'})
call add(f,{'word':'surfacedist','kind':'f','menu':'float(const string,const string,const string,const int,const float,int,const string)'})
let c['surfacedist'] = f
let f = []
let c['swap'] = f
let f = []
call add(f,{'word':'switch','kind':'f','menu':'bsdf(const bsdf,const bsdf)'})
let c['switch'] = f
let f = []
call add(f,{'word':'swizzle','kind':'f','menu':'vector4(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'swizzle','kind':'f','menu':'vector2(const vector2,const int,const int)'})
call add(f,{'word':'swizzle','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
let c['swizzle'] = f
let f = []
call add(f,{'word':'tan','kind':'f','menu':'float(const float)'})
call add(f,{'word':'tan','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'tan','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'tan','kind':'f','menu':'vector(const vector)'})
let c['tan'] = f
let f = []
call add(f,{'word':'tanh','kind':'f','menu':'float(const float)'})
call add(f,{'word':'tanh','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'tanh','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'tanh','kind':'f','menu':'vector(const vector)'})
let c['tanh'] = f
let f = []
call add(f,{'word':'tet_adjacent','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'tet_adjacent','kind':'f','menu':'int(const string,const int,const int)'})
let c['tet_adjacent'] = f
let f = []
call add(f,{'word':'tet_faceindex','kind':'f','menu':'int(const int,const int)'})
let c['tet_faceindex'] = f
let f = []
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export matrix3)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export matrix)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export float)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export int)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export vector4)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export string)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export vector)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export int[])'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export string[])'})
let c['teximport'] = f
let f = []
call add(f,{'word':'texprintf','kind':'f','menu':'string(const float,const float,const string)'})
let c['texprintf'] = f
let f = []
call add(f,{'word':'texture','kind':'f','menu':'vector4(const string)'})
call add(f,{'word':'texture','kind':'f','menu':'vector4(const string,const float,const float)'})
call add(f,{'word':'texture','kind':'f','menu':'vector4(const string,const float,const float,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'texture','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'texture','kind':'f','menu':'vector(const string,const float,const float)'})
call add(f,{'word':'texture','kind':'f','menu':'vector(const string,const float,const float,const float,const float,const float,const float,const float,const float)'})
let c['texture'] = f
let f = []
call add(f,{'word':'texture3d','kind':'f','menu':'matrix3(const string,const string,const vector)'})
call add(f,{'word':'texture3d','kind':'f','menu':'matrix(const string,const string,const vector)'})
call add(f,{'word':'texture3d','kind':'f','menu':'float(const string,const string,const vector)'})
call add(f,{'word':'texture3d','kind':'f','menu':'vector4(const string,const string,const vector)'})
call add(f,{'word':'texture3d','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['texture3d'] = f
let f = []
call add(f,{'word':'texture3dBox','kind':'f','menu':'void(const string,const string,vector,vector)'})
call add(f,{'word':'texture3dBox','kind':'f','menu':'vector(const string,const string,vector)'})
let c['texture3dBox'] = f
let f = []
call add(f,{'word':'titlecase','kind':'f','menu':'string(const string)'})
let c['titlecase'] = f
let f = []
call add(f,{'word':'toNDC','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'toNDC','kind':'f','menu':'vector(const vector)'})
let c['toNDC'] = f
let f = []
call add(f,{'word':'tolower','kind':'f','menu':'string(const string)'})
let c['tolower'] = f
let f = []
call add(f,{'word':'toupper','kind':'f','menu':'string(const string)'})
let c['toupper'] = f
let f = []
call add(f,{'word':'trace','kind':'f','menu':'int(const vector,const vector,const float)'})
call add(f,{'word':'trace','kind':'f','menu':'void(vector,vector,float,const vector,const vector,const float,const float)'})
call add(f,{'word':'trace','kind':'f','menu':'vector(vector,float,const vector,const vector,const float,const float)'})
let c['trace'] = f
let f = []
call add(f,{'word':'translate','kind':'f','menu':'void(export matrix,const vector4)'})
call add(f,{'word':'translate','kind':'f','menu':'void(export matrix,const vector)'})
let c['translate'] = f
let f = []
call add(f,{'word':'translucent','kind':'f','menu':'bsdf(const vector,const vector)'})
let c['translucent'] = f
let f = []
call add(f,{'word':'transpose','kind':'f','menu':'void(export matrix2)'})
call add(f,{'word':'transpose','kind':'f','menu':'matrix2(const matrix2)'})
call add(f,{'word':'transpose','kind':'f','menu':'void(export matrix3)'})
call add(f,{'word':'transpose','kind':'f','menu':'matrix3(const matrix3)'})
call add(f,{'word':'transpose','kind':'f','menu':'void(export matrix)'})
call add(f,{'word':'transpose','kind':'f','menu':'matrix(const matrix)'})
let c['transpose'] = f
let f = []
call add(f,{'word':'trunc','kind':'f','menu':'float(const float)'})
call add(f,{'word':'trunc','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'trunc','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'trunc','kind':'f','menu':'vector(const vector)'})
let c['trunc'] = f
let f = []
call add(f,{'word':'tw_nspace','kind':'f','menu':'vector(const vector)'})
let c['tw_nspace'] = f
let f = []
call add(f,{'word':'tw_space','kind':'f','menu':'matrix()'})
call add(f,{'word':'tw_space','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'tw_space','kind':'f','menu':'vector(const vector)'})
let c['tw_space'] = f
let f = []
call add(f,{'word':'tw_vspace','kind':'f','menu':'vector(const vector)'})
let c['tw_vspace'] = f
let f = []
call add(f,{'word':'uniqueval','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'uniqueval','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'uniqueval','kind':'f','menu':'string(const int,const string,const string,const int)'})
call add(f,{'word':'uniqueval','kind':'f','menu':'string(const string,const string,const string,const int)'})
let c['uniqueval'] = f
let f = []
call add(f,{'word':'uniquevals','kind':'f','menu':'int[](const int,const string,const string)'})
call add(f,{'word':'uniquevals','kind':'f','menu':'int[](const string,const string,const string)'})
call add(f,{'word':'uniquevals','kind':'f','menu':'string[](const int,const string,const string)'})
call add(f,{'word':'uniquevals','kind':'f','menu':'string[](const string,const string,const string)'})
let c['uniquevals'] = f
let f = []
call add(f,{'word':'unpack_intfromsafefloat','kind':'f','menu':'int(const float)'})
let c['unpack_intfromsafefloat'] = f
let f = []
call add(f,{'word':'unserialize','kind':'f','menu':'matrix2[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'matrix3[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'matrix[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'vector4[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'vector2[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'vector[](const float[])'})
let c['unserialize'] = f
let f = []
call add(f,{'word':'upush','kind':'f','menu':'void(export matrix2[],const matrix2)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export matrix3[],const matrix3)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export matrix[],const matrix)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export bsdf[],const bsdf)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export light[],const light)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export material[],const material)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export float[],const float)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export int[],const int)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export vector4[],const vector4)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export string[],const string)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export vector2[],const vector2)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export vector[],const vector)'})
let c['upush'] = f
let f = []
let c['urandom'] = f
let f = []
call add(f,{'word':'usd_addtransform','kind':'f','menu':'int(const int,const string,const string,const matrix)'})
let c['usd_addtransform'] = f
let f = []
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector[](const string,const string,const string)'})
let c['usd_attrib'] = f
let f = []
call add(f,{'word':'usd_attriblen','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_attriblen','kind':'f','menu':'int(const string,const string,const string)'})
let c['usd_attriblen'] = f
let f = []
call add(f,{'word':'usd_attribnames','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'usd_attribnames','kind':'f','menu':'string[](const string,const string)'})
let c['usd_attribnames'] = f
let f = []
call add(f,{'word':'usd_attribsize','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_attribsize','kind':'f','menu':'int(const string,const string,const string)'})
let c['usd_attribsize'] = f
let f = []
call add(f,{'word':'usd_attribtypename','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'usd_attribtypename','kind':'f','menu':'string(const string,const string,const string)'})
let c['usd_attribtypename'] = f
let f = []
call add(f,{'word':'usd_cleartransformorder','kind':'f','menu':'int(const int,const string)'})
let c['usd_cleartransformorder'] = f
let f = []
call add(f,{'word':'usd_drawmode','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_drawmode','kind':'f','menu':'string(const string,const string)'})
let c['usd_drawmode'] = f
let f = []
call add(f,{'word':'usd_isactive','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'usd_isactive','kind':'f','menu':'int(const string,const string)'})
let c['usd_isactive'] = f
let f = []
call add(f,{'word':'usd_isarray','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_isarray','kind':'f','menu':'int(const string,const string,const string)'})
let c['usd_isarray'] = f
let f = []
call add(f,{'word':'usd_isattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_isattrib','kind':'f','menu':'int(const string,const string,const string)'})
let c['usd_isattrib'] = f
let f = []
call add(f,{'word':'usd_isprim','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'usd_isprim','kind':'f','menu':'int(const string,const string)'})
let c['usd_isprim'] = f
let f = []
call add(f,{'word':'usd_isstage','kind':'f','menu':'int(const int)'})
call add(f,{'word':'usd_isstage','kind':'f','menu':'int(const string)'})
let c['usd_isstage'] = f
let f = []
call add(f,{'word':'usd_istransformreset','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'usd_istransformreset','kind':'f','menu':'int(const string,const string)'})
let c['usd_istransformreset'] = f
let f = []
call add(f,{'word':'usd_isvisible','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'usd_isvisible','kind':'f','menu':'int(const string,const string)'})
let c['usd_isvisible'] = f
let f = []
call add(f,{'word':'usd_kind','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_kind','kind':'f','menu':'string(const string,const string)'})
let c['usd_kind'] = f
let f = []
call add(f,{'word':'usd_localtransform','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'usd_localtransform','kind':'f','menu':'matrix(const string,const string)'})
let c['usd_localtransform'] = f
let f = []
call add(f,{'word':'usd_name','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_name','kind':'f','menu':'string(const string,const string)'})
let c['usd_name'] = f
let f = []
call add(f,{'word':'usd_parentpath','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_parentpath','kind':'f','menu':'string(const string,const string)'})
let c['usd_parentpath'] = f
let f = []
call add(f,{'word':'usd_purpose','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_purpose','kind':'f','menu':'string(const string,const string)'})
let c['usd_purpose'] = f
let f = []
call add(f,{'word':'usd_setactive','kind':'f','menu':'int(const int,const string,const int)'})
let c['usd_setactive'] = f
let f = []
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix2)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix3)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const float)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector4)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector2)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix2[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix3[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const float[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const int[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector4[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const string[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector2[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector[])'})
let c['usd_setattrib'] = f
let f = []
call add(f,{'word':'usd_setdrawmode','kind':'f','menu':'int(const int,const string,const string)'})
let c['usd_setdrawmode'] = f
let f = []
call add(f,{'word':'usd_setkind','kind':'f','menu':'int(const int,const string,const string)'})
let c['usd_setkind'] = f
let f = []
call add(f,{'word':'usd_setpurpose','kind':'f','menu':'int(const int,const string,const string)'})
let c['usd_setpurpose'] = f
let f = []
call add(f,{'word':'usd_setvariantselection','kind':'f','menu':'int(const int,const string,const string,const string)'})
let c['usd_setvariantselection'] = f
let f = []
call add(f,{'word':'usd_setvisible','kind':'f','menu':'int(const int,const string,const int)'})
let c['usd_setvisible'] = f
let f = []
call add(f,{'word':'usd_transformorder','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'usd_transformorder','kind':'f','menu':'string[](const string,const string)'})
let c['usd_transformorder'] = f
let f = []
call add(f,{'word':'usd_typename','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_typename','kind':'f','menu':'string(const string,const string)'})
let c['usd_typename'] = f
let f = []
call add(f,{'word':'usd_variants','kind':'f','menu':'string[](const int,const string,const string)'})
call add(f,{'word':'usd_variants','kind':'f','menu':'string[](const string,const string,const string)'})
let c['usd_variants'] = f
let f = []
call add(f,{'word':'usd_variantselection','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'usd_variantselection','kind':'f','menu':'string(const string,const string,const string)'})
let c['usd_variantselection'] = f
let f = []
call add(f,{'word':'usd_variantsets','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'usd_variantsets','kind':'f','menu':'string[](const string,const string)'})
let c['usd_variantsets'] = f
let f = []
call add(f,{'word':'usd_worldtransform','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'usd_worldtransform','kind':'f','menu':'matrix(const string,const string)'})
let c['usd_worldtransform'] = f
let f = []
call add(f,{'word':'uvdist','kind':'f','menu':'float(const int,const string,const string,const vector,int,vector)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const int,const string,const string,const vector,int,vector,const float)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const int,const string,const vector,int,vector)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const int,const string,const vector,int,vector,const float)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const string,const string,const string,const vector,int,vector)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const string,const string,const string,const vector,int,vector,const float)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const string,const string,const vector,int,vector)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const string,const string,const vector,int,vector,const float)'})
let c['uvdist'] = f
let f = []
call add(f,{'word':'uvintersect','kind':'f','menu':'int(const int,const string,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'uvintersect','kind':'f','menu':'int(const int,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'uvintersect','kind':'f','menu':'int(const string,const string,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'uvintersect','kind':'f','menu':'int(const string,const string,const vector,const vector,vector,vector)'})
let c['uvintersect'] = f
let f = []
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector[](const string,const string,const string,const vector)'})
let c['uvsample'] = f
let f = []
call add(f,{'word':'uvunwrap','kind':'f','menu':'int(const string,const float,const float,const float,vector,vector)'})
call add(f,{'word':'uvunwrap','kind':'f','menu':'int(const string,const float,const float,const float,vector,vector,vector,vector)'})
let c['uvunwrap'] = f
let f = []
call add(f,{'word':'variance','kind':'f','menu':'float(const float,float,int)'})
let c['variance'] = f
let f = []
call add(f,{'word':'vertex','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector[](const string,const string,const int,const int)'})
let c['vertex'] = f
let f = []
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix2(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix2(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix3(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix3(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'float(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'float(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'int(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'int(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector4(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector4(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'string(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'string(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector2(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector2(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix2[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix2[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix3[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix3[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'float[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'float[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'int[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'int[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector4[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector4[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'string[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'string[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector2[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector2[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector[](const string,const string,const int,int)'})
let c['vertexattrib'] = f
let f = []
call add(f,{'word':'vertexattribsize','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'vertexattribsize','kind':'f','menu':'int(const string,const string)'})
let c['vertexattribsize'] = f
let f = []
call add(f,{'word':'vertexattribtype','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'vertexattribtype','kind':'f','menu':'int(const string,const string)'})
let c['vertexattribtype'] = f
let f = []
call add(f,{'word':'vertexattribtypeinfo','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'vertexattribtypeinfo','kind':'f','menu':'string(const string,const string)'})
let c['vertexattribtypeinfo'] = f
let f = []
call add(f,{'word':'vertexhedge','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexhedge','kind':'f','menu':'int(const string,const int)'})
let c['vertexhedge'] = f
let f = []
call add(f,{'word':'vertexindex','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'vertexindex','kind':'f','menu':'int(const string,const int,const int)'})
let c['vertexindex'] = f
let f = []
call add(f,{'word':'vertexnext','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexnext','kind':'f','menu':'int(const string,const int)'})
let c['vertexnext'] = f
let f = []
call add(f,{'word':'vertexpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexpoint','kind':'f','menu':'int(const string,const int)'})
let c['vertexpoint'] = f
let f = []
call add(f,{'word':'vertexprev','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexprev','kind':'f','menu':'int(const string,const int)'})
let c['vertexprev'] = f
let f = []
call add(f,{'word':'vertexprim','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexprim','kind':'f','menu':'int(const string,const int)'})
let c['vertexprim'] = f
let f = []
call add(f,{'word':'vertexprimindex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexprimindex','kind':'f','menu':'int(const string,const int)'})
let c['vertexprimindex'] = f
let f = []
call add(f,{'word':'vnoise','kind':'f','menu':'void(const float,const float,const float,const float,int,float,float,float,float,float,float)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const float,const float,const float,const float,float,float,float,float,float,float)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const float,const float,const float,const float,int,float,float,float,float,float,float,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const float,const float,const float,const float,float,float,float,float,float,float,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const float,const float,float,float,float,float)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const float,const float,float,float,float,float,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector4,const vector4,int,float,float,vector4,vector4)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector4,const vector4,float,float,vector4,vector4)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector4,const vector4,int,float,float,vector4,vector4,const int,const int,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector4,const vector4,float,float,vector4,vector4,const int,const int,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector4,const vector4,int,float,float,vector4,vector4,const vector4)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector4,const vector4,float,float,vector4,vector4,const vector4)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector,const vector,int,float,float,vector,vector)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector,const vector,float,float,vector,vector)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector,const vector,int,float,float,vector,vector,const int,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector,const vector,float,float,vector,vector,const int,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector,const vector,int,float,float,vector,vector,const vector)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector,const vector,float,float,vector,vector,const vector)'})
let c['vnoise'] = f
let f = []
call add(f,{'word':'volume','kind':'f','menu':'float(const vector)'})
let c['volume'] = f
let f = []
call add(f,{'word':'volumegradient','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumegradient','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumegradient','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumegradient','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumegradient'] = f
let f = []
call add(f,{'word':'volumeindex','kind':'f','menu':'float(const int,const int,const vector)'})
call add(f,{'word':'volumeindex','kind':'f','menu':'float(const int,const string,const vector)'})
call add(f,{'word':'volumeindex','kind':'f','menu':'float(const string,const int,const vector)'})
call add(f,{'word':'volumeindex','kind':'f','menu':'float(const string,const string,const vector)'})
let c['volumeindex'] = f
let f = []
call add(f,{'word':'volumeindexactive','kind':'f','menu':'int(const int,const int,const vector)'})
call add(f,{'word':'volumeindexactive','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'volumeindexactive','kind':'f','menu':'int(const string,const int,const vector)'})
call add(f,{'word':'volumeindexactive','kind':'f','menu':'int(const string,const string,const vector)'})
let c['volumeindexactive'] = f
let f = []
call add(f,{'word':'volumeindexorigin','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'volumeindexorigin','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'volumeindexorigin','kind':'f','menu':'vector(const string,const int)'})
call add(f,{'word':'volumeindexorigin','kind':'f','menu':'vector(const string,const string)'})
let c['volumeindexorigin'] = f
let f = []
call add(f,{'word':'volumeindextopos','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumeindextopos','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumeindextopos','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumeindextopos','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumeindextopos'] = f
let f = []
call add(f,{'word':'volumeindexv','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumeindexv','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumeindexv','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumeindexv','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumeindexv'] = f
let f = []
call add(f,{'word':'volumepostoindex','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumepostoindex','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumepostoindex','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumepostoindex','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumepostoindex'] = f
let f = []
call add(f,{'word':'volumeres','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'volumeres','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'volumeres','kind':'f','menu':'vector(const string,const int)'})
call add(f,{'word':'volumeres','kind':'f','menu':'vector(const string,const string)'})
let c['volumeres'] = f
let f = []
call add(f,{'word':'volumesample','kind':'f','menu':'float(const int,const int,const vector)'})
call add(f,{'word':'volumesample','kind':'f','menu':'float(const int,const string,const vector)'})
call add(f,{'word':'volumesample','kind':'f','menu':'float(const string,const int,const vector)'})
call add(f,{'word':'volumesample','kind':'f','menu':'float(const string,const string,const vector)'})
let c['volumesample'] = f
let f = []
call add(f,{'word':'volumesamplev','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumesamplev','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumesamplev','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumesamplev','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumesamplev'] = f
let f = []
call add(f,{'word':'volumevoxeldiameter','kind':'f','menu':'float(const int,const int)'})
call add(f,{'word':'volumevoxeldiameter','kind':'f','menu':'float(const int,const string)'})
call add(f,{'word':'volumevoxeldiameter','kind':'f','menu':'float(const string,const int)'})
call add(f,{'word':'volumevoxeldiameter','kind':'f','menu':'float(const string,const string)'})
let c['volumevoxeldiameter'] = f
let f = []
call add(f,{'word':'vtransform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'vtransform','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'vtransform','kind':'f','menu':'vector(const vector,const matrix)'})
let c['vtransform'] = f
let f = []
call add(f,{'word':'warning','kind':'f','menu':'void(const string)'})
let c['warning'] = f
let f = []
let c['while'] = f
let f = []
call add(f,{'word':'wireblinn','kind':'f','menu':'bsdf(const vector,const float)'})
let c['wireblinn'] = f
let f = []
call add(f,{'word':'wirediffuse','kind':'f','menu':'bsdf(const vector)'})
let c['wirediffuse'] = f
let f = []
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,const float,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,const float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,const float,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,const float,float,float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,const float,int,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,const float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,int,float,float,float,float,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,float,float,float,float,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,int,float,float,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,float,float,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector4,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector4,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector4,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector4,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector4,int,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector4,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector2,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector2,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector2,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector2,float,float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector2,int,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector2,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector,int,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector,int,float,float,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector,float,float,const int,const int,const int)'})
let c['wnoise'] = f
let f = []
call add(f,{'word':'wo_nspace','kind':'f','menu':'vector(const vector)'})
let c['wo_nspace'] = f
let f = []
call add(f,{'word':'wo_space','kind':'f','menu':'matrix()'})
call add(f,{'word':'wo_space','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'wo_space','kind':'f','menu':'vector(const vector)'})
let c['wo_space'] = f
let f = []
call add(f,{'word':'wo_vspace','kind':'f','menu':'vector(const vector)'})
let c['wo_vspace'] = f
let f = []
call add(f,{'word':'writepixel','kind':'f','menu':'void(const string,const float,const float,const vector)'})
let c['writepixel'] = f
let f = []
call add(f,{'word':'wt_nspace','kind':'f','menu':'vector(const vector)'})
let c['wt_nspace'] = f
let f = []
call add(f,{'word':'wt_space','kind':'f','menu':'matrix()'})
call add(f,{'word':'wt_space','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'wt_space','kind':'f','menu':'vector(const vector)'})
let c['wt_space'] = f
let f = []
call add(f,{'word':'wt_vspace','kind':'f','menu':'vector(const vector)'})
let c['wt_vspace'] = f
let f = []
call add(f,{'word':'xnoise','kind':'f','menu':'float(const float)'})
call add(f,{'word':'xnoise','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'xnoise','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'xnoise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'xnoise','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'xnoise','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'xnoise','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'xnoise','kind':'f','menu':'vector(const vector)'})
let c['xnoise'] = f
let f = []
call add(f,{'word':'xnoised','kind':'f','menu':'void(const float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'float(const float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const float,const float,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'float(const float,const float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const float,const float,vector,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'vector(const float,const float,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const float,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'vector(const float,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const vector4,float,float,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'float(const vector4,float,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const vector4,vector,vector,vector,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'vector(const vector4,vector,vector,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const vector,float,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'float(const vector,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const vector,vector,vector,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'vector(const vector,vector,vector,vector)'})
let c['xnoised'] = f
let f = []
let c['xor'] = f
let f = []
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const string,const vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const string,const vector,int,vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const string,const vector,int,vector,const float)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const vector,int,vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const vector,int,vector,const float)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const string,const vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const string,const vector,int,vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const string,const vector,int,vector,const float)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const vector,int,vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const vector,int,vector,const float)'})
let c['xyzdist'] = f
let f = []
call add(f,{'word':'xyztorgb','kind':'f','menu':'vector(const vector)'})
let c['xyztorgb'] = f
let contexts['fog'] = c
" CONTEXT: chop 
let c = {}
let c['V'] = [{'word':'V','kind':'v','menu':'float'}]
let c['I'] = [{'word':'I','kind':'v','menu':'int'}]
let c['S'] = [{'word':'S','kind':'v','menu':'int'}]
let c['E'] = [{'word':'E','kind':'v','menu':'int'}]
let c['SR'] = [{'word':'SR','kind':'v','menu':'float'}]
let c['L'] = [{'word':'L','kind':'v','menu':'int'}]
let c['C'] = [{'word':'C','kind':'v','menu':'int'}]
let c['NC'] = [{'word':'NC','kind':'v','menu':'int'}]
let c['CN'] = [{'word':'CN','kind':'v','menu':'string'}]
let c['FF'] = [{'word':'FF','kind':'v','menu':'float'}]
let c['T'] = [{'word':'T','kind':'v','menu':'float'}]
let c['IN'] = [{'word':'IN','kind':'v','menu':'int'}]
let c['FFN'] = [{'word':'FFN','kind':'v','menu':'float'}]
let c['TN'] = [{'word':'TN','kind':'v','menu':'float'}]
let c['Frame'] = [{'word':'Frame','kind':'v','menu':'float'}]
let c['Time'] = [{'word':'Time','kind':'v','menu':'float'}]
let f = []
call add(f,{'word':'Du','kind':'f','menu':'float(const float)'})
call add(f,{'word':'Du','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'Du','kind':'f','menu':'vector(const vector)'})
let c['Du'] = f
let f = []
call add(f,{'word':'Dv','kind':'f','menu':'float(const float)'})
call add(f,{'word':'Dv','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'Dv','kind':'f','menu':'vector(const vector)'})
let c['Dv'] = f
let f = []
call add(f,{'word':'Dw','kind':'f','menu':'float(const float)'})
call add(f,{'word':'Dw','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'Dw','kind':'f','menu':'vector(const vector)'})
let c['Dw'] = f
let f = []
let c['__ptexture_shift_coord'] = f
let f = []
let c['_export'] = f
let f = []
call add(f,{'word':'abs','kind':'f','menu':'float(const float)'})
call add(f,{'word':'abs','kind':'f','menu':'int(const int)'})
call add(f,{'word':'abs','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'abs','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'abs','kind':'f','menu':'vector(const vector)'})
let c['abs'] = f
let f = []
call add(f,{'word':'acos','kind':'f','menu':'float(const float)'})
call add(f,{'word':'acos','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'acos','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'acos','kind':'f','menu':'vector(const vector)'})
let c['acos'] = f
let f = []
let c['add'] = f
let f = []
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix2)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix3)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const float)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector4)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector2)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix2[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix3[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const float[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const int[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector4[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const string[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector2[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector[])'})
let c['addattrib'] = f
let f = []
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
let c['adddetailattrib'] = f
let f = []
call add(f,{'word':'addpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'addpoint','kind':'f','menu':'int(const int,const vector)'})
let c['addpoint'] = f
let f = []
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
let c['addpointattrib'] = f
let f = []
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,const int)'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,const int,const int)'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int,const int,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int[],int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int[],int[])'})
let c['addprim'] = f
let f = []
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
let c['addprimattrib'] = f
let f = []
call add(f,{'word':'addvariablename','kind':'f','menu':'int(const int,const string,const string)'})
let c['addvariablename'] = f
let f = []
call add(f,{'word':'addvertex','kind':'f','menu':'int(const int,const int,const int)'})
let c['addvertex'] = f
let f = []
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
let c['addvertexattrib'] = f
let f = []
call add(f,{'word':'addvisualizer','kind':'f','menu':'int(const int,const string)'})
let c['addvisualizer'] = f
let f = []
call add(f,{'word':'agentaddclip','kind':'f','menu':'int(const int,const int,const string,const string,const int)'})
let c['agentaddclip'] = f
let f = []
call add(f,{'word':'agentclipcatalog','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agentclipcatalog','kind':'f','menu':'string[](const string,const int)'})
let c['agentclipcatalog'] = f
let f = []
call add(f,{'word':'agentclipchannel','kind':'f','menu':'int(const int,const int,const string,const string)'})
call add(f,{'word':'agentclipchannel','kind':'f','menu':'int(const string,const int,const string,const string)'})
let c['agentclipchannel'] = f
let f = []
call add(f,{'word':'agentclipchannelnames','kind':'f','menu':'string[](const int,const int,const string)'})
call add(f,{'word':'agentclipchannelnames','kind':'f','menu':'string[](const string,const int,const string)'})
let c['agentclipchannelnames'] = f
let f = []
call add(f,{'word':'agentcliplength','kind':'f','menu':'float(const int,const int,const string)'})
call add(f,{'word':'agentcliplength','kind':'f','menu':'float(const string,const int,const string)'})
let c['agentcliplength'] = f
let f = []
call add(f,{'word':'agentclipnames','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agentclipnames','kind':'f','menu':'string[](const string,const int)'})
let c['agentclipnames'] = f
let f = []
call add(f,{'word':'agentclipsample','kind':'f','menu':'float(const int,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsample','kind':'f','menu':'float(const int,const int,const string,const float,const string)'})
call add(f,{'word':'agentclipsample','kind':'f','menu':'float(const string,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsample','kind':'f','menu':'float(const string,const int,const string,const float,const string)'})
let c['agentclipsample'] = f
let f = []
call add(f,{'word':'agentclipsamplelocal','kind':'f','menu':'matrix(const int,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsamplelocal','kind':'f','menu':'matrix(const string,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsamplelocal','kind':'f','menu':'matrix[](const int,const int,const string,const float)'})
call add(f,{'word':'agentclipsamplelocal','kind':'f','menu':'matrix[](const string,const int,const string,const float)'})
let c['agentclipsamplelocal'] = f
let f = []
call add(f,{'word':'agentclipsamplerate','kind':'f','menu':'float(const int,const int,const string)'})
call add(f,{'word':'agentclipsamplerate','kind':'f','menu':'float(const string,const int,const string)'})
let c['agentclipsamplerate'] = f
let f = []
call add(f,{'word':'agentclipsampleworld','kind':'f','menu':'matrix(const int,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsampleworld','kind':'f','menu':'matrix(const string,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsampleworld','kind':'f','menu':'matrix[](const int,const int,const string,const float)'})
call add(f,{'word':'agentclipsampleworld','kind':'f','menu':'matrix[](const string,const int,const string,const float)'})
let c['agentclipsampleworld'] = f
let f = []
call add(f,{'word':'agentcliptimes','kind':'f','menu':'float[](const int,const int)'})
call add(f,{'word':'agentcliptimes','kind':'f','menu':'float[](const string,const int)'})
let c['agentcliptimes'] = f
let f = []
call add(f,{'word':'agentcliptransformgroups','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agentcliptransformgroups','kind':'f','menu':'string[](const string,const int)'})
let c['agentcliptransformgroups'] = f
let f = []
call add(f,{'word':'agentclipweights','kind':'f','menu':'float[](const int,const int)'})
call add(f,{'word':'agentclipweights','kind':'f','menu':'float[](const string,const int)'})
let c['agentclipweights'] = f
let f = []
call add(f,{'word':'agentcollisionlayer','kind':'f','menu':'string(const int,const int)'})
call add(f,{'word':'agentcollisionlayer','kind':'f','menu':'string(const string,const int)'})
let c['agentcollisionlayer'] = f
let f = []
call add(f,{'word':'agentcurrentlayer','kind':'f','menu':'string(const int,const int)'})
call add(f,{'word':'agentcurrentlayer','kind':'f','menu':'string(const string,const int)'})
let c['agentcurrentlayer'] = f
let f = []
call add(f,{'word':'agentfindtransformgroup','kind':'f','menu':'int(const int,const int,const string)'})
call add(f,{'word':'agentfindtransformgroup','kind':'f','menu':'int(const string,const int,const string)'})
let c['agentfindtransformgroup'] = f
let f = []
call add(f,{'word':'agentlayerbindings','kind':'f','menu':'int[](const int,const int,const string,const string)'})
call add(f,{'word':'agentlayerbindings','kind':'f','menu':'int[](const string,const int,const string,const string)'})
let c['agentlayerbindings'] = f
let f = []
call add(f,{'word':'agentlayers','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agentlayers','kind':'f','menu':'string[](const string,const int)'})
let c['agentlayers'] = f
let f = []
call add(f,{'word':'agentlayershapes','kind':'f','menu':'string[](const int,const int,const string,const int)'})
call add(f,{'word':'agentlayershapes','kind':'f','menu':'string[](const int,const int,const string,const string)'})
call add(f,{'word':'agentlayershapes','kind':'f','menu':'string[](const string,const int,const string,const int)'})
call add(f,{'word':'agentlayershapes','kind':'f','menu':'string[](const string,const int,const string,const string)'})
let c['agentlayershapes'] = f
let f = []
call add(f,{'word':'agentlocaltransform','kind':'f','menu':'matrix(const int,const int,const int)'})
call add(f,{'word':'agentlocaltransform','kind':'f','menu':'matrix(const string,const int,const int)'})
let c['agentlocaltransform'] = f
let f = []
call add(f,{'word':'agentlocaltransforms','kind':'f','menu':'matrix[](const int,const int)'})
call add(f,{'word':'agentlocaltransforms','kind':'f','menu':'matrix[](const string,const int)'})
let c['agentlocaltransforms'] = f
let f = []
call add(f,{'word':'agentrigchildren','kind':'f','menu':'int[](const int,const int,const int)'})
call add(f,{'word':'agentrigchildren','kind':'f','menu':'int[](const string,const int,const int)'})
let c['agentrigchildren'] = f
let f = []
call add(f,{'word':'agentrigfind','kind':'f','menu':'int(const int,const int,const string)'})
call add(f,{'word':'agentrigfind','kind':'f','menu':'int(const string,const int,const string)'})
let c['agentrigfind'] = f
let f = []
call add(f,{'word':'agentrigparent','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'agentrigparent','kind':'f','menu':'int(const string,const int,const int)'})
let c['agentrigparent'] = f
let f = []
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const int,const int,const int,const int[],const matrix[],const int,const int)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const int,const int,const int,const int[],const matrix[],const int,const int,const float,const int)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const int,const int,const int,const int[],const matrix[],const int,const int,const float,const int,const float[],const int[],const int[])'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const int,const int,const int,const int[],const matrix[],const int,const int,const float,const int,const float[],const int[],const int[],const string,const string,const string)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const string,const int,const int,const int[],const matrix[],const int,const int)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const string,const int,const int,const int[],const matrix[],const int,const int,const float,const int)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const string,const int,const int,const int[],const matrix[],const int,const int,const float,const int,const float[],const int[],const int[])'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const string,const int,const int,const int[],const matrix[],const int,const int,const float,const int,const float[],const int[],const int[],const string,const string,const string)'})
let c['agentsolvefbik'] = f
let f = []
call add(f,{'word':'agenttransformcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'agenttransformcount','kind':'f','menu':'int(const string,const int)'})
let c['agenttransformcount'] = f
let f = []
call add(f,{'word':'agenttransformgroupmember','kind':'f','menu':'int(const int,const int,const int,const int)'})
call add(f,{'word':'agenttransformgroupmember','kind':'f','menu':'int(const int,const int,const string,const int)'})
call add(f,{'word':'agenttransformgroupmember','kind':'f','menu':'int(const string,const int,const int,const int)'})
call add(f,{'word':'agenttransformgroupmember','kind':'f','menu':'int(const string,const int,const string,const int)'})
let c['agenttransformgroupmember'] = f
let f = []
call add(f,{'word':'agenttransformgroups','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agenttransformgroups','kind':'f','menu':'string[](const string,const int)'})
let c['agenttransformgroups'] = f
let f = []
call add(f,{'word':'agenttransformgroupweight','kind':'f','menu':'float(const int,const int,const int,const int)'})
call add(f,{'word':'agenttransformgroupweight','kind':'f','menu':'float(const string,const int,const int,const int)'})
let c['agenttransformgroupweight'] = f
let f = []
call add(f,{'word':'agenttransformnames','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agenttransformnames','kind':'f','menu':'string[](const string,const int)'})
let c['agenttransformnames'] = f
let f = []
call add(f,{'word':'agenttransformtolocal','kind':'f','menu':'int(const int,const int,export matrix[])'})
call add(f,{'word':'agenttransformtolocal','kind':'f','menu':'int(const string,const int,export matrix[])'})
let c['agenttransformtolocal'] = f
let f = []
call add(f,{'word':'agenttransformtoworld','kind':'f','menu':'int(const int,const int,export matrix[])'})
call add(f,{'word':'agenttransformtoworld','kind':'f','menu':'int(const string,const int,export matrix[])'})
let c['agenttransformtoworld'] = f
let f = []
call add(f,{'word':'agentworldtransform','kind':'f','menu':'matrix(const int,const int,const int)'})
call add(f,{'word':'agentworldtransform','kind':'f','menu':'matrix(const string,const int,const int)'})
let c['agentworldtransform'] = f
let f = []
call add(f,{'word':'agentworldtransforms','kind':'f','menu':'matrix[](const int,const int)'})
call add(f,{'word':'agentworldtransforms','kind':'f','menu':'matrix[](const string,const int)'})
let c['agentworldtransforms'] = f
let f = []
call add(f,{'word':'albedo','kind':'f','menu':'vector(const bsdf,const int)'})
call add(f,{'word':'albedo','kind':'f','menu':'vector(const bsdf,const vector,const int)'})
call add(f,{'word':'albedo','kind':'f','menu':'vector(const bsdf,const vector)'})
call add(f,{'word':'albedo','kind':'f','menu':'vector(const bsdf)'})
let c['albedo'] = f
let f = []
let c['and'] = f
let f = []
call add(f,{'word':'anoise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'anoise','kind':'f','menu':'float(const vector,const int,const float,const float)'})
call add(f,{'word':'anoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'anoise','kind':'f','menu':'float(const vector,const int,const int,const int,const int,const float,const float)'})
call add(f,{'word':'anoise','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'anoise','kind':'f','menu':'vector(const vector,const int,const float,const float)'})
call add(f,{'word':'anoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
call add(f,{'word':'anoise','kind':'f','menu':'vector(const vector,const int,const int,const int,const int,const float,const float)'})
let c['anoise'] = f
let f = []
call add(f,{'word':'append','kind':'f','menu':'void(export string,const string)'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix2[],const matrix2)'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix2[],const matrix2[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix3[],const matrix3)'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix3[],const matrix3[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix[],const matrix)'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix[],const matrix[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export float[],const float)'})
call add(f,{'word':'append','kind':'f','menu':'void(export float[],const float[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export int[],const int)'})
call add(f,{'word':'append','kind':'f','menu':'void(export int[],const int[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector4[],const vector4)'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector4[],const vector4[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export string[],const string)'})
call add(f,{'word':'append','kind':'f','menu':'void(export string[],const string[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector2[],const vector2)'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector2[],const vector2[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector[],const vector)'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector[],const vector[])'})
let c['append'] = f
let f = []
call add(f,{'word':'area','kind':'f','menu':'float(const vector)'})
let c['area'] = f
let f = []
call add(f,{'word':'argsort','kind':'f','menu':'int[](const float[])'})
call add(f,{'word':'argsort','kind':'f','menu':'int[](const int[])'})
call add(f,{'word':'argsort','kind':'f','menu':'int[](const string[])'})
let c['argsort'] = f
let f = []
call add(f,{'word':'array','kind':'f','menu':'matrix2[]()'})
call add(f,{'word':'array','kind':'f','menu':'matrix3[]()'})
call add(f,{'word':'array','kind':'f','menu':'matrix[]()'})
call add(f,{'word':'array','kind':'f','menu':'float[]()'})
call add(f,{'word':'array','kind':'f','menu':'int[]()'})
call add(f,{'word':'array','kind':'f','menu':'vector4[]()'})
call add(f,{'word':'array','kind':'f','menu':'string[]()'})
call add(f,{'word':'array','kind':'f','menu':'vector2[]()'})
call add(f,{'word':'array','kind':'f','menu':'vector[]()'})
let c['array'] = f
let f = []
call add(f,{'word':'arraylength','kind':'f','menu':'int(const matrix3)'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const matrix)'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const vector4)'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const vector)'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const matrix3[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const matrix[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const bsdf[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const float[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const vector4[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const string[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const vector[])'})
let c['arraylength'] = f
let f = []
call add(f,{'word':'ashikhmin','kind':'f','menu':'bsdf(const vector,const float,const float,const vector,const vector)'})
let c['ashikhmin'] = f
let f = []
call add(f,{'word':'asin','kind':'f','menu':'float(const float)'})
call add(f,{'word':'asin','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'asin','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'asin','kind':'f','menu':'vector(const vector)'})
let c['asin'] = f
let f = []
call add(f,{'word':'assert_enabled','kind':'f','menu':'int()'})
let c['assert_enabled'] = f
let f = []
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,float,const matrix2)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,float,const matrix2)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,float,float,float,float,float,float,const matrix3)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,float,float,float,float,float,float,const matrix3)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,const matrix)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,const matrix)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,float,const vector4)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,float,const vector4)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,const vector)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,const vector)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,const vector2)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,const vector2)'})
let c['assign'] = f
let f = []
call add(f,{'word':'atan','kind':'f','menu':'float(const float)'})
call add(f,{'word':'atan','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'atan','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'atan','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'atan','kind':'f','menu':'vector(const vector)'})
let c['atan'] = f
let f = []
call add(f,{'word':'atan2','kind':'f','menu':'float(const float,const float)'})
let c['atan2'] = f
let f = []
call add(f,{'word':'atof','kind':'f','menu':'float(const string)'})
let c['atof'] = f
let f = []
call add(f,{'word':'atoi','kind':'f','menu':'int(const string)'})
let c['atoi'] = f
let f = []
call add(f,{'word':'atten','kind':'f','menu':'float(const float,const float)'})
let c['atten'] = f
let f = []
call add(f,{'word':'attrib','kind':'f','menu':'matrix2(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix2(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix3(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix3(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'float(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'float(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector4(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector4(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'string(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'string(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector2(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector2(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix2[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix2[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix3[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix3[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'float[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'float[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'int[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'int[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector4[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector4[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'string[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'string[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector2[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector2[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector[](const string,const string,const string,const int)'})
let c['attrib'] = f
let f = []
call add(f,{'word':'attribclass','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'attribclass','kind':'f','menu':'string(const string,const string)'})
let c['attribclass'] = f
let f = []
call add(f,{'word':'attribdataid','kind':'f','menu':'int[](const int,const string,const string)'})
call add(f,{'word':'attribdataid','kind':'f','menu':'int[](const string,const string,const string)'})
let c['attribdataid'] = f
let f = []
call add(f,{'word':'attribsize','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'attribsize','kind':'f','menu':'int(const string,const string,const string)'})
let c['attribsize'] = f
let f = []
call add(f,{'word':'attribtype','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'attribtype','kind':'f','menu':'int(const string,const string,const string)'})
let c['attribtype'] = f
let f = []
call add(f,{'word':'attribtypeinfo','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'attribtypeinfo','kind':'f','menu':'string(const string,const string,const string)'})
let c['attribtypeinfo'] = f
let f = []
call add(f,{'word':'avg','kind':'f','menu':'float(const float)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'avg','kind':'f','menu':'int(const int)'})
call add(f,{'word':'avg','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'avg','kind':'f','menu':'vector4(const vector4,const vector4)'})
call add(f,{'word':'avg','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'avg','kind':'f','menu':'vector2(const vector2,const vector2)'})
call add(f,{'word':'avg','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'avg','kind':'f','menu':'vector(const vector,const vector)'})
call add(f,{'word':'avg','kind':'f','menu':'vector(const vector[])'})
let c['avg'] = f
let f = []
let c['band'] = f
let f = []
call add(f,{'word':'blackbody','kind':'f','menu':'vector(const float,const float)'})
let c['blackbody'] = f
let f = []
call add(f,{'word':'blinn','kind':'f','menu':'bsdf(const vector,const float)'})
let c['blinn'] = f
let f = []
call add(f,{'word':'blinnBRDF','kind':'f','menu':'float(const vector,const vector,const vector,const float)'})
let c['blinnBRDF'] = f
let f = []
let c['bnot'] = f
let f = []
let c['bor'] = f
let f = []
call add(f,{'word':'bouncelabel','kind':'f','menu':'string(const int)'})
let c['bouncelabel'] = f
let f = []
call add(f,{'word':'bouncemask','kind':'f','menu':'int(const string)'})
let c['bouncemask'] = f
let f = []
let c['br'] = f
let f = []
let c['break'] = f
let f = []
call add(f,{'word':'bumpmap','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmap','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmap','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmap','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmap'] = f
let f = []
call add(f,{'word':'bumpmapA','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapA','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapA','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapA','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapA'] = f
let f = []
call add(f,{'word':'bumpmapB','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapB','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapB','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapB','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapB'] = f
let f = []
call add(f,{'word':'bumpmapG','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapG','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapG','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapG','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapG'] = f
let f = []
call add(f,{'word':'bumpmapL','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapL','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapL','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapL','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapL'] = f
let f = []
call add(f,{'word':'bumpmapR','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapR','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapR','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapR','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapR'] = f
let f = []
let c['bwhile'] = f
let f = []
let c['bxor'] = f
let f = []
call add(f,{'word':'cbrt','kind':'f','menu':'float(const float)'})
call add(f,{'word':'cbrt','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'cbrt','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'cbrt','kind':'f','menu':'vector(const vector)'})
let c['cbrt'] = f
let f = []
call add(f,{'word':'ceil','kind':'f','menu':'float(const float)'})
call add(f,{'word':'ceil','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'ceil','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'ceil','kind':'f','menu':'vector(const vector)'})
let c['ceil'] = f
let f = []
call add(f,{'word':'ch','kind':'f','menu':'float(const int,const int,const int)'})
call add(f,{'word':'ch','kind':'f','menu':'float(const int,const int,const int,const float)'})
call add(f,{'word':'ch','kind':'f','menu':'float(const string)'})
call add(f,{'word':'ch','kind':'f','menu':'float(const string,const float)'})
call add(f,{'word':'ch','kind':'f','menu':'string(const string)'})
call add(f,{'word':'ch','kind':'f','menu':'string(const string,const float)'})
let c['ch'] = f
let f = []
call add(f,{'word':'ch2','kind':'f','menu':'matrix2(const string)'})
call add(f,{'word':'ch2','kind':'f','menu':'matrix2(const string,const float)'})
let c['ch2'] = f
let f = []
call add(f,{'word':'ch3','kind':'f','menu':'matrix3(const string)'})
call add(f,{'word':'ch3','kind':'f','menu':'matrix3(const string,const float)'})
let c['ch3'] = f
let f = []
call add(f,{'word':'ch4','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'ch4','kind':'f','menu':'matrix(const string,const float)'})
let c['ch4'] = f
let f = []
call add(f,{'word':'chadd','kind':'f','menu':'int(const string)'})
call add(f,{'word':'chadd','kind':'f','menu':'int(const string[])'})
let c['chadd'] = f
let f = []
call add(f,{'word':'chattr','kind':'f','menu':'matrix2(const int,const string,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'matrix2(const int,const string,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'matrix2(const int,const string,const int,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'matrix2(const int,const string,const string,const int,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'matrix2(const string,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'matrix2(const string,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'matrix2(const string,const int,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'matrix2(const string,const string,const int,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'matrix3(const int,const string,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'matrix3(const int,const string,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'matrix3(const int,const string,const int,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'matrix3(const int,const string,const string,const int,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'matrix3(const string,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'matrix3(const string,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'matrix3(const string,const int,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'matrix3(const string,const string,const int,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'matrix(const int,const string,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'matrix(const int,const string,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'matrix(const int,const string,const int,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'matrix(const int,const string,const string,const int,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'matrix(const string,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'matrix(const string,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'matrix(const string,const int,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'matrix(const string,const string,const int,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'float(const int,const string,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'float(const int,const string,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'float(const int,const string,const int,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'float(const int,const string,const string,const int,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'float(const string,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'float(const string,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'float(const string,const int,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'float(const string,const string,const int,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'int(const int,const string,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'int(const int,const string,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'int(const int,const string,const int,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'int(const int,const string,const string,const int,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'int(const string,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'int(const string,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'int(const string,const int,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'int(const string,const string,const int,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'vector4(const int,const string,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'vector4(const int,const string,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'vector4(const int,const string,const int,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'vector4(const int,const string,const string,const int,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'vector4(const string,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'vector4(const string,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'vector4(const string,const int,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'vector4(const string,const string,const int,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'string(const int,const string,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'string(const int,const string,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'string(const int,const string,const int,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'string(const int,const string,const string,const int,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'string(const string,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'string(const string,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'string(const string,const int,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'string(const string,const string,const int,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'vector2(const int,const string,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'vector2(const int,const string,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'vector2(const int,const string,const int,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'vector2(const int,const string,const string,const int,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'vector2(const string,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'vector2(const string,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'vector2(const string,const int,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'vector2(const string,const string,const int,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'vector(const int,const string,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'vector(const int,const string,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'vector(const int,const string,const int,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'vector(const int,const string,const string,const int,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'vector(const string,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'vector(const string,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'vector(const string,const int,const int,int)'})
call add(f,{'word':'chattr','kind':'f','menu':'vector(const string,const string,const int,const int,int)'})
let c['chattr'] = f
let f = []
call add(f,{'word':'chattrnames','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'chattrnames','kind':'f','menu':'string[](const string)'})
let c['chattrnames'] = f
let f = []
call add(f,{'word':'chend','kind':'f','menu':'int()'})
call add(f,{'word':'chend','kind':'f','menu':'int(const int)'})
let c['chend'] = f
let f = []
call add(f,{'word':'chendf','kind':'f','menu':'float()'})
call add(f,{'word':'chendf','kind':'f','menu':'float(const int)'})
let c['chendf'] = f
let f = []
call add(f,{'word':'chendt','kind':'f','menu':'float()'})
call add(f,{'word':'chendt','kind':'f','menu':'float(const int)'})
let c['chendt'] = f
let f = []
call add(f,{'word':'chexpr','kind':'f','menu':'float(const string,const string)'})
let c['chexpr'] = f
let f = []
call add(f,{'word':'chexprf','kind':'f','menu':'float(const string,const string,const float)'})
let c['chexprf'] = f
let f = []
call add(f,{'word':'chexprt','kind':'f','menu':'float(const string,const string,const float)'})
let c['chexprt'] = f
let f = []
call add(f,{'word':'chf','kind':'f','menu':'float(const int,const int,const int)'})
call add(f,{'word':'chf','kind':'f','menu':'float(const int,const int,const int,const float)'})
call add(f,{'word':'chf','kind':'f','menu':'float(const string)'})
call add(f,{'word':'chf','kind':'f','menu':'float(const string,const float)'})
let c['chf'] = f
let f = []
call add(f,{'word':'chi','kind':'f','menu':'int(const string)'})
call add(f,{'word':'chi','kind':'f','menu':'int(const string,const float)'})
let c['chi'] = f
let f = []
call add(f,{'word':'chid','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'chid','kind':'f','menu':'void(const string,int,int,int)'})
call add(f,{'word':'chid','kind':'f','menu':'int(const string,int,int)'})
call add(f,{'word':'chid','kind':'f','menu':'void(const string,const string,int,int,int)'})
call add(f,{'word':'chid','kind':'f','menu':'int(const string,const string,int,int)'})
let c['chid'] = f
let f = []
call add(f,{'word':'chindex','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'chindex','kind':'f','menu':'int(const string)'})
call add(f,{'word':'chindex','kind':'f','menu':'int[](const string[])'})
let c['chindex'] = f
let f = []
call add(f,{'word':'chinput','kind':'f','menu':'matrix2(const int,const float)'})
call add(f,{'word':'chinput','kind':'f','menu':'matrix2(const int,const int)'})
call add(f,{'word':'chinput','kind':'f','menu':'matrix2(const int,const int,const float)'})
call add(f,{'word':'chinput','kind':'f','menu':'matrix2(const int,const int,const int)'})
call add(f,{'word':'chinput','kind':'f','menu':'matrix2(const int,const string,const float)'})
call add(f,{'word':'chinput','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'chinput','kind':'f','menu':'matrix2(const string,const float)'})
call add(f,{'word':'chinput','kind':'f','menu':'matrix2(const string,const int)'})
call add(f,{'word':'chinput','kind':'f','menu':'matrix3(const int,const float)'})
call add(f,{'word':'chinput','kind':'f','menu':'matrix3(const int,const int)'})
call add(f,{'word':'chinput','kind':'f','menu':'matrix3(const int,const int,const float)'})
call add(f,{'word':'chinput','kind':'f','menu':'matrix3(const int,const int,const int)'})
call add(f,{'word':'chinput','kind':'f','menu':'matrix3(const int,const string,const float)'})
call add(f,{'word':'chinput','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'chinput','kind':'f','menu':'matrix3(const string,const float)'})
call add(f,{'word':'chinput','kind':'f','menu':'matrix3(const string,const int)'})
call add(f,{'word':'chinput','kind':'f','menu':'matrix(const int,const float)'})
call add(f,{'word':'chinput','kind':'f','menu':'matrix(const int,const int)'})
call add(f,{'word':'chinput','kind':'f','menu':'matrix(const int,const int,const float)'})
call add(f,{'word':'chinput','kind':'f','menu':'matrix(const int,const int,const int)'})
call add(f,{'word':'chinput','kind':'f','menu':'matrix(const int,const string,const float)'})
call add(f,{'word':'chinput','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'chinput','kind':'f','menu':'matrix(const string,const float)'})
call add(f,{'word':'chinput','kind':'f','menu':'matrix(const string,const int)'})
call add(f,{'word':'chinput','kind':'f','menu':'float(const int,const float)'})
call add(f,{'word':'chinput','kind':'f','menu':'float(const int,const int)'})
call add(f,{'word':'chinput','kind':'f','menu':'float(const int,const int,const float)'})
call add(f,{'word':'chinput','kind':'f','menu':'float(const int,const int,const int)'})
call add(f,{'word':'chinput','kind':'f','menu':'float(const int,const string,const float)'})
call add(f,{'word':'chinput','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'chinput','kind':'f','menu':'float(const string,const float)'})
call add(f,{'word':'chinput','kind':'f','menu':'float(const string,const int)'})
call add(f,{'word':'chinput','kind':'f','menu':'int(const int,const float,vector,vector,vector)'})
call add(f,{'word':'chinput','kind':'f','menu':'int(const int,const int,const float,vector,vector,vector)'})
call add(f,{'word':'chinput','kind':'f','menu':'int(const int,const int,const int,vector,vector,vector)'})
call add(f,{'word':'chinput','kind':'f','menu':'int(const int,const int,vector,vector,vector)'})
call add(f,{'word':'chinput','kind':'f','menu':'int(const int,const string,const float,vector,vector,vector)'})
call add(f,{'word':'chinput','kind':'f','menu':'int(const int,const string,const int,vector,vector,vector)'})
call add(f,{'word':'chinput','kind':'f','menu':'int(const string,const float,vector,vector,vector)'})
call add(f,{'word':'chinput','kind':'f','menu':'int(const string,const int,vector,vector,vector)'})
call add(f,{'word':'chinput','kind':'f','menu':'vector4(const int,const float)'})
call add(f,{'word':'chinput','kind':'f','menu':'vector4(const int,const int)'})
call add(f,{'word':'chinput','kind':'f','menu':'vector4(const int,const int,const float)'})
call add(f,{'word':'chinput','kind':'f','menu':'vector4(const int,const int,const int)'})
call add(f,{'word':'chinput','kind':'f','menu':'vector4(const int,const string,const float)'})
call add(f,{'word':'chinput','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'chinput','kind':'f','menu':'vector4(const string,const float)'})
call add(f,{'word':'chinput','kind':'f','menu':'vector4(const string,const int)'})
call add(f,{'word':'chinput','kind':'f','menu':'vector2(const int,const float)'})
call add(f,{'word':'chinput','kind':'f','menu':'vector2(const int,const int)'})
call add(f,{'word':'chinput','kind':'f','menu':'vector2(const int,const int,const float)'})
call add(f,{'word':'chinput','kind':'f','menu':'vector2(const int,const int,const int)'})
call add(f,{'word':'chinput','kind':'f','menu':'vector2(const int,const string,const float)'})
call add(f,{'word':'chinput','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'chinput','kind':'f','menu':'vector2(const string,const float)'})
call add(f,{'word':'chinput','kind':'f','menu':'vector2(const string,const int)'})
call add(f,{'word':'chinput','kind':'f','menu':'vector(const int,const float)'})
call add(f,{'word':'chinput','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'chinput','kind':'f','menu':'vector(const int,const int,const float)'})
call add(f,{'word':'chinput','kind':'f','menu':'vector(const int,const int,const int)'})
call add(f,{'word':'chinput','kind':'f','menu':'vector(const int,const string,const float)'})
call add(f,{'word':'chinput','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'chinput','kind':'f','menu':'vector(const string,const float)'})
call add(f,{'word':'chinput','kind':'f','menu':'vector(const string,const int)'})
let c['chinput'] = f
let f = []
call add(f,{'word':'chinputlimits','kind':'f','menu':'int(const int,const int,float,float)'})
let c['chinputlimits'] = f
let f = []
call add(f,{'word':'chname','kind':'f','menu':'string(const int)'})
call add(f,{'word':'chname','kind':'f','menu':'string(const int,const int)'})
let c['chname'] = f
let f = []
call add(f,{'word':'chnames','kind':'f','menu':'string[]()'})
call add(f,{'word':'chnames','kind':'f','menu':'string[](const int)'})
let c['chnames'] = f
let f = []
call add(f,{'word':'chnumchan','kind':'f','menu':'int()'})
call add(f,{'word':'chnumchan','kind':'f','menu':'int(const int)'})
let c['chnumchan'] = f
let f = []
call add(f,{'word':'chop','kind':'f','menu':'matrix(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'matrix(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'matrix(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'float(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'float(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'float(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector4(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector4(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector4(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector2(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector2(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector2(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector(const string,const string,const int)'})
let c['chop'] = f
let f = []
call add(f,{'word':'choplocal','kind':'f','menu':'matrix(const string,const int,const float)'})
call add(f,{'word':'choplocal','kind':'f','menu':'matrix(const string,const int,const int)'})
call add(f,{'word':'choplocal','kind':'f','menu':'matrix(const string,const string,const float)'})
call add(f,{'word':'choplocal','kind':'f','menu':'matrix(const string,const string,const int)'})
let c['choplocal'] = f
let f = []
call add(f,{'word':'choplocalt','kind':'f','menu':'matrix(const string,const int,const float,const float)'})
call add(f,{'word':'choplocalt','kind':'f','menu':'matrix(const string,const int,const int,const float)'})
call add(f,{'word':'choplocalt','kind':'f','menu':'matrix(const string,const string,const float,const float)'})
call add(f,{'word':'choplocalt','kind':'f','menu':'matrix(const string,const string,const int,const float)'})
let c['choplocalt'] = f
let f = []
call add(f,{'word':'chopt','kind':'f','menu':'matrix(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'matrix(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'matrix(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'matrix(const string,const string,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'float(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'float(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'float(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'float(const string,const string,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector4(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector4(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector4(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector4(const string,const string,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector2(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector2(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector2(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector2(const string,const string,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector(const string,const string,const int,const float)'})
let c['chopt'] = f
let f = []
call add(f,{'word':'chp','kind':'f','menu':'vector4(const string)'})
call add(f,{'word':'chp','kind':'f','menu':'vector4(const string,const float)'})
let c['chp'] = f
let f = []
call add(f,{'word':'chr','kind':'f','menu':'string(const int)'})
let c['chr'] = f
let f = []
call add(f,{'word':'chramp','kind':'f','menu':'float(const string,const float)'})
call add(f,{'word':'chramp','kind':'f','menu':'float(const string,const float,const float)'})
call add(f,{'word':'chramp','kind':'f','menu':'vector(const string,const float)'})
call add(f,{'word':'chramp','kind':'f','menu':'vector(const string,const float,const float)'})
let c['chramp'] = f
let f = []
call add(f,{'word':'chrate','kind':'f','menu':'float()'})
call add(f,{'word':'chrate','kind':'f','menu':'float(const int)'})
let c['chrate'] = f
let f = []
call add(f,{'word':'chreadbuf','kind':'f','menu':'float(const int)'})
let c['chreadbuf'] = f
let f = []
call add(f,{'word':'chremove','kind':'f','menu':'int(const int)'})
call add(f,{'word':'chremove','kind':'f','menu':'int(const string)'})
call add(f,{'word':'chremove','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'chremove','kind':'f','menu':'int(const string[])'})
let c['chremove'] = f
let f = []
call add(f,{'word':'chremoveattr','kind':'f','menu':'int(const string)'})
call add(f,{'word':'chremoveattr','kind':'f','menu':'int(const string,const string)'})
call add(f,{'word':'chremoveattr','kind':'f','menu':'int(const string,const string[])'})
call add(f,{'word':'chremoveattr','kind':'f','menu':'int(const string[])'})
let c['chremoveattr'] = f
let f = []
call add(f,{'word':'chrename','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'chrename','kind':'f','menu':'int(const string,const string)'})
let c['chrename'] = f
let f = []
call add(f,{'word':'chresizebuf','kind':'f','menu':'int(const int)'})
let c['chresizebuf'] = f
let f = []
call add(f,{'word':'chs','kind':'f','menu':'string(const string)'})
call add(f,{'word':'chs','kind':'f','menu':'string(const string,const float)'})
let c['chs'] = f
let f = []
call add(f,{'word':'chsetattr','kind':'f','menu':'int(const string,const int,const int,const matrix2)'})
call add(f,{'word':'chsetattr','kind':'f','menu':'int(const string,const int,const int,const matrix3)'})
call add(f,{'word':'chsetattr','kind':'f','menu':'int(const string,const int,const int,const matrix)'})
call add(f,{'word':'chsetattr','kind':'f','menu':'int(const string,const int,const int,const float)'})
call add(f,{'word':'chsetattr','kind':'f','menu':'int(const string,const int,const int,const int)'})
call add(f,{'word':'chsetattr','kind':'f','menu':'int(const string,const int,const int,const vector4)'})
call add(f,{'word':'chsetattr','kind':'f','menu':'int(const string,const int,const int,const string)'})
call add(f,{'word':'chsetattr','kind':'f','menu':'int(const string,const int,const int,const vector2)'})
call add(f,{'word':'chsetattr','kind':'f','menu':'int(const string,const int,const int,const vector)'})
call add(f,{'word':'chsetattr','kind':'f','menu':'int(const string,const string,const int,const int,const matrix2)'})
call add(f,{'word':'chsetattr','kind':'f','menu':'int(const string,const string,const int,const int,const matrix3)'})
call add(f,{'word':'chsetattr','kind':'f','menu':'int(const string,const string,const int,const int,const matrix)'})
call add(f,{'word':'chsetattr','kind':'f','menu':'int(const string,const string,const int,const int,const float)'})
call add(f,{'word':'chsetattr','kind':'f','menu':'int(const string,const string,const int,const int,const int)'})
call add(f,{'word':'chsetattr','kind':'f','menu':'int(const string,const string,const int,const int,const vector4)'})
call add(f,{'word':'chsetattr','kind':'f','menu':'int(const string,const string,const int,const int,const string)'})
call add(f,{'word':'chsetattr','kind':'f','menu':'int(const string,const string,const int,const int,const vector2)'})
call add(f,{'word':'chsetattr','kind':'f','menu':'int(const string,const string,const int,const int,const vector)'})
let c['chsetattr'] = f
let f = []
call add(f,{'word':'chsetlength','kind':'f','menu':'int(const int)'})
let c['chsetlength'] = f
let f = []
call add(f,{'word':'chsetrate','kind':'f','menu':'int(const float)'})
call add(f,{'word':'chsetrate','kind':'f','menu':'int(const int)'})
let c['chsetrate'] = f
let f = []
call add(f,{'word':'chsetstart','kind':'f','menu':'int(const float)'})
call add(f,{'word':'chsetstart','kind':'f','menu':'int(const int)'})
let c['chsetstart'] = f
let f = []
call add(f,{'word':'chsraw','kind':'f','menu':'string(const string)'})
let c['chsraw'] = f
let f = []
call add(f,{'word':'chstart','kind':'f','menu':'int()'})
call add(f,{'word':'chstart','kind':'f','menu':'int(const int)'})
let c['chstart'] = f
let f = []
call add(f,{'word':'chstartf','kind':'f','menu':'float()'})
call add(f,{'word':'chstartf','kind':'f','menu':'float(const int)'})
let c['chstartf'] = f
let f = []
call add(f,{'word':'chstartt','kind':'f','menu':'float()'})
call add(f,{'word':'chstartt','kind':'f','menu':'float(const int)'})
let c['chstartt'] = f
let f = []
call add(f,{'word':'chu','kind':'f','menu':'vector2(const string)'})
call add(f,{'word':'chu','kind':'f','menu':'vector2(const string,const float)'})
let c['chu'] = f
let f = []
call add(f,{'word':'chv','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'chv','kind':'f','menu':'vector(const int,const int,const float)'})
call add(f,{'word':'chv','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'chv','kind':'f','menu':'vector(const string,const float)'})
let c['chv'] = f
let f = []
call add(f,{'word':'chwritebuf','kind':'f','menu':'int(const int,const float)'})
call add(f,{'word':'chwritebuf','kind':'f','menu':'int(const int,const vector,const vector,const vector)'})
let c['chwritebuf'] = f
let f = []
call add(f,{'word':'ckspline','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'ckspline','kind':'f','menu':'vector4(const float,const vector4,const float)'})
call add(f,{'word':'ckspline','kind':'f','menu':'vector(const float,const vector,const float)'})
let c['ckspline'] = f
let f = []
call add(f,{'word':'clamp','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'clamp','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'clamp','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'clamp','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'clamp','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['clamp'] = f
let f = []
call add(f,{'word':'clip','kind':'f','menu':'void(int,export vector,export vector,const vector4)'})
call add(f,{'word':'clip','kind':'f','menu':'int(export vector,export vector,const vector4)'})
call add(f,{'word':'clip','kind':'f','menu':'void(int,export vector,export vector,const vector,const vector)'})
call add(f,{'word':'clip','kind':'f','menu':'int(export vector,export vector,const vector,const vector)'})
let c['clip'] = f
let f = []
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const float,const float)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const float,const float,const float,const float,const float,const float,const float,const float,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const vector)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const float,const float)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const float,const float,const float,const float,const float,const float,const float,const float,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector,const int)'})
let c['colormap'] = f
let f = []
call add(f,{'word':'computenormal','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'computenormal','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['computenormal'] = f
let f = []
call add(f,{'word':'concat','kind':'f','menu':'string(const string,const string)'})
let c['concat'] = f
let f = []
call add(f,{'word':'cone','kind':'f','menu':'bsdf(const vector,const vector,const float)'})
let c['cone'] = f
let f = []
call add(f,{'word':'cos','kind':'f','menu':'float(const float)'})
call add(f,{'word':'cos','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'cos','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'cos','kind':'f','menu':'vector(const vector)'})
let c['cos'] = f
let f = []
call add(f,{'word':'cosh','kind':'f','menu':'float(const float)'})
call add(f,{'word':'cosh','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'cosh','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'cosh','kind':'f','menu':'vector(const vector)'})
let c['cosh'] = f
let f = []
call add(f,{'word':'cout','kind':'f','menu':'void()'})
let c['cout'] = f
let f = []
call add(f,{'word':'cracktransform','kind':'f','menu':'void(const int,const int,const vector,const matrix,vector,vector,vector)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'vector(const int,const int,const vector,const matrix,vector,vector)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'void(const int,const int,const vector,const vector,const matrix,vector,vector,vector,vector)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'vector(const int,const int,const vector,const vector,const matrix,vector,vector,vector)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'vector(const int,const int,const int,const vector,const matrix)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'vector(const int,const int,const int,const vector,const vector,const matrix)'})
let c['cracktransform'] = f
let f = []
call add(f,{'word':'create_cdf','kind':'f','menu':'float[](const float[])'})
let c['create_cdf'] = f
let f = []
call add(f,{'word':'create_pdf','kind':'f','menu':'float[](const float[])'})
let c['create_pdf'] = f
let f = []
call add(f,{'word':'cross','kind':'f','menu':'vector(const vector,const vector)'})
let c['cross'] = f
let f = []
call add(f,{'word':'cspline','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'cspline','kind':'f','menu':'vector4(const float,const vector4)'})
call add(f,{'word':'cspline','kind':'f','menu':'vector(const float,const vector)'})
let c['cspline'] = f
let f = []
call add(f,{'word':'ctransform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'ctransform','kind':'f','menu':'vector(const string,const vector)'})
let c['ctransform'] = f
let f = []
call add(f,{'word':'curlnoise','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'curlnoise','kind':'f','menu':'vector(const vector)'})
let c['curlnoise'] = f
let f = []
call add(f,{'word':'curlnoise2d','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'curlnoise2d','kind':'f','menu':'vector(const vector)'})
let c['curlnoise2d'] = f
let f = []
call add(f,{'word':'curlxnoise','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'curlxnoise','kind':'f','menu':'vector(const vector)'})
let c['curlxnoise'] = f
let f = []
call add(f,{'word':'curlxnoise2d','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'curlxnoise2d','kind':'f','menu':'vector(const vector)'})
let c['curlxnoise2d'] = f
let f = []
call add(f,{'word':'cvex_bsdf','kind':'f','menu':'bsdf(const string,const string)'})
let c['cvex_bsdf'] = f
let f = []
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,const float,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,const float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,const float,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,const float,float,float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,const float,int,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,const float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,int,float,float,float,float,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,float,float,float,float,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,int,float,float,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,float,float,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector4,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector4,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector4,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector4,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector4,int,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector4,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector2,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector2,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector2,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector2,float,float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector2,int,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector2,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector,int,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector,int,float,float,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector,float,float,const int,const int,const int)'})
let c['cwnoise'] = f
let f = []
call add(f,{'word':'decode','kind':'f','menu':'string(const string)'})
let c['decode'] = f
let f = []
call add(f,{'word':'degrees','kind':'f','menu':'float(const float)'})
call add(f,{'word':'degrees','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'degrees','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'degrees','kind':'f','menu':'vector(const vector)'})
let c['degrees'] = f
let f = []
call add(f,{'word':'depthmap','kind':'f','menu':'float(const string,const float,const float)'})
call add(f,{'word':'depthmap','kind':'f','menu':'float(const string,const vector)'})
let c['depthmap'] = f
let f = []
call add(f,{'word':'detail','kind':'f','menu':'matrix2(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'float(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'float(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'int(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'string(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'float[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'float[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'int[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector[](const string,const string,const int)'})
let c['detail'] = f
let f = []
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix2(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix2(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix3(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix3(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'float(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'float(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'int(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'int(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector4(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector4(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'string(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'string(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector2(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector2(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix2[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix2[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix3[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix3[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'float[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'float[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'int[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'int[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector4[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector4[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'string[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'string[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector2[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector2[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector[](const string,const string,const int,int)'})
let c['detailattrib'] = f
let f = []
call add(f,{'word':'detailattribsize','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'detailattribsize','kind':'f','menu':'int(const string,const string)'})
let c['detailattribsize'] = f
let f = []
call add(f,{'word':'detailattribtype','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'detailattribtype','kind':'f','menu':'int(const string,const string)'})
let c['detailattribtype'] = f
let f = []
call add(f,{'word':'detailattribtypeinfo','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'detailattribtypeinfo','kind':'f','menu':'string(const string,const string)'})
let c['detailattribtypeinfo'] = f
let f = []
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix2(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix2(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix3(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix3(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'float(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'float(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'int(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector4(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector4(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'string(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector2(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector2(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix2[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix2[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix3[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix3[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'float[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'float[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'int[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector4[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector4[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector2[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector2[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector[](const string,const string)'})
let c['detailintrinsic'] = f
let f = []
call add(f,{'word':'determinant','kind':'f','menu':'float(const matrix2)'})
call add(f,{'word':'determinant','kind':'f','menu':'float(const matrix3)'})
call add(f,{'word':'determinant','kind':'f','menu':'float(const matrix)'})
let c['determinant'] = f
let f = []
call add(f,{'word':'diagonalizesymmetric','kind':'f','menu':'matrix3(const matrix3,vector)'})
let c['diagonalizesymmetric'] = f
let f = []
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf(const vector,const float)'})
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf(const vector,const vector,const float)'})
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf(const vector,const vector)'})
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf(const vector)'})
let c['diffuse'] = f
let f = []
call add(f,{'word':'diffuseBRDF','kind':'f','menu':'float(const vector,const vector)'})
call add(f,{'word':'diffuseBRDF','kind':'f','menu':'float(const vector,const vector,const vector,const float)'})
let c['diffuseBRDF'] = f
let f = []
call add(f,{'word':'dihedral','kind':'f','menu':'matrix3(const vector,const vector)'})
call add(f,{'word':'dihedral','kind':'f','menu':'vector4(const vector,const vector)'})
let c['dihedral'] = f
let f = []
call add(f,{'word':'distance','kind':'f','menu':'float(const vector4,const vector4)'})
call add(f,{'word':'distance','kind':'f','menu':'float(const vector2,const vector2)'})
call add(f,{'word':'distance','kind':'f','menu':'float(const vector,const vector)'})
let c['distance'] = f
let f = []
call add(f,{'word':'distance2','kind':'f','menu':'float(const vector4,const vector4)'})
call add(f,{'word':'distance2','kind':'f','menu':'float(const vector2,const vector2)'})
call add(f,{'word':'distance2','kind':'f','menu':'float(const vector,const vector)'})
let c['distance2'] = f
let f = []
let c['div'] = f
let f = []
call add(f,{'word':'dot','kind':'f','menu':'float(const vector4,const vector4)'})
call add(f,{'word':'dot','kind':'f','menu':'float(const vector4,const vector)'})
call add(f,{'word':'dot','kind':'f','menu':'float(const vector2,const vector2)'})
call add(f,{'word':'dot','kind':'f','menu':'float(const vector,const vector4)'})
call add(f,{'word':'dot','kind':'f','menu':'float(const vector,const vector)'})
let c['dot'] = f
let f = []
call add(f,{'word':'dsmpixel','kind':'f','menu':'int(const string,const string,const int,const int,float[])'})
call add(f,{'word':'dsmpixel','kind':'f','menu':'int(const string,const string,const int,const int,vector4[])'})
call add(f,{'word':'dsmpixel','kind':'f','menu':'int(const string,const string,const int,const int,vector[])'})
let c['dsmpixel'] = f
let f = []
call add(f,{'word':'efit','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
call add(f,{'word':'efit','kind':'f','menu':'vector4(const vector4,const vector4,const vector4,const float,const float)'})
call add(f,{'word':'efit','kind':'f','menu':'vector4(const vector4,const vector4,const vector4,const vector4,const vector4)'})
call add(f,{'word':'efit','kind':'f','menu':'vector2(const vector2,const vector2,const vector2,const float,const float)'})
call add(f,{'word':'efit','kind':'f','menu':'vector2(const vector2,const vector2,const vector2,const vector2,const vector2)'})
call add(f,{'word':'efit','kind':'f','menu':'vector(const vector,const vector,const vector,const float,const float)'})
call add(f,{'word':'efit','kind':'f','menu':'vector(const vector,const vector,const vector,const vector,const vector)'})
let c['efit'] = f
let f = []
call add(f,{'word':'eigenvalues','kind':'f','menu':'void(int,const matrix3,vector,vector)'})
call add(f,{'word':'eigenvalues','kind':'f','menu':'int(const matrix3,vector,vector)'})
let c['eigenvalues'] = f
let f = []
let c['else'] = f
let f = []
call add(f,{'word':'encode','kind':'f','menu':'string(const string)'})
let c['encode'] = f
let f = []
let c['endel'] = f
let f = []
let c['endif'] = f
let f = []
let c['endnotif'] = f
let f = []
call add(f,{'word':'endswith','kind':'f','menu':'int(const string,const string)'})
let c['endswith'] = f
let f = []
call add(f,{'word':'environment','kind':'f','menu':'vector4(const string,const vector)'})
call add(f,{'word':'environment','kind':'f','menu':'vector4(const string,const vector,const float)'})
call add(f,{'word':'environment','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'environment','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'environment','kind':'f','menu':'vector(const string,const vector,const float)'})
call add(f,{'word':'environment','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector)'})
let c['environment'] = f
let f = []
let c['eq'] = f
let f = []
call add(f,{'word':'erf','kind':'f','menu':'float(const float)'})
call add(f,{'word':'erf','kind':'f','menu':'vector2(const vector2)'})
let c['erf'] = f
let f = []
call add(f,{'word':'erf_inv','kind':'f','menu':'float(const float)'})
let c['erf_inv'] = f
let f = []
call add(f,{'word':'erfc','kind':'f','menu':'float(const float)'})
let c['erfc'] = f
let f = []
call add(f,{'word':'error','kind':'f','menu':'void(const string)'})
let c['error'] = f
let f = []
call add(f,{'word':'eulertoquaternion','kind':'f','menu':'vector4(const vector,const int)'})
let c['eulertoquaternion'] = f
let f = []
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,float,const int)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,const int)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,const vector,float,const int)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,const vector,const int)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,const vector)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector)'})
let c['eval_bsdf'] = f
let f = []
call add(f,{'word':'exp','kind':'f','menu':'float(const float)'})
call add(f,{'word':'exp','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'exp','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'exp','kind':'f','menu':'vector(const vector)'})
let c['exp'] = f
let f = []
call add(f,{'word':'expand_udim','kind':'f','menu':'string(const float,const float,const string)'})
let c['expand_udim'] = f
let f = []
call add(f,{'word':'expandedgegroup','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'expandedgegroup','kind':'f','menu':'int[](const string,const string)'})
let c['expandedgegroup'] = f
let f = []
call add(f,{'word':'expandpointgroup','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'expandpointgroup','kind':'f','menu':'int[](const string,const string)'})
let c['expandpointgroup'] = f
let f = []
call add(f,{'word':'expandprimgroup','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'expandprimgroup','kind':'f','menu':'int[](const string,const string)'})
let c['expandprimgroup'] = f
let f = []
call add(f,{'word':'expandvertexgroup','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'expandvertexgroup','kind':'f','menu':'int[](const string,const string)'})
let c['expandvertexgroup'] = f
let f = []
call add(f,{'word':'filamentsample','kind':'f','menu':'vector(const int,const vector)'})
call add(f,{'word':'filamentsample','kind':'f','menu':'vector(const string,const vector)'})
let c['filamentsample'] = f
let f = []
call add(f,{'word':'file_stat','kind':'f','menu':'int(const string,int[])'})
let c['file_stat'] = f
let f = []
call add(f,{'word':'filterstep','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'filterstep','kind':'f','menu':'float(const float,const float,const float)'})
let c['filterstep'] = f
let f = []
call add(f,{'word':'find','kind':'f','menu':'int(const string,const string)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string,const string,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix2[],const matrix2)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix2[],const matrix2,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix2[],const matrix2,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix3[],const matrix3)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix3[],const matrix3,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix3[],const matrix3,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix[],const matrix)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix[],const matrix,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix[],const matrix,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const float[],const float)'})
call add(f,{'word':'find','kind':'f','menu':'int(const float[],const float,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const float[],const float,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const int[],const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const int[],const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const int[],const int,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector4[],const vector4)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector4[],const vector4,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector4[],const vector4,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string[],const string)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string[],const string,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string[],const string,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector2[],const vector2)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector2[],const vector2,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector2[],const vector2,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector[],const vector)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector[],const vector,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector[],const vector,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string,const string)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string,const string,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix2[],const matrix2)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix2[],const matrix2,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix2[],const matrix2,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix3[],const matrix3)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix3[],const matrix3,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix3[],const matrix3,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix[],const matrix)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix[],const matrix,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix[],const matrix,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const float[],const float)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const float[],const float,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const float[],const float,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const int[],const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const int[],const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const int[],const int,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector4[],const vector4)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector4[],const vector4,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector4[],const vector4,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string[],const string)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string[],const string,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string[],const string,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector2[],const vector2)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector2[],const vector2,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector2[],const vector2,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector[],const vector)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector[],const vector,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector[],const vector,const int,const int)'})
let c['find'] = f
let f = []
call add(f,{'word':'findattribval','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const int,const string,const string,const int,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const int,const string,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const string,const string,const string,const int,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const string,const string,const string,const string)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const string,const string,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int[](const int,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int[](const int,const string,const string,const string)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int[](const string,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int[](const string,const string,const string,const string)'})
let c['findattribval'] = f
let f = []
call add(f,{'word':'findattribvalcount','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'findattribvalcount','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'findattribvalcount','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'findattribvalcount','kind':'f','menu':'int(const string,const string,const string,const string)'})
let c['findattribvalcount'] = f
let f = []
call add(f,{'word':'fit','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
call add(f,{'word':'fit','kind':'f','menu':'vector4(const vector4,const vector4,const vector4,const vector4,const vector4)'})
call add(f,{'word':'fit','kind':'f','menu':'vector2(const vector2,const vector2,const vector2,const vector2,const vector2)'})
call add(f,{'word':'fit','kind':'f','menu':'vector(const vector,const vector,const vector,const vector,const vector)'})
let c['fit'] = f
let f = []
call add(f,{'word':'fit01','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'fit01','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'fit01','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'fit01','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['fit01'] = f
let f = []
call add(f,{'word':'fit10','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'fit10','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'fit10','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'fit10','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['fit10'] = f
let f = []
call add(f,{'word':'fit11','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'fit11','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'fit11','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'fit11','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['fit11'] = f
let f = []
call add(f,{'word':'floor','kind':'f','menu':'float(const float)'})
call add(f,{'word':'floor','kind':'f','menu':'int(const float)'})
call add(f,{'word':'floor','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'floor','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'floor','kind':'f','menu':'vector(const vector)'})
let c['floor'] = f
let f = []
call add(f,{'word':'flownoise','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'float(const vector4,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'float(const vector,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'vector(const float,const float,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'vector(const vector4,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'vector(const vector,const float)'})
let c['flownoise'] = f
let f = []
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const float,const float,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const vector4,const int,const int,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const vector4,const vector4,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const vector,const int,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const vector,const vector,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const float,const float,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const vector4,const int,const int,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const vector4,const vector4,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const vector,const int,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const vector,const vector,const float)'})
let c['flowpnoise'] = f
let f = []
call add(f,{'word':'frac','kind':'f','menu':'float(const float)'})
call add(f,{'word':'frac','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'frac','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'frac','kind':'f','menu':'vector(const vector)'})
let c['frac'] = f
let f = []
call add(f,{'word':'fresnel','kind':'f','menu':'void(const vector,const vector,const float,float,float)'})
call add(f,{'word':'fresnel','kind':'f','menu':'float(const vector,const vector,const float,float)'})
call add(f,{'word':'fresnel','kind':'f','menu':'void(const vector,const vector,const float,float,float,vector,vector)'})
call add(f,{'word':'fresnel','kind':'f','menu':'float(const vector,const vector,const float,float,vector,vector)'})
let c['fresnel'] = f
let f = []
call add(f,{'word':'fromNDC','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'fromNDC','kind':'f','menu':'vector(const vector)'})
let c['fromNDC'] = f
let f = []
call add(f,{'word':'frontface','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['frontface'] = f
let f = []
call add(f,{'word':'fuzzify','kind':'f','menu':'float(const string[],const float[],const float[],const float,const float,const float)'})
let c['fuzzify'] = f
let f = []
call add(f,{'word':'fuzzy_and','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_and','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_and'] = f
let f = []
call add(f,{'word':'fuzzy_defuzz_centroid','kind':'f','menu':'float(const float[],const float,const float)'})
let c['fuzzy_defuzz_centroid'] = f
let f = []
call add(f,{'word':'fuzzy_nand','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_nand','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_nand'] = f
let f = []
call add(f,{'word':'fuzzy_nor','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_nor','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_nor'] = f
let f = []
call add(f,{'word':'fuzzy_not','kind':'f','menu':'float(const float)'})
call add(f,{'word':'fuzzy_not','kind':'f','menu':'int(const int)'})
let c['fuzzy_not'] = f
let f = []
call add(f,{'word':'fuzzy_nxor','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_nxor','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_nxor'] = f
let f = []
call add(f,{'word':'fuzzy_or','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_or','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_or'] = f
let f = []
call add(f,{'word':'fuzzy_xor','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_xor','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_xor'] = f
let f = []
let c['ge'] = f
let f = []
call add(f,{'word':'geoself','kind':'f','menu':'int()'})
let c['geoself'] = f
let f = []
call add(f,{'word':'geounwrap','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'geounwrap','kind':'f','menu':'string(const string,const string)'})
let c['geounwrap'] = f
let f = []
call add(f,{'word':'getattrib','kind':'f','menu':'matrix2(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix2(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix3(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix3(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'float(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'float(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'int(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'int(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector4(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector4(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'string(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'string(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector2(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector2(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix2[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix2[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix3[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix3[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'float[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'float[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'int[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'int[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector4[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector4[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'string[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'string[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector2[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector2[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector[](const string,const string,const string,const int,int)'})
let c['getattrib'] = f
let f = []
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,matrix3,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,matrix,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,float,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,int,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,vector4,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,string,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,vector,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,float[],const string,const string,const int,const int)'})
let c['getattribute'] = f
let f = []
call add(f,{'word':'getbbox','kind':'f','menu':'void(const int,const string,vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(const int,const string,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'void(const int,vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(const int,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'void(const string,const string,vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(const string,const string,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'void(const string,vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(const string,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'void(vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(vector)'})
let c['getbbox'] = f
let f = []
call add(f,{'word':'getbbox_center','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getbbox_center','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getbbox_center','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getbbox_center','kind':'f','menu':'vector(const string,const string)'})
let c['getbbox_center'] = f
let f = []
call add(f,{'word':'getbbox_max','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getbbox_max','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getbbox_max','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getbbox_max','kind':'f','menu':'vector(const string,const string)'})
let c['getbbox_max'] = f
let f = []
call add(f,{'word':'getbbox_min','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getbbox_min','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getbbox_min','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getbbox_min','kind':'f','menu':'vector(const string,const string)'})
let c['getbbox_min'] = f
let f = []
call add(f,{'word':'getbbox_size','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getbbox_size','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getbbox_size','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getbbox_size','kind':'f','menu':'vector(const string,const string)'})
let c['getbbox_size'] = f
let f = []
call add(f,{'word':'getbounces','kind':'f','menu':'int(const bsdf)'})
let c['getbounces'] = f
let f = []
call add(f,{'word':'getbounds','kind':'f','menu':'int(const string,const string,vector,vector)'})
call add(f,{'word':'getbounds','kind':'f','menu':'int(const string,vector,vector)'})
let c['getbounds'] = f
let f = []
call add(f,{'word':'getcomp','kind':'f','menu':'matrix2(const matrix2[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'matrix3(const matrix3[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'matrix(const matrix[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'bsdf(const bsdf[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const matrix2,const int,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const matrix3,const int,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const matrix,const int,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const vector4,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const vector2,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const vector,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const float[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'int(const int[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'vector4(const vector4[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'string(const string,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'string(const string[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'vector2(const vector2[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'vector(const vector[],const int)'})
let c['getcomp'] = f
let f = []
let c['getelem'] = f
let f = []
call add(f,{'word':'getpackedtransform','kind':'f','menu':'matrix(const int,const int)'})
let c['getpackedtransform'] = f
let f = []
call add(f,{'word':'getpointbbox','kind':'f','menu':'void(const int,const string,vector,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'vector(const int,const string,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'void(const int,vector,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'vector(const int,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'void(const string,const string,vector,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'vector(const string,const string,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'void(const string,vector,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'vector(const string,vector)'})
let c['getpointbbox'] = f
let f = []
call add(f,{'word':'getpointbbox_center','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getpointbbox_center','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getpointbbox_center','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getpointbbox_center','kind':'f','menu':'vector(const string,const string)'})
let c['getpointbbox_center'] = f
let f = []
call add(f,{'word':'getpointbbox_max','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getpointbbox_max','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getpointbbox_max','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getpointbbox_max','kind':'f','menu':'vector(const string,const string)'})
let c['getpointbbox_max'] = f
let f = []
call add(f,{'word':'getpointbbox_min','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getpointbbox_min','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getpointbbox_min','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getpointbbox_min','kind':'f','menu':'vector(const string,const string)'})
let c['getpointbbox_min'] = f
let f = []
call add(f,{'word':'getpointbbox_size','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getpointbbox_size','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getpointbbox_size','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getpointbbox_size','kind':'f','menu':'vector(const string,const string)'})
let c['getpointbbox_size'] = f
let f = []
call add(f,{'word':'getspace','kind':'f','menu':'matrix(const string,const string)'})
let c['getspace'] = f
let f = []
call add(f,{'word':'gradient','kind':'f','menu':'vector(const vector,const float)'})
let c['gradient'] = f
let f = []
call add(f,{'word':'gradient3d','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['gradient3d'] = f
let f = []
let c['gt'] = f
let f = []
call add(f,{'word':'hair','kind':'f','menu':'bsdf(const vector,const vector,const float,const float,const float,const float,const float)'})
call add(f,{'word':'hair','kind':'f','menu':'bsdf(const vector,const vector,const float,const float,const float)'})
call add(f,{'word':'hair','kind':'f','menu':'bsdf(const vector,const vector,const float,const float)'})
let c['hair'] = f
let f = []
call add(f,{'word':'has_udim','kind':'f','menu':'int(const string)'})
let c['has_udim'] = f
let f = []
call add(f,{'word':'hasattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'hasattrib','kind':'f','menu':'int(const string,const string,const string)'})
let c['hasattrib'] = f
let f = []
call add(f,{'word':'hasdetailattrib','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'hasdetailattrib','kind':'f','menu':'int(const string,const string)'})
let c['hasdetailattrib'] = f
let f = []
call add(f,{'word':'haspointattrib','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'haspointattrib','kind':'f','menu':'int(const string,const string)'})
let c['haspointattrib'] = f
let f = []
call add(f,{'word':'hasprimattrib','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'hasprimattrib','kind':'f','menu':'int(const string,const string)'})
let c['hasprimattrib'] = f
let f = []
call add(f,{'word':'hasvertexattrib','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'hasvertexattrib','kind':'f','menu':'int(const string,const string)'})
let c['hasvertexattrib'] = f
let f = []
call add(f,{'word':'hedge_dstpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_dstpoint','kind':'f','menu':'int(const string,const int)'})
let c['hedge_dstpoint'] = f
let f = []
call add(f,{'word':'hedge_dstvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_dstvertex','kind':'f','menu':'int(const string,const int)'})
let c['hedge_dstvertex'] = f
let f = []
call add(f,{'word':'hedge_equivcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_equivcount','kind':'f','menu':'int(const string,const int)'})
let c['hedge_equivcount'] = f
let f = []
call add(f,{'word':'hedge_isequiv','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'hedge_isequiv','kind':'f','menu':'int(const string,const int,const int)'})
let c['hedge_isequiv'] = f
let f = []
call add(f,{'word':'hedge_isprimary','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_isprimary','kind':'f','menu':'int(const string,const int)'})
let c['hedge_isprimary'] = f
let f = []
call add(f,{'word':'hedge_isvalid','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_isvalid','kind':'f','menu':'int(const string,const int)'})
let c['hedge_isvalid'] = f
let f = []
call add(f,{'word':'hedge_next','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_next','kind':'f','menu':'int(const string,const int)'})
let c['hedge_next'] = f
let f = []
call add(f,{'word':'hedge_nextequiv','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_nextequiv','kind':'f','menu':'int(const string,const int)'})
let c['hedge_nextequiv'] = f
let f = []
call add(f,{'word':'hedge_postdstpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_postdstpoint','kind':'f','menu':'int(const string,const int)'})
let c['hedge_postdstpoint'] = f
let f = []
call add(f,{'word':'hedge_postdstvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_postdstvertex','kind':'f','menu':'int(const string,const int)'})
let c['hedge_postdstvertex'] = f
let f = []
call add(f,{'word':'hedge_presrcpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_presrcpoint','kind':'f','menu':'int(const string,const int)'})
let c['hedge_presrcpoint'] = f
let f = []
call add(f,{'word':'hedge_presrcvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_presrcvertex','kind':'f','menu':'int(const string,const int)'})
let c['hedge_presrcvertex'] = f
let f = []
call add(f,{'word':'hedge_prev','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_prev','kind':'f','menu':'int(const string,const int)'})
let c['hedge_prev'] = f
let f = []
call add(f,{'word':'hedge_prim','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_prim','kind':'f','menu':'int(const string,const int)'})
let c['hedge_prim'] = f
let f = []
call add(f,{'word':'hedge_primary','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_primary','kind':'f','menu':'int(const string,const int)'})
let c['hedge_primary'] = f
let f = []
call add(f,{'word':'hedge_srcpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_srcpoint','kind':'f','menu':'int(const string,const int)'})
let c['hedge_srcpoint'] = f
let f = []
call add(f,{'word':'hedge_srcvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_srcvertex','kind':'f','menu':'int(const string,const int)'})
let c['hedge_srcvertex'] = f
let f = []
call add(f,{'word':'henyeygreenstein','kind':'f','menu':'bsdf(const float)'})
let c['henyeygreenstein'] = f
let f = []
call add(f,{'word':'hscript_noise','kind':'f','menu':'float(const vector)'})
let c['hscript_noise'] = f
let f = []
call add(f,{'word':'hscript_rand','kind':'f','menu':'float(const float)'})
call add(f,{'word':'hscript_rand','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'hscript_rand','kind':'f','menu':'vector(const float)'})
let c['hscript_rand'] = f
let f = []
call add(f,{'word':'hscript_snoise','kind':'f','menu':'float(const vector)'})
let c['hscript_snoise'] = f
let f = []
call add(f,{'word':'hscript_sturb','kind':'f','menu':'float(const vector,const int)'})
let c['hscript_sturb'] = f
let f = []
call add(f,{'word':'hscript_turb','kind':'f','menu':'float(const vector,const int)'})
let c['hscript_turb'] = f
let f = []
call add(f,{'word':'hsvtorgb','kind':'f','menu':'vector(const float,const float,const float)'})
call add(f,{'word':'hsvtorgb','kind':'f','menu':'vector(const vector)'})
let c['hsvtorgb'] = f
let f = []
call add(f,{'word':'ident','kind':'f','menu':'matrix2()'})
call add(f,{'word':'ident','kind':'f','menu':'matrix3()'})
call add(f,{'word':'ident','kind':'f','menu':'matrix()'})
let c['ident'] = f
let f = []
call add(f,{'word':'idtopoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'idtopoint','kind':'f','menu':'int(const string,const int)'})
let c['idtopoint'] = f
let f = []
call add(f,{'word':'idtoprim','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'idtoprim','kind':'f','menu':'int(const string,const int)'})
let c['idtoprim'] = f
let f = []
let c['if'] = f
let f = []
call add(f,{'word':'inedgegroup','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'inedgegroup','kind':'f','menu':'int(const string,const string,const int,const int)'})
let c['inedgegroup'] = f
let f = []
call add(f,{'word':'inpointgroup','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'inpointgroup','kind':'f','menu':'int(const string,const string,const int)'})
let c['inpointgroup'] = f
let f = []
call add(f,{'word':'inprimgroup','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'inprimgroup','kind':'f','menu':'int(const string,const string,const int)'})
let c['inprimgroup'] = f
let f = []
call add(f,{'word':'insert','kind':'f','menu':'void(export string,const int,const string)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix2[],const int,const matrix2)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix2[],const int,const matrix2[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix3[],const int,const matrix3)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix3[],const int,const matrix3[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix[],const int,const matrix)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix[],const int,const matrix[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export float[],const int,const float)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export float[],const int,const float[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export int[],const int,const int)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export int[],const int,const int[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector4[],const int,const vector4)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector4[],const int,const vector4[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export string[],const int,const string)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export string[],const int,const string[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector2[],const int,const vector2)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector2[],const int,const vector2[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector[],const int,const vector)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector[],const int,const vector[])'})
let c['insert'] = f
let f = []
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector4,const vector4)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector4,const vector4,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector4,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector4,const vector,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector)'})
let c['instance'] = f
let f = []
call add(f,{'word':'integrate3d','kind':'f','menu':'float(const string,const string,const vector,const vector)'})
call add(f,{'word':'integrate3d','kind':'f','menu':'vector4(const string,const string,const vector,const vector)'})
call add(f,{'word':'integrate3d','kind':'f','menu':'vector(const string,const string,const vector,const vector)'})
let c['integrate3d'] = f
let f = []
call add(f,{'word':'integrate3dClip','kind':'f','menu':'int(const string,const string,export vector,export vector,const float)'})
let c['integrate3dClip'] = f
let f = []
call add(f,{'word':'interpolate','kind':'f','menu':'bsdf(const bsdf,const float,const float)'})
call add(f,{'word':'interpolate','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'interpolate','kind':'f','menu':'vector4(const vector4,const float,const float)'})
call add(f,{'word':'interpolate','kind':'f','menu':'vector(const vector,const float,const float)'})
let c['interpolate'] = f
let f = []
call add(f,{'word':'intersect','kind':'f','menu':'int(const int,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const int,const vector,const vector,vector,float,float)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const int,const vector,const vector,vector,vector)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const string,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const string,const vector,const vector,vector,float,float)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const string,const vector,const vector,vector,vector)'})
let c['intersect'] = f
let f = []
call add(f,{'word':'intersect3d','kind':'f','menu':'int(const string,const string,const vector,const vector,const float)'})
let c['intersect3d'] = f
let f = []
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const int,const string,const vector,const vector,vector[],int[],vector[])'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const int,const string,const vector,const vector,vector[],int[],vector[],const float,const float)'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const int,const vector,const vector,vector[],int[],vector[])'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const int,const vector,const vector,vector[],int[],vector[],const float,const float)'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const string,const string,const vector,const vector,vector[],int[],vector[])'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const string,const string,const vector,const vector,vector[],int[],vector[],const float,const float)'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const string,const vector,const vector,vector[],int[],vector[])'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const string,const vector,const vector,vector[],int[],vector[],const float,const float)'})
let c['intersect_all'] = f
let f = []
call add(f,{'word':'invert','kind':'f','menu':'matrix2(const matrix2)'})
call add(f,{'word':'invert','kind':'f','menu':'matrix3(const matrix3)'})
call add(f,{'word':'invert','kind':'f','menu':'matrix(const matrix)'})
let c['invert'] = f
let f = []
call add(f,{'word':'invertexgroup','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'invertexgroup','kind':'f','menu':'int(const string,const string,const int)'})
let c['invertexgroup'] = f
let f = []
call add(f,{'word':'isalpha','kind':'f','menu':'int(const string)'})
let c['isalpha'] = f
let f = []
call add(f,{'word':'isbound','kind':'f','menu':'int(const string)'})
let c['isbound'] = f
let f = []
call add(f,{'word':'isconnected','kind':'f','menu':'int(const int)'})
let c['isconnected'] = f
let f = []
call add(f,{'word':'isdigit','kind':'f','menu':'int(const string)'})
let c['isdigit'] = f
let f = []
call add(f,{'word':'isfinite','kind':'f','menu':'int(const float)'})
let c['isfinite'] = f
let f = []
call add(f,{'word':'isframes','kind':'f','menu':'int()'})
let c['isframes'] = f
let f = []
call add(f,{'word':'isnan','kind':'f','menu':'int(const float)'})
let c['isnan'] = f
let f = []
call add(f,{'word':'isotropic','kind':'f','menu':'bsdf()'})
let c['isotropic'] = f
let f = []
call add(f,{'word':'issamples','kind':'f','menu':'int()'})
let c['issamples'] = f
let f = []
call add(f,{'word':'isseconds','kind':'f','menu':'int()'})
let c['isseconds'] = f
let f = []
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(const string,const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export matrix2[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export matrix3[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export matrix[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export float[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export int[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export vector4[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export string[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export vector2[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export vector[],const int)'})
let c['isvalidindex'] = f
let f = []
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix2)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix3)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const bsdf)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const float)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const int)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector4)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const string)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector2)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix2[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix3[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const bsdf[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const float[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector4[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const string[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector2[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector[])'})
let c['isvarying'] = f
let f = []
call add(f,{'word':'itoa','kind':'f','menu':'string(const int)'})
let c['itoa'] = f
let f = []
call add(f,{'word':'join','kind':'f','menu':'string(const string[],const string)'})
let c['join'] = f
let f = []
let c['jump'] = f
let f = []
call add(f,{'word':'kspline','kind':'f','menu':'float(const string,const float,const float,const float)'})
call add(f,{'word':'kspline','kind':'f','menu':'vector4(const string,const float,const vector4,const float)'})
call add(f,{'word':'kspline','kind':'f','menu':'vector(const string,const float,const vector,const float)'})
let c['kspline'] = f
let f = []
let c['le'] = f
let f = []
call add(f,{'word':'len','kind':'f','menu':'int(const matrix2)'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix3)'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix)'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector4)'})
call add(f,{'word':'len','kind':'f','menu':'int(const string)'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector2)'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector)'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix2[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix3[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const bsdf[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const float[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector4[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const string[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector2[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector[])'})
let c['len'] = f
let f = []
call add(f,{'word':'length','kind':'f','menu':'float(const float)'})
call add(f,{'word':'length','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'length','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'length','kind':'f','menu':'float(const vector)'})
let c['length'] = f
let f = []
call add(f,{'word':'length2','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'length2','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'length2','kind':'f','menu':'float(const vector)'})
let c['length2'] = f
let f = []
call add(f,{'word':'lerp','kind':'f','menu':'bsdf(const bsdf,const bsdf,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector4(const vector4,const vector4,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector2(const vector2,const vector2,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector(const vector,const vector,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['lerp'] = f
let f = []
call add(f,{'word':'limit_sample_space','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'limit_sample_space','kind':'f','menu':'float(const float,const float,const float)'})
let c['limit_sample_space'] = f
let f = []
call add(f,{'word':'lkspline','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'lkspline','kind':'f','menu':'vector4(const float,const vector4,const float)'})
call add(f,{'word':'lkspline','kind':'f','menu':'vector(const float,const vector,const float)'})
let c['lkspline'] = f
let f = []
call add(f,{'word':'log','kind':'f','menu':'float(const float)'})
call add(f,{'word':'log','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'log','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'log','kind':'f','menu':'vector(const vector)'})
let c['log'] = f
let f = []
call add(f,{'word':'log10','kind':'f','menu':'float(const float)'})
call add(f,{'word':'log10','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'log10','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'log10','kind':'f','menu':'vector(const vector)'})
let c['log10'] = f
let f = []
call add(f,{'word':'lookat','kind':'f','menu':'matrix3(const vector,const vector)'})
call add(f,{'word':'lookat','kind':'f','menu':'matrix3(const vector,const vector,const float)'})
call add(f,{'word':'lookat','kind':'f','menu':'matrix3(const vector,const vector,const vector)'})
call add(f,{'word':'lookat','kind':'f','menu':'vector(const vector,const vector,const float,const int)'})
call add(f,{'word':'lookat','kind':'f','menu':'vector(const vector,const vector,const vector,const int)'})
let c['lookat'] = f
let f = []
let c['loop'] = f
let f = []
call add(f,{'word':'lspline','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'lspline','kind':'f','menu':'vector4(const float,const vector4)'})
call add(f,{'word':'lspline','kind':'f','menu':'vector(const float,const vector)'})
let c['lspline'] = f
let f = []
call add(f,{'word':'lstrip','kind':'f','menu':'string(const string)'})
call add(f,{'word':'lstrip','kind':'f','menu':'string(const string,const string)'})
let c['lstrip'] = f
let f = []
let c['lt'] = f
let f = []
call add(f,{'word':'luminance','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'luminance','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'luminance','kind':'f','menu':'float(const vector)'})
let c['luminance'] = f
let f = []
call add(f,{'word':'makebasis','kind':'f','menu':'void(vector,vector,const vector)'})
call add(f,{'word':'makebasis','kind':'f','menu':'vector(vector,const vector)'})
call add(f,{'word':'makebasis','kind':'f','menu':'void(export vector,export vector,const vector,const vector)'})
let c['makebasis'] = f
let f = []
call add(f,{'word':'maketransform','kind':'f','menu':'matrix3(const int,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix3(const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const int,const int,const vector,const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const int,const int,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const int,const int,const vector,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const int,const int,const vector,const vector,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const vector,const vector,const vector)'})
let c['maketransform'] = f
let f = []
call add(f,{'word':'mask_bsdf','kind':'f','menu':'bsdf(const bsdf,const int)'})
let c['mask_bsdf'] = f
let f = []
call add(f,{'word':'match','kind':'f','menu':'int(const string,const string)'})
let c['match'] = f
let f = []
call add(f,{'word':'matchvex_blinn','kind':'f','menu':'bsdf(const vector,const float)'})
let c['matchvex_blinn'] = f
let f = []
call add(f,{'word':'matchvex_specular','kind':'f','menu':'bsdf(const vector,const float)'})
let c['matchvex_specular'] = f
let f = []
call add(f,{'word':'max','kind':'f','menu':'float(const float)'})
call add(f,{'word':'max','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'max','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'max','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'max','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'max','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'max','kind':'f','menu':'int(const int)'})
call add(f,{'word':'max','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'max','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'max','kind':'f','menu':'vector4(const vector4,const vector4)'})
call add(f,{'word':'max','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'max','kind':'f','menu':'vector2(const vector2,const vector2)'})
call add(f,{'word':'max','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'max','kind':'f','menu':'vector(const vector,const vector)'})
call add(f,{'word':'max','kind':'f','menu':'vector(const vector[])'})
let c['max'] = f
let f = []
let c['measured'] = f
let f = []
let c['merge'] = f
let f = []
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,matrix2)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,matrix3)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,matrix)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,float)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,int)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,vector4)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,vector2)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'matrix3[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'matrix[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'float[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'vector4[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'vector[](const string,const string,const vector)'})
let c['metaimport'] = f
let f = []
call add(f,{'word':'metamarch','kind':'f','menu':'int(export int,const string,export vector,export vector,const float)'})
let c['metamarch'] = f
let f = []
call add(f,{'word':'metanext','kind':'f','menu':'int(const int)'})
let c['metanext'] = f
let f = []
call add(f,{'word':'metastart','kind':'f','menu':'int(const string,const vector)'})
let c['metastart'] = f
let f = []
call add(f,{'word':'metaweight','kind':'f','menu':'float(const string,const vector)'})
let c['metaweight'] = f
let f = []
call add(f,{'word':'min','kind':'f','menu':'float(const float)'})
call add(f,{'word':'min','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'min','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'min','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'min','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'min','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'min','kind':'f','menu':'int(const int)'})
call add(f,{'word':'min','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'min','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'min','kind':'f','menu':'vector4(const vector4,const vector4)'})
call add(f,{'word':'min','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'min','kind':'f','menu':'vector2(const vector2,const vector2)'})
call add(f,{'word':'min','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'min','kind':'f','menu':'vector(const vector,const vector)'})
call add(f,{'word':'min','kind':'f','menu':'vector(const vector[])'})
let c['min'] = f
let f = []
call add(f,{'word':'minpos','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const int,const string,const vector,const float)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const int,const vector)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const int,const vector,const float)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const string,const string,const vector,const float)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const string,const vector,const float)'})
let c['minpos'] = f
let f = []
let c['mod'] = f
let f = []
let c['mul'] = f
let f = []
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,const float,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,const float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,const float,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,const float,float,float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,const float,int,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,const float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,int,float,float,float,float,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,float,float,float,float,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,int,float,float,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,float,float,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector4,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector4,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector4,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector4,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector4,int,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector4,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector2,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector2,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector2,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector2,float,float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector2,int,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector2,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector,int,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector,int,float,float,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector,float,float,const int,const int,const int)'})
let c['mwnoise'] = f
let f = []
call add(f,{'word':'nametopoint','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nametopoint','kind':'f','menu':'int(const string,const string)'})
let c['nametopoint'] = f
let f = []
call add(f,{'word':'nametoprim','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nametoprim','kind':'f','menu':'int(const string,const string)'})
let c['nametoprim'] = f
let f = []
call add(f,{'word':'nbouncetypes','kind':'f','menu':'int()'})
let c['nbouncetypes'] = f
let f = []
let c['ne'] = f
let f = []
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const int,const string,const vector,const float)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const int,const vector)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const int,const vector,const float)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const string,const string,const vector)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const string,const string,const vector,const float)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const string,const vector)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const string,const vector,const float)'})
let c['nearpoint'] = f
let f = []
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const int,const string,const vector,const float)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const int,const string,const vector,const float,const int)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const int,const vector,const float)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const int,const vector,const float,const int)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const string,const string,const vector,const float)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const string,const string,const vector,const float,const int)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const string,const vector,const float)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const string,const vector,const float,const int)'})
let c['nearpoints'] = f
let f = []
call add(f,{'word':'nedgesgroup','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nedgesgroup','kind':'f','menu':'int(const string,const string)'})
let c['nedgesgroup'] = f
let f = []
let c['neg'] = f
let f = []
call add(f,{'word':'neighbour','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'neighbour','kind':'f','menu':'int(const string,const int,const int)'})
let c['neighbour'] = f
let f = []
call add(f,{'word':'neighbourcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'neighbourcount','kind':'f','menu':'int(const string,const int)'})
let c['neighbourcount'] = f
let f = []
call add(f,{'word':'neighbours','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'neighbours','kind':'f','menu':'int[](const string,const int)'})
let c['neighbours'] = f
let f = []
call add(f,{'word':'ninputs','kind':'f','menu':'int()'})
let c['ninputs'] = f
let f = []
call add(f,{'word':'noise','kind':'f','menu':'float(const float)'})
call add(f,{'word':'noise','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'noise','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'noise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'noise','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'noise','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'noise','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'noise','kind':'f','menu':'vector(const vector)'})
let c['noise'] = f
let f = []
call add(f,{'word':'noised','kind':'f','menu':'void(const float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'float(const float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const float,const float,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'float(const float,const float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const float,const float,vector,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'vector(const float,const float,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const float,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'vector(const float,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const vector4,float,float,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'float(const vector4,float,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const vector4,vector,vector,vector,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'vector(const vector4,vector,vector,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const vector,float,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'float(const vector,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const vector,vector,vector,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'vector(const vector,vector,vector,vector)'})
let c['noised'] = f
let f = []
let c['nop'] = f
let f = []
call add(f,{'word':'normal_bsdf','kind':'f','menu':'vector(const bsdf)'})
let c['normal_bsdf'] = f
let f = []
call add(f,{'word':'normalize','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'normalize','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'normalize','kind':'f','menu':'vector(const vector)'})
let c['normalize'] = f
let f = []
let c['not'] = f
let f = []
let c['notif'] = f
let f = []
call add(f,{'word':'npoints','kind':'f','menu':'int(const int)'})
call add(f,{'word':'npoints','kind':'f','menu':'int(const string)'})
let c['npoints'] = f
let f = []
call add(f,{'word':'npointsgroup','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'npointsgroup','kind':'f','menu':'int(const string,const string)'})
let c['npointsgroup'] = f
let f = []
call add(f,{'word':'nprimitives','kind':'f','menu':'int(const int)'})
call add(f,{'word':'nprimitives','kind':'f','menu':'int(const string)'})
let c['nprimitives'] = f
let f = []
call add(f,{'word':'nprimitivesgroup','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nprimitivesgroup','kind':'f','menu':'int(const string,const string)'})
let c['nprimitivesgroup'] = f
let f = []
call add(f,{'word':'nrandom','kind':'f','menu':'float()'})
call add(f,{'word':'nrandom','kind':'f','menu':'void(float,float)'})
call add(f,{'word':'nrandom','kind':'f','menu':'float(float)'})
call add(f,{'word':'nrandom','kind':'f','menu':'vector4()'})
call add(f,{'word':'nrandom','kind':'f','menu':'vector()'})
let c['nrandom'] = f
let f = []
call add(f,{'word':'ntransform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'ntransform','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'ntransform','kind':'f','menu':'vector(const vector,const matrix)'})
let c['ntransform'] = f
let f = []
call add(f,{'word':'nuniqueval','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'nuniqueval','kind':'f','menu':'int(const string,const string,const string)'})
let c['nuniqueval'] = f
let f = []
call add(f,{'word':'nvertices','kind':'f','menu':'int(const int)'})
call add(f,{'word':'nvertices','kind':'f','menu':'int(const string)'})
let c['nvertices'] = f
let f = []
call add(f,{'word':'nverticesgroup','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nverticesgroup','kind':'f','menu':'int(const string,const string)'})
let c['nverticesgroup'] = f
let f = []
call add(f,{'word':'ocean_sample','kind':'f','menu':'vector(const string,const int,const int,const int,const float,const float,const int,const int,const vector)'})
let c['ocean_sample'] = f
let f = []
call add(f,{'word':'ocio_activedisplays','kind':'f','menu':'string[]()'})
let c['ocio_activedisplays'] = f
let f = []
call add(f,{'word':'ocio_activeviews','kind':'f','menu':'string[]()'})
let c['ocio_activeviews'] = f
let f = []
call add(f,{'word':'ocio_import','kind':'f','menu':'int(const string,const string,int)'})
call add(f,{'word':'ocio_import','kind':'f','menu':'int(const string,const string,string)'})
call add(f,{'word':'ocio_import','kind':'f','menu':'int(const string,const string,vector)'})
let c['ocio_import'] = f
let f = []
call add(f,{'word':'ocio_roles','kind':'f','menu':'string[]()'})
let c['ocio_roles'] = f
let f = []
call add(f,{'word':'ocio_spaces','kind':'f','menu':'string[]()'})
let c['ocio_spaces'] = f
let f = []
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector4(const string,const vector4)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector4(const string,const string,const vector4)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector4(const string,const string,const string,const vector4)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector(const string,const string,const string,const vector)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector(const string,const vector)'})
let c['ocio_transform'] = f
let f = []
call add(f,{'word':'onoise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'onoise','kind':'f','menu':'float(const vector,const int,const float,const float)'})
call add(f,{'word':'onoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'onoise','kind':'f','menu':'float(const vector,const int,const int,const int,const int,const float,const float)'})
call add(f,{'word':'onoise','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'onoise','kind':'f','menu':'vector(const vector,const int,const float,const float)'})
call add(f,{'word':'onoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
call add(f,{'word':'onoise','kind':'f','menu':'vector(const vector,const int,const int,const int,const int,const float,const float)'})
let c['onoise'] = f
let f = []
call add(f,{'word':'opdigits','kind':'f','menu':'int()'})
call add(f,{'word':'opdigits','kind':'f','menu':'int(const string)'})
let c['opdigits'] = f
let f = []
call add(f,{'word':'opfullpath','kind':'f','menu':'string(const string)'})
let c['opfullpath'] = f
let f = []
call add(f,{'word':'opid','kind':'f','menu':'int(const int)'})
call add(f,{'word':'opid','kind':'f','menu':'int(const string)'})
let c['opid'] = f
let f = []
call add(f,{'word':'opparentbonetransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'opparentbonetransform','kind':'f','menu':'matrix(const string,const float)'})
let c['opparentbonetransform'] = f
let f = []
call add(f,{'word':'opparenttransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'opparenttransform','kind':'f','menu':'matrix(const string,const float)'})
let c['opparenttransform'] = f
let f = []
call add(f,{'word':'opparmtransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'opparmtransform','kind':'f','menu':'matrix(const string,const float)'})
let c['opparmtransform'] = f
let f = []
call add(f,{'word':'oppreconstrainttransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'oppreconstrainttransform','kind':'f','menu':'matrix(const string,const float)'})
let c['oppreconstrainttransform'] = f
let f = []
call add(f,{'word':'oppretransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'oppretransform','kind':'f','menu':'matrix(const string,const float)'})
let c['oppretransform'] = f
let f = []
call add(f,{'word':'optransform','kind':'f','menu':'matrix(const int)'})
call add(f,{'word':'optransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'optransform','kind':'f','menu':'matrix(const string,const float)'})
let c['optransform'] = f
let f = []
let c['or'] = f
let f = []
call add(f,{'word':'ord','kind':'f','menu':'int(const string)'})
let c['ord'] = f
let f = []
call add(f,{'word':'orthographic','kind':'f','menu':'matrix(const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'orthographic','kind':'f','menu':'matrix(const float,const float,const float,const float,const float,const float,const vector4)'})
let c['orthographic'] = f
let f = []
call add(f,{'word':'osd_facecount','kind':'f','menu':'int(const int)'})
call add(f,{'word':'osd_facecount','kind':'f','menu':'int(const string)'})
let c['osd_facecount'] = f
let f = []
call add(f,{'word':'osd_firstpatch','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'osd_firstpatch','kind':'f','menu':'int(const string,const int)'})
let c['osd_firstpatch'] = f
let f = []
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix2)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix3)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,float)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector4)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector2)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,float[])'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix2)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix3)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,float)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector4)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector2)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,float[])'})
let c['osd_limitsurface'] = f
let f = []
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix2)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix3)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,float)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector4)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector2)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,float[])'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix2)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix3)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,float)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector4)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector2)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,float[])'})
let c['osd_limitsurfacevertex'] = f
let f = []
call add(f,{'word':'osd_lookupface','kind':'f','menu':'int(const int,const int,const float,const float,int,float,float)'})
call add(f,{'word':'osd_lookupface','kind':'f','menu':'int(const int,const int,const float,const float,int,float,float,const string)'})
call add(f,{'word':'osd_lookupface','kind':'f','menu':'int(const string,const int,const float,const float,int,float,float)'})
call add(f,{'word':'osd_lookupface','kind':'f','menu':'int(const string,const int,const float,const float,int,float,float,const string)'})
let c['osd_lookupface'] = f
let f = []
call add(f,{'word':'osd_lookuppatch','kind':'f','menu':'int(const int,const int,const float,const float,int,float,float)'})
call add(f,{'word':'osd_lookuppatch','kind':'f','menu':'int(const int,const int,const float,const float,int,float,float,const string)'})
call add(f,{'word':'osd_lookuppatch','kind':'f','menu':'int(const string,const int,const float,const float,int,float,float)'})
call add(f,{'word':'osd_lookuppatch','kind':'f','menu':'int(const string,const int,const float,const float,int,float,float,const string)'})
let c['osd_lookuppatch'] = f
let f = []
call add(f,{'word':'osd_patchcount','kind':'f','menu':'int(const int)'})
call add(f,{'word':'osd_patchcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'osd_patchcount','kind':'f','menu':'int(const string)'})
call add(f,{'word':'osd_patchcount','kind':'f','menu':'int(const string,const int)'})
let c['osd_patchcount'] = f
let f = []
call add(f,{'word':'osd_patches','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'osd_patches','kind':'f','menu':'int[](const string,const int)'})
let c['osd_patches'] = f
let f = []
call add(f,{'word':'outerproduct','kind':'f','menu':'matrix2(const vector2,const vector2)'})
call add(f,{'word':'outerproduct','kind':'f','menu':'matrix3(const vector,const vector)'})
call add(f,{'word':'outerproduct','kind':'f','menu':'matrix(const vector4,const vector4)'})
let c['outerproduct'] = f
let f = []
call add(f,{'word':'ow_nspace','kind':'f','menu':'vector(const vector)'})
let c['ow_nspace'] = f
let f = []
call add(f,{'word':'ow_space','kind':'f','menu':'matrix()'})
call add(f,{'word':'ow_space','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'ow_space','kind':'f','menu':'vector(const vector)'})
let c['ow_space'] = f
let f = []
call add(f,{'word':'ow_vspace','kind':'f','menu':'vector(const vector)'})
let c['ow_vspace'] = f
let f = []
call add(f,{'word':'pack_inttosafefloat','kind':'f','menu':'float(const int)'})
let c['pack_inttosafefloat'] = f
let f = []
call add(f,{'word':'packedtransform','kind':'f','menu':'void(const int,const int,const matrix)'})
let c['packedtransform'] = f
let f = []
call add(f,{'word':'pcclose','kind':'f','menu':'void(export int)'})
let c['pcclose'] = f
let f = []
call add(f,{'word':'pcconvex','kind':'f','menu':'float(const int,const string,const vector)'})
let c['pcconvex'] = f
let f = []
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const vector,const float)'})
let c['pcexport'] = f
let f = []
call add(f,{'word':'pcfarthest','kind':'f','menu':'float(const int)'})
let c['pcfarthest'] = f
let f = []
call add(f,{'word':'pcfilter','kind':'f','menu':'matrix3(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'float(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'vector4(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'vector(const int,const string)'})
let c['pcfilter'] = f
let f = []
call add(f,{'word':'pcfind','kind':'f','menu':'int[](const int,const string,const string,const vector,const float,const int)'})
call add(f,{'word':'pcfind','kind':'f','menu':'int[](const int,const string,const vector,const float,const int)'})
call add(f,{'word':'pcfind','kind':'f','menu':'int[](const string,const string,const string,const vector,const float,const int)'})
call add(f,{'word':'pcfind','kind':'f','menu':'int[](const string,const string,const vector,const float,const int)'})
let c['pcfind'] = f
let f = []
call add(f,{'word':'pcfind_radius','kind':'f','menu':'int[](const int,const string,const string,const float,const vector,const float,const int)'})
call add(f,{'word':'pcfind_radius','kind':'f','menu':'int[](const int,const string,const string,const string,const float,const vector,const float,const int)'})
call add(f,{'word':'pcfind_radius','kind':'f','menu':'int[](const string,const string,const string,const float,const vector,const float,const int)'})
call add(f,{'word':'pcfind_radius','kind':'f','menu':'int[](const string,const string,const string,const string,const float,const vector,const float,const int)'})
let c['pcfind_radius'] = f
let f = []
call add(f,{'word':'pcgenerate','kind':'f','menu':'int(const string,const int)'})
let c['pcgenerate'] = f
let f = []
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,matrix3)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,matrix)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,float)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,int)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,vector4)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,string)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,vector)'})
let c['pcimport'] = f
let f = []
call add(f,{'word':'pcimportbyidx3','kind':'f','menu':'matrix3(const int,const string,const int)'})
let c['pcimportbyidx3'] = f
let f = []
call add(f,{'word':'pcimportbyidx4','kind':'f','menu':'matrix(const int,const string,const int)'})
let c['pcimportbyidx4'] = f
let f = []
call add(f,{'word':'pcimportbyidxf','kind':'f','menu':'float(const int,const string,const int)'})
let c['pcimportbyidxf'] = f
let f = []
call add(f,{'word':'pcimportbyidxi','kind':'f','menu':'int(const int,const string,const int)'})
let c['pcimportbyidxi'] = f
let f = []
call add(f,{'word':'pcimportbyidxp','kind':'f','menu':'vector4(const int,const string,const int)'})
let c['pcimportbyidxp'] = f
let f = []
call add(f,{'word':'pcimportbyidxs','kind':'f','menu':'string(const int,const string,const int)'})
let c['pcimportbyidxs'] = f
let f = []
call add(f,{'word':'pcimportbyidxv','kind':'f','menu':'vector(const int,const string,const int)'})
let c['pcimportbyidxv'] = f
let f = []
call add(f,{'word':'pciterate','kind':'f','menu':'int(const int)'})
let c['pciterate'] = f
let f = []
call add(f,{'word':'pcnumfound','kind':'f','menu':'int(const int)'})
let c['pcnumfound'] = f
let f = []
call add(f,{'word':'pcopen','kind':'f','menu':'int(const int,const string,const vector,const float,const int)'})
call add(f,{'word':'pcopen','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'pcopen','kind':'f','menu':'int(const string,const string,const vector,const float,const int)'})
call add(f,{'word':'pcopen','kind':'f','menu':'int(const string,const string,const vector,const string,const vector,const float,const int)'})
let c['pcopen'] = f
let f = []
call add(f,{'word':'pcopenlod','kind':'f','menu':'int(const string,const string,const vector,const int)'})
let c['pcopenlod'] = f
let f = []
call add(f,{'word':'pcsampleleaf','kind':'f','menu':'void(const int,const float)'})
let c['pcsampleleaf'] = f
let f = []
call add(f,{'word':'pcsize','kind':'f','menu':'int(const int)'})
let c['pcsize'] = f
let f = []
call add(f,{'word':'pcunshaded','kind':'f','menu':'int(const int,const string)'})
let c['pcunshaded'] = f
let f = []
call add(f,{'word':'pcwrite','kind':'f','menu':'int(const string)'})
let c['pcwrite'] = f
let f = []
call add(f,{'word':'perspective','kind':'f','menu':'matrix(const float,const float,const float,const float,const float)'})
call add(f,{'word':'perspective','kind':'f','menu':'matrix(const float,const float,const float,const float,const float,const vector4)'})
let c['perspective'] = f
let f = []
call add(f,{'word':'pgfind','kind':'f','menu':'int[](const int,const string,const vector,const float,const int,const float)'})
call add(f,{'word':'pgfind','kind':'f','menu':'int[](const int,const vector,const float,const int,const float)'})
call add(f,{'word':'pgfind','kind':'f','menu':'int[](const string,const string,const vector,const float,const int,const float)'})
call add(f,{'word':'pgfind','kind':'f','menu':'int[](const string,const vector,const float,const int,const float)'})
let c['pgfind'] = f
let f = []
call add(f,{'word':'phongBRDF','kind':'f','menu':'float(const vector,const vector,const vector,const float)'})
let c['phongBRDF'] = f
let f = []
call add(f,{'word':'phonglobe','kind':'f','menu':'bsdf(const vector,const vector,const float,const float,const vector,const vector)'})
call add(f,{'word':'phonglobe','kind':'f','menu':'bsdf(const vector,const vector,const float)'})
let c['phonglobe'] = f
let f = []
call add(f,{'word':'photonmap','kind':'f','menu':'vector(const string,const vector,const vector)'})
call add(f,{'word':'photonmap','kind':'f','menu':'void(const string,const vector,const vector,vector,float)'})
call add(f,{'word':'photonmap','kind':'f','menu':'vector(const string,const vector,const vector,float)'})
let c['photonmap'] = f
let f = []
call add(f,{'word':'planepointdistance','kind':'f','menu':'float(const vector,const vector,const vector,vector)'})
let c['planepointdistance'] = f
let f = []
call add(f,{'word':'planesphereintersect','kind':'f','menu':'int(const vector,const vector,const vector,const float,vector,float,float)'})
let c['planesphereintersect'] = f
let f = []
call add(f,{'word':'pluralize','kind':'f','menu':'string(const string)'})
let c['pluralize'] = f
let f = []
call add(f,{'word':'pnoise','kind':'f','menu':'float(const float,const float,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const float,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const vector4,const vector4)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const vector,const vector)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const float,const float,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const float,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const vector4,const vector4)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const vector,const vector)'})
let c['pnoise'] = f
let f = []
call add(f,{'word':'point','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector[](const string,const string,const int)'})
let c['point'] = f
let f = []
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix2(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix2(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix3(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix3(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'float(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'float(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'int(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'int(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector4(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector4(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'string(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'string(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector2(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector2(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix2[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix2[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix3[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix3[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'float[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'float[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'int[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'int[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector4[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector4[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'string[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'string[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector2[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector2[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector[](const string,const string,const int,int)'})
let c['pointattrib'] = f
let f = []
call add(f,{'word':'pointattribsize','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'pointattribsize','kind':'f','menu':'int(const string,const string)'})
let c['pointattribsize'] = f
let f = []
call add(f,{'word':'pointattribtype','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'pointattribtype','kind':'f','menu':'int(const string,const string)'})
let c['pointattribtype'] = f
let f = []
call add(f,{'word':'pointattribtypeinfo','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'pointattribtypeinfo','kind':'f','menu':'string(const string,const string)'})
let c['pointattribtypeinfo'] = f
let f = []
call add(f,{'word':'pointedge','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'pointedge','kind':'f','menu':'int(const string,const int,const int)'})
let c['pointedge'] = f
let f = []
call add(f,{'word':'pointhedge','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'pointhedge','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'pointhedge','kind':'f','menu':'int(const string,const int)'})
call add(f,{'word':'pointhedge','kind':'f','menu':'int(const string,const int,const int)'})
let c['pointhedge'] = f
let f = []
call add(f,{'word':'pointhedgenext','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'pointhedgenext','kind':'f','menu':'int(const string,const int)'})
let c['pointhedgenext'] = f
let f = []
call add(f,{'word':'pointprims','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'pointprims','kind':'f','menu':'int[](const string,const int)'})
let c['pointprims'] = f
let f = []
call add(f,{'word':'pointvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'pointvertex','kind':'f','menu':'int(const string,const int)'})
let c['pointvertex'] = f
let f = []
call add(f,{'word':'pointvertices','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'pointvertices','kind':'f','menu':'int[](const string,const int)'})
let c['pointvertices'] = f
let f = []
call add(f,{'word':'polardecomp','kind':'f','menu':'matrix3(const matrix3)'})
let c['polardecomp'] = f
let f = []
call add(f,{'word':'polyneighbours','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'polyneighbours','kind':'f','menu':'int[](const string,const int)'})
let c['polyneighbours'] = f
let f = []
call add(f,{'word':'pop','kind':'f','menu':'matrix2(export matrix2[])'})
call add(f,{'word':'pop','kind':'f','menu':'matrix2(export matrix2[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'matrix3(export matrix3[])'})
call add(f,{'word':'pop','kind':'f','menu':'matrix3(export matrix3[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'matrix(export matrix[])'})
call add(f,{'word':'pop','kind':'f','menu':'matrix(export matrix[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'bsdf(export bsdf[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'bsdf(export bsdf[])'})
call add(f,{'word':'pop','kind':'f','menu':'float(export float[])'})
call add(f,{'word':'pop','kind':'f','menu':'float(export float[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'int(export int[])'})
call add(f,{'word':'pop','kind':'f','menu':'int(export int[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'vector4(export vector4[])'})
call add(f,{'word':'pop','kind':'f','menu':'vector4(export vector4[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'string(export string[])'})
call add(f,{'word':'pop','kind':'f','menu':'string(export string[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'vector2(export vector2[])'})
call add(f,{'word':'pop','kind':'f','menu':'vector2(export vector2[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'vector(export vector[])'})
call add(f,{'word':'pop','kind':'f','menu':'vector(export vector[],const int)'})
let c['pop'] = f
let f = []
let c['popinline'] = f
let f = []
call add(f,{'word':'pow','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'pow','kind':'f','menu':'vector4(const vector4,const float)'})
call add(f,{'word':'pow','kind':'f','menu':'vector2(const vector2,const float)'})
call add(f,{'word':'pow','kind':'f','menu':'vector(const vector,const float)'})
let c['pow'] = f
let f = []
call add(f,{'word':'predicate_incircle','kind':'f','menu':'float(const vector2,const vector2,const vector2,const vector2)'})
let c['predicate_incircle'] = f
let f = []
call add(f,{'word':'predicate_insphere','kind':'f','menu':'float(const vector,const vector,const vector,const vector,const vector)'})
let c['predicate_insphere'] = f
let f = []
call add(f,{'word':'predicate_orient2d','kind':'f','menu':'float(const vector2,const vector2,const vector2)'})
let c['predicate_orient2d'] = f
let f = []
call add(f,{'word':'predicate_orient3d','kind':'f','menu':'float(const vector,const vector,const vector,const vector)'})
let c['predicate_orient3d'] = f
let f = []
call add(f,{'word':'prerotate','kind':'f','menu':'void(export matrix3,const float,const vector)'})
call add(f,{'word':'prerotate','kind':'f','menu':'void(export matrix3,const vector,const int)'})
call add(f,{'word':'prerotate','kind':'f','menu':'void(export matrix,const float,const vector)'})
call add(f,{'word':'prerotate','kind':'f','menu':'void(export matrix,const vector,const int)'})
let c['prerotate'] = f
let f = []
call add(f,{'word':'prescale','kind':'f','menu':'void(export matrix3,const vector)'})
call add(f,{'word':'prescale','kind':'f','menu':'void(export matrix,const vector)'})
let c['prescale'] = f
let f = []
call add(f,{'word':'pretranslate','kind':'f','menu':'void(export matrix,const vector)'})
let c['pretranslate'] = f
let f = []
call add(f,{'word':'prim','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector[](const string,const string,const int)'})
let c['prim'] = f
let f = []
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix2,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix3,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix3,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,float,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,float,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,int,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,int,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector4,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector4,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector2,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix2[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix3[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,float[],const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,float[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,int[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector4[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector2[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector[],const string,const int,const vector)'})
let c['prim_attribute'] = f
let f = []
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const int,const int,const float,const float)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const int,const int,const float,const float,const float)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const string,const int,const float,const float)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const string,const int,const float,const float,const float)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const string,const int,const vector)'})
let c['prim_normal'] = f
let f = []
call add(f,{'word':'primarclen','kind':'f','menu':'float(const string,const vector2,const vector2,const int)'})
call add(f,{'word':'primarclen','kind':'f','menu':'float(const string,const vector2,const vector2,const int,const int)'})
let c['primarclen'] = f
let f = []
call add(f,{'word':'primattrib','kind':'f','menu':'matrix2(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix2(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix3(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix3(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'float(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'float(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'int(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'int(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector4(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector4(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'string(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'string(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector2(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector2(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix2[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix2[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix3[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix3[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'float[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'float[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'int[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'int[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector4[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector4[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'string[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'string[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector2[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector2[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector[](const string,const string,const int,int)'})
let c['primattrib'] = f
let f = []
call add(f,{'word':'primattribsize','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'primattribsize','kind':'f','menu':'int(const string,const string)'})
let c['primattribsize'] = f
let f = []
call add(f,{'word':'primattribtype','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'primattribtype','kind':'f','menu':'int(const string,const string)'})
let c['primattribtype'] = f
let f = []
call add(f,{'word':'primattribtypeinfo','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'primattribtypeinfo','kind':'f','menu':'string(const string,const string)'})
let c['primattribtypeinfo'] = f
let f = []
call add(f,{'word':'primduv','kind':'f','menu':'vector(const string,const int,const vector2,const int,const int)'})
let c['primduv'] = f
let f = []
call add(f,{'word':'primfind','kind':'f','menu':'int[](const int,const string,const vector,const vector)'})
call add(f,{'word':'primfind','kind':'f','menu':'int[](const int,const vector,const vector)'})
call add(f,{'word':'primfind','kind':'f','menu':'int[](const string,const string,const vector,const vector)'})
call add(f,{'word':'primfind','kind':'f','menu':'int[](const string,const vector,const vector)'})
let c['primfind'] = f
let f = []
call add(f,{'word':'primhedge','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'primhedge','kind':'f','menu':'int(const string,const int)'})
let c['primhedge'] = f
let f = []
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector[](const string,const string,const int)'})
let c['primintrinsic'] = f
let f = []
call add(f,{'word':'primpoint','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'primpoint','kind':'f','menu':'int(const string,const int,const int)'})
let c['primpoint'] = f
let f = []
call add(f,{'word':'primpoints','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'primpoints','kind':'f','menu':'int[](const string,const int)'})
let c['primpoints'] = f
let f = []
call add(f,{'word':'primuv','kind':'f','menu':'matrix2(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix2(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix3(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix3(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'float(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'float(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'int(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'int(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector4(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector4(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector2(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector2(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix2[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix2[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix3[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix3[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'float[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'float[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'int[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'int[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector4[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector4[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector2[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector2[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector[](const string,const string,const int,const vector)'})
let c['primuv'] = f
let f = []
call add(f,{'word':'primuvconvert','kind':'f','menu':'vector2(const string,const vector2,const int,const int)'})
call add(f,{'word':'primuvconvert','kind':'f','menu':'vector2(const string,const vector2,const int,const int,const float)'})
let c['primuvconvert'] = f
let f = []
call add(f,{'word':'primvertex','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'primvertex','kind':'f','menu':'int(const string,const int,const int)'})
let c['primvertex'] = f
let f = []
call add(f,{'word':'primvertexcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'primvertexcount','kind':'f','menu':'int(const string,const int)'})
let c['primvertexcount'] = f
let f = []
call add(f,{'word':'primvertices','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'primvertices','kind':'f','menu':'int[](const string,const int)'})
let c['primvertices'] = f
let f = []
call add(f,{'word':'print_once','kind':'f','menu':'void(const string)'})
let c['print_once'] = f
let f = []
call add(f,{'word':'printf','kind':'f','menu':'void(const string)'})
let c['printf'] = f
let f = []
call add(f,{'word':'product','kind':'f','menu':'float(const float)'})
call add(f,{'word':'product','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'product','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'product','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'product','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'product','kind':'f','menu':'int(const int)'})
call add(f,{'word':'product','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'product','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'product','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'product','kind':'f','menu':'vector(const vector[])'})
let c['product'] = f
let f = []
call add(f,{'word':'ptexture','kind':'f','menu':'matrix3(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'matrix3(const string,const int,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'matrix(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'matrix(const string,const int,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'float(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'float(const string,const int,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector4(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector4(const string,const int,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector(const string,const int,const float,const float,const float,const float,const float,const float)'})
let c['ptexture'] = f
let f = []
call add(f,{'word':'ptlined','kind':'f','menu':'float(const vector,const vector,const vector)'})
let c['ptlined'] = f
let f = []
call add(f,{'word':'ptransform','kind':'f','menu':'vector4(const vector4,const matrix)'})
call add(f,{'word':'ptransform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'ptransform','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'ptransform','kind':'f','menu':'vector(const vector,const matrix)'})
let c['ptransform'] = f
let f = []
call add(f,{'word':'push','kind':'f','menu':'void(export matrix2[],const matrix2)'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix2[],const matrix2[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix3[],const matrix3)'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix3[],const matrix3[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix[],const matrix)'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix[],const matrix[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export bsdf[],const bsdf)'})
call add(f,{'word':'push','kind':'f','menu':'void(export bsdf[],const bsdf[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export float[],const float)'})
call add(f,{'word':'push','kind':'f','menu':'void(export float[],const float[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export int[],const int)'})
call add(f,{'word':'push','kind':'f','menu':'void(export int[],const int[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector4[],const vector4)'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector4[],const vector4[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export string[],const string)'})
call add(f,{'word':'push','kind':'f','menu':'void(export string[],const string[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector2[],const vector2)'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector2[],const vector2[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector[],const vector)'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector[],const vector[])'})
let c['push'] = f
let f = []
let c['pushinline'] = f
let f = []
call add(f,{'word':'pxnoise','kind':'f','menu':'float(const float,const float,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'float(const float,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'float(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'vector(const float,const float,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'vector(const float,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'vector(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
let c['pxnoise'] = f
let f = []
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const float,const float,const int,const int,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'float(const float,const float,const int,const int,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const float,const float,const int,const int,vector,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'vector(const float,const float,const int,const int,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const float,const int,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'float(const float,const int,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const float,const int,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'vector(const float,const int,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const vector4,const int,const int,const int,const int,float,float,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'float(const vector4,const int,const int,const int,const int,float,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const vector4,const int,const int,const int,const int,vector,vector,vector,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'vector(const vector4,const int,const int,const int,const int,vector,vector,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const vector,const int,const int,const int,float,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'float(const vector,const int,const int,const int,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const vector,const int,const int,const int,vector,vector,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'vector(const vector,const int,const int,const int,vector,vector,vector)'})
let c['pxnoised'] = f
let f = []
call add(f,{'word':'qconvert','kind':'f','menu':'matrix3(const vector4)'})
call add(f,{'word':'qconvert','kind':'f','menu':'vector(const vector4)'})
let c['qconvert'] = f
let f = []
call add(f,{'word':'qdistance','kind':'f','menu':'float(const vector4,const vector4)'})
let c['qdistance'] = f
let f = []
call add(f,{'word':'qinvert','kind':'f','menu':'vector4(const vector4)'})
let c['qinvert'] = f
let f = []
call add(f,{'word':'qmultiply','kind':'f','menu':'vector4(const vector4,const vector4)'})
let c['qmultiply'] = f
let f = []
call add(f,{'word':'qrotate','kind':'f','menu':'vector(const vector4,const vector)'})
let c['qrotate'] = f
let f = []
call add(f,{'word':'quaternion','kind':'f','menu':'vector4(const matrix3)'})
call add(f,{'word':'quaternion','kind':'f','menu':'vector4(const float,const vector)'})
call add(f,{'word':'quaternion','kind':'f','menu':'vector4(const vector)'})
let c['quaternion'] = f
let f = []
call add(f,{'word':'quaterniontoeuler','kind':'f','menu':'vector(const vector4,const int)'})
let c['quaterniontoeuler'] = f
let f = []
call add(f,{'word':'radians','kind':'f','menu':'float(const float)'})
call add(f,{'word':'radians','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'radians','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'radians','kind':'f','menu':'vector(const vector)'})
let c['radians'] = f
let f = []
call add(f,{'word':'rand','kind':'f','menu':'float(const float)'})
call add(f,{'word':'rand','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'rand','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'rand','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'rand','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const float,const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const vector2)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const vector)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const float,const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const vector4)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const vector)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const vector2)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const vector)'})
let c['rand'] = f
let f = []
call add(f,{'word':'random','kind':'f','menu':'float(const float)'})
call add(f,{'word':'random','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'random','kind':'f','menu':'float(const int)'})
call add(f,{'word':'random','kind':'f','menu':'float(const int,const int)'})
call add(f,{'word':'random','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'random','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const float,const float)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const int,const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const vector)'})
call add(f,{'word':'random','kind':'f','menu':'vector2(const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const vector)'})
let c['random'] = f
let f = []
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const float)'})
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const float,const float)'})
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const vector4)'})
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const vector2)'})
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const vector)'})
let c['random_fhash'] = f
let f = []
let c['random_hash'] = f
let f = []
call add(f,{'word':'random_ihash','kind':'f','menu':'int(const int)'})
let c['random_ihash'] = f
let f = []
call add(f,{'word':'random_poisson','kind':'f','menu':'int(const int,const float)'})
call add(f,{'word':'random_poisson','kind':'f','menu':'int(const int,const float,const int,const int)'})
let c['random_poisson'] = f
let f = []
call add(f,{'word':'random_shash','kind':'f','menu':'int(const string)'})
let c['random_shash'] = f
let f = []
call add(f,{'word':'random_sobol','kind':'f','menu':'float(const float,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'float(const int,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'float(const vector4,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'float(const vector,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector4(const float,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector4(const int,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector4(const vector4,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector4(const vector,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector(const float,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector(const vector4,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector(const vector,const int)'})
let c['random_sobol'] = f
let f = []
call add(f,{'word':'randomf','kind':'f','menu':'float(const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'randomf','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector4(const float,const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector4(const vector)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector(const vector)'})
let c['randomf'] = f
let f = []
call add(f,{'word':'rawbumpmap','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmap','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmap','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmap','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmap'] = f
let f = []
call add(f,{'word':'rawbumpmapA','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapA','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapA','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapA','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapA'] = f
let f = []
call add(f,{'word':'rawbumpmapB','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapB','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapB','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapB','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapB'] = f
let f = []
call add(f,{'word':'rawbumpmapG','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapG','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapG','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapG','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapG'] = f
let f = []
call add(f,{'word':'rawbumpmapL','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapL','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapL','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapL','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapL'] = f
let f = []
call add(f,{'word':'rawbumpmapR','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapR','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapR','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapR','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapR'] = f
let f = []
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const float,const float)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const float,const float,const float,const float,const float,const float,const float,const float,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const vector)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const float,const float)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const float,const float,const float,const float,const float,const float,const float,const float,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector,const int)'})
let c['rawcolormap'] = f
let f = []
call add(f,{'word':'re_find','kind':'f','menu':'int(const string,const string)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(const string,const string,const int,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(int[],int[],const string,const string)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(int[],int[],const string,const string,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(int[],int[],const string,const string,const int,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'string(const string,const string)'})
call add(f,{'word':'re_find','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'string(const string,const string,const int,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'re_find','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'string[](const string,const string,const int,const int)'})
let c['re_find'] = f
let f = []
call add(f,{'word':'re_findall','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'re_findall','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'re_findall','kind':'f','menu':'string[](const string,const string,const int,const int)'})
let c['re_findall'] = f
let f = []
call add(f,{'word':'re_match','kind':'f','menu':'int(const string,const string)'})
let c['re_match'] = f
let f = []
call add(f,{'word':'re_replace','kind':'f','menu':'string(const string,const string,const string)'})
call add(f,{'word':'re_replace','kind':'f','menu':'string(const string,const string,const string,const int)'})
let c['re_replace'] = f
let f = []
call add(f,{'word':'re_split','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'re_split','kind':'f','menu':'string[](const string,const string,const int)'})
let c['re_split'] = f
let f = []
call add(f,{'word':'reflect','kind':'f','menu':'vector(const vector,const vector)'})
let c['reflect'] = f
let f = []
call add(f,{'word':'refract','kind':'f','menu':'vector(const vector,const vector,const float)'})
let c['refract'] = f
let f = []
call add(f,{'word':'relativepath','kind':'f','menu':'string(const string,const string)'})
let c['relativepath'] = f
let f = []
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const int,const vector)'})
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const vector)'})
let c['relbbox'] = f
let f = []
call add(f,{'word':'relpointbbox','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'relpointbbox','kind':'f','menu':'vector(const int,const vector)'})
call add(f,{'word':'relpointbbox','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'relpointbbox','kind':'f','menu':'vector(const string,const vector)'})
let c['relpointbbox'] = f
let f = []
call add(f,{'word':'removeindex','kind':'f','menu':'matrix2(export matrix2[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'matrix3(export matrix3[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'matrix(export matrix[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'float(export float[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'int(export int[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'vector4(export vector4[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'string(export string[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'vector2(export vector2[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'vector(export vector[],const int)'})
let c['removeindex'] = f
let f = []
call add(f,{'word':'removepoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'removepoint','kind':'f','menu':'int(const int,const int,const int)'})
let c['removepoint'] = f
let f = []
call add(f,{'word':'removeprim','kind':'f','menu':'int(const int,const int,const int)'})
let c['removeprim'] = f
let f = []
call add(f,{'word':'removevalue','kind':'f','menu':'int(export matrix2[],const matrix2)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export matrix3[],const matrix3)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export matrix[],const matrix)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export float[],const float)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export int[],const int)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export vector4[],const vector4)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export string[],const string)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export vector2[],const vector2)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export vector[],const vector)'})
let c['removevalue'] = f
let f = []
call add(f,{'word':'reorder','kind':'f','menu':'string(const string,const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'matrix2[](const matrix2[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'matrix3[](const matrix3[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'matrix[](const matrix[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'float[](const float[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'int[](const int[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'vector4[](const vector4[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'string[](const string[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'vector2[](const vector2[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'vector[](const vector[],const int[])'})
let c['reorder'] = f
let f = []
call add(f,{'word':'resample_linear','kind':'f','menu':'float[](const float[],const int)'})
call add(f,{'word':'resample_linear','kind':'f','menu':'vector4[](const vector4[],const int)'})
call add(f,{'word':'resample_linear','kind':'f','menu':'vector2[](const vector2[],const int)'})
call add(f,{'word':'resample_linear','kind':'f','menu':'vector[](const vector[],const int)'})
let c['resample_linear'] = f
let f = []
call add(f,{'word':'resize','kind':'f','menu':'void(export matrix2[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export matrix3[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export matrix[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export bsdf[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export float[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export int[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export vector4[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export string[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export vector2[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export vector[],const int)'})
let c['resize'] = f
let f = []
let c['returninline'] = f
let f = []
call add(f,{'word':'reverse','kind':'f','menu':'string(const string)'})
call add(f,{'word':'reverse','kind':'f','menu':'matrix2[](const matrix2[])'})
call add(f,{'word':'reverse','kind':'f','menu':'matrix3[](const matrix3[])'})
call add(f,{'word':'reverse','kind':'f','menu':'matrix[](const matrix[])'})
call add(f,{'word':'reverse','kind':'f','menu':'float[](const float[])'})
call add(f,{'word':'reverse','kind':'f','menu':'int[](const int[])'})
call add(f,{'word':'reverse','kind':'f','menu':'vector4[](const vector4[])'})
call add(f,{'word':'reverse','kind':'f','menu':'string[](const string[])'})
call add(f,{'word':'reverse','kind':'f','menu':'vector2[](const vector2[])'})
call add(f,{'word':'reverse','kind':'f','menu':'vector[](const vector[])'})
let c['reverse'] = f
let f = []
call add(f,{'word':'rgbtohsv','kind':'f','menu':'vector(const float,const float,const float)'})
call add(f,{'word':'rgbtohsv','kind':'f','menu':'vector(const vector)'})
let c['rgbtohsv'] = f
let f = []
call add(f,{'word':'rgbtoxyz','kind':'f','menu':'vector(const vector)'})
let c['rgbtoxyz'] = f
let f = []
call add(f,{'word':'rint','kind':'f','menu':'float(const float)'})
call add(f,{'word':'rint','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'rint','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'rint','kind':'f','menu':'vector(const vector)'})
let c['rint'] = f
let f = []
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix2,const float)'})
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix3,const float,const vector)'})
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix3,const vector,const int)'})
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix,const float,const vector)'})
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix,const vector,const int)'})
let c['rotate'] = f
let f = []
call add(f,{'word':'rotate_x_to','kind':'f','menu':'vector4(const vector4,const vector4)'})
call add(f,{'word':'rotate_x_to','kind':'f','menu':'vector2(const vector2,const vector2)'})
call add(f,{'word':'rotate_x_to','kind':'f','menu':'vector(const vector,const vector)'})
let c['rotate_x_to'] = f
let f = []
call add(f,{'word':'rstrip','kind':'f','menu':'string(const string)'})
call add(f,{'word':'rstrip','kind':'f','menu':'string(const string,const string)'})
let c['rstrip'] = f
let f = []
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,const vector,int,vector,vector,float,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'int(const bsdf,const vector,const vector,vector,vector,float,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,vector,vector,float,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'vector(const bsdf,const vector,vector,float,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,vector,vector,float,int,const float,const float)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'vector(const bsdf,const vector,vector,float,int,const float,const float)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,vector,vector,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'vector(const bsdf,const vector,vector,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,vector,vector,int,const float,const float)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'vector(const bsdf,const vector,vector,int,const float,const float)'})
let c['sample_bsdf'] = f
let f = []
call add(f,{'word':'sample_cauchy','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'float(const float,const float,const float,const float)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'vector2(const float,const vector2)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'vector(const vector)'})
let c['sample_cauchy'] = f
let f = []
call add(f,{'word':'sample_cdf','kind':'f','menu':'int(const float[],const float)'})
call add(f,{'word':'sample_cdf','kind':'f','menu':'void(const float[],const float,int,float)'})
call add(f,{'word':'sample_cdf','kind':'f','menu':'int(const float[],const float,float)'})
call add(f,{'word':'sample_cdf','kind':'f','menu':'void(const float[],const float,int,float,float)'})
call add(f,{'word':'sample_cdf','kind':'f','menu':'int(const float[],const float,float,float)'})
let c['sample_cdf'] = f
let f = []
call add(f,{'word':'sample_circle_arc','kind':'f','menu':'vector2(const vector2,const float,const float)'})
let c['sample_circle_arc'] = f
let f = []
call add(f,{'word':'sample_circle_edge_uniform','kind':'f','menu':'vector2(const float)'})
let c['sample_circle_edge_uniform'] = f
let f = []
call add(f,{'word':'sample_circle_ring_uniform','kind':'f','menu':'vector2(const vector2,const float)'})
let c['sample_circle_ring_uniform'] = f
let f = []
call add(f,{'word':'sample_circle_slice','kind':'f','menu':'vector2(const vector2,const float,const vector2)'})
let c['sample_circle_slice'] = f
let f = []
call add(f,{'word':'sample_circle_uniform','kind':'f','menu':'vector2(const vector2)'})
let c['sample_circle_uniform'] = f
let f = []
call add(f,{'word':'sample_direction_cone','kind':'f','menu':'vector(const vector,const float,const vector2)'})
let c['sample_direction_cone'] = f
let f = []
call add(f,{'word':'sample_direction_uniform','kind':'f','menu':'vector(const vector2)'})
let c['sample_direction_uniform'] = f
let f = []
call add(f,{'word':'sample_discrete','kind':'f','menu':'int(const int,const float)'})
call add(f,{'word':'sample_discrete','kind':'f','menu':'int(const float[],const float)'})
let c['sample_discrete'] = f
let f = []
call add(f,{'word':'sample_exponential','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sample_exponential','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'sample_exponential','kind':'f','menu':'float(const float,const float,const float)'})
let c['sample_exponential'] = f
let f = []
call add(f,{'word':'sample_hemisphere','kind':'f','menu':'vector(const float,const vector2)'})
call add(f,{'word':'sample_hemisphere','kind':'f','menu':'vector(const vector2)'})
call add(f,{'word':'sample_hemisphere','kind':'f','menu':'vector(const vector,const float,const vector2)'})
call add(f,{'word':'sample_hemisphere','kind':'f','menu':'vector(const vector,const vector2)'})
let c['sample_hemisphere'] = f
let f = []
call add(f,{'word':'sample_hypersphere_cone','kind':'f','menu':'vector4(const vector4,const float,const vector4)'})
let c['sample_hypersphere_cone'] = f
let f = []
call add(f,{'word':'sample_hypersphere_uniform','kind':'f','menu':'vector4(const vector4)'})
let c['sample_hypersphere_uniform'] = f
let f = []
call add(f,{'word':'sample_lognormal','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'sample_lognormal','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
let c['sample_lognormal'] = f
let f = []
call add(f,{'word':'sample_lognormal_by_median','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'sample_lognormal_by_median','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
let c['sample_lognormal_by_median'] = f
let f = []
call add(f,{'word':'sample_normal','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'vector(const vector)'})
let c['sample_normal'] = f
let f = []
call add(f,{'word':'sample_orientation_cone','kind':'f','menu':'vector4(const vector4,const float,const vector)'})
let c['sample_orientation_cone'] = f
let f = []
call add(f,{'word':'sample_orientation_uniform','kind':'f','menu':'vector4(const vector)'})
let c['sample_orientation_uniform'] = f
let f = []
call add(f,{'word':'sample_sphere_cone','kind':'f','menu':'vector(const vector,const float,const vector)'})
let c['sample_sphere_cone'] = f
let f = []
call add(f,{'word':'sample_sphere_shell_uniform','kind':'f','menu':'vector(const vector,const float)'})
let c['sample_sphere_shell_uniform'] = f
let f = []
call add(f,{'word':'sample_sphere_uniform','kind':'f','menu':'vector(const vector)'})
let c['sample_sphere_uniform'] = f
let f = []
call add(f,{'word':'sampledisk','kind':'f','menu':'void(float,float,const float,const float)'})
call add(f,{'word':'sampledisk','kind':'f','menu':'float(float,const float,const float)'})
let c['sampledisk'] = f
let f = []
call add(f,{'word':'scale','kind':'f','menu':'void(export matrix2,const vector2)'})
call add(f,{'word':'scale','kind':'f','menu':'void(export matrix3,const vector)'})
call add(f,{'word':'scale','kind':'f','menu':'void(export matrix,const vector)'})
let c['scale'] = f
let f = []
call add(f,{'word':'select','kind':'f','menu':'matrix2(const int,const matrix2,const matrix2)'})
call add(f,{'word':'select','kind':'f','menu':'matrix3(const int,const matrix3,const matrix3)'})
call add(f,{'word':'select','kind':'f','menu':'matrix(const int,const matrix,const matrix)'})
call add(f,{'word':'select','kind':'f','menu':'bsdf(const int,const bsdf,const bsdf)'})
call add(f,{'word':'select','kind':'f','menu':'float(const int,const float,const float)'})
call add(f,{'word':'select','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'select','kind':'f','menu':'vector4(const int,const vector4,const vector4)'})
call add(f,{'word':'select','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'select','kind':'f','menu':'vector2(const int,const vector2,const vector2)'})
call add(f,{'word':'select','kind':'f','menu':'vector(const int,const vector,const vector)'})
call add(f,{'word':'select','kind':'f','menu':'matrix2[](const int,const matrix2[],const matrix2[])'})
call add(f,{'word':'select','kind':'f','menu':'matrix3[](const int,const matrix3[],const matrix3[])'})
call add(f,{'word':'select','kind':'f','menu':'matrix[](const int,const matrix[],const matrix[])'})
call add(f,{'word':'select','kind':'f','menu':'bsdf[](const int,const bsdf[],const bsdf[])'})
call add(f,{'word':'select','kind':'f','menu':'float[](const int,const float[],const float[])'})
call add(f,{'word':'select','kind':'f','menu':'int[](const int,const int[],const int[])'})
call add(f,{'word':'select','kind':'f','menu':'vector4[](const int,const vector4[],const vector4[])'})
call add(f,{'word':'select','kind':'f','menu':'string[](const int,const string[],const string[])'})
call add(f,{'word':'select','kind':'f','menu':'vector2[](const int,const vector2[],const vector2[])'})
call add(f,{'word':'select','kind':'f','menu':'vector[](const int,const vector[],const vector[])'})
let c['select'] = f
let f = []
call add(f,{'word':'sensor_panorama_create','kind':'f','menu':'int(const float,const vector,const int,const float,const float,const string,const string,const string,const int)'})
let c['sensor_panorama_create'] = f
let f = []
call add(f,{'word':'sensor_panorama_getcolor','kind':'f','menu':'vector(const int,const vector)'})
let c['sensor_panorama_getcolor'] = f
let f = []
call add(f,{'word':'sensor_panorama_getcone','kind':'f','menu':'void(const int,const vector,const float,const vector,const vector,const float,const float,float,vector,vector,float)'})
call add(f,{'word':'sensor_panorama_getcone','kind':'f','menu':'float(const int,const vector,const float,const vector,const vector,const float,const float,vector,vector,float)'})
let c['sensor_panorama_getcone'] = f
let f = []
call add(f,{'word':'sensor_panorama_getdepth','kind':'f','menu':'float(const int,const vector)'})
let c['sensor_panorama_getdepth'] = f
let f = []
call add(f,{'word':'sensor_save','kind':'f','menu':'int(const int,const string,const string)'})
let c['sensor_save'] = f
let f = []
call add(f,{'word':'serialize','kind':'f','menu':'float[](const matrix2[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const matrix3[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const matrix[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const vector4[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const vector2[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const vector[])'})
let c['serialize'] = f
let f = []
call add(f,{'word':'set','kind':'f','menu':'matrix2(const matrix2)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const float,const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const int)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const vector2,const vector2)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const matrix2)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const float,const float,const float,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const int)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const vector,const vector,const vector)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const vector[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const matrix2)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const int)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const vector4,const vector4,const vector4,const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const vector4[])'})
call add(f,{'word':'set','kind':'f','menu':'bsdf(const bsdf)'})
call add(f,{'word':'set','kind':'f','menu':'float(const float)'})
call add(f,{'word':'set','kind':'f','menu':'float(const int)'})
call add(f,{'word':'set','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'set','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'int(const float)'})
call add(f,{'word':'set','kind':'f','menu':'int(const int)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const float,const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const int)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const vector2)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const vector)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'string(const string)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const int)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const vector)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const vector2)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix2[](const matrix2[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix2[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix3[](const matrix3[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix3[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix[](const matrix[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'bsdf[](const bsdf[])'})
call add(f,{'word':'set','kind':'f','menu':'float[](const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const float)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const vector)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'float[](const int[])'})
call add(f,{'word':'set','kind':'f','menu':'int[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'int[](const int[])'})
call add(f,{'word':'set','kind':'f','menu':'vector4[](const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'vector4[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'vector4[](const vector4[])'})
call add(f,{'word':'set','kind':'f','menu':'string[](const string[])'})
call add(f,{'word':'set','kind':'f','menu':'vector2[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'vector2[](const vector2[])'})
call add(f,{'word':'set','kind':'f','menu':'vector[](const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'vector[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'vector[](const vector[])'})
let c['set'] = f
let f = []
call add(f,{'word':'setagentclipnames','kind':'f','menu':'void(const int,const int,const string[])'})
let c['setagentclipnames'] = f
let f = []
call add(f,{'word':'setagentclips','kind':'f','menu':'int(const int,const int,const string[],const float[],const float[],const string[],const int[],const int[],const float[],const int[])'})
let c['setagentclips'] = f
let f = []
call add(f,{'word':'setagentcliptimes','kind':'f','menu':'void(const int,const int,const float[])'})
let c['setagentcliptimes'] = f
let f = []
call add(f,{'word':'setagentclipweights','kind':'f','menu':'void(const int,const int,const float[])'})
let c['setagentclipweights'] = f
let f = []
call add(f,{'word':'setagentcollisionlayer','kind':'f','menu':'void(const int,const int,const string)'})
let c['setagentcollisionlayer'] = f
let f = []
call add(f,{'word':'setagentcurrentlayer','kind':'f','menu':'void(const int,const int,const string)'})
let c['setagentcurrentlayer'] = f
let f = []
call add(f,{'word':'setagentlocaltransform','kind':'f','menu':'int(const int,const int,const matrix,const int)'})
let c['setagentlocaltransform'] = f
let f = []
call add(f,{'word':'setagentlocaltransforms','kind':'f','menu':'void(const int,const int,const matrix[])'})
let c['setagentlocaltransforms'] = f
let f = []
call add(f,{'word':'setagentworldtransform','kind':'f','menu':'int(const int,const int,const matrix,const int)'})
let c['setagentworldtransform'] = f
let f = []
call add(f,{'word':'setagentworldtransforms','kind':'f','menu':'void(const int,const int,const matrix[])'})
let c['setagentworldtransforms'] = f
let f = []
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix2)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix2,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix3)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix3,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const float)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const float,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const int)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const int,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector4)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector4,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const string,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector2)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector2,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix2[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix2[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix3[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix3[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const float[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const float[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const int[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const int[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector4[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector4[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const string[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const string[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector2[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector2[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector[],const string)'})
let c['setattrib'] = f
let f = []
call add(f,{'word':'setattribtypeinfo','kind':'f','menu':'int(const int,const string,const string,const string)'})
let c['setattribtypeinfo'] = f
let f = []
call add(f,{'word':'setcomp','kind':'f','menu':'void(export matrix2,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'matrix2(export matrix2[],const matrix2,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export matrix3,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'matrix3(export matrix3[],const matrix3,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export matrix,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'matrix(export matrix[],const matrix,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'bsdf(export bsdf[],const bsdf,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export matrix2,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export matrix3,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export matrix,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export vector4,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export vector2,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export vector,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export float[],const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'int(export int[],const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export vector4,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'vector4(export vector4[],const vector4,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'string(export string[],const string,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export vector2,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'vector2(export vector2[],const vector2,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export vector,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'vector(export vector[],const vector,const int)'})
let c['setcomp'] = f
let f = []
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix2[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix2[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix3[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix3[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector4[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector4[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector2[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector2[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector[],const string)'})
let c['setdetailattrib'] = f
let f = []
call add(f,{'word':'setedgegroup','kind':'f','menu':'int(const int,const string,const int,const int,const int)'})
let c['setedgegroup'] = f
let f = []
let c['setelem'] = f
let f = []
call add(f,{'word':'setpackedtransform','kind':'f','menu':'void(const int,const int,const matrix)'})
let c['setpackedtransform'] = f
let f = []
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const float)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const float,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector4)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector4,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const string,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector2)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector2,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const float[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const float[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const int[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const int[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector4[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector4[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const string[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const string[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector2[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector2[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector[],const string)'})
let c['setpointattrib'] = f
let f = []
call add(f,{'word':'setpointgroup','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setpointgroup','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
let c['setpointgroup'] = f
let f = []
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const float)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const float,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector4)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector4,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const string,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector2)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector2,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const float[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const float[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const int[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const int[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector4[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector4[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const string[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const string[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector2[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector2[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector[],const string)'})
let c['setprimattrib'] = f
let f = []
call add(f,{'word':'setprimgroup','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setprimgroup','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
let c['setprimgroup'] = f
let f = []
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix2)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix2,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix3)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix3,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const float)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const float,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector4)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector4,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const string,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector2)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector2,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix2[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix2[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix3[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix3[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const float[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const float[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const int[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const int[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector4[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector4[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const string[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const string[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector2[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector2[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector[],const string)'})
let c['setprimintrinsic'] = f
let f = []
call add(f,{'word':'setprimvertex','kind':'f','menu':'int(const int,const int,const int,const int)'})
let c['setprimvertex'] = f
let f = []
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix2)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix2,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix3)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix3,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const float)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const float,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const int)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const int,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector4)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector4,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector2)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector2,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix2[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix2[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix3[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix3[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const float[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const float[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const int[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const int[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector4[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector4[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector2[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector2[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector[],const string)'})
let c['setvertexattrib'] = f
let f = []
call add(f,{'word':'setvertexgroup','kind':'f','menu':'int(const int,const string,const int,const int,const int)'})
call add(f,{'word':'setvertexgroup','kind':'f','menu':'int(const int,const string,const int,const int,const int,const string)'})
let c['setvertexgroup'] = f
let f = []
call add(f,{'word':'setvertexpoint','kind':'f','menu':'int(const int,const int,const int,const int)'})
let c['setvertexpoint'] = f
let f = []
call add(f,{'word':'shadowmap','kind':'f','menu':'float(const string,const vector,const float,const float,const float)'})
call add(f,{'word':'shadowmap','kind':'f','menu':'vector(const string,const vector,const float,const float,const float)'})
call add(f,{'word':'shadowmap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector,const float,const float,const float)'})
let c['shadowmap'] = f
let f = []
call add(f,{'word':'shl','kind':'f','menu':'int(const int,const int)'})
let c['shl'] = f
let f = []
call add(f,{'word':'shr','kind':'f','menu':'int(const int,const int)'})
let c['shr'] = f
let f = []
call add(f,{'word':'shrz','kind':'f','menu':'int(const int,const int)'})
let c['shrz'] = f
let f = []
call add(f,{'word':'sign','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sign','kind':'f','menu':'int(const int)'})
call add(f,{'word':'sign','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sign','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sign','kind':'f','menu':'vector(const vector)'})
let c['sign'] = f
let f = []
call add(f,{'word':'sin','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sin','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sin','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sin','kind':'f','menu':'vector(const vector)'})
let c['sin'] = f
let f = []
call add(f,{'word':'sinh','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sinh','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sinh','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sinh','kind':'f','menu':'vector(const vector)'})
let c['sinh'] = f
let f = []
call add(f,{'word':'sleep','kind':'f','menu':'void(const int)'})
let c['sleep'] = f
let f = []
call add(f,{'word':'slerp','kind':'f','menu':'vector4(const vector4,const vector4,const float)'})
call add(f,{'word':'slerp','kind':'f','menu':'vector4(const vector4[],const float[])'})
let c['slerp'] = f
let f = []
call add(f,{'word':'slice','kind':'f','menu':'string(const string,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string(const string,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string(const string,const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix2[](const matrix2[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix2[](const matrix2[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix2[](const matrix2[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix3[](const matrix3[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix3[](const matrix3[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix3[](const matrix3[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix[](const matrix[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix[](const matrix[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix[](const matrix[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'float[](const float[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'float[](const float[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'float[](const float[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'int[](const int[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'int[](const int[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'int[](const int[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector4[](const vector4[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector4[](const vector4[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector4[](const vector4[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string[](const string[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string[](const string[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string[](const string[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector2[](const vector2[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector2[](const vector2[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector2[](const vector2[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector[](const vector[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector[](const vector[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector[](const vector[],const int,const int,const int,const int,const int,const int)'})
let c['slice'] = f
let f = []
call add(f,{'word':'slideframe','kind':'f','menu':'vector(const vector,const vector,const vector,const vector,const vector)'})
let c['slideframe'] = f
let f = []
call add(f,{'word':'smooth','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'smooth','kind':'f','menu':'float(const float,const float,const float,const float)'})
let c['smooth'] = f
let f = []
call add(f,{'word':'smoothrotation','kind':'f','menu':'vector(const int,const vector,const vector)'})
let c['smoothrotation'] = f
let f = []
call add(f,{'word':'snoise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'snoise','kind':'f','menu':'float(const vector,const int,const float,const float)'})
call add(f,{'word':'snoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'snoise','kind':'f','menu':'float(const vector,const int,const int,const int,const int,const float,const float)'})
call add(f,{'word':'snoise','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'snoise','kind':'f','menu':'vector(const vector,const int,const float,const float)'})
call add(f,{'word':'snoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
call add(f,{'word':'snoise','kind':'f','menu':'vector(const vector,const int,const int,const int,const int,const float,const float)'})
let c['snoise'] = f
let f = []
call add(f,{'word':'solid_angle','kind':'f','menu':'float(const bsdf,const int)'})
let c['solid_angle'] = f
let f = []
call add(f,{'word':'solveconstraint','kind':'f','menu':'vector[](const float[],const vector,const float,const matrix,const vector[])'})
let c['solveconstraint'] = f
let f = []
call add(f,{'word':'solvecubic','kind':'f','menu':'int(const float,const float,const float,const float,float,float,float)'})
call add(f,{'word':'solvecubic','kind':'f','menu':'int(const float,const float,const float,const float,vector2,vector2,vector2)'})
let c['solvecubic'] = f
let f = []
call add(f,{'word':'solvecurve','kind':'f','menu':'vector[](const string,const float[],const int,const int,const vector,const int,const matrix)'})
call add(f,{'word':'solvecurve','kind':'f','menu':'vector[](const float[],const int,const int,const vector,const vector[],const vector[])'})
let c['solvecurve'] = f
let f = []
call add(f,{'word':'solvefbik','kind':'f','menu':'matrix[](const matrix[],const int[],const int[],const matrix[],const int)'})
call add(f,{'word':'solvefbik','kind':'f','menu':'matrix[](const matrix[],const int[],const int[],const matrix[],const int,const float,const int)'})
call add(f,{'word':'solvefbik','kind':'f','menu':'matrix[](const matrix[],const int[],const int[],const matrix[],const int,const float,const int,const float[],const int[],const int[])'})
call add(f,{'word':'solvefbik','kind':'f','menu':'matrix[](const matrix[],const int[],const int[],const matrix[],const int,const float,const int,const float[],const int[],const int[],const matrix[],const vector4[],const vector[])'})
let c['solvefbik'] = f
let f = []
call add(f,{'word':'solveik','kind':'f','menu':'vector[](const float[],const vector,const vector,const float,const int,const float,const int,const float,const matrix,const vector[])'})
let c['solveik'] = f
let f = []
call add(f,{'word':'solvepoly','kind':'f','menu':'int(const float[],float[])'})
call add(f,{'word':'solvepoly','kind':'f','menu':'int(const float[],float[],const int)'})
let c['solvepoly'] = f
let f = []
call add(f,{'word':'solvequadratic','kind':'f','menu':'int(const float,const float,const float,float,float)'})
call add(f,{'word':'solvequadratic','kind':'f','menu':'int(const float,const float,const float,vector2,vector2)'})
let c['solvequadratic'] = f
let f = []
call add(f,{'word':'sort','kind':'f','menu':'float[](const float[])'})
call add(f,{'word':'sort','kind':'f','menu':'int[](const int[])'})
call add(f,{'word':'sort','kind':'f','menu':'string[](const string[])'})
let c['sort'] = f
let f = []
call add(f,{'word':'specular','kind':'f','menu':'bsdf(const vector)'})
let c['specular'] = f
let f = []
call add(f,{'word':'specularBRDF','kind':'f','menu':'float(const vector,const vector,const vector,const float)'})
let c['specularBRDF'] = f
let f = []
call add(f,{'word':'spline','kind':'f','menu':'float(const string,const float,const float)'})
call add(f,{'word':'spline','kind':'f','menu':'float(const string,const float,const float[])'})
call add(f,{'word':'spline','kind':'f','menu':'float(const string[],const float,const float[])'})
call add(f,{'word':'spline','kind':'f','menu':'float(const string[],const float,const float[],const float[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector4(const string,const float,const vector4)'})
call add(f,{'word':'spline','kind':'f','menu':'vector4(const string,const float,const vector4[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector4(const string[],const float,const vector4[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector4(const string[],const float,const vector4[],const float[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector(const string,const float,const vector)'})
call add(f,{'word':'spline','kind':'f','menu':'vector(const string,const float,const vector[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector(const string[],const float,const vector[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector(const string[],const float,const vector[],const float[])'})
let c['spline'] = f
let f = []
call add(f,{'word':'split','kind':'f','menu':'string[](const string)'})
call add(f,{'word':'split','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'split','kind':'f','menu':'string[](const string,const string,const int)'})
let c['split'] = f
let f = []
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[],const int,const int,const float,const float[])'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[],const int,const int,const float,const float[])'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[],const int,const int,const float)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[],const int,const int,const float)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[],const int,const int)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[],const int,const int)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[],const int)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[],const int)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[])'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[])'})
let c['split_bsdf'] = f
let f = []
call add(f,{'word':'splitpath','kind':'f','menu':'void(const string,string,string)'})
call add(f,{'word':'splitpath','kind':'f','menu':'string(const string,string)'})
let c['splitpath'] = f
let f = []
call add(f,{'word':'sprintf','kind':'f','menu':'string(const string)'})
let c['sprintf'] = f
let f = []
call add(f,{'word':'sqrt','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sqrt','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sqrt','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sqrt','kind':'f','menu':'vector(const vector)'})
let c['sqrt'] = f
let f = []
call add(f,{'word':'sssapprox','kind':'f','menu':'bsdf(const vector,const float,const float,const float)'})
let c['sssapprox'] = f
let f = []
call add(f,{'word':'startswith','kind':'f','menu':'int(const string,const string)'})
let c['startswith'] = f
let f = []
call add(f,{'word':'strip','kind':'f','menu':'string(const string)'})
call add(f,{'word':'strip','kind':'f','menu':'string(const string,const string)'})
let c['strip'] = f
let f = []
call add(f,{'word':'strlen','kind':'f','menu':'int(const string)'})
let c['strlen'] = f
let f = []
let c['struct'] = f
let f = []
let c['sub'] = f
let f = []
call add(f,{'word':'sum','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sum','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'sum','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'sum','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'sum','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'sum','kind':'f','menu':'int(const int)'})
call add(f,{'word':'sum','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'sum','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'sum','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'sum','kind':'f','menu':'vector(const vector[])'})
let c['sum'] = f
let f = []
call add(f,{'word':'surfacedist','kind':'f','menu':'float(const int,const string,const string,const int,const float,int,const string)'})
call add(f,{'word':'surfacedist','kind':'f','menu':'float(const string,const string,const string,const int,const float,int,const string)'})
let c['surfacedist'] = f
let f = []
let c['swap'] = f
let f = []
call add(f,{'word':'switch','kind':'f','menu':'bsdf(const bsdf,const bsdf)'})
let c['switch'] = f
let f = []
call add(f,{'word':'swizzle','kind':'f','menu':'vector4(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'swizzle','kind':'f','menu':'vector2(const vector2,const int,const int)'})
call add(f,{'word':'swizzle','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
let c['swizzle'] = f
let f = []
call add(f,{'word':'tan','kind':'f','menu':'float(const float)'})
call add(f,{'word':'tan','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'tan','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'tan','kind':'f','menu':'vector(const vector)'})
let c['tan'] = f
let f = []
call add(f,{'word':'tanh','kind':'f','menu':'float(const float)'})
call add(f,{'word':'tanh','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'tanh','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'tanh','kind':'f','menu':'vector(const vector)'})
let c['tanh'] = f
let f = []
call add(f,{'word':'tet_adjacent','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'tet_adjacent','kind':'f','menu':'int(const string,const int,const int)'})
let c['tet_adjacent'] = f
let f = []
call add(f,{'word':'tet_faceindex','kind':'f','menu':'int(const int,const int)'})
let c['tet_faceindex'] = f
let f = []
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export matrix3)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export matrix)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export float)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export int)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export vector4)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export string)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export vector)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export int[])'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export string[])'})
let c['teximport'] = f
let f = []
call add(f,{'word':'texprintf','kind':'f','menu':'string(const float,const float,const string)'})
let c['texprintf'] = f
let f = []
call add(f,{'word':'texture','kind':'f','menu':'vector4(const string,const float,const float)'})
call add(f,{'word':'texture','kind':'f','menu':'vector4(const string,const float,const float,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'texture','kind':'f','menu':'vector(const string,const float,const float)'})
call add(f,{'word':'texture','kind':'f','menu':'vector(const string,const float,const float,const float,const float,const float,const float,const float,const float)'})
let c['texture'] = f
let f = []
call add(f,{'word':'texture3d','kind':'f','menu':'matrix3(const string,const string,const vector)'})
call add(f,{'word':'texture3d','kind':'f','menu':'matrix(const string,const string,const vector)'})
call add(f,{'word':'texture3d','kind':'f','menu':'float(const string,const string,const vector)'})
call add(f,{'word':'texture3d','kind':'f','menu':'vector4(const string,const string,const vector)'})
call add(f,{'word':'texture3d','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['texture3d'] = f
let f = []
call add(f,{'word':'texture3dBox','kind':'f','menu':'void(const string,const string,vector,vector)'})
call add(f,{'word':'texture3dBox','kind':'f','menu':'vector(const string,const string,vector)'})
let c['texture3dBox'] = f
let f = []
call add(f,{'word':'titlecase','kind':'f','menu':'string(const string)'})
let c['titlecase'] = f
let f = []
call add(f,{'word':'toNDC','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'toNDC','kind':'f','menu':'vector(const vector)'})
let c['toNDC'] = f
let f = []
call add(f,{'word':'tolower','kind':'f','menu':'string(const string)'})
let c['tolower'] = f
let f = []
call add(f,{'word':'toupper','kind':'f','menu':'string(const string)'})
let c['toupper'] = f
let f = []
call add(f,{'word':'translate','kind':'f','menu':'void(export matrix,const vector4)'})
call add(f,{'word':'translate','kind':'f','menu':'void(export matrix,const vector)'})
let c['translate'] = f
let f = []
call add(f,{'word':'translucent','kind':'f','menu':'bsdf(const vector,const vector)'})
let c['translucent'] = f
let f = []
call add(f,{'word':'transpose','kind':'f','menu':'void(export matrix2)'})
call add(f,{'word':'transpose','kind':'f','menu':'matrix2(const matrix2)'})
call add(f,{'word':'transpose','kind':'f','menu':'void(export matrix3)'})
call add(f,{'word':'transpose','kind':'f','menu':'matrix3(const matrix3)'})
call add(f,{'word':'transpose','kind':'f','menu':'void(export matrix)'})
call add(f,{'word':'transpose','kind':'f','menu':'matrix(const matrix)'})
let c['transpose'] = f
let f = []
call add(f,{'word':'trunc','kind':'f','menu':'float(const float)'})
call add(f,{'word':'trunc','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'trunc','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'trunc','kind':'f','menu':'vector(const vector)'})
let c['trunc'] = f
let f = []
call add(f,{'word':'tw_nspace','kind':'f','menu':'vector(const vector)'})
let c['tw_nspace'] = f
let f = []
call add(f,{'word':'tw_space','kind':'f','menu':'matrix()'})
call add(f,{'word':'tw_space','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'tw_space','kind':'f','menu':'vector(const vector)'})
let c['tw_space'] = f
let f = []
call add(f,{'word':'tw_vspace','kind':'f','menu':'vector(const vector)'})
let c['tw_vspace'] = f
let f = []
call add(f,{'word':'uniqueval','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'uniqueval','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'uniqueval','kind':'f','menu':'string(const int,const string,const string,const int)'})
call add(f,{'word':'uniqueval','kind':'f','menu':'string(const string,const string,const string,const int)'})
let c['uniqueval'] = f
let f = []
call add(f,{'word':'uniquevals','kind':'f','menu':'int[](const int,const string,const string)'})
call add(f,{'word':'uniquevals','kind':'f','menu':'int[](const string,const string,const string)'})
call add(f,{'word':'uniquevals','kind':'f','menu':'string[](const int,const string,const string)'})
call add(f,{'word':'uniquevals','kind':'f','menu':'string[](const string,const string,const string)'})
let c['uniquevals'] = f
let f = []
call add(f,{'word':'unpack_intfromsafefloat','kind':'f','menu':'int(const float)'})
let c['unpack_intfromsafefloat'] = f
let f = []
call add(f,{'word':'unserialize','kind':'f','menu':'matrix2[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'matrix3[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'matrix[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'vector4[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'vector2[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'vector[](const float[])'})
let c['unserialize'] = f
let f = []
call add(f,{'word':'upush','kind':'f','menu':'void(export matrix2[],const matrix2)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export matrix3[],const matrix3)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export matrix[],const matrix)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export bsdf[],const bsdf)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export float[],const float)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export int[],const int)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export vector4[],const vector4)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export string[],const string)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export vector2[],const vector2)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export vector[],const vector)'})
let c['upush'] = f
let f = []
let c['urandom'] = f
let f = []
call add(f,{'word':'usd_addtransform','kind':'f','menu':'int(const int,const string,const string,const matrix)'})
let c['usd_addtransform'] = f
let f = []
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector[](const string,const string,const string)'})
let c['usd_attrib'] = f
let f = []
call add(f,{'word':'usd_attriblen','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_attriblen','kind':'f','menu':'int(const string,const string,const string)'})
let c['usd_attriblen'] = f
let f = []
call add(f,{'word':'usd_attribnames','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'usd_attribnames','kind':'f','menu':'string[](const string,const string)'})
let c['usd_attribnames'] = f
let f = []
call add(f,{'word':'usd_attribsize','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_attribsize','kind':'f','menu':'int(const string,const string,const string)'})
let c['usd_attribsize'] = f
let f = []
call add(f,{'word':'usd_attribtypename','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'usd_attribtypename','kind':'f','menu':'string(const string,const string,const string)'})
let c['usd_attribtypename'] = f
let f = []
call add(f,{'word':'usd_cleartransformorder','kind':'f','menu':'int(const int,const string)'})
let c['usd_cleartransformorder'] = f
let f = []
call add(f,{'word':'usd_drawmode','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_drawmode','kind':'f','menu':'string(const string,const string)'})
let c['usd_drawmode'] = f
let f = []
call add(f,{'word':'usd_isactive','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'usd_isactive','kind':'f','menu':'int(const string,const string)'})
let c['usd_isactive'] = f
let f = []
call add(f,{'word':'usd_isarray','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_isarray','kind':'f','menu':'int(const string,const string,const string)'})
let c['usd_isarray'] = f
let f = []
call add(f,{'word':'usd_isattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_isattrib','kind':'f','menu':'int(const string,const string,const string)'})
let c['usd_isattrib'] = f
let f = []
call add(f,{'word':'usd_isprim','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'usd_isprim','kind':'f','menu':'int(const string,const string)'})
let c['usd_isprim'] = f
let f = []
call add(f,{'word':'usd_isstage','kind':'f','menu':'int(const int)'})
call add(f,{'word':'usd_isstage','kind':'f','menu':'int(const string)'})
let c['usd_isstage'] = f
let f = []
call add(f,{'word':'usd_istransformreset','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'usd_istransformreset','kind':'f','menu':'int(const string,const string)'})
let c['usd_istransformreset'] = f
let f = []
call add(f,{'word':'usd_isvisible','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'usd_isvisible','kind':'f','menu':'int(const string,const string)'})
let c['usd_isvisible'] = f
let f = []
call add(f,{'word':'usd_kind','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_kind','kind':'f','menu':'string(const string,const string)'})
let c['usd_kind'] = f
let f = []
call add(f,{'word':'usd_localtransform','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'usd_localtransform','kind':'f','menu':'matrix(const string,const string)'})
let c['usd_localtransform'] = f
let f = []
call add(f,{'word':'usd_name','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_name','kind':'f','menu':'string(const string,const string)'})
let c['usd_name'] = f
let f = []
call add(f,{'word':'usd_parentpath','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_parentpath','kind':'f','menu':'string(const string,const string)'})
let c['usd_parentpath'] = f
let f = []
call add(f,{'word':'usd_purpose','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_purpose','kind':'f','menu':'string(const string,const string)'})
let c['usd_purpose'] = f
let f = []
call add(f,{'word':'usd_setactive','kind':'f','menu':'int(const int,const string,const int)'})
let c['usd_setactive'] = f
let f = []
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix2)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix3)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const float)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector4)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector2)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix2[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix3[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const float[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const int[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector4[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const string[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector2[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector[])'})
let c['usd_setattrib'] = f
let f = []
call add(f,{'word':'usd_setdrawmode','kind':'f','menu':'int(const int,const string,const string)'})
let c['usd_setdrawmode'] = f
let f = []
call add(f,{'word':'usd_setkind','kind':'f','menu':'int(const int,const string,const string)'})
let c['usd_setkind'] = f
let f = []
call add(f,{'word':'usd_setpurpose','kind':'f','menu':'int(const int,const string,const string)'})
let c['usd_setpurpose'] = f
let f = []
call add(f,{'word':'usd_setvariantselection','kind':'f','menu':'int(const int,const string,const string,const string)'})
let c['usd_setvariantselection'] = f
let f = []
call add(f,{'word':'usd_setvisible','kind':'f','menu':'int(const int,const string,const int)'})
let c['usd_setvisible'] = f
let f = []
call add(f,{'word':'usd_transformorder','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'usd_transformorder','kind':'f','menu':'string[](const string,const string)'})
let c['usd_transformorder'] = f
let f = []
call add(f,{'word':'usd_typename','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_typename','kind':'f','menu':'string(const string,const string)'})
let c['usd_typename'] = f
let f = []
call add(f,{'word':'usd_variants','kind':'f','menu':'string[](const int,const string,const string)'})
call add(f,{'word':'usd_variants','kind':'f','menu':'string[](const string,const string,const string)'})
let c['usd_variants'] = f
let f = []
call add(f,{'word':'usd_variantselection','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'usd_variantselection','kind':'f','menu':'string(const string,const string,const string)'})
let c['usd_variantselection'] = f
let f = []
call add(f,{'word':'usd_variantsets','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'usd_variantsets','kind':'f','menu':'string[](const string,const string)'})
let c['usd_variantsets'] = f
let f = []
call add(f,{'word':'usd_worldtransform','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'usd_worldtransform','kind':'f','menu':'matrix(const string,const string)'})
let c['usd_worldtransform'] = f
let f = []
call add(f,{'word':'uvdist','kind':'f','menu':'float(const int,const string,const string,const vector,int,vector)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const int,const string,const string,const vector,int,vector,const float)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const int,const string,const vector,int,vector)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const int,const string,const vector,int,vector,const float)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const string,const string,const string,const vector,int,vector)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const string,const string,const string,const vector,int,vector,const float)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const string,const string,const vector,int,vector)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const string,const string,const vector,int,vector,const float)'})
let c['uvdist'] = f
let f = []
call add(f,{'word':'uvintersect','kind':'f','menu':'int(const int,const string,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'uvintersect','kind':'f','menu':'int(const int,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'uvintersect','kind':'f','menu':'int(const string,const string,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'uvintersect','kind':'f','menu':'int(const string,const string,const vector,const vector,vector,vector)'})
let c['uvintersect'] = f
let f = []
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector[](const string,const string,const string,const vector)'})
let c['uvsample'] = f
let f = []
call add(f,{'word':'uvunwrap','kind':'f','menu':'int(const string,const float,const float,const float,vector,vector)'})
call add(f,{'word':'uvunwrap','kind':'f','menu':'int(const string,const float,const float,const float,vector,vector,vector,vector)'})
let c['uvunwrap'] = f
let f = []
call add(f,{'word':'variance','kind':'f','menu':'float(const float,float,int)'})
let c['variance'] = f
let f = []
call add(f,{'word':'vertex','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector[](const string,const string,const int,const int)'})
let c['vertex'] = f
let f = []
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix2(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix2(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix3(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix3(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'float(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'float(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'int(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'int(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector4(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector4(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'string(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'string(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector2(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector2(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix2[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix2[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix3[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix3[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'float[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'float[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'int[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'int[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector4[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector4[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'string[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'string[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector2[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector2[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector[](const string,const string,const int,int)'})
let c['vertexattrib'] = f
let f = []
call add(f,{'word':'vertexattribsize','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'vertexattribsize','kind':'f','menu':'int(const string,const string)'})
let c['vertexattribsize'] = f
let f = []
call add(f,{'word':'vertexattribtype','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'vertexattribtype','kind':'f','menu':'int(const string,const string)'})
let c['vertexattribtype'] = f
let f = []
call add(f,{'word':'vertexattribtypeinfo','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'vertexattribtypeinfo','kind':'f','menu':'string(const string,const string)'})
let c['vertexattribtypeinfo'] = f
let f = []
call add(f,{'word':'vertexhedge','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexhedge','kind':'f','menu':'int(const string,const int)'})
let c['vertexhedge'] = f
let f = []
call add(f,{'word':'vertexindex','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'vertexindex','kind':'f','menu':'int(const string,const int,const int)'})
let c['vertexindex'] = f
let f = []
call add(f,{'word':'vertexnext','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexnext','kind':'f','menu':'int(const string,const int)'})
let c['vertexnext'] = f
let f = []
call add(f,{'word':'vertexpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexpoint','kind':'f','menu':'int(const string,const int)'})
let c['vertexpoint'] = f
let f = []
call add(f,{'word':'vertexprev','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexprev','kind':'f','menu':'int(const string,const int)'})
let c['vertexprev'] = f
let f = []
call add(f,{'word':'vertexprim','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexprim','kind':'f','menu':'int(const string,const int)'})
let c['vertexprim'] = f
let f = []
call add(f,{'word':'vertexprimindex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexprimindex','kind':'f','menu':'int(const string,const int)'})
let c['vertexprimindex'] = f
let f = []
call add(f,{'word':'vnoise','kind':'f','menu':'void(const float,const float,const float,const float,int,float,float,float,float,float,float)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const float,const float,const float,const float,float,float,float,float,float,float)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const float,const float,const float,const float,int,float,float,float,float,float,float,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const float,const float,const float,const float,float,float,float,float,float,float,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const float,const float,float,float,float,float)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const float,const float,float,float,float,float,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector4,const vector4,int,float,float,vector4,vector4)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector4,const vector4,float,float,vector4,vector4)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector4,const vector4,int,float,float,vector4,vector4,const int,const int,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector4,const vector4,float,float,vector4,vector4,const int,const int,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector4,const vector4,int,float,float,vector4,vector4,const vector4)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector4,const vector4,float,float,vector4,vector4,const vector4)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector,const vector,int,float,float,vector,vector)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector,const vector,float,float,vector,vector)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector,const vector,int,float,float,vector,vector,const int,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector,const vector,float,float,vector,vector,const int,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector,const vector,int,float,float,vector,vector,const vector)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector,const vector,float,float,vector,vector,const vector)'})
let c['vnoise'] = f
let f = []
call add(f,{'word':'volume','kind':'f','menu':'float(const vector)'})
let c['volume'] = f
let f = []
call add(f,{'word':'volumegradient','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumegradient','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumegradient','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumegradient','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumegradient'] = f
let f = []
call add(f,{'word':'volumeindex','kind':'f','menu':'float(const int,const int,const vector)'})
call add(f,{'word':'volumeindex','kind':'f','menu':'float(const int,const string,const vector)'})
call add(f,{'word':'volumeindex','kind':'f','menu':'float(const string,const int,const vector)'})
call add(f,{'word':'volumeindex','kind':'f','menu':'float(const string,const string,const vector)'})
let c['volumeindex'] = f
let f = []
call add(f,{'word':'volumeindexactive','kind':'f','menu':'int(const int,const int,const vector)'})
call add(f,{'word':'volumeindexactive','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'volumeindexactive','kind':'f','menu':'int(const string,const int,const vector)'})
call add(f,{'word':'volumeindexactive','kind':'f','menu':'int(const string,const string,const vector)'})
let c['volumeindexactive'] = f
let f = []
call add(f,{'word':'volumeindexorigin','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'volumeindexorigin','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'volumeindexorigin','kind':'f','menu':'vector(const string,const int)'})
call add(f,{'word':'volumeindexorigin','kind':'f','menu':'vector(const string,const string)'})
let c['volumeindexorigin'] = f
let f = []
call add(f,{'word':'volumeindextopos','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumeindextopos','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumeindextopos','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumeindextopos','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumeindextopos'] = f
let f = []
call add(f,{'word':'volumeindexv','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumeindexv','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumeindexv','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumeindexv','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumeindexv'] = f
let f = []
call add(f,{'word':'volumepostoindex','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumepostoindex','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumepostoindex','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumepostoindex','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumepostoindex'] = f
let f = []
call add(f,{'word':'volumeres','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'volumeres','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'volumeres','kind':'f','menu':'vector(const string,const int)'})
call add(f,{'word':'volumeres','kind':'f','menu':'vector(const string,const string)'})
let c['volumeres'] = f
let f = []
call add(f,{'word':'volumesample','kind':'f','menu':'float(const int,const int,const vector)'})
call add(f,{'word':'volumesample','kind':'f','menu':'float(const int,const string,const vector)'})
call add(f,{'word':'volumesample','kind':'f','menu':'float(const string,const int,const vector)'})
call add(f,{'word':'volumesample','kind':'f','menu':'float(const string,const string,const vector)'})
let c['volumesample'] = f
let f = []
call add(f,{'word':'volumesamplev','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumesamplev','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumesamplev','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumesamplev','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumesamplev'] = f
let f = []
call add(f,{'word':'volumevoxeldiameter','kind':'f','menu':'float(const int,const int)'})
call add(f,{'word':'volumevoxeldiameter','kind':'f','menu':'float(const int,const string)'})
call add(f,{'word':'volumevoxeldiameter','kind':'f','menu':'float(const string,const int)'})
call add(f,{'word':'volumevoxeldiameter','kind':'f','menu':'float(const string,const string)'})
let c['volumevoxeldiameter'] = f
let f = []
call add(f,{'word':'vtransform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'vtransform','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'vtransform','kind':'f','menu':'vector(const vector,const matrix)'})
let c['vtransform'] = f
let f = []
call add(f,{'word':'warning','kind':'f','menu':'void(const string)'})
let c['warning'] = f
let f = []
let c['while'] = f
let f = []
call add(f,{'word':'wireblinn','kind':'f','menu':'bsdf(const vector,const float)'})
let c['wireblinn'] = f
let f = []
call add(f,{'word':'wirediffuse','kind':'f','menu':'bsdf(const vector)'})
let c['wirediffuse'] = f
let f = []
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,const float,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,const float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,const float,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,const float,float,float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,const float,int,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,const float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,int,float,float,float,float,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,float,float,float,float,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,int,float,float,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,float,float,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector4,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector4,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector4,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector4,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector4,int,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector4,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector2,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector2,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector2,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector2,float,float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector2,int,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector2,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector,int,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector,int,float,float,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector,float,float,const int,const int,const int)'})
let c['wnoise'] = f
let f = []
call add(f,{'word':'wo_nspace','kind':'f','menu':'vector(const vector)'})
let c['wo_nspace'] = f
let f = []
call add(f,{'word':'wo_space','kind':'f','menu':'matrix()'})
call add(f,{'word':'wo_space','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'wo_space','kind':'f','menu':'vector(const vector)'})
let c['wo_space'] = f
let f = []
call add(f,{'word':'wo_vspace','kind':'f','menu':'vector(const vector)'})
let c['wo_vspace'] = f
let f = []
call add(f,{'word':'wt_nspace','kind':'f','menu':'vector(const vector)'})
let c['wt_nspace'] = f
let f = []
call add(f,{'word':'wt_space','kind':'f','menu':'matrix()'})
call add(f,{'word':'wt_space','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'wt_space','kind':'f','menu':'vector(const vector)'})
let c['wt_space'] = f
let f = []
call add(f,{'word':'wt_vspace','kind':'f','menu':'vector(const vector)'})
let c['wt_vspace'] = f
let f = []
call add(f,{'word':'xnoise','kind':'f','menu':'float(const float)'})
call add(f,{'word':'xnoise','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'xnoise','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'xnoise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'xnoise','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'xnoise','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'xnoise','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'xnoise','kind':'f','menu':'vector(const vector)'})
let c['xnoise'] = f
let f = []
call add(f,{'word':'xnoised','kind':'f','menu':'void(const float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'float(const float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const float,const float,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'float(const float,const float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const float,const float,vector,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'vector(const float,const float,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const float,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'vector(const float,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const vector4,float,float,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'float(const vector4,float,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const vector4,vector,vector,vector,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'vector(const vector4,vector,vector,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const vector,float,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'float(const vector,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const vector,vector,vector,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'vector(const vector,vector,vector,vector)'})
let c['xnoised'] = f
let f = []
let c['xor'] = f
let f = []
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const string,const vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const string,const vector,int,vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const string,const vector,int,vector,const float)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const vector,int,vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const vector,int,vector,const float)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const string,const vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const string,const vector,int,vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const string,const vector,int,vector,const float)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const vector,int,vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const vector,int,vector,const float)'})
let c['xyzdist'] = f
let f = []
call add(f,{'word':'xyztorgb','kind':'f','menu':'vector(const vector)'})
let c['xyztorgb'] = f
let contexts['chop'] = c
" CONTEXT: sop 
let c = {}
let c['P'] = [{'word':'P','kind':'v','menu':'vector'}]
let c['Pw'] = [{'word':'Pw','kind':'v','menu':'float'}]
let c['v'] = [{'word':'v','kind':'v','menu':'vector'}]
let c['accel'] = [{'word':'accel','kind':'v','menu':'vector'}]
let c['age'] = [{'word':'age','kind':'v','menu':'float'}]
let c['life'] = [{'word':'life','kind':'v','menu':'float'}]
let c['pstate'] = [{'word':'pstate','kind':'v','menu':'int'}]
let c['id'] = [{'word':'id','kind':'v','menu':'int'}]
let c['ptnum'] = [{'word':'ptnum','kind':'v','menu':'int'}]
let c['Cd'] = [{'word':'Cd','kind':'v','menu':'vector'}]
let c['N'] = [{'word':'N','kind':'v','menu':'vector'}]
let c['Npt'] = [{'word':'Npt','kind':'v','menu':'int'}]
let c['Time'] = [{'word':'Time','kind':'v','menu':'float'}]
let c['Frame'] = [{'word':'Frame','kind':'v','menu':'float'}]
let c['TimeInc'] = [{'word':'TimeInc','kind':'v','menu':'float'}]
let f = []
call add(f,{'word':'Du','kind':'f','menu':'float(const float)'})
call add(f,{'word':'Du','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'Du','kind':'f','menu':'vector(const vector)'})
let c['Du'] = f
let f = []
call add(f,{'word':'Dv','kind':'f','menu':'float(const float)'})
call add(f,{'word':'Dv','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'Dv','kind':'f','menu':'vector(const vector)'})
let c['Dv'] = f
let f = []
call add(f,{'word':'Dw','kind':'f','menu':'float(const float)'})
call add(f,{'word':'Dw','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'Dw','kind':'f','menu':'vector(const vector)'})
let c['Dw'] = f
let f = []
let c['__ptexture_shift_coord'] = f
let f = []
let c['_export'] = f
let f = []
call add(f,{'word':'abs','kind':'f','menu':'float(const float)'})
call add(f,{'word':'abs','kind':'f','menu':'int(const int)'})
call add(f,{'word':'abs','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'abs','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'abs','kind':'f','menu':'vector(const vector)'})
let c['abs'] = f
let f = []
call add(f,{'word':'acos','kind':'f','menu':'float(const float)'})
call add(f,{'word':'acos','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'acos','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'acos','kind':'f','menu':'vector(const vector)'})
let c['acos'] = f
let f = []
let c['add'] = f
let f = []
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix2)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix3)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const float)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector4)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector2)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix2[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix3[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const float[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const int[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector4[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const string[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector2[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector[])'})
let c['addattrib'] = f
let f = []
call add(f,{'word':'addattribute','kind':'f','menu':'void(const string,const matrix3)'})
call add(f,{'word':'addattribute','kind':'f','menu':'void(const string,const matrix)'})
call add(f,{'word':'addattribute','kind':'f','menu':'void(const string,const float)'})
call add(f,{'word':'addattribute','kind':'f','menu':'void(const string,const int)'})
call add(f,{'word':'addattribute','kind':'f','menu':'void(const string,const vector4)'})
call add(f,{'word':'addattribute','kind':'f','menu':'void(const string,const string)'})
call add(f,{'word':'addattribute','kind':'f','menu':'void(const string,const vector)'})
call add(f,{'word':'addattribute','kind':'f','menu':'void(const string,const float[],const int)'})
let c['addattribute'] = f
let f = []
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
let c['adddetailattrib'] = f
let f = []
call add(f,{'word':'addgroup','kind':'f','menu':'void(const string,const int)'})
let c['addgroup'] = f
let f = []
call add(f,{'word':'addpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'addpoint','kind':'f','menu':'int(const int,const vector)'})
let c['addpoint'] = f
let f = []
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
let c['addpointattrib'] = f
let f = []
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,const int)'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,const int,const int)'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int,const int,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int[],int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int[],int[])'})
let c['addprim'] = f
let f = []
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
let c['addprimattrib'] = f
let f = []
call add(f,{'word':'addvariablename','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'addvariablename','kind':'f','menu':'void(const string,const string)'})
let c['addvariablename'] = f
let f = []
call add(f,{'word':'addvertex','kind':'f','menu':'int(const int,const int,const int)'})
let c['addvertex'] = f
let f = []
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
let c['addvertexattrib'] = f
let f = []
call add(f,{'word':'addvisualizer','kind':'f','menu':'int(const int,const string)'})
let c['addvisualizer'] = f
let f = []
call add(f,{'word':'agentaddclip','kind':'f','menu':'int(const int,const int,const string,const string,const int)'})
let c['agentaddclip'] = f
let f = []
call add(f,{'word':'agentclipcatalog','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agentclipcatalog','kind':'f','menu':'string[](const string,const int)'})
let c['agentclipcatalog'] = f
let f = []
call add(f,{'word':'agentclipchannel','kind':'f','menu':'int(const int,const int,const string,const string)'})
call add(f,{'word':'agentclipchannel','kind':'f','menu':'int(const string,const int,const string,const string)'})
let c['agentclipchannel'] = f
let f = []
call add(f,{'word':'agentclipchannelnames','kind':'f','menu':'string[](const int,const int,const string)'})
call add(f,{'word':'agentclipchannelnames','kind':'f','menu':'string[](const string,const int,const string)'})
let c['agentclipchannelnames'] = f
let f = []
call add(f,{'word':'agentcliplength','kind':'f','menu':'float(const int,const int,const string)'})
call add(f,{'word':'agentcliplength','kind':'f','menu':'float(const string,const int,const string)'})
let c['agentcliplength'] = f
let f = []
call add(f,{'word':'agentclipnames','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agentclipnames','kind':'f','menu':'string[](const string,const int)'})
let c['agentclipnames'] = f
let f = []
call add(f,{'word':'agentclipsample','kind':'f','menu':'float(const int,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsample','kind':'f','menu':'float(const int,const int,const string,const float,const string)'})
call add(f,{'word':'agentclipsample','kind':'f','menu':'float(const string,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsample','kind':'f','menu':'float(const string,const int,const string,const float,const string)'})
let c['agentclipsample'] = f
let f = []
call add(f,{'word':'agentclipsamplelocal','kind':'f','menu':'matrix(const int,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsamplelocal','kind':'f','menu':'matrix(const string,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsamplelocal','kind':'f','menu':'matrix[](const int,const int,const string,const float)'})
call add(f,{'word':'agentclipsamplelocal','kind':'f','menu':'matrix[](const string,const int,const string,const float)'})
let c['agentclipsamplelocal'] = f
let f = []
call add(f,{'word':'agentclipsamplerate','kind':'f','menu':'float(const int,const int,const string)'})
call add(f,{'word':'agentclipsamplerate','kind':'f','menu':'float(const string,const int,const string)'})
let c['agentclipsamplerate'] = f
let f = []
call add(f,{'word':'agentclipsampleworld','kind':'f','menu':'matrix(const int,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsampleworld','kind':'f','menu':'matrix(const string,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsampleworld','kind':'f','menu':'matrix[](const int,const int,const string,const float)'})
call add(f,{'word':'agentclipsampleworld','kind':'f','menu':'matrix[](const string,const int,const string,const float)'})
let c['agentclipsampleworld'] = f
let f = []
call add(f,{'word':'agentcliptimes','kind':'f','menu':'float[](const int,const int)'})
call add(f,{'word':'agentcliptimes','kind':'f','menu':'float[](const string,const int)'})
let c['agentcliptimes'] = f
let f = []
call add(f,{'word':'agentcliptransformgroups','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agentcliptransformgroups','kind':'f','menu':'string[](const string,const int)'})
let c['agentcliptransformgroups'] = f
let f = []
call add(f,{'word':'agentclipweights','kind':'f','menu':'float[](const int,const int)'})
call add(f,{'word':'agentclipweights','kind':'f','menu':'float[](const string,const int)'})
let c['agentclipweights'] = f
let f = []
call add(f,{'word':'agentcollisionlayer','kind':'f','menu':'string(const int,const int)'})
call add(f,{'word':'agentcollisionlayer','kind':'f','menu':'string(const string,const int)'})
let c['agentcollisionlayer'] = f
let f = []
call add(f,{'word':'agentcurrentlayer','kind':'f','menu':'string(const int,const int)'})
call add(f,{'word':'agentcurrentlayer','kind':'f','menu':'string(const string,const int)'})
let c['agentcurrentlayer'] = f
let f = []
call add(f,{'word':'agentfindtransformgroup','kind':'f','menu':'int(const int,const int,const string)'})
call add(f,{'word':'agentfindtransformgroup','kind':'f','menu':'int(const string,const int,const string)'})
let c['agentfindtransformgroup'] = f
let f = []
call add(f,{'word':'agentlayerbindings','kind':'f','menu':'int[](const int,const int,const string,const string)'})
call add(f,{'word':'agentlayerbindings','kind':'f','menu':'int[](const string,const int,const string,const string)'})
let c['agentlayerbindings'] = f
let f = []
call add(f,{'word':'agentlayers','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agentlayers','kind':'f','menu':'string[](const string,const int)'})
let c['agentlayers'] = f
let f = []
call add(f,{'word':'agentlayershapes','kind':'f','menu':'string[](const int,const int,const string,const int)'})
call add(f,{'word':'agentlayershapes','kind':'f','menu':'string[](const int,const int,const string,const string)'})
call add(f,{'word':'agentlayershapes','kind':'f','menu':'string[](const string,const int,const string,const int)'})
call add(f,{'word':'agentlayershapes','kind':'f','menu':'string[](const string,const int,const string,const string)'})
let c['agentlayershapes'] = f
let f = []
call add(f,{'word':'agentlocaltransform','kind':'f','menu':'matrix(const int,const int,const int)'})
call add(f,{'word':'agentlocaltransform','kind':'f','menu':'matrix(const string,const int,const int)'})
let c['agentlocaltransform'] = f
let f = []
call add(f,{'word':'agentlocaltransforms','kind':'f','menu':'matrix[](const int,const int)'})
call add(f,{'word':'agentlocaltransforms','kind':'f','menu':'matrix[](const string,const int)'})
let c['agentlocaltransforms'] = f
let f = []
call add(f,{'word':'agentrigchildren','kind':'f','menu':'int[](const int,const int,const int)'})
call add(f,{'word':'agentrigchildren','kind':'f','menu':'int[](const string,const int,const int)'})
let c['agentrigchildren'] = f
let f = []
call add(f,{'word':'agentrigfind','kind':'f','menu':'int(const int,const int,const string)'})
call add(f,{'word':'agentrigfind','kind':'f','menu':'int(const string,const int,const string)'})
let c['agentrigfind'] = f
let f = []
call add(f,{'word':'agentrigparent','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'agentrigparent','kind':'f','menu':'int(const string,const int,const int)'})
let c['agentrigparent'] = f
let f = []
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const int,const int,const int,const int[],const matrix[],const int,const int)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const int,const int,const int,const int[],const matrix[],const int,const int,const float,const int)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const int,const int,const int,const int[],const matrix[],const int,const int,const float,const int,const float[],const int[],const int[])'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const int,const int,const int,const int[],const matrix[],const int,const int,const float,const int,const float[],const int[],const int[],const string,const string,const string)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const string,const int,const int,const int[],const matrix[],const int,const int)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const string,const int,const int,const int[],const matrix[],const int,const int,const float,const int)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const string,const int,const int,const int[],const matrix[],const int,const int,const float,const int,const float[],const int[],const int[])'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const string,const int,const int,const int[],const matrix[],const int,const int,const float,const int,const float[],const int[],const int[],const string,const string,const string)'})
let c['agentsolvefbik'] = f
let f = []
call add(f,{'word':'agenttransformcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'agenttransformcount','kind':'f','menu':'int(const string,const int)'})
let c['agenttransformcount'] = f
let f = []
call add(f,{'word':'agenttransformgroupmember','kind':'f','menu':'int(const int,const int,const int,const int)'})
call add(f,{'word':'agenttransformgroupmember','kind':'f','menu':'int(const int,const int,const string,const int)'})
call add(f,{'word':'agenttransformgroupmember','kind':'f','menu':'int(const string,const int,const int,const int)'})
call add(f,{'word':'agenttransformgroupmember','kind':'f','menu':'int(const string,const int,const string,const int)'})
let c['agenttransformgroupmember'] = f
let f = []
call add(f,{'word':'agenttransformgroups','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agenttransformgroups','kind':'f','menu':'string[](const string,const int)'})
let c['agenttransformgroups'] = f
let f = []
call add(f,{'word':'agenttransformgroupweight','kind':'f','menu':'float(const int,const int,const int,const int)'})
call add(f,{'word':'agenttransformgroupweight','kind':'f','menu':'float(const string,const int,const int,const int)'})
let c['agenttransformgroupweight'] = f
let f = []
call add(f,{'word':'agenttransformnames','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agenttransformnames','kind':'f','menu':'string[](const string,const int)'})
let c['agenttransformnames'] = f
let f = []
call add(f,{'word':'agenttransformtolocal','kind':'f','menu':'int(const int,const int,export matrix[])'})
call add(f,{'word':'agenttransformtolocal','kind':'f','menu':'int(const string,const int,export matrix[])'})
let c['agenttransformtolocal'] = f
let f = []
call add(f,{'word':'agenttransformtoworld','kind':'f','menu':'int(const int,const int,export matrix[])'})
call add(f,{'word':'agenttransformtoworld','kind':'f','menu':'int(const string,const int,export matrix[])'})
let c['agenttransformtoworld'] = f
let f = []
call add(f,{'word':'agentworldtransform','kind':'f','menu':'matrix(const int,const int,const int)'})
call add(f,{'word':'agentworldtransform','kind':'f','menu':'matrix(const string,const int,const int)'})
let c['agentworldtransform'] = f
let f = []
call add(f,{'word':'agentworldtransforms','kind':'f','menu':'matrix[](const int,const int)'})
call add(f,{'word':'agentworldtransforms','kind':'f','menu':'matrix[](const string,const int)'})
let c['agentworldtransforms'] = f
let f = []
call add(f,{'word':'albedo','kind':'f','menu':'vector(const bsdf,const int)'})
call add(f,{'word':'albedo','kind':'f','menu':'vector(const bsdf,const vector,const int)'})
call add(f,{'word':'albedo','kind':'f','menu':'vector(const bsdf,const vector)'})
call add(f,{'word':'albedo','kind':'f','menu':'vector(const bsdf)'})
let c['albedo'] = f
let f = []
let c['and'] = f
let f = []
call add(f,{'word':'anoise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'anoise','kind':'f','menu':'float(const vector,const int,const float,const float)'})
call add(f,{'word':'anoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'anoise','kind':'f','menu':'float(const vector,const int,const int,const int,const int,const float,const float)'})
call add(f,{'word':'anoise','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'anoise','kind':'f','menu':'vector(const vector,const int,const float,const float)'})
call add(f,{'word':'anoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
call add(f,{'word':'anoise','kind':'f','menu':'vector(const vector,const int,const int,const int,const int,const float,const float)'})
let c['anoise'] = f
let f = []
call add(f,{'word':'append','kind':'f','menu':'void(export string,const string)'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix2[],const matrix2)'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix2[],const matrix2[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix3[],const matrix3)'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix3[],const matrix3[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix[],const matrix)'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix[],const matrix[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export float[],const float)'})
call add(f,{'word':'append','kind':'f','menu':'void(export float[],const float[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export int[],const int)'})
call add(f,{'word':'append','kind':'f','menu':'void(export int[],const int[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector4[],const vector4)'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector4[],const vector4[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export string[],const string)'})
call add(f,{'word':'append','kind':'f','menu':'void(export string[],const string[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector2[],const vector2)'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector2[],const vector2[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector[],const vector)'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector[],const vector[])'})
let c['append'] = f
let f = []
call add(f,{'word':'area','kind':'f','menu':'float(const vector)'})
let c['area'] = f
let f = []
call add(f,{'word':'argsort','kind':'f','menu':'int[](const float[])'})
call add(f,{'word':'argsort','kind':'f','menu':'int[](const int[])'})
call add(f,{'word':'argsort','kind':'f','menu':'int[](const string[])'})
let c['argsort'] = f
let f = []
call add(f,{'word':'array','kind':'f','menu':'matrix2[]()'})
call add(f,{'word':'array','kind':'f','menu':'matrix3[]()'})
call add(f,{'word':'array','kind':'f','menu':'matrix[]()'})
call add(f,{'word':'array','kind':'f','menu':'float[]()'})
call add(f,{'word':'array','kind':'f','menu':'int[]()'})
call add(f,{'word':'array','kind':'f','menu':'vector4[]()'})
call add(f,{'word':'array','kind':'f','menu':'string[]()'})
call add(f,{'word':'array','kind':'f','menu':'vector2[]()'})
call add(f,{'word':'array','kind':'f','menu':'vector[]()'})
let c['array'] = f
let f = []
call add(f,{'word':'arraylength','kind':'f','menu':'int(const matrix3)'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const matrix)'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const vector4)'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const vector)'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const matrix3[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const matrix[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const bsdf[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const float[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const vector4[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const string[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const vector[])'})
let c['arraylength'] = f
let f = []
call add(f,{'word':'ashikhmin','kind':'f','menu':'bsdf(const vector,const float,const float,const vector,const vector)'})
let c['ashikhmin'] = f
let f = []
call add(f,{'word':'asin','kind':'f','menu':'float(const float)'})
call add(f,{'word':'asin','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'asin','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'asin','kind':'f','menu':'vector(const vector)'})
let c['asin'] = f
let f = []
call add(f,{'word':'assert_enabled','kind':'f','menu':'int()'})
let c['assert_enabled'] = f
let f = []
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,float,const matrix2)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,float,const matrix2)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,float,float,float,float,float,float,const matrix3)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,float,float,float,float,float,float,const matrix3)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,const matrix)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,const matrix)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,float,const vector4)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,float,const vector4)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,const vector)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,const vector)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,const vector2)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,const vector2)'})
let c['assign'] = f
let f = []
call add(f,{'word':'atan','kind':'f','menu':'float(const float)'})
call add(f,{'word':'atan','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'atan','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'atan','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'atan','kind':'f','menu':'vector(const vector)'})
let c['atan'] = f
let f = []
call add(f,{'word':'atan2','kind':'f','menu':'float(const float,const float)'})
let c['atan2'] = f
let f = []
call add(f,{'word':'atof','kind':'f','menu':'float(const string)'})
let c['atof'] = f
let f = []
call add(f,{'word':'atoi','kind':'f','menu':'int(const string)'})
let c['atoi'] = f
let f = []
call add(f,{'word':'atten','kind':'f','menu':'float(const float,const float)'})
let c['atten'] = f
let f = []
call add(f,{'word':'attrib','kind':'f','menu':'matrix2(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix2(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix3(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix3(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'float(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'float(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector4(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector4(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'string(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'string(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector2(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector2(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix2[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix2[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix3[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix3[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'float[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'float[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'int[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'int[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector4[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector4[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'string[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'string[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector2[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector2[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector[](const string,const string,const string,const int)'})
let c['attrib'] = f
let f = []
call add(f,{'word':'attribclass','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'attribclass','kind':'f','menu':'string(const string,const string)'})
let c['attribclass'] = f
let f = []
call add(f,{'word':'attribdataid','kind':'f','menu':'int[](const int,const string,const string)'})
call add(f,{'word':'attribdataid','kind':'f','menu':'int[](const string,const string,const string)'})
let c['attribdataid'] = f
let f = []
call add(f,{'word':'attribsize','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'attribsize','kind':'f','menu':'int(const string,const string,const string)'})
let c['attribsize'] = f
let f = []
call add(f,{'word':'attribtype','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'attribtype','kind':'f','menu':'int(const string,const string,const string)'})
let c['attribtype'] = f
let f = []
call add(f,{'word':'attribtypeinfo','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'attribtypeinfo','kind':'f','menu':'string(const string,const string,const string)'})
let c['attribtypeinfo'] = f
let f = []
call add(f,{'word':'avg','kind':'f','menu':'float(const float)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'avg','kind':'f','menu':'int(const int)'})
call add(f,{'word':'avg','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'avg','kind':'f','menu':'vector4(const vector4,const vector4)'})
call add(f,{'word':'avg','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'avg','kind':'f','menu':'vector2(const vector2,const vector2)'})
call add(f,{'word':'avg','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'avg','kind':'f','menu':'vector(const vector,const vector)'})
call add(f,{'word':'avg','kind':'f','menu':'vector(const vector[])'})
let c['avg'] = f
let f = []
let c['band'] = f
let f = []
call add(f,{'word':'blackbody','kind':'f','menu':'vector(const float,const float)'})
let c['blackbody'] = f
let f = []
call add(f,{'word':'blinn','kind':'f','menu':'bsdf(const vector,const float)'})
let c['blinn'] = f
let f = []
call add(f,{'word':'blinnBRDF','kind':'f','menu':'float(const vector,const vector,const vector,const float)'})
let c['blinnBRDF'] = f
let f = []
let c['bnot'] = f
let f = []
let c['bor'] = f
let f = []
call add(f,{'word':'bouncelabel','kind':'f','menu':'string(const int)'})
let c['bouncelabel'] = f
let f = []
call add(f,{'word':'bouncemask','kind':'f','menu':'int(const string)'})
let c['bouncemask'] = f
let f = []
let c['br'] = f
let f = []
let c['break'] = f
let f = []
call add(f,{'word':'bumpmap','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmap','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmap','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmap','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmap'] = f
let f = []
call add(f,{'word':'bumpmapA','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapA','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapA','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapA','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapA'] = f
let f = []
call add(f,{'word':'bumpmapB','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapB','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapB','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapB','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapB'] = f
let f = []
call add(f,{'word':'bumpmapG','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapG','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapG','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapG','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapG'] = f
let f = []
call add(f,{'word':'bumpmapL','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapL','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapL','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapL','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapL'] = f
let f = []
call add(f,{'word':'bumpmapR','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapR','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapR','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapR','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapR'] = f
let f = []
let c['bwhile'] = f
let f = []
let c['bxor'] = f
let f = []
call add(f,{'word':'cbrt','kind':'f','menu':'float(const float)'})
call add(f,{'word':'cbrt','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'cbrt','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'cbrt','kind':'f','menu':'vector(const vector)'})
let c['cbrt'] = f
let f = []
call add(f,{'word':'ceil','kind':'f','menu':'float(const float)'})
call add(f,{'word':'ceil','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'ceil','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'ceil','kind':'f','menu':'vector(const vector)'})
let c['ceil'] = f
let f = []
call add(f,{'word':'ch','kind':'f','menu':'float(const int,const int,const int)'})
call add(f,{'word':'ch','kind':'f','menu':'float(const int,const int,const int,const float)'})
call add(f,{'word':'ch','kind':'f','menu':'float(const string)'})
call add(f,{'word':'ch','kind':'f','menu':'float(const string,const float)'})
call add(f,{'word':'ch','kind':'f','menu':'string(const string)'})
call add(f,{'word':'ch','kind':'f','menu':'string(const string,const float)'})
let c['ch'] = f
let f = []
call add(f,{'word':'ch2','kind':'f','menu':'matrix2(const string)'})
call add(f,{'word':'ch2','kind':'f','menu':'matrix2(const string,const float)'})
let c['ch2'] = f
let f = []
call add(f,{'word':'ch3','kind':'f','menu':'matrix3(const string)'})
call add(f,{'word':'ch3','kind':'f','menu':'matrix3(const string,const float)'})
let c['ch3'] = f
let f = []
call add(f,{'word':'ch4','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'ch4','kind':'f','menu':'matrix(const string,const float)'})
let c['ch4'] = f
let f = []
call add(f,{'word':'chexpr','kind':'f','menu':'float(const string,const string)'})
let c['chexpr'] = f
let f = []
call add(f,{'word':'chexprf','kind':'f','menu':'float(const string,const string,const float)'})
let c['chexprf'] = f
let f = []
call add(f,{'word':'chexprt','kind':'f','menu':'float(const string,const string,const float)'})
let c['chexprt'] = f
let f = []
call add(f,{'word':'chf','kind':'f','menu':'float(const int,const int,const int)'})
call add(f,{'word':'chf','kind':'f','menu':'float(const int,const int,const int,const float)'})
call add(f,{'word':'chf','kind':'f','menu':'float(const string)'})
call add(f,{'word':'chf','kind':'f','menu':'float(const string,const float)'})
let c['chf'] = f
let f = []
call add(f,{'word':'chi','kind':'f','menu':'int(const string)'})
call add(f,{'word':'chi','kind':'f','menu':'int(const string,const float)'})
let c['chi'] = f
let f = []
call add(f,{'word':'chid','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'chid','kind':'f','menu':'void(const string,int,int,int)'})
call add(f,{'word':'chid','kind':'f','menu':'int(const string,int,int)'})
call add(f,{'word':'chid','kind':'f','menu':'void(const string,const string,int,int,int)'})
call add(f,{'word':'chid','kind':'f','menu':'int(const string,const string,int,int)'})
let c['chid'] = f
let f = []
call add(f,{'word':'chop','kind':'f','menu':'matrix(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'matrix(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'matrix(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'float(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'float(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'float(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector4(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector4(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector4(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector2(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector2(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector2(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector(const string,const string,const int)'})
let c['chop'] = f
let f = []
call add(f,{'word':'choplocal','kind':'f','menu':'matrix(const string,const int,const float)'})
call add(f,{'word':'choplocal','kind':'f','menu':'matrix(const string,const int,const int)'})
call add(f,{'word':'choplocal','kind':'f','menu':'matrix(const string,const string,const float)'})
call add(f,{'word':'choplocal','kind':'f','menu':'matrix(const string,const string,const int)'})
let c['choplocal'] = f
let f = []
call add(f,{'word':'choplocalt','kind':'f','menu':'matrix(const string,const int,const float,const float)'})
call add(f,{'word':'choplocalt','kind':'f','menu':'matrix(const string,const int,const int,const float)'})
call add(f,{'word':'choplocalt','kind':'f','menu':'matrix(const string,const string,const float,const float)'})
call add(f,{'word':'choplocalt','kind':'f','menu':'matrix(const string,const string,const int,const float)'})
let c['choplocalt'] = f
let f = []
call add(f,{'word':'chopt','kind':'f','menu':'matrix(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'matrix(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'matrix(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'matrix(const string,const string,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'float(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'float(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'float(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'float(const string,const string,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector4(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector4(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector4(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector4(const string,const string,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector2(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector2(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector2(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector2(const string,const string,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector(const string,const string,const int,const float)'})
let c['chopt'] = f
let f = []
call add(f,{'word':'chp','kind':'f','menu':'vector4(const string)'})
call add(f,{'word':'chp','kind':'f','menu':'vector4(const string,const float)'})
let c['chp'] = f
let f = []
call add(f,{'word':'chr','kind':'f','menu':'string(const int)'})
let c['chr'] = f
let f = []
call add(f,{'word':'chramp','kind':'f','menu':'float(const string,const float)'})
call add(f,{'word':'chramp','kind':'f','menu':'float(const string,const float,const float)'})
call add(f,{'word':'chramp','kind':'f','menu':'vector(const string,const float)'})
call add(f,{'word':'chramp','kind':'f','menu':'vector(const string,const float,const float)'})
let c['chramp'] = f
let f = []
call add(f,{'word':'chs','kind':'f','menu':'string(const string)'})
call add(f,{'word':'chs','kind':'f','menu':'string(const string,const float)'})
let c['chs'] = f
let f = []
call add(f,{'word':'chsraw','kind':'f','menu':'string(const string)'})
let c['chsraw'] = f
let f = []
call add(f,{'word':'chu','kind':'f','menu':'vector2(const string)'})
call add(f,{'word':'chu','kind':'f','menu':'vector2(const string,const float)'})
let c['chu'] = f
let f = []
call add(f,{'word':'chv','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'chv','kind':'f','menu':'vector(const int,const int,const float)'})
call add(f,{'word':'chv','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'chv','kind':'f','menu':'vector(const string,const float)'})
let c['chv'] = f
let f = []
call add(f,{'word':'ckspline','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'ckspline','kind':'f','menu':'vector4(const float,const vector4,const float)'})
call add(f,{'word':'ckspline','kind':'f','menu':'vector(const float,const vector,const float)'})
let c['ckspline'] = f
let f = []
call add(f,{'word':'clamp','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'clamp','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'clamp','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'clamp','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'clamp','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['clamp'] = f
let f = []
call add(f,{'word':'clip','kind':'f','menu':'void(int,export vector,export vector,const vector4)'})
call add(f,{'word':'clip','kind':'f','menu':'int(export vector,export vector,const vector4)'})
call add(f,{'word':'clip','kind':'f','menu':'void(int,export vector,export vector,const vector,const vector)'})
call add(f,{'word':'clip','kind':'f','menu':'int(export vector,export vector,const vector,const vector)'})
let c['clip'] = f
let f = []
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const float,const float)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const float,const float,const float,const float,const float,const float,const float,const float,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const vector)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const float,const float)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const float,const float,const float,const float,const float,const float,const float,const float,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector,const int)'})
let c['colormap'] = f
let f = []
call add(f,{'word':'computenormal','kind':'f','menu':'void(const int)'})
call add(f,{'word':'computenormal','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'computenormal','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['computenormal'] = f
let f = []
call add(f,{'word':'concat','kind':'f','menu':'string(const string,const string)'})
let c['concat'] = f
let f = []
call add(f,{'word':'cone','kind':'f','menu':'bsdf(const vector,const vector,const float)'})
let c['cone'] = f
let f = []
call add(f,{'word':'cos','kind':'f','menu':'float(const float)'})
call add(f,{'word':'cos','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'cos','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'cos','kind':'f','menu':'vector(const vector)'})
let c['cos'] = f
let f = []
call add(f,{'word':'cosh','kind':'f','menu':'float(const float)'})
call add(f,{'word':'cosh','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'cosh','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'cosh','kind':'f','menu':'vector(const vector)'})
let c['cosh'] = f
let f = []
call add(f,{'word':'cout','kind':'f','menu':'void()'})
let c['cout'] = f
let f = []
call add(f,{'word':'cracktransform','kind':'f','menu':'void(const int,const int,const vector,const matrix,vector,vector,vector)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'vector(const int,const int,const vector,const matrix,vector,vector)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'void(const int,const int,const vector,const vector,const matrix,vector,vector,vector,vector)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'vector(const int,const int,const vector,const vector,const matrix,vector,vector,vector)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'vector(const int,const int,const int,const vector,const matrix)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'vector(const int,const int,const int,const vector,const vector,const matrix)'})
let c['cracktransform'] = f
let f = []
call add(f,{'word':'create_cdf','kind':'f','menu':'float[](const float[])'})
let c['create_cdf'] = f
let f = []
call add(f,{'word':'create_pdf','kind':'f','menu':'float[](const float[])'})
let c['create_pdf'] = f
let f = []
call add(f,{'word':'cross','kind':'f','menu':'vector(const vector,const vector)'})
let c['cross'] = f
let f = []
call add(f,{'word':'cspline','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'cspline','kind':'f','menu':'vector4(const float,const vector4)'})
call add(f,{'word':'cspline','kind':'f','menu':'vector(const float,const vector)'})
let c['cspline'] = f
let f = []
call add(f,{'word':'ctransform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'ctransform','kind':'f','menu':'vector(const string,const vector)'})
let c['ctransform'] = f
let f = []
call add(f,{'word':'curlnoise','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'curlnoise','kind':'f','menu':'vector(const vector)'})
let c['curlnoise'] = f
let f = []
call add(f,{'word':'curlnoise2d','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'curlnoise2d','kind':'f','menu':'vector(const vector)'})
let c['curlnoise2d'] = f
let f = []
call add(f,{'word':'curlxnoise','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'curlxnoise','kind':'f','menu':'vector(const vector)'})
let c['curlxnoise'] = f
let f = []
call add(f,{'word':'curlxnoise2d','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'curlxnoise2d','kind':'f','menu':'vector(const vector)'})
let c['curlxnoise2d'] = f
let f = []
call add(f,{'word':'cvex_bsdf','kind':'f','menu':'bsdf(const string,const string)'})
let c['cvex_bsdf'] = f
let f = []
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,const float,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,const float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,const float,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,const float,float,float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,const float,int,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,const float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,int,float,float,float,float,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,float,float,float,float,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,int,float,float,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,float,float,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector4,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector4,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector4,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector4,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector4,int,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector4,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector2,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector2,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector2,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector2,float,float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector2,int,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector2,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector,int,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector,int,float,float,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector,float,float,const int,const int,const int)'})
let c['cwnoise'] = f
let f = []
call add(f,{'word':'decode','kind':'f','menu':'string(const string)'})
let c['decode'] = f
let f = []
call add(f,{'word':'degrees','kind':'f','menu':'float(const float)'})
call add(f,{'word':'degrees','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'degrees','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'degrees','kind':'f','menu':'vector(const vector)'})
let c['degrees'] = f
let f = []
call add(f,{'word':'depthmap','kind':'f','menu':'float(const string,const float,const float)'})
call add(f,{'word':'depthmap','kind':'f','menu':'float(const string,const vector)'})
let c['depthmap'] = f
let f = []
call add(f,{'word':'detail','kind':'f','menu':'matrix2(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'float(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'float(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'int(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'string(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'float[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'float[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'int[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector[](const string,const string,const int)'})
let c['detail'] = f
let f = []
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix2(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix2(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix3(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix3(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'float(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'float(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'int(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'int(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector4(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector4(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'string(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'string(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector2(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector2(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix2[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix2[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix3[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix3[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'float[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'float[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'int[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'int[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector4[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector4[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'string[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'string[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector2[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector2[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector[](const string,const string,const int,int)'})
let c['detailattrib'] = f
let f = []
call add(f,{'word':'detailattribsize','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'detailattribsize','kind':'f','menu':'int(const string,const string)'})
let c['detailattribsize'] = f
let f = []
call add(f,{'word':'detailattribtype','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'detailattribtype','kind':'f','menu':'int(const string,const string)'})
let c['detailattribtype'] = f
let f = []
call add(f,{'word':'detailattribtypeinfo','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'detailattribtypeinfo','kind':'f','menu':'string(const string,const string)'})
let c['detailattribtypeinfo'] = f
let f = []
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix2(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix2(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix3(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix3(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'float(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'float(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'int(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector4(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector4(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'string(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector2(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector2(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix2[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix2[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix3[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix3[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'float[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'float[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'int[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector4[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector4[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector2[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector2[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector[](const string,const string)'})
let c['detailintrinsic'] = f
let f = []
call add(f,{'word':'determinant','kind':'f','menu':'float(const matrix2)'})
call add(f,{'word':'determinant','kind':'f','menu':'float(const matrix3)'})
call add(f,{'word':'determinant','kind':'f','menu':'float(const matrix)'})
let c['determinant'] = f
let f = []
call add(f,{'word':'diagonalizesymmetric','kind':'f','menu':'matrix3(const matrix3,vector)'})
let c['diagonalizesymmetric'] = f
let f = []
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf(const vector,const float)'})
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf(const vector,const vector,const float)'})
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf(const vector,const vector)'})
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf(const vector)'})
let c['diffuse'] = f
let f = []
call add(f,{'word':'diffuseBRDF','kind':'f','menu':'float(const vector,const vector)'})
call add(f,{'word':'diffuseBRDF','kind':'f','menu':'float(const vector,const vector,const vector,const float)'})
let c['diffuseBRDF'] = f
let f = []
call add(f,{'word':'dihedral','kind':'f','menu':'matrix3(const vector,const vector)'})
call add(f,{'word':'dihedral','kind':'f','menu':'vector4(const vector,const vector)'})
let c['dihedral'] = f
let f = []
call add(f,{'word':'distance','kind':'f','menu':'float(const vector4,const vector4)'})
call add(f,{'word':'distance','kind':'f','menu':'float(const vector2,const vector2)'})
call add(f,{'word':'distance','kind':'f','menu':'float(const vector,const vector)'})
let c['distance'] = f
let f = []
call add(f,{'word':'distance2','kind':'f','menu':'float(const vector4,const vector4)'})
call add(f,{'word':'distance2','kind':'f','menu':'float(const vector2,const vector2)'})
call add(f,{'word':'distance2','kind':'f','menu':'float(const vector,const vector)'})
let c['distance2'] = f
let f = []
let c['div'] = f
let f = []
call add(f,{'word':'dot','kind':'f','menu':'float(const vector4,const vector4)'})
call add(f,{'word':'dot','kind':'f','menu':'float(const vector4,const vector)'})
call add(f,{'word':'dot','kind':'f','menu':'float(const vector2,const vector2)'})
call add(f,{'word':'dot','kind':'f','menu':'float(const vector,const vector4)'})
call add(f,{'word':'dot','kind':'f','menu':'float(const vector,const vector)'})
let c['dot'] = f
let f = []
call add(f,{'word':'dsmpixel','kind':'f','menu':'int(const string,const string,const int,const int,float[])'})
call add(f,{'word':'dsmpixel','kind':'f','menu':'int(const string,const string,const int,const int,vector4[])'})
call add(f,{'word':'dsmpixel','kind':'f','menu':'int(const string,const string,const int,const int,vector[])'})
let c['dsmpixel'] = f
let f = []
call add(f,{'word':'efit','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
call add(f,{'word':'efit','kind':'f','menu':'vector4(const vector4,const vector4,const vector4,const float,const float)'})
call add(f,{'word':'efit','kind':'f','menu':'vector4(const vector4,const vector4,const vector4,const vector4,const vector4)'})
call add(f,{'word':'efit','kind':'f','menu':'vector2(const vector2,const vector2,const vector2,const float,const float)'})
call add(f,{'word':'efit','kind':'f','menu':'vector2(const vector2,const vector2,const vector2,const vector2,const vector2)'})
call add(f,{'word':'efit','kind':'f','menu':'vector(const vector,const vector,const vector,const float,const float)'})
call add(f,{'word':'efit','kind':'f','menu':'vector(const vector,const vector,const vector,const vector,const vector)'})
let c['efit'] = f
let f = []
call add(f,{'word':'eigenvalues','kind':'f','menu':'void(int,const matrix3,vector,vector)'})
call add(f,{'word':'eigenvalues','kind':'f','menu':'int(const matrix3,vector,vector)'})
let c['eigenvalues'] = f
let f = []
let c['else'] = f
let f = []
call add(f,{'word':'encode','kind':'f','menu':'string(const string)'})
let c['encode'] = f
let f = []
let c['endel'] = f
let f = []
let c['endif'] = f
let f = []
let c['endnotif'] = f
let f = []
call add(f,{'word':'endswith','kind':'f','menu':'int(const string,const string)'})
let c['endswith'] = f
let f = []
call add(f,{'word':'environment','kind':'f','menu':'vector4(const string,const vector)'})
call add(f,{'word':'environment','kind':'f','menu':'vector4(const string,const vector,const float)'})
call add(f,{'word':'environment','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'environment','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'environment','kind':'f','menu':'vector(const string,const vector,const float)'})
call add(f,{'word':'environment','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector)'})
let c['environment'] = f
let f = []
let c['eq'] = f
let f = []
call add(f,{'word':'erf','kind':'f','menu':'float(const float)'})
call add(f,{'word':'erf','kind':'f','menu':'vector2(const vector2)'})
let c['erf'] = f
let f = []
call add(f,{'word':'erf_inv','kind':'f','menu':'float(const float)'})
let c['erf_inv'] = f
let f = []
call add(f,{'word':'erfc','kind':'f','menu':'float(const float)'})
let c['erfc'] = f
let f = []
call add(f,{'word':'error','kind':'f','menu':'void(const string)'})
let c['error'] = f
let f = []
call add(f,{'word':'eulertoquaternion','kind':'f','menu':'vector4(const vector,const int)'})
let c['eulertoquaternion'] = f
let f = []
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,float,const int)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,const int)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,const vector,float,const int)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,const vector,const int)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,const vector)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector)'})
let c['eval_bsdf'] = f
let f = []
call add(f,{'word':'exp','kind':'f','menu':'float(const float)'})
call add(f,{'word':'exp','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'exp','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'exp','kind':'f','menu':'vector(const vector)'})
let c['exp'] = f
let f = []
call add(f,{'word':'expand_udim','kind':'f','menu':'string(const float,const float,const string)'})
let c['expand_udim'] = f
let f = []
call add(f,{'word':'expandedgegroup','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'expandedgegroup','kind':'f','menu':'int[](const string,const string)'})
let c['expandedgegroup'] = f
let f = []
call add(f,{'word':'expandpointgroup','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'expandpointgroup','kind':'f','menu':'int[](const string,const string)'})
let c['expandpointgroup'] = f
let f = []
call add(f,{'word':'expandprimgroup','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'expandprimgroup','kind':'f','menu':'int[](const string,const string)'})
let c['expandprimgroup'] = f
let f = []
call add(f,{'word':'expandvertexgroup','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'expandvertexgroup','kind':'f','menu':'int[](const string,const string)'})
let c['expandvertexgroup'] = f
let f = []
call add(f,{'word':'filamentsample','kind':'f','menu':'vector(const int,const vector)'})
call add(f,{'word':'filamentsample','kind':'f','menu':'vector(const string,const vector)'})
let c['filamentsample'] = f
let f = []
call add(f,{'word':'file_stat','kind':'f','menu':'int(const string,int[])'})
let c['file_stat'] = f
let f = []
call add(f,{'word':'filterstep','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'filterstep','kind':'f','menu':'float(const float,const float,const float)'})
let c['filterstep'] = f
let f = []
call add(f,{'word':'find','kind':'f','menu':'int(const string,const string)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string,const string,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix2[],const matrix2)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix2[],const matrix2,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix2[],const matrix2,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix3[],const matrix3)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix3[],const matrix3,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix3[],const matrix3,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix[],const matrix)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix[],const matrix,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix[],const matrix,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const float[],const float)'})
call add(f,{'word':'find','kind':'f','menu':'int(const float[],const float,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const float[],const float,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const int[],const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const int[],const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const int[],const int,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector4[],const vector4)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector4[],const vector4,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector4[],const vector4,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string[],const string)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string[],const string,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string[],const string,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector2[],const vector2)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector2[],const vector2,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector2[],const vector2,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector[],const vector)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector[],const vector,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector[],const vector,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string,const string)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string,const string,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix2[],const matrix2)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix2[],const matrix2,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix2[],const matrix2,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix3[],const matrix3)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix3[],const matrix3,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix3[],const matrix3,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix[],const matrix)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix[],const matrix,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix[],const matrix,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const float[],const float)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const float[],const float,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const float[],const float,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const int[],const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const int[],const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const int[],const int,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector4[],const vector4)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector4[],const vector4,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector4[],const vector4,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string[],const string)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string[],const string,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string[],const string,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector2[],const vector2)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector2[],const vector2,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector2[],const vector2,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector[],const vector)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector[],const vector,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector[],const vector,const int,const int)'})
let c['find'] = f
let f = []
call add(f,{'word':'findattribval','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const int,const string,const string,const int,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const int,const string,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const string,const string,const string,const int,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const string,const string,const string,const string)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const string,const string,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int[](const int,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int[](const int,const string,const string,const string)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int[](const string,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int[](const string,const string,const string,const string)'})
let c['findattribval'] = f
let f = []
call add(f,{'word':'findattribvalcount','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'findattribvalcount','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'findattribvalcount','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'findattribvalcount','kind':'f','menu':'int(const string,const string,const string,const string)'})
let c['findattribvalcount'] = f
let f = []
call add(f,{'word':'fit','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
call add(f,{'word':'fit','kind':'f','menu':'vector4(const vector4,const vector4,const vector4,const vector4,const vector4)'})
call add(f,{'word':'fit','kind':'f','menu':'vector2(const vector2,const vector2,const vector2,const vector2,const vector2)'})
call add(f,{'word':'fit','kind':'f','menu':'vector(const vector,const vector,const vector,const vector,const vector)'})
let c['fit'] = f
let f = []
call add(f,{'word':'fit01','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'fit01','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'fit01','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'fit01','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['fit01'] = f
let f = []
call add(f,{'word':'fit10','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'fit10','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'fit10','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'fit10','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['fit10'] = f
let f = []
call add(f,{'word':'fit11','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'fit11','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'fit11','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'fit11','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['fit11'] = f
let f = []
call add(f,{'word':'floor','kind':'f','menu':'float(const float)'})
call add(f,{'word':'floor','kind':'f','menu':'int(const float)'})
call add(f,{'word':'floor','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'floor','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'floor','kind':'f','menu':'vector(const vector)'})
let c['floor'] = f
let f = []
call add(f,{'word':'flownoise','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'float(const vector4,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'float(const vector,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'vector(const float,const float,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'vector(const vector4,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'vector(const vector,const float)'})
let c['flownoise'] = f
let f = []
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const float,const float,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const vector4,const int,const int,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const vector4,const vector4,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const vector,const int,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const vector,const vector,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const float,const float,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const vector4,const int,const int,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const vector4,const vector4,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const vector,const int,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const vector,const vector,const float)'})
let c['flowpnoise'] = f
let f = []
call add(f,{'word':'frac','kind':'f','menu':'float(const float)'})
call add(f,{'word':'frac','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'frac','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'frac','kind':'f','menu':'vector(const vector)'})
let c['frac'] = f
let f = []
call add(f,{'word':'fresnel','kind':'f','menu':'void(const vector,const vector,const float,float,float)'})
call add(f,{'word':'fresnel','kind':'f','menu':'float(const vector,const vector,const float,float)'})
call add(f,{'word':'fresnel','kind':'f','menu':'void(const vector,const vector,const float,float,float,vector,vector)'})
call add(f,{'word':'fresnel','kind':'f','menu':'float(const vector,const vector,const float,float,vector,vector)'})
let c['fresnel'] = f
let f = []
call add(f,{'word':'fromNDC','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'fromNDC','kind':'f','menu':'vector(const vector)'})
let c['fromNDC'] = f
let f = []
call add(f,{'word':'frontface','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['frontface'] = f
let f = []
call add(f,{'word':'fuzzify','kind':'f','menu':'float(const string[],const float[],const float[],const float,const float,const float)'})
let c['fuzzify'] = f
let f = []
call add(f,{'word':'fuzzy_and','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_and','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_and'] = f
let f = []
call add(f,{'word':'fuzzy_defuzz_centroid','kind':'f','menu':'float(const float[],const float,const float)'})
let c['fuzzy_defuzz_centroid'] = f
let f = []
call add(f,{'word':'fuzzy_nand','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_nand','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_nand'] = f
let f = []
call add(f,{'word':'fuzzy_nor','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_nor','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_nor'] = f
let f = []
call add(f,{'word':'fuzzy_not','kind':'f','menu':'float(const float)'})
call add(f,{'word':'fuzzy_not','kind':'f','menu':'int(const int)'})
let c['fuzzy_not'] = f
let f = []
call add(f,{'word':'fuzzy_nxor','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_nxor','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_nxor'] = f
let f = []
call add(f,{'word':'fuzzy_or','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_or','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_or'] = f
let f = []
call add(f,{'word':'fuzzy_xor','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_xor','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_xor'] = f
let f = []
let c['ge'] = f
let f = []
call add(f,{'word':'geoself','kind':'f','menu':'int()'})
let c['geoself'] = f
let f = []
call add(f,{'word':'geounwrap','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'geounwrap','kind':'f','menu':'string(const string,const string)'})
let c['geounwrap'] = f
let f = []
call add(f,{'word':'getattrib','kind':'f','menu':'matrix2(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix2(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix3(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix3(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'float(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'float(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'int(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'int(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector4(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector4(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'string(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'string(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector2(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector2(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix2[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix2[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix3[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix3[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'float[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'float[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'int[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'int[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector4[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector4[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'string[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'string[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector2[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector2[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector[](const string,const string,const string,const int,int)'})
let c['getattrib'] = f
let f = []
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,matrix3,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,matrix,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,float,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,int,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,vector4,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,string,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,vector,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,float[],const string,const string,const int,const int)'})
let c['getattribute'] = f
let f = []
call add(f,{'word':'getbbox','kind':'f','menu':'void(const int,const string,vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(const int,const string,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'void(const int,vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(const int,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'void(const string,const string,vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(const string,const string,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'void(const string,vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(const string,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'void(vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(vector)'})
let c['getbbox'] = f
let f = []
call add(f,{'word':'getbbox_center','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getbbox_center','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getbbox_center','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getbbox_center','kind':'f','menu':'vector(const string,const string)'})
let c['getbbox_center'] = f
let f = []
call add(f,{'word':'getbbox_max','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getbbox_max','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getbbox_max','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getbbox_max','kind':'f','menu':'vector(const string,const string)'})
let c['getbbox_max'] = f
let f = []
call add(f,{'word':'getbbox_min','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getbbox_min','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getbbox_min','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getbbox_min','kind':'f','menu':'vector(const string,const string)'})
let c['getbbox_min'] = f
let f = []
call add(f,{'word':'getbbox_size','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getbbox_size','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getbbox_size','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getbbox_size','kind':'f','menu':'vector(const string,const string)'})
let c['getbbox_size'] = f
let f = []
call add(f,{'word':'getbounces','kind':'f','menu':'int(const bsdf)'})
let c['getbounces'] = f
let f = []
call add(f,{'word':'getbounds','kind':'f','menu':'int(const string,const string,vector,vector)'})
call add(f,{'word':'getbounds','kind':'f','menu':'int(const string,vector,vector)'})
let c['getbounds'] = f
let f = []
call add(f,{'word':'getcomp','kind':'f','menu':'matrix2(const matrix2[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'matrix3(const matrix3[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'matrix(const matrix[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'bsdf(const bsdf[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const matrix2,const int,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const matrix3,const int,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const matrix,const int,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const vector4,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const vector2,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const vector,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const float[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'int(const int[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'vector4(const vector4[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'string(const string,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'string(const string[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'vector2(const vector2[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'vector(const vector[],const int)'})
let c['getcomp'] = f
let f = []
let c['getelem'] = f
let f = []
call add(f,{'word':'getpackedtransform','kind':'f','menu':'matrix(const int,const int)'})
let c['getpackedtransform'] = f
let f = []
call add(f,{'word':'getpointbbox','kind':'f','menu':'void(const int,const string,vector,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'vector(const int,const string,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'void(const int,vector,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'vector(const int,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'void(const string,const string,vector,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'vector(const string,const string,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'void(const string,vector,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'vector(const string,vector)'})
let c['getpointbbox'] = f
let f = []
call add(f,{'word':'getpointbbox_center','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getpointbbox_center','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getpointbbox_center','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getpointbbox_center','kind':'f','menu':'vector(const string,const string)'})
let c['getpointbbox_center'] = f
let f = []
call add(f,{'word':'getpointbbox_max','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getpointbbox_max','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getpointbbox_max','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getpointbbox_max','kind':'f','menu':'vector(const string,const string)'})
let c['getpointbbox_max'] = f
let f = []
call add(f,{'word':'getpointbbox_min','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getpointbbox_min','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getpointbbox_min','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getpointbbox_min','kind':'f','menu':'vector(const string,const string)'})
let c['getpointbbox_min'] = f
let f = []
call add(f,{'word':'getpointbbox_size','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getpointbbox_size','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getpointbbox_size','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getpointbbox_size','kind':'f','menu':'vector(const string,const string)'})
let c['getpointbbox_size'] = f
let f = []
call add(f,{'word':'getspace','kind':'f','menu':'matrix(const string,const string)'})
let c['getspace'] = f
let f = []
call add(f,{'word':'gradient','kind':'f','menu':'vector(const vector,const float)'})
let c['gradient'] = f
let f = []
call add(f,{'word':'gradient3d','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['gradient3d'] = f
let f = []
let c['gt'] = f
let f = []
call add(f,{'word':'hair','kind':'f','menu':'bsdf(const vector,const vector,const float,const float,const float,const float,const float)'})
call add(f,{'word':'hair','kind':'f','menu':'bsdf(const vector,const vector,const float,const float,const float)'})
call add(f,{'word':'hair','kind':'f','menu':'bsdf(const vector,const vector,const float,const float)'})
let c['hair'] = f
let f = []
call add(f,{'word':'has_udim','kind':'f','menu':'int(const string)'})
let c['has_udim'] = f
let f = []
call add(f,{'word':'hasattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'hasattrib','kind':'f','menu':'int(const string,const string,const string)'})
let c['hasattrib'] = f
let f = []
call add(f,{'word':'hasdetailattrib','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'hasdetailattrib','kind':'f','menu':'int(const string,const string)'})
let c['hasdetailattrib'] = f
let f = []
call add(f,{'word':'haspointattrib','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'haspointattrib','kind':'f','menu':'int(const string,const string)'})
let c['haspointattrib'] = f
let f = []
call add(f,{'word':'hasprimattrib','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'hasprimattrib','kind':'f','menu':'int(const string,const string)'})
let c['hasprimattrib'] = f
let f = []
call add(f,{'word':'hasvertexattrib','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'hasvertexattrib','kind':'f','menu':'int(const string,const string)'})
let c['hasvertexattrib'] = f
let f = []
call add(f,{'word':'hedge_dstpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_dstpoint','kind':'f','menu':'int(const string,const int)'})
let c['hedge_dstpoint'] = f
let f = []
call add(f,{'word':'hedge_dstvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_dstvertex','kind':'f','menu':'int(const string,const int)'})
let c['hedge_dstvertex'] = f
let f = []
call add(f,{'word':'hedge_equivcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_equivcount','kind':'f','menu':'int(const string,const int)'})
let c['hedge_equivcount'] = f
let f = []
call add(f,{'word':'hedge_isequiv','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'hedge_isequiv','kind':'f','menu':'int(const string,const int,const int)'})
let c['hedge_isequiv'] = f
let f = []
call add(f,{'word':'hedge_isprimary','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_isprimary','kind':'f','menu':'int(const string,const int)'})
let c['hedge_isprimary'] = f
let f = []
call add(f,{'word':'hedge_isvalid','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_isvalid','kind':'f','menu':'int(const string,const int)'})
let c['hedge_isvalid'] = f
let f = []
call add(f,{'word':'hedge_next','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_next','kind':'f','menu':'int(const string,const int)'})
let c['hedge_next'] = f
let f = []
call add(f,{'word':'hedge_nextequiv','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_nextequiv','kind':'f','menu':'int(const string,const int)'})
let c['hedge_nextequiv'] = f
let f = []
call add(f,{'word':'hedge_postdstpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_postdstpoint','kind':'f','menu':'int(const string,const int)'})
let c['hedge_postdstpoint'] = f
let f = []
call add(f,{'word':'hedge_postdstvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_postdstvertex','kind':'f','menu':'int(const string,const int)'})
let c['hedge_postdstvertex'] = f
let f = []
call add(f,{'word':'hedge_presrcpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_presrcpoint','kind':'f','menu':'int(const string,const int)'})
let c['hedge_presrcpoint'] = f
let f = []
call add(f,{'word':'hedge_presrcvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_presrcvertex','kind':'f','menu':'int(const string,const int)'})
let c['hedge_presrcvertex'] = f
let f = []
call add(f,{'word':'hedge_prev','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_prev','kind':'f','menu':'int(const string,const int)'})
let c['hedge_prev'] = f
let f = []
call add(f,{'word':'hedge_prim','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_prim','kind':'f','menu':'int(const string,const int)'})
let c['hedge_prim'] = f
let f = []
call add(f,{'word':'hedge_primary','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_primary','kind':'f','menu':'int(const string,const int)'})
let c['hedge_primary'] = f
let f = []
call add(f,{'word':'hedge_srcpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_srcpoint','kind':'f','menu':'int(const string,const int)'})
let c['hedge_srcpoint'] = f
let f = []
call add(f,{'word':'hedge_srcvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_srcvertex','kind':'f','menu':'int(const string,const int)'})
let c['hedge_srcvertex'] = f
let f = []
call add(f,{'word':'henyeygreenstein','kind':'f','menu':'bsdf(const float)'})
let c['henyeygreenstein'] = f
let f = []
call add(f,{'word':'hscript_noise','kind':'f','menu':'float(const vector)'})
let c['hscript_noise'] = f
let f = []
call add(f,{'word':'hscript_rand','kind':'f','menu':'float(const float)'})
call add(f,{'word':'hscript_rand','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'hscript_rand','kind':'f','menu':'vector(const float)'})
let c['hscript_rand'] = f
let f = []
call add(f,{'word':'hscript_snoise','kind':'f','menu':'float(const vector)'})
let c['hscript_snoise'] = f
let f = []
call add(f,{'word':'hscript_sturb','kind':'f','menu':'float(const vector,const int)'})
let c['hscript_sturb'] = f
let f = []
call add(f,{'word':'hscript_turb','kind':'f','menu':'float(const vector,const int)'})
let c['hscript_turb'] = f
let f = []
call add(f,{'word':'hsvtorgb','kind':'f','menu':'vector(const float,const float,const float)'})
call add(f,{'word':'hsvtorgb','kind':'f','menu':'vector(const vector)'})
let c['hsvtorgb'] = f
let f = []
call add(f,{'word':'ident','kind':'f','menu':'matrix2()'})
call add(f,{'word':'ident','kind':'f','menu':'matrix3()'})
call add(f,{'word':'ident','kind':'f','menu':'matrix()'})
let c['ident'] = f
let f = []
call add(f,{'word':'idtopoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'idtopoint','kind':'f','menu':'int(const string,const int)'})
let c['idtopoint'] = f
let f = []
call add(f,{'word':'idtoprim','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'idtoprim','kind':'f','menu':'int(const string,const int)'})
let c['idtoprim'] = f
let f = []
let c['if'] = f
let f = []
call add(f,{'word':'import','kind':'f','menu':'int(const string,export matrix3,const int)'})
call add(f,{'word':'import','kind':'f','menu':'int(const string,export matrix3,const int,const int)'})
call add(f,{'word':'import','kind':'f','menu':'int(const string,export matrix,const int)'})
call add(f,{'word':'import','kind':'f','menu':'int(const string,export matrix,const int,const int)'})
call add(f,{'word':'import','kind':'f','menu':'int(const string,export float,const int)'})
call add(f,{'word':'import','kind':'f','menu':'int(const string,export float,const int,const int)'})
call add(f,{'word':'import','kind':'f','menu':'int(const string,export int,const int)'})
call add(f,{'word':'import','kind':'f','menu':'int(const string,export int,const int,const int)'})
call add(f,{'word':'import','kind':'f','menu':'int(const string,export vector4,const int)'})
call add(f,{'word':'import','kind':'f','menu':'int(const string,export vector4,const int,const int)'})
call add(f,{'word':'import','kind':'f','menu':'int(const string,export vector,const int)'})
call add(f,{'word':'import','kind':'f','menu':'int(const string,export vector,const int,const int)'})
call add(f,{'word':'import','kind':'f','menu':'int(const string,float[],const int)'})
call add(f,{'word':'import','kind':'f','menu':'int(const string,export float[],const int,const int)'})
let c['import'] = f
let f = []
call add(f,{'word':'inedgegroup','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'inedgegroup','kind':'f','menu':'int(const string,const string,const int,const int)'})
let c['inedgegroup'] = f
let f = []
call add(f,{'word':'ingroup','kind':'f','menu':'int(const string,const int)'})
let c['ingroup'] = f
let f = []
call add(f,{'word':'inpointgroup','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'inpointgroup','kind':'f','menu':'int(const string,const string,const int)'})
let c['inpointgroup'] = f
let f = []
call add(f,{'word':'inprimgroup','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'inprimgroup','kind':'f','menu':'int(const string,const string,const int)'})
let c['inprimgroup'] = f
let f = []
call add(f,{'word':'insert','kind':'f','menu':'void(export string,const int,const string)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix2[],const int,const matrix2)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix2[],const int,const matrix2[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix3[],const int,const matrix3)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix3[],const int,const matrix3[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix[],const int,const matrix)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix[],const int,const matrix[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export float[],const int,const float)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export float[],const int,const float[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export int[],const int,const int)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export int[],const int,const int[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector4[],const int,const vector4)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector4[],const int,const vector4[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export string[],const int,const string)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export string[],const int,const string[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector2[],const int,const vector2)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector2[],const int,const vector2[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector[],const int,const vector)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector[],const int,const vector[])'})
let c['insert'] = f
let f = []
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector4,const vector4)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector4,const vector4,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector4,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector4,const vector,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector)'})
let c['instance'] = f
let f = []
call add(f,{'word':'integrate3d','kind':'f','menu':'float(const string,const string,const vector,const vector)'})
call add(f,{'word':'integrate3d','kind':'f','menu':'vector4(const string,const string,const vector,const vector)'})
call add(f,{'word':'integrate3d','kind':'f','menu':'vector(const string,const string,const vector,const vector)'})
let c['integrate3d'] = f
let f = []
call add(f,{'word':'integrate3dClip','kind':'f','menu':'int(const string,const string,export vector,export vector,const float)'})
let c['integrate3dClip'] = f
let f = []
call add(f,{'word':'interpolate','kind':'f','menu':'bsdf(const bsdf,const float,const float)'})
call add(f,{'word':'interpolate','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'interpolate','kind':'f','menu':'vector4(const vector4,const float,const float)'})
call add(f,{'word':'interpolate','kind':'f','menu':'vector(const vector,const float,const float)'})
let c['interpolate'] = f
let f = []
call add(f,{'word':'intersect','kind':'f','menu':'int(const int,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const int,const vector,const vector,vector,float,float)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const int,const vector,const vector,vector,vector)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const string,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const string,const vector,const vector,vector,float,float)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const string,const vector,const vector,vector,vector)'})
let c['intersect'] = f
let f = []
call add(f,{'word':'intersect3d','kind':'f','menu':'int(const string,const string,const vector,const vector,const float)'})
let c['intersect3d'] = f
let f = []
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const int,const string,const vector,const vector,vector[],int[],vector[])'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const int,const string,const vector,const vector,vector[],int[],vector[],const float,const float)'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const int,const vector,const vector,vector[],int[],vector[])'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const int,const vector,const vector,vector[],int[],vector[],const float,const float)'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const string,const string,const vector,const vector,vector[],int[],vector[])'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const string,const string,const vector,const vector,vector[],int[],vector[],const float,const float)'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const string,const vector,const vector,vector[],int[],vector[])'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const string,const vector,const vector,vector[],int[],vector[],const float,const float)'})
let c['intersect_all'] = f
let f = []
call add(f,{'word':'invert','kind':'f','menu':'matrix2(const matrix2)'})
call add(f,{'word':'invert','kind':'f','menu':'matrix3(const matrix3)'})
call add(f,{'word':'invert','kind':'f','menu':'matrix(const matrix)'})
let c['invert'] = f
let f = []
call add(f,{'word':'invertexgroup','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'invertexgroup','kind':'f','menu':'int(const string,const string,const int)'})
let c['invertexgroup'] = f
let f = []
call add(f,{'word':'isalpha','kind':'f','menu':'int(const string)'})
let c['isalpha'] = f
let f = []
call add(f,{'word':'isbound','kind':'f','menu':'int(const string)'})
let c['isbound'] = f
let f = []
call add(f,{'word':'isconnected','kind':'f','menu':'int(const int)'})
let c['isconnected'] = f
let f = []
call add(f,{'word':'isdigit','kind':'f','menu':'int(const string)'})
let c['isdigit'] = f
let f = []
call add(f,{'word':'isfinite','kind':'f','menu':'int(const float)'})
let c['isfinite'] = f
let f = []
call add(f,{'word':'isnan','kind':'f','menu':'int(const float)'})
let c['isnan'] = f
let f = []
call add(f,{'word':'isotropic','kind':'f','menu':'bsdf()'})
let c['isotropic'] = f
let f = []
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(const string,const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export matrix2[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export matrix3[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export matrix[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export float[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export int[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export vector4[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export string[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export vector2[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export vector[],const int)'})
let c['isvalidindex'] = f
let f = []
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix2)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix3)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const bsdf)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const float)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const int)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector4)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const string)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector2)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix2[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix3[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const bsdf[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const float[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector4[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const string[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector2[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector[])'})
let c['isvarying'] = f
let f = []
call add(f,{'word':'itoa','kind':'f','menu':'string(const int)'})
let c['itoa'] = f
let f = []
call add(f,{'word':'join','kind':'f','menu':'string(const string[],const string)'})
let c['join'] = f
let f = []
let c['jump'] = f
let f = []
call add(f,{'word':'kspline','kind':'f','menu':'float(const string,const float,const float,const float)'})
call add(f,{'word':'kspline','kind':'f','menu':'vector4(const string,const float,const vector4,const float)'})
call add(f,{'word':'kspline','kind':'f','menu':'vector(const string,const float,const vector,const float)'})
let c['kspline'] = f
let f = []
let c['le'] = f
let f = []
call add(f,{'word':'len','kind':'f','menu':'int(const matrix2)'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix3)'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix)'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector4)'})
call add(f,{'word':'len','kind':'f','menu':'int(const string)'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector2)'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector)'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix2[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix3[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const bsdf[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const float[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector4[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const string[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector2[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector[])'})
let c['len'] = f
let f = []
call add(f,{'word':'length','kind':'f','menu':'float(const float)'})
call add(f,{'word':'length','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'length','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'length','kind':'f','menu':'float(const vector)'})
let c['length'] = f
let f = []
call add(f,{'word':'length2','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'length2','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'length2','kind':'f','menu':'float(const vector)'})
let c['length2'] = f
let f = []
call add(f,{'word':'lerp','kind':'f','menu':'bsdf(const bsdf,const bsdf,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector4(const vector4,const vector4,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector2(const vector2,const vector2,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector(const vector,const vector,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['lerp'] = f
let f = []
call add(f,{'word':'limit_sample_space','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'limit_sample_space','kind':'f','menu':'float(const float,const float,const float)'})
let c['limit_sample_space'] = f
let f = []
call add(f,{'word':'lkspline','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'lkspline','kind':'f','menu':'vector4(const float,const vector4,const float)'})
call add(f,{'word':'lkspline','kind':'f','menu':'vector(const float,const vector,const float)'})
let c['lkspline'] = f
let f = []
call add(f,{'word':'log','kind':'f','menu':'float(const float)'})
call add(f,{'word':'log','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'log','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'log','kind':'f','menu':'vector(const vector)'})
let c['log'] = f
let f = []
call add(f,{'word':'log10','kind':'f','menu':'float(const float)'})
call add(f,{'word':'log10','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'log10','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'log10','kind':'f','menu':'vector(const vector)'})
let c['log10'] = f
let f = []
call add(f,{'word':'lookat','kind':'f','menu':'matrix3(const vector,const vector)'})
call add(f,{'word':'lookat','kind':'f','menu':'matrix3(const vector,const vector,const float)'})
call add(f,{'word':'lookat','kind':'f','menu':'matrix3(const vector,const vector,const vector)'})
call add(f,{'word':'lookat','kind':'f','menu':'vector(const vector,const vector,const float,const int)'})
call add(f,{'word':'lookat','kind':'f','menu':'vector(const vector,const vector,const vector,const int)'})
let c['lookat'] = f
let f = []
let c['loop'] = f
let f = []
call add(f,{'word':'lspline','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'lspline','kind':'f','menu':'vector4(const float,const vector4)'})
call add(f,{'word':'lspline','kind':'f','menu':'vector(const float,const vector)'})
let c['lspline'] = f
let f = []
call add(f,{'word':'lstrip','kind':'f','menu':'string(const string)'})
call add(f,{'word':'lstrip','kind':'f','menu':'string(const string,const string)'})
let c['lstrip'] = f
let f = []
let c['lt'] = f
let f = []
call add(f,{'word':'luminance','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'luminance','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'luminance','kind':'f','menu':'float(const vector)'})
let c['luminance'] = f
let f = []
call add(f,{'word':'makebasis','kind':'f','menu':'void(vector,vector,const vector)'})
call add(f,{'word':'makebasis','kind':'f','menu':'vector(vector,const vector)'})
call add(f,{'word':'makebasis','kind':'f','menu':'void(export vector,export vector,const vector,const vector)'})
let c['makebasis'] = f
let f = []
call add(f,{'word':'maketransform','kind':'f','menu':'matrix3(const int,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix3(const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const int,const int,const vector,const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const int,const int,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const int,const int,const vector,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const int,const int,const vector,const vector,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const vector,const vector,const vector)'})
let c['maketransform'] = f
let f = []
call add(f,{'word':'mask_bsdf','kind':'f','menu':'bsdf(const bsdf,const int)'})
let c['mask_bsdf'] = f
let f = []
call add(f,{'word':'match','kind':'f','menu':'int(const string,const string)'})
let c['match'] = f
let f = []
call add(f,{'word':'matchvex_blinn','kind':'f','menu':'bsdf(const vector,const float)'})
let c['matchvex_blinn'] = f
let f = []
call add(f,{'word':'matchvex_specular','kind':'f','menu':'bsdf(const vector,const float)'})
let c['matchvex_specular'] = f
let f = []
call add(f,{'word':'max','kind':'f','menu':'float(const float)'})
call add(f,{'word':'max','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'max','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'max','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'max','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'max','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'max','kind':'f','menu':'int(const int)'})
call add(f,{'word':'max','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'max','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'max','kind':'f','menu':'vector4(const vector4,const vector4)'})
call add(f,{'word':'max','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'max','kind':'f','menu':'vector2(const vector2,const vector2)'})
call add(f,{'word':'max','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'max','kind':'f','menu':'vector(const vector,const vector)'})
call add(f,{'word':'max','kind':'f','menu':'vector(const vector[])'})
let c['max'] = f
let f = []
let c['measured'] = f
let f = []
let c['merge'] = f
let f = []
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,matrix2)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,matrix3)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,matrix)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,float)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,int)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,vector4)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,vector2)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'matrix3[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'matrix[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'float[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'vector4[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'vector[](const string,const string,const vector)'})
let c['metaimport'] = f
let f = []
call add(f,{'word':'metamarch','kind':'f','menu':'int(export int,const string,export vector,export vector,const float)'})
let c['metamarch'] = f
let f = []
call add(f,{'word':'metanext','kind':'f','menu':'int(const int)'})
let c['metanext'] = f
let f = []
call add(f,{'word':'metastart','kind':'f','menu':'int(const string,const vector)'})
let c['metastart'] = f
let f = []
call add(f,{'word':'metaweight','kind':'f','menu':'float(const string,const vector)'})
let c['metaweight'] = f
let f = []
call add(f,{'word':'min','kind':'f','menu':'float(const float)'})
call add(f,{'word':'min','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'min','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'min','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'min','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'min','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'min','kind':'f','menu':'int(const int)'})
call add(f,{'word':'min','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'min','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'min','kind':'f','menu':'vector4(const vector4,const vector4)'})
call add(f,{'word':'min','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'min','kind':'f','menu':'vector2(const vector2,const vector2)'})
call add(f,{'word':'min','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'min','kind':'f','menu':'vector(const vector,const vector)'})
call add(f,{'word':'min','kind':'f','menu':'vector(const vector[])'})
let c['min'] = f
let f = []
call add(f,{'word':'minpos','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const int,const string,const vector,const float)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const int,const vector)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const int,const vector,const float)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const string,const string,const vector,const float)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const string,const vector,const float)'})
let c['minpos'] = f
let f = []
let c['mod'] = f
let f = []
let c['mul'] = f
let f = []
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,const float,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,const float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,const float,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,const float,float,float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,const float,int,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,const float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,int,float,float,float,float,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,float,float,float,float,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,int,float,float,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,float,float,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector4,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector4,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector4,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector4,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector4,int,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector4,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector2,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector2,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector2,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector2,float,float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector2,int,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector2,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector,int,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector,int,float,float,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector,float,float,const int,const int,const int)'})
let c['mwnoise'] = f
let f = []
call add(f,{'word':'nametopoint','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nametopoint','kind':'f','menu':'int(const string,const string)'})
let c['nametopoint'] = f
let f = []
call add(f,{'word':'nametoprim','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nametoprim','kind':'f','menu':'int(const string,const string)'})
let c['nametoprim'] = f
let f = []
call add(f,{'word':'nbouncetypes','kind':'f','menu':'int()'})
let c['nbouncetypes'] = f
let f = []
let c['ne'] = f
let f = []
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const int,const string,const vector,const float)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const int,const vector)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const int,const vector,const float)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const string,const string,const vector)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const string,const string,const vector,const float)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const string,const vector)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const string,const vector,const float)'})
let c['nearpoint'] = f
let f = []
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const int,const string,const vector,const float)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const int,const string,const vector,const float,const int)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const int,const vector,const float)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const int,const vector,const float,const int)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const string,const string,const vector,const float)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const string,const string,const vector,const float,const int)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const string,const vector,const float)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const string,const vector,const float,const int)'})
let c['nearpoints'] = f
let f = []
call add(f,{'word':'nedgesgroup','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nedgesgroup','kind':'f','menu':'int(const string,const string)'})
let c['nedgesgroup'] = f
let f = []
let c['neg'] = f
let f = []
call add(f,{'word':'neighbour','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'neighbour','kind':'f','menu':'int(const string,const int,const int)'})
let c['neighbour'] = f
let f = []
call add(f,{'word':'neighbourcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'neighbourcount','kind':'f','menu':'int(const string,const int)'})
let c['neighbourcount'] = f
let f = []
call add(f,{'word':'neighbours','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'neighbours','kind':'f','menu':'int[](const string,const int)'})
let c['neighbours'] = f
let f = []
call add(f,{'word':'newgroup','kind':'f','menu':'void(const string)'})
let c['newgroup'] = f
let f = []
call add(f,{'word':'noise','kind':'f','menu':'float(const float)'})
call add(f,{'word':'noise','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'noise','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'noise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'noise','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'noise','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'noise','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'noise','kind':'f','menu':'vector(const vector)'})
let c['noise'] = f
let f = []
call add(f,{'word':'noised','kind':'f','menu':'void(const float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'float(const float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const float,const float,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'float(const float,const float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const float,const float,vector,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'vector(const float,const float,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const float,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'vector(const float,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const vector4,float,float,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'float(const vector4,float,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const vector4,vector,vector,vector,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'vector(const vector4,vector,vector,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const vector,float,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'float(const vector,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const vector,vector,vector,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'vector(const vector,vector,vector,vector)'})
let c['noised'] = f
let f = []
let c['nop'] = f
let f = []
call add(f,{'word':'normal_bsdf','kind':'f','menu':'vector(const bsdf)'})
let c['normal_bsdf'] = f
let f = []
call add(f,{'word':'normalize','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'normalize','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'normalize','kind':'f','menu':'vector(const vector)'})
let c['normalize'] = f
let f = []
let c['not'] = f
let f = []
let c['notif'] = f
let f = []
call add(f,{'word':'npoints','kind':'f','menu':'int(const int)'})
call add(f,{'word':'npoints','kind':'f','menu':'int(const string)'})
let c['npoints'] = f
let f = []
call add(f,{'word':'npointsgroup','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'npointsgroup','kind':'f','menu':'int(const string,const string)'})
let c['npointsgroup'] = f
let f = []
call add(f,{'word':'nprimitives','kind':'f','menu':'int(const int)'})
call add(f,{'word':'nprimitives','kind':'f','menu':'int(const string)'})
let c['nprimitives'] = f
let f = []
call add(f,{'word':'nprimitivesgroup','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nprimitivesgroup','kind':'f','menu':'int(const string,const string)'})
let c['nprimitivesgroup'] = f
let f = []
call add(f,{'word':'nrandom','kind':'f','menu':'float()'})
call add(f,{'word':'nrandom','kind':'f','menu':'void(float,float)'})
call add(f,{'word':'nrandom','kind':'f','menu':'float(float)'})
call add(f,{'word':'nrandom','kind':'f','menu':'vector4()'})
call add(f,{'word':'nrandom','kind':'f','menu':'vector()'})
let c['nrandom'] = f
let f = []
call add(f,{'word':'ntransform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'ntransform','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'ntransform','kind':'f','menu':'vector(const vector,const matrix)'})
let c['ntransform'] = f
let f = []
call add(f,{'word':'nuniqueval','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'nuniqueval','kind':'f','menu':'int(const string,const string,const string)'})
let c['nuniqueval'] = f
let f = []
call add(f,{'word':'nvertices','kind':'f','menu':'int(const int)'})
call add(f,{'word':'nvertices','kind':'f','menu':'int(const string)'})
let c['nvertices'] = f
let f = []
call add(f,{'word':'nverticesgroup','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nverticesgroup','kind':'f','menu':'int(const string,const string)'})
let c['nverticesgroup'] = f
let f = []
call add(f,{'word':'ocean_sample','kind':'f','menu':'vector(const string,const int,const int,const int,const float,const float,const int,const int,const vector)'})
let c['ocean_sample'] = f
let f = []
call add(f,{'word':'ocio_activedisplays','kind':'f','menu':'string[]()'})
let c['ocio_activedisplays'] = f
let f = []
call add(f,{'word':'ocio_activeviews','kind':'f','menu':'string[]()'})
let c['ocio_activeviews'] = f
let f = []
call add(f,{'word':'ocio_import','kind':'f','menu':'int(const string,const string,int)'})
call add(f,{'word':'ocio_import','kind':'f','menu':'int(const string,const string,string)'})
call add(f,{'word':'ocio_import','kind':'f','menu':'int(const string,const string,vector)'})
let c['ocio_import'] = f
let f = []
call add(f,{'word':'ocio_roles','kind':'f','menu':'string[]()'})
let c['ocio_roles'] = f
let f = []
call add(f,{'word':'ocio_spaces','kind':'f','menu':'string[]()'})
let c['ocio_spaces'] = f
let f = []
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector4(const string,const vector4)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector4(const string,const string,const vector4)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector4(const string,const string,const string,const vector4)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector(const string,const string,const string,const vector)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector(const string,const vector)'})
let c['ocio_transform'] = f
let f = []
call add(f,{'word':'onoise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'onoise','kind':'f','menu':'float(const vector,const int,const float,const float)'})
call add(f,{'word':'onoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'onoise','kind':'f','menu':'float(const vector,const int,const int,const int,const int,const float,const float)'})
call add(f,{'word':'onoise','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'onoise','kind':'f','menu':'vector(const vector,const int,const float,const float)'})
call add(f,{'word':'onoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
call add(f,{'word':'onoise','kind':'f','menu':'vector(const vector,const int,const int,const int,const int,const float,const float)'})
let c['onoise'] = f
let f = []
call add(f,{'word':'opdigits','kind':'f','menu':'int()'})
call add(f,{'word':'opdigits','kind':'f','menu':'int(const string)'})
let c['opdigits'] = f
let f = []
call add(f,{'word':'opfullpath','kind':'f','menu':'string(const string)'})
let c['opfullpath'] = f
let f = []
call add(f,{'word':'opid','kind':'f','menu':'int(const int)'})
call add(f,{'word':'opid','kind':'f','menu':'int(const string)'})
let c['opid'] = f
let f = []
call add(f,{'word':'opparentbonetransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'opparentbonetransform','kind':'f','menu':'matrix(const string,const float)'})
let c['opparentbonetransform'] = f
let f = []
call add(f,{'word':'opparenttransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'opparenttransform','kind':'f','menu':'matrix(const string,const float)'})
let c['opparenttransform'] = f
let f = []
call add(f,{'word':'opparmtransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'opparmtransform','kind':'f','menu':'matrix(const string,const float)'})
let c['opparmtransform'] = f
let f = []
call add(f,{'word':'oppreconstrainttransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'oppreconstrainttransform','kind':'f','menu':'matrix(const string,const float)'})
let c['oppreconstrainttransform'] = f
let f = []
call add(f,{'word':'oppretransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'oppretransform','kind':'f','menu':'matrix(const string,const float)'})
let c['oppretransform'] = f
let f = []
call add(f,{'word':'optransform','kind':'f','menu':'matrix(const int)'})
call add(f,{'word':'optransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'optransform','kind':'f','menu':'matrix(const string,const float)'})
let c['optransform'] = f
let f = []
let c['or'] = f
let f = []
call add(f,{'word':'ord','kind':'f','menu':'int(const string)'})
let c['ord'] = f
let f = []
call add(f,{'word':'orthographic','kind':'f','menu':'matrix(const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'orthographic','kind':'f','menu':'matrix(const float,const float,const float,const float,const float,const float,const vector4)'})
let c['orthographic'] = f
let f = []
call add(f,{'word':'osd_facecount','kind':'f','menu':'int(const int)'})
call add(f,{'word':'osd_facecount','kind':'f','menu':'int(const string)'})
let c['osd_facecount'] = f
let f = []
call add(f,{'word':'osd_firstpatch','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'osd_firstpatch','kind':'f','menu':'int(const string,const int)'})
let c['osd_firstpatch'] = f
let f = []
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix2)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix3)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,float)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector4)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector2)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,float[])'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix2)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix3)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,float)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector4)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector2)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,float[])'})
let c['osd_limitsurface'] = f
let f = []
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix2)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix3)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,float)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector4)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector2)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,float[])'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix2)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix3)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,float)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector4)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector2)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,float[])'})
let c['osd_limitsurfacevertex'] = f
let f = []
call add(f,{'word':'osd_lookupface','kind':'f','menu':'int(const int,const int,const float,const float,int,float,float)'})
call add(f,{'word':'osd_lookupface','kind':'f','menu':'int(const int,const int,const float,const float,int,float,float,const string)'})
call add(f,{'word':'osd_lookupface','kind':'f','menu':'int(const string,const int,const float,const float,int,float,float)'})
call add(f,{'word':'osd_lookupface','kind':'f','menu':'int(const string,const int,const float,const float,int,float,float,const string)'})
let c['osd_lookupface'] = f
let f = []
call add(f,{'word':'osd_lookuppatch','kind':'f','menu':'int(const int,const int,const float,const float,int,float,float)'})
call add(f,{'word':'osd_lookuppatch','kind':'f','menu':'int(const int,const int,const float,const float,int,float,float,const string)'})
call add(f,{'word':'osd_lookuppatch','kind':'f','menu':'int(const string,const int,const float,const float,int,float,float)'})
call add(f,{'word':'osd_lookuppatch','kind':'f','menu':'int(const string,const int,const float,const float,int,float,float,const string)'})
let c['osd_lookuppatch'] = f
let f = []
call add(f,{'word':'osd_patchcount','kind':'f','menu':'int(const int)'})
call add(f,{'word':'osd_patchcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'osd_patchcount','kind':'f','menu':'int(const string)'})
call add(f,{'word':'osd_patchcount','kind':'f','menu':'int(const string,const int)'})
let c['osd_patchcount'] = f
let f = []
call add(f,{'word':'osd_patches','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'osd_patches','kind':'f','menu':'int[](const string,const int)'})
let c['osd_patches'] = f
let f = []
call add(f,{'word':'outerproduct','kind':'f','menu':'matrix2(const vector2,const vector2)'})
call add(f,{'word':'outerproduct','kind':'f','menu':'matrix3(const vector,const vector)'})
call add(f,{'word':'outerproduct','kind':'f','menu':'matrix(const vector4,const vector4)'})
let c['outerproduct'] = f
let f = []
call add(f,{'word':'ow_nspace','kind':'f','menu':'vector(const vector)'})
let c['ow_nspace'] = f
let f = []
call add(f,{'word':'ow_space','kind':'f','menu':'matrix()'})
call add(f,{'word':'ow_space','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'ow_space','kind':'f','menu':'vector(const vector)'})
let c['ow_space'] = f
let f = []
call add(f,{'word':'ow_vspace','kind':'f','menu':'vector(const vector)'})
let c['ow_vspace'] = f
let f = []
call add(f,{'word':'pack_inttosafefloat','kind':'f','menu':'float(const int)'})
let c['pack_inttosafefloat'] = f
let f = []
call add(f,{'word':'packedtransform','kind':'f','menu':'void(const int,const int,const matrix)'})
let c['packedtransform'] = f
let f = []
call add(f,{'word':'pcclose','kind':'f','menu':'void(export int)'})
let c['pcclose'] = f
let f = []
call add(f,{'word':'pcconvex','kind':'f','menu':'float(const int,const string,const vector)'})
let c['pcconvex'] = f
let f = []
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const vector,const float)'})
let c['pcexport'] = f
let f = []
call add(f,{'word':'pcfarthest','kind':'f','menu':'float(const int)'})
let c['pcfarthest'] = f
let f = []
call add(f,{'word':'pcfilter','kind':'f','menu':'matrix3(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'float(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'vector4(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'vector(const int,const string)'})
let c['pcfilter'] = f
let f = []
call add(f,{'word':'pcfind','kind':'f','menu':'int[](const int,const string,const string,const vector,const float,const int)'})
call add(f,{'word':'pcfind','kind':'f','menu':'int[](const int,const string,const vector,const float,const int)'})
call add(f,{'word':'pcfind','kind':'f','menu':'int[](const string,const string,const string,const vector,const float,const int)'})
call add(f,{'word':'pcfind','kind':'f','menu':'int[](const string,const string,const vector,const float,const int)'})
let c['pcfind'] = f
let f = []
call add(f,{'word':'pcfind_radius','kind':'f','menu':'int[](const int,const string,const string,const float,const vector,const float,const int)'})
call add(f,{'word':'pcfind_radius','kind':'f','menu':'int[](const int,const string,const string,const string,const float,const vector,const float,const int)'})
call add(f,{'word':'pcfind_radius','kind':'f','menu':'int[](const string,const string,const string,const float,const vector,const float,const int)'})
call add(f,{'word':'pcfind_radius','kind':'f','menu':'int[](const string,const string,const string,const string,const float,const vector,const float,const int)'})
let c['pcfind_radius'] = f
let f = []
call add(f,{'word':'pcgenerate','kind':'f','menu':'int(const string,const int)'})
let c['pcgenerate'] = f
let f = []
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,matrix3)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,matrix)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,float)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,int)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,vector4)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,string)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,vector)'})
let c['pcimport'] = f
let f = []
call add(f,{'word':'pcimportbyidx3','kind':'f','menu':'matrix3(const int,const string,const int)'})
let c['pcimportbyidx3'] = f
let f = []
call add(f,{'word':'pcimportbyidx4','kind':'f','menu':'matrix(const int,const string,const int)'})
let c['pcimportbyidx4'] = f
let f = []
call add(f,{'word':'pcimportbyidxf','kind':'f','menu':'float(const int,const string,const int)'})
let c['pcimportbyidxf'] = f
let f = []
call add(f,{'word':'pcimportbyidxi','kind':'f','menu':'int(const int,const string,const int)'})
let c['pcimportbyidxi'] = f
let f = []
call add(f,{'word':'pcimportbyidxp','kind':'f','menu':'vector4(const int,const string,const int)'})
let c['pcimportbyidxp'] = f
let f = []
call add(f,{'word':'pcimportbyidxs','kind':'f','menu':'string(const int,const string,const int)'})
let c['pcimportbyidxs'] = f
let f = []
call add(f,{'word':'pcimportbyidxv','kind':'f','menu':'vector(const int,const string,const int)'})
let c['pcimportbyidxv'] = f
let f = []
call add(f,{'word':'pciterate','kind':'f','menu':'int(const int)'})
let c['pciterate'] = f
let f = []
call add(f,{'word':'pcnumfound','kind':'f','menu':'int(const int)'})
let c['pcnumfound'] = f
let f = []
call add(f,{'word':'pcopen','kind':'f','menu':'int(const int,const string,const vector,const float,const int)'})
call add(f,{'word':'pcopen','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'pcopen','kind':'f','menu':'int(const string,const string,const vector,const float,const int)'})
call add(f,{'word':'pcopen','kind':'f','menu':'int(const string,const string,const vector,const string,const vector,const float,const int)'})
let c['pcopen'] = f
let f = []
call add(f,{'word':'pcopenlod','kind':'f','menu':'int(const string,const string,const vector,const int)'})
let c['pcopenlod'] = f
let f = []
call add(f,{'word':'pcsampleleaf','kind':'f','menu':'void(const int,const float)'})
let c['pcsampleleaf'] = f
let f = []
call add(f,{'word':'pcsize','kind':'f','menu':'int(const int)'})
let c['pcsize'] = f
let f = []
call add(f,{'word':'pcunshaded','kind':'f','menu':'int(const int,const string)'})
let c['pcunshaded'] = f
let f = []
call add(f,{'word':'pcwrite','kind':'f','menu':'int(const string)'})
let c['pcwrite'] = f
let f = []
call add(f,{'word':'perspective','kind':'f','menu':'matrix(const float,const float,const float,const float,const float)'})
call add(f,{'word':'perspective','kind':'f','menu':'matrix(const float,const float,const float,const float,const float,const vector4)'})
let c['perspective'] = f
let f = []
call add(f,{'word':'pgfind','kind':'f','menu':'int[](const int,const string,const vector,const float,const int,const float)'})
call add(f,{'word':'pgfind','kind':'f','menu':'int[](const int,const vector,const float,const int,const float)'})
call add(f,{'word':'pgfind','kind':'f','menu':'int[](const string,const string,const vector,const float,const int,const float)'})
call add(f,{'word':'pgfind','kind':'f','menu':'int[](const string,const vector,const float,const int,const float)'})
let c['pgfind'] = f
let f = []
call add(f,{'word':'phongBRDF','kind':'f','menu':'float(const vector,const vector,const vector,const float)'})
let c['phongBRDF'] = f
let f = []
call add(f,{'word':'phonglobe','kind':'f','menu':'bsdf(const vector,const vector,const float,const float,const vector,const vector)'})
call add(f,{'word':'phonglobe','kind':'f','menu':'bsdf(const vector,const vector,const float)'})
let c['phonglobe'] = f
let f = []
call add(f,{'word':'photonmap','kind':'f','menu':'vector(const string,const vector,const vector)'})
call add(f,{'word':'photonmap','kind':'f','menu':'void(const string,const vector,const vector,vector,float)'})
call add(f,{'word':'photonmap','kind':'f','menu':'vector(const string,const vector,const vector,float)'})
let c['photonmap'] = f
let f = []
call add(f,{'word':'planepointdistance','kind':'f','menu':'float(const vector,const vector,const vector,vector)'})
let c['planepointdistance'] = f
let f = []
call add(f,{'word':'planesphereintersect','kind':'f','menu':'int(const vector,const vector,const vector,const float,vector,float,float)'})
let c['planesphereintersect'] = f
let f = []
call add(f,{'word':'pluralize','kind':'f','menu':'string(const string)'})
let c['pluralize'] = f
let f = []
call add(f,{'word':'pnoise','kind':'f','menu':'float(const float,const float,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const float,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const vector4,const vector4)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const vector,const vector)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const float,const float,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const float,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const vector4,const vector4)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const vector,const vector)'})
let c['pnoise'] = f
let f = []
call add(f,{'word':'point','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector[](const string,const string,const int)'})
let c['point'] = f
let f = []
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix2(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix2(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix3(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix3(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'float(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'float(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'int(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'int(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector4(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector4(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'string(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'string(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector2(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector2(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix2[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix2[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix3[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix3[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'float[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'float[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'int[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'int[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector4[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector4[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'string[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'string[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector2[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector2[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector[](const string,const string,const int,int)'})
let c['pointattrib'] = f
let f = []
call add(f,{'word':'pointattribsize','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'pointattribsize','kind':'f','menu':'int(const string,const string)'})
let c['pointattribsize'] = f
let f = []
call add(f,{'word':'pointattribtype','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'pointattribtype','kind':'f','menu':'int(const string,const string)'})
let c['pointattribtype'] = f
let f = []
call add(f,{'word':'pointattribtypeinfo','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'pointattribtypeinfo','kind':'f','menu':'string(const string,const string)'})
let c['pointattribtypeinfo'] = f
let f = []
call add(f,{'word':'pointedge','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'pointedge','kind':'f','menu':'int(const string,const int,const int)'})
let c['pointedge'] = f
let f = []
call add(f,{'word':'pointhedge','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'pointhedge','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'pointhedge','kind':'f','menu':'int(const string,const int)'})
call add(f,{'word':'pointhedge','kind':'f','menu':'int(const string,const int,const int)'})
let c['pointhedge'] = f
let f = []
call add(f,{'word':'pointhedgenext','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'pointhedgenext','kind':'f','menu':'int(const string,const int)'})
let c['pointhedgenext'] = f
let f = []
call add(f,{'word':'pointprims','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'pointprims','kind':'f','menu':'int[](const string,const int)'})
let c['pointprims'] = f
let f = []
call add(f,{'word':'pointvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'pointvertex','kind':'f','menu':'int(const string,const int)'})
let c['pointvertex'] = f
let f = []
call add(f,{'word':'pointvertices','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'pointvertices','kind':'f','menu':'int[](const string,const int)'})
let c['pointvertices'] = f
let f = []
call add(f,{'word':'polardecomp','kind':'f','menu':'matrix3(const matrix3)'})
let c['polardecomp'] = f
let f = []
call add(f,{'word':'polyneighbours','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'polyneighbours','kind':'f','menu':'int[](const string,const int)'})
let c['polyneighbours'] = f
let f = []
call add(f,{'word':'pop','kind':'f','menu':'matrix2(export matrix2[])'})
call add(f,{'word':'pop','kind':'f','menu':'matrix2(export matrix2[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'matrix3(export matrix3[])'})
call add(f,{'word':'pop','kind':'f','menu':'matrix3(export matrix3[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'matrix(export matrix[])'})
call add(f,{'word':'pop','kind':'f','menu':'matrix(export matrix[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'bsdf(export bsdf[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'bsdf(export bsdf[])'})
call add(f,{'word':'pop','kind':'f','menu':'float(export float[])'})
call add(f,{'word':'pop','kind':'f','menu':'float(export float[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'int(export int[])'})
call add(f,{'word':'pop','kind':'f','menu':'int(export int[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'vector4(export vector4[])'})
call add(f,{'word':'pop','kind':'f','menu':'vector4(export vector4[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'string(export string[])'})
call add(f,{'word':'pop','kind':'f','menu':'string(export string[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'vector2(export vector2[])'})
call add(f,{'word':'pop','kind':'f','menu':'vector2(export vector2[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'vector(export vector[])'})
call add(f,{'word':'pop','kind':'f','menu':'vector(export vector[],const int)'})
let c['pop'] = f
let f = []
let c['popinline'] = f
let f = []
call add(f,{'word':'pow','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'pow','kind':'f','menu':'vector4(const vector4,const float)'})
call add(f,{'word':'pow','kind':'f','menu':'vector2(const vector2,const float)'})
call add(f,{'word':'pow','kind':'f','menu':'vector(const vector,const float)'})
let c['pow'] = f
let f = []
call add(f,{'word':'predicate_incircle','kind':'f','menu':'float(const vector2,const vector2,const vector2,const vector2)'})
let c['predicate_incircle'] = f
let f = []
call add(f,{'word':'predicate_insphere','kind':'f','menu':'float(const vector,const vector,const vector,const vector,const vector)'})
let c['predicate_insphere'] = f
let f = []
call add(f,{'word':'predicate_orient2d','kind':'f','menu':'float(const vector2,const vector2,const vector2)'})
let c['predicate_orient2d'] = f
let f = []
call add(f,{'word':'predicate_orient3d','kind':'f','menu':'float(const vector,const vector,const vector,const vector)'})
let c['predicate_orient3d'] = f
let f = []
call add(f,{'word':'prerotate','kind':'f','menu':'void(export matrix3,const float,const vector)'})
call add(f,{'word':'prerotate','kind':'f','menu':'void(export matrix3,const vector,const int)'})
call add(f,{'word':'prerotate','kind':'f','menu':'void(export matrix,const float,const vector)'})
call add(f,{'word':'prerotate','kind':'f','menu':'void(export matrix,const vector,const int)'})
let c['prerotate'] = f
let f = []
call add(f,{'word':'prescale','kind':'f','menu':'void(export matrix3,const vector)'})
call add(f,{'word':'prescale','kind':'f','menu':'void(export matrix,const vector)'})
let c['prescale'] = f
let f = []
call add(f,{'word':'pretranslate','kind':'f','menu':'void(export matrix,const vector)'})
let c['pretranslate'] = f
let f = []
call add(f,{'word':'prim','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector[](const string,const string,const int)'})
let c['prim'] = f
let f = []
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix2,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix3,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix3,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,float,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,float,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,int,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,int,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector4,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector4,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector2,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix2[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix3[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,float[],const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,float[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,int[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector4[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector2[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector[],const string,const int,const vector)'})
let c['prim_attribute'] = f
let f = []
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const int,const int,const float,const float)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const int,const int,const float,const float,const float)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const string,const int,const float,const float)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const string,const int,const float,const float,const float)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const string,const int,const vector)'})
let c['prim_normal'] = f
let f = []
call add(f,{'word':'primarclen','kind':'f','menu':'float(const string,const vector2,const vector2,const int)'})
call add(f,{'word':'primarclen','kind':'f','menu':'float(const string,const vector2,const vector2,const int,const int)'})
let c['primarclen'] = f
let f = []
call add(f,{'word':'primattrib','kind':'f','menu':'matrix2(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix2(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix3(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix3(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'float(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'float(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'int(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'int(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector4(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector4(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'string(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'string(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector2(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector2(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix2[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix2[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix3[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix3[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'float[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'float[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'int[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'int[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector4[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector4[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'string[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'string[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector2[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector2[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector[](const string,const string,const int,int)'})
let c['primattrib'] = f
let f = []
call add(f,{'word':'primattribsize','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'primattribsize','kind':'f','menu':'int(const string,const string)'})
let c['primattribsize'] = f
let f = []
call add(f,{'word':'primattribtype','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'primattribtype','kind':'f','menu':'int(const string,const string)'})
let c['primattribtype'] = f
let f = []
call add(f,{'word':'primattribtypeinfo','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'primattribtypeinfo','kind':'f','menu':'string(const string,const string)'})
let c['primattribtypeinfo'] = f
let f = []
call add(f,{'word':'primduv','kind':'f','menu':'vector(const string,const int,const vector2,const int,const int)'})
let c['primduv'] = f
let f = []
call add(f,{'word':'primfind','kind':'f','menu':'int[](const int,const string,const vector,const vector)'})
call add(f,{'word':'primfind','kind':'f','menu':'int[](const int,const vector,const vector)'})
call add(f,{'word':'primfind','kind':'f','menu':'int[](const string,const string,const vector,const vector)'})
call add(f,{'word':'primfind','kind':'f','menu':'int[](const string,const vector,const vector)'})
let c['primfind'] = f
let f = []
call add(f,{'word':'primhedge','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'primhedge','kind':'f','menu':'int(const string,const int)'})
let c['primhedge'] = f
let f = []
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector[](const string,const string,const int)'})
let c['primintrinsic'] = f
let f = []
call add(f,{'word':'primpoint','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'primpoint','kind':'f','menu':'int(const string,const int,const int)'})
let c['primpoint'] = f
let f = []
call add(f,{'word':'primpoints','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'primpoints','kind':'f','menu':'int[](const string,const int)'})
let c['primpoints'] = f
let f = []
call add(f,{'word':'primuv','kind':'f','menu':'matrix2(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix2(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix3(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix3(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'float(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'float(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'int(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'int(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector4(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector4(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector2(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector2(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix2[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix2[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix3[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix3[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'float[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'float[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'int[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'int[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector4[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector4[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector2[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector2[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector[](const string,const string,const int,const vector)'})
let c['primuv'] = f
let f = []
call add(f,{'word':'primuvconvert','kind':'f','menu':'vector2(const string,const vector2,const int,const int)'})
call add(f,{'word':'primuvconvert','kind':'f','menu':'vector2(const string,const vector2,const int,const int,const float)'})
let c['primuvconvert'] = f
let f = []
call add(f,{'word':'primvertex','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'primvertex','kind':'f','menu':'int(const string,const int,const int)'})
let c['primvertex'] = f
let f = []
call add(f,{'word':'primvertexcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'primvertexcount','kind':'f','menu':'int(const string,const int)'})
let c['primvertexcount'] = f
let f = []
call add(f,{'word':'primvertices','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'primvertices','kind':'f','menu':'int[](const string,const int)'})
let c['primvertices'] = f
let f = []
call add(f,{'word':'print_once','kind':'f','menu':'void(const string)'})
let c['print_once'] = f
let f = []
call add(f,{'word':'printf','kind':'f','menu':'void(const string)'})
let c['printf'] = f
let f = []
call add(f,{'word':'product','kind':'f','menu':'float(const float)'})
call add(f,{'word':'product','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'product','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'product','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'product','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'product','kind':'f','menu':'int(const int)'})
call add(f,{'word':'product','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'product','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'product','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'product','kind':'f','menu':'vector(const vector[])'})
let c['product'] = f
let f = []
call add(f,{'word':'ptexture','kind':'f','menu':'matrix3(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'matrix3(const string,const int,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'matrix(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'matrix(const string,const int,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'float(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'float(const string,const int,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector4(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector4(const string,const int,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector(const string,const int,const float,const float,const float,const float,const float,const float)'})
let c['ptexture'] = f
let f = []
call add(f,{'word':'ptlined','kind':'f','menu':'float(const vector,const vector,const vector)'})
let c['ptlined'] = f
let f = []
call add(f,{'word':'ptransform','kind':'f','menu':'vector4(const vector4,const matrix)'})
call add(f,{'word':'ptransform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'ptransform','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'ptransform','kind':'f','menu':'vector(const vector,const matrix)'})
let c['ptransform'] = f
let f = []
call add(f,{'word':'push','kind':'f','menu':'void(export matrix2[],const matrix2)'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix2[],const matrix2[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix3[],const matrix3)'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix3[],const matrix3[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix[],const matrix)'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix[],const matrix[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export bsdf[],const bsdf)'})
call add(f,{'word':'push','kind':'f','menu':'void(export bsdf[],const bsdf[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export float[],const float)'})
call add(f,{'word':'push','kind':'f','menu':'void(export float[],const float[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export int[],const int)'})
call add(f,{'word':'push','kind':'f','menu':'void(export int[],const int[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector4[],const vector4)'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector4[],const vector4[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export string[],const string)'})
call add(f,{'word':'push','kind':'f','menu':'void(export string[],const string[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector2[],const vector2)'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector2[],const vector2[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector[],const vector)'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector[],const vector[])'})
let c['push'] = f
let f = []
let c['pushinline'] = f
let f = []
call add(f,{'word':'pxnoise','kind':'f','menu':'float(const float,const float,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'float(const float,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'float(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'vector(const float,const float,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'vector(const float,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'vector(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
let c['pxnoise'] = f
let f = []
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const float,const float,const int,const int,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'float(const float,const float,const int,const int,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const float,const float,const int,const int,vector,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'vector(const float,const float,const int,const int,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const float,const int,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'float(const float,const int,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const float,const int,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'vector(const float,const int,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const vector4,const int,const int,const int,const int,float,float,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'float(const vector4,const int,const int,const int,const int,float,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const vector4,const int,const int,const int,const int,vector,vector,vector,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'vector(const vector4,const int,const int,const int,const int,vector,vector,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const vector,const int,const int,const int,float,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'float(const vector,const int,const int,const int,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const vector,const int,const int,const int,vector,vector,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'vector(const vector,const int,const int,const int,vector,vector,vector)'})
let c['pxnoised'] = f
let f = []
call add(f,{'word':'qconvert','kind':'f','menu':'matrix3(const vector4)'})
call add(f,{'word':'qconvert','kind':'f','menu':'vector(const vector4)'})
let c['qconvert'] = f
let f = []
call add(f,{'word':'qdistance','kind':'f','menu':'float(const vector4,const vector4)'})
let c['qdistance'] = f
let f = []
call add(f,{'word':'qinvert','kind':'f','menu':'vector4(const vector4)'})
let c['qinvert'] = f
let f = []
call add(f,{'word':'qmultiply','kind':'f','menu':'vector4(const vector4,const vector4)'})
let c['qmultiply'] = f
let f = []
call add(f,{'word':'qrotate','kind':'f','menu':'vector(const vector4,const vector)'})
let c['qrotate'] = f
let f = []
call add(f,{'word':'quaternion','kind':'f','menu':'vector4(const matrix3)'})
call add(f,{'word':'quaternion','kind':'f','menu':'vector4(const float,const vector)'})
call add(f,{'word':'quaternion','kind':'f','menu':'vector4(const vector)'})
let c['quaternion'] = f
let f = []
call add(f,{'word':'quaterniontoeuler','kind':'f','menu':'vector(const vector4,const int)'})
let c['quaterniontoeuler'] = f
let f = []
call add(f,{'word':'radians','kind':'f','menu':'float(const float)'})
call add(f,{'word':'radians','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'radians','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'radians','kind':'f','menu':'vector(const vector)'})
let c['radians'] = f
let f = []
call add(f,{'word':'rand','kind':'f','menu':'float(const float)'})
call add(f,{'word':'rand','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'rand','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'rand','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'rand','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const float,const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const vector2)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const vector)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const float,const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const vector4)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const vector)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const vector2)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const vector)'})
let c['rand'] = f
let f = []
call add(f,{'word':'random','kind':'f','menu':'float(const float)'})
call add(f,{'word':'random','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'random','kind':'f','menu':'float(const int)'})
call add(f,{'word':'random','kind':'f','menu':'float(const int,const int)'})
call add(f,{'word':'random','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'random','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const float,const float)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const int,const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const vector)'})
call add(f,{'word':'random','kind':'f','menu':'vector2(const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const vector)'})
let c['random'] = f
let f = []
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const float)'})
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const float,const float)'})
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const vector4)'})
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const vector2)'})
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const vector)'})
let c['random_fhash'] = f
let f = []
let c['random_hash'] = f
let f = []
call add(f,{'word':'random_ihash','kind':'f','menu':'int(const int)'})
let c['random_ihash'] = f
let f = []
call add(f,{'word':'random_poisson','kind':'f','menu':'int(const int,const float)'})
call add(f,{'word':'random_poisson','kind':'f','menu':'int(const int,const float,const int,const int)'})
let c['random_poisson'] = f
let f = []
call add(f,{'word':'random_shash','kind':'f','menu':'int(const string)'})
let c['random_shash'] = f
let f = []
call add(f,{'word':'random_sobol','kind':'f','menu':'float(const float,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'float(const int,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'float(const vector4,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'float(const vector,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector4(const float,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector4(const int,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector4(const vector4,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector4(const vector,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector(const float,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector(const vector4,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector(const vector,const int)'})
let c['random_sobol'] = f
let f = []
call add(f,{'word':'randomf','kind':'f','menu':'float(const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'randomf','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector4(const float,const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector4(const vector)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector(const vector)'})
let c['randomf'] = f
let f = []
call add(f,{'word':'rawbumpmap','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmap','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmap','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmap','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmap'] = f
let f = []
call add(f,{'word':'rawbumpmapA','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapA','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapA','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapA','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapA'] = f
let f = []
call add(f,{'word':'rawbumpmapB','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapB','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapB','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapB','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapB'] = f
let f = []
call add(f,{'word':'rawbumpmapG','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapG','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapG','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapG','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapG'] = f
let f = []
call add(f,{'word':'rawbumpmapL','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapL','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapL','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapL','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapL'] = f
let f = []
call add(f,{'word':'rawbumpmapR','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapR','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapR','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapR','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapR'] = f
let f = []
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const float,const float)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const float,const float,const float,const float,const float,const float,const float,const float,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const vector)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const float,const float)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const float,const float,const float,const float,const float,const float,const float,const float,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector,const int)'})
let c['rawcolormap'] = f
let f = []
call add(f,{'word':'re_find','kind':'f','menu':'int(const string,const string)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(const string,const string,const int,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(int[],int[],const string,const string)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(int[],int[],const string,const string,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(int[],int[],const string,const string,const int,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'string(const string,const string)'})
call add(f,{'word':'re_find','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'string(const string,const string,const int,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'re_find','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'string[](const string,const string,const int,const int)'})
let c['re_find'] = f
let f = []
call add(f,{'word':'re_findall','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'re_findall','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'re_findall','kind':'f','menu':'string[](const string,const string,const int,const int)'})
let c['re_findall'] = f
let f = []
call add(f,{'word':'re_match','kind':'f','menu':'int(const string,const string)'})
let c['re_match'] = f
let f = []
call add(f,{'word':'re_replace','kind':'f','menu':'string(const string,const string,const string)'})
call add(f,{'word':'re_replace','kind':'f','menu':'string(const string,const string,const string,const int)'})
let c['re_replace'] = f
let f = []
call add(f,{'word':'re_split','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'re_split','kind':'f','menu':'string[](const string,const string,const int)'})
let c['re_split'] = f
let f = []
call add(f,{'word':'reflect','kind':'f','menu':'vector(const vector,const vector)'})
let c['reflect'] = f
let f = []
call add(f,{'word':'refract','kind':'f','menu':'vector(const vector,const vector,const float)'})
let c['refract'] = f
let f = []
call add(f,{'word':'relativepath','kind':'f','menu':'string(const string,const string)'})
let c['relativepath'] = f
let f = []
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const int,const vector)'})
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const vector)'})
let c['relbbox'] = f
let f = []
call add(f,{'word':'relpointbbox','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'relpointbbox','kind':'f','menu':'vector(const int,const vector)'})
call add(f,{'word':'relpointbbox','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'relpointbbox','kind':'f','menu':'vector(const string,const vector)'})
let c['relpointbbox'] = f
let f = []
call add(f,{'word':'removegroup','kind':'f','menu':'void(const string,const int)'})
let c['removegroup'] = f
let f = []
call add(f,{'word':'removeindex','kind':'f','menu':'matrix2(export matrix2[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'matrix3(export matrix3[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'matrix(export matrix[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'float(export float[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'int(export int[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'vector4(export vector4[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'string(export string[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'vector2(export vector2[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'vector(export vector[],const int)'})
let c['removeindex'] = f
let f = []
call add(f,{'word':'removepoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'removepoint','kind':'f','menu':'int(const int,const int,const int)'})
let c['removepoint'] = f
let f = []
call add(f,{'word':'removeprim','kind':'f','menu':'int(const int,const int,const int)'})
let c['removeprim'] = f
let f = []
call add(f,{'word':'removevalue','kind':'f','menu':'int(export matrix2[],const matrix2)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export matrix3[],const matrix3)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export matrix[],const matrix)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export float[],const float)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export int[],const int)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export vector4[],const vector4)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export string[],const string)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export vector2[],const vector2)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export vector[],const vector)'})
let c['removevalue'] = f
let f = []
call add(f,{'word':'reorder','kind':'f','menu':'string(const string,const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'matrix2[](const matrix2[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'matrix3[](const matrix3[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'matrix[](const matrix[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'float[](const float[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'int[](const int[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'vector4[](const vector4[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'string[](const string[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'vector2[](const vector2[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'vector[](const vector[],const int[])'})
let c['reorder'] = f
let f = []
call add(f,{'word':'resample_linear','kind':'f','menu':'float[](const float[],const int)'})
call add(f,{'word':'resample_linear','kind':'f','menu':'vector4[](const vector4[],const int)'})
call add(f,{'word':'resample_linear','kind':'f','menu':'vector2[](const vector2[],const int)'})
call add(f,{'word':'resample_linear','kind':'f','menu':'vector[](const vector[],const int)'})
let c['resample_linear'] = f
let f = []
call add(f,{'word':'resize','kind':'f','menu':'void(export matrix2[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export matrix3[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export matrix[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export bsdf[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export float[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export int[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export vector4[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export string[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export vector2[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export vector[],const int)'})
let c['resize'] = f
let f = []
let c['returninline'] = f
let f = []
call add(f,{'word':'reverse','kind':'f','menu':'string(const string)'})
call add(f,{'word':'reverse','kind':'f','menu':'matrix2[](const matrix2[])'})
call add(f,{'word':'reverse','kind':'f','menu':'matrix3[](const matrix3[])'})
call add(f,{'word':'reverse','kind':'f','menu':'matrix[](const matrix[])'})
call add(f,{'word':'reverse','kind':'f','menu':'float[](const float[])'})
call add(f,{'word':'reverse','kind':'f','menu':'int[](const int[])'})
call add(f,{'word':'reverse','kind':'f','menu':'vector4[](const vector4[])'})
call add(f,{'word':'reverse','kind':'f','menu':'string[](const string[])'})
call add(f,{'word':'reverse','kind':'f','menu':'vector2[](const vector2[])'})
call add(f,{'word':'reverse','kind':'f','menu':'vector[](const vector[])'})
let c['reverse'] = f
let f = []
call add(f,{'word':'rgbtohsv','kind':'f','menu':'vector(const float,const float,const float)'})
call add(f,{'word':'rgbtohsv','kind':'f','menu':'vector(const vector)'})
let c['rgbtohsv'] = f
let f = []
call add(f,{'word':'rgbtoxyz','kind':'f','menu':'vector(const vector)'})
let c['rgbtoxyz'] = f
let f = []
call add(f,{'word':'rint','kind':'f','menu':'float(const float)'})
call add(f,{'word':'rint','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'rint','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'rint','kind':'f','menu':'vector(const vector)'})
let c['rint'] = f
let f = []
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix2,const float)'})
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix3,const float,const vector)'})
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix3,const vector,const int)'})
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix,const float,const vector)'})
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix,const vector,const int)'})
let c['rotate'] = f
let f = []
call add(f,{'word':'rotate_x_to','kind':'f','menu':'vector4(const vector4,const vector4)'})
call add(f,{'word':'rotate_x_to','kind':'f','menu':'vector2(const vector2,const vector2)'})
call add(f,{'word':'rotate_x_to','kind':'f','menu':'vector(const vector,const vector)'})
let c['rotate_x_to'] = f
let f = []
call add(f,{'word':'rstrip','kind':'f','menu':'string(const string)'})
call add(f,{'word':'rstrip','kind':'f','menu':'string(const string,const string)'})
let c['rstrip'] = f
let f = []
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,const vector,int,vector,vector,float,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'int(const bsdf,const vector,const vector,vector,vector,float,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,vector,vector,float,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'vector(const bsdf,const vector,vector,float,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,vector,vector,float,int,const float,const float)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'vector(const bsdf,const vector,vector,float,int,const float,const float)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,vector,vector,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'vector(const bsdf,const vector,vector,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,vector,vector,int,const float,const float)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'vector(const bsdf,const vector,vector,int,const float,const float)'})
let c['sample_bsdf'] = f
let f = []
call add(f,{'word':'sample_cauchy','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'float(const float,const float,const float,const float)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'vector2(const float,const vector2)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'vector(const vector)'})
let c['sample_cauchy'] = f
let f = []
call add(f,{'word':'sample_cdf','kind':'f','menu':'int(const float[],const float)'})
call add(f,{'word':'sample_cdf','kind':'f','menu':'void(const float[],const float,int,float)'})
call add(f,{'word':'sample_cdf','kind':'f','menu':'int(const float[],const float,float)'})
call add(f,{'word':'sample_cdf','kind':'f','menu':'void(const float[],const float,int,float,float)'})
call add(f,{'word':'sample_cdf','kind':'f','menu':'int(const float[],const float,float,float)'})
let c['sample_cdf'] = f
let f = []
call add(f,{'word':'sample_circle_arc','kind':'f','menu':'vector2(const vector2,const float,const float)'})
let c['sample_circle_arc'] = f
let f = []
call add(f,{'word':'sample_circle_edge_uniform','kind':'f','menu':'vector2(const float)'})
let c['sample_circle_edge_uniform'] = f
let f = []
call add(f,{'word':'sample_circle_ring_uniform','kind':'f','menu':'vector2(const vector2,const float)'})
let c['sample_circle_ring_uniform'] = f
let f = []
call add(f,{'word':'sample_circle_slice','kind':'f','menu':'vector2(const vector2,const float,const vector2)'})
let c['sample_circle_slice'] = f
let f = []
call add(f,{'word':'sample_circle_uniform','kind':'f','menu':'vector2(const vector2)'})
let c['sample_circle_uniform'] = f
let f = []
call add(f,{'word':'sample_direction_cone','kind':'f','menu':'vector(const vector,const float,const vector2)'})
let c['sample_direction_cone'] = f
let f = []
call add(f,{'word':'sample_direction_uniform','kind':'f','menu':'vector(const vector2)'})
let c['sample_direction_uniform'] = f
let f = []
call add(f,{'word':'sample_discrete','kind':'f','menu':'int(const int,const float)'})
call add(f,{'word':'sample_discrete','kind':'f','menu':'int(const float[],const float)'})
let c['sample_discrete'] = f
let f = []
call add(f,{'word':'sample_exponential','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sample_exponential','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'sample_exponential','kind':'f','menu':'float(const float,const float,const float)'})
let c['sample_exponential'] = f
let f = []
call add(f,{'word':'sample_hemisphere','kind':'f','menu':'vector(const float,const vector2)'})
call add(f,{'word':'sample_hemisphere','kind':'f','menu':'vector(const vector2)'})
call add(f,{'word':'sample_hemisphere','kind':'f','menu':'vector(const vector,const float,const vector2)'})
call add(f,{'word':'sample_hemisphere','kind':'f','menu':'vector(const vector,const vector2)'})
let c['sample_hemisphere'] = f
let f = []
call add(f,{'word':'sample_hypersphere_cone','kind':'f','menu':'vector4(const vector4,const float,const vector4)'})
let c['sample_hypersphere_cone'] = f
let f = []
call add(f,{'word':'sample_hypersphere_uniform','kind':'f','menu':'vector4(const vector4)'})
let c['sample_hypersphere_uniform'] = f
let f = []
call add(f,{'word':'sample_lognormal','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'sample_lognormal','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
let c['sample_lognormal'] = f
let f = []
call add(f,{'word':'sample_lognormal_by_median','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'sample_lognormal_by_median','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
let c['sample_lognormal_by_median'] = f
let f = []
call add(f,{'word':'sample_normal','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'vector(const vector)'})
let c['sample_normal'] = f
let f = []
call add(f,{'word':'sample_orientation_cone','kind':'f','menu':'vector4(const vector4,const float,const vector)'})
let c['sample_orientation_cone'] = f
let f = []
call add(f,{'word':'sample_orientation_uniform','kind':'f','menu':'vector4(const vector)'})
let c['sample_orientation_uniform'] = f
let f = []
call add(f,{'word':'sample_sphere_cone','kind':'f','menu':'vector(const vector,const float,const vector)'})
let c['sample_sphere_cone'] = f
let f = []
call add(f,{'word':'sample_sphere_shell_uniform','kind':'f','menu':'vector(const vector,const float)'})
let c['sample_sphere_shell_uniform'] = f
let f = []
call add(f,{'word':'sample_sphere_uniform','kind':'f','menu':'vector(const vector)'})
let c['sample_sphere_uniform'] = f
let f = []
call add(f,{'word':'sampledisk','kind':'f','menu':'void(float,float,const float,const float)'})
call add(f,{'word':'sampledisk','kind':'f','menu':'float(float,const float,const float)'})
let c['sampledisk'] = f
let f = []
call add(f,{'word':'scale','kind':'f','menu':'void(export matrix2,const vector2)'})
call add(f,{'word':'scale','kind':'f','menu':'void(export matrix3,const vector)'})
call add(f,{'word':'scale','kind':'f','menu':'void(export matrix,const vector)'})
let c['scale'] = f
let f = []
call add(f,{'word':'select','kind':'f','menu':'matrix2(const int,const matrix2,const matrix2)'})
call add(f,{'word':'select','kind':'f','menu':'matrix3(const int,const matrix3,const matrix3)'})
call add(f,{'word':'select','kind':'f','menu':'matrix(const int,const matrix,const matrix)'})
call add(f,{'word':'select','kind':'f','menu':'bsdf(const int,const bsdf,const bsdf)'})
call add(f,{'word':'select','kind':'f','menu':'float(const int,const float,const float)'})
call add(f,{'word':'select','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'select','kind':'f','menu':'vector4(const int,const vector4,const vector4)'})
call add(f,{'word':'select','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'select','kind':'f','menu':'vector2(const int,const vector2,const vector2)'})
call add(f,{'word':'select','kind':'f','menu':'vector(const int,const vector,const vector)'})
call add(f,{'word':'select','kind':'f','menu':'matrix2[](const int,const matrix2[],const matrix2[])'})
call add(f,{'word':'select','kind':'f','menu':'matrix3[](const int,const matrix3[],const matrix3[])'})
call add(f,{'word':'select','kind':'f','menu':'matrix[](const int,const matrix[],const matrix[])'})
call add(f,{'word':'select','kind':'f','menu':'bsdf[](const int,const bsdf[],const bsdf[])'})
call add(f,{'word':'select','kind':'f','menu':'float[](const int,const float[],const float[])'})
call add(f,{'word':'select','kind':'f','menu':'int[](const int,const int[],const int[])'})
call add(f,{'word':'select','kind':'f','menu':'vector4[](const int,const vector4[],const vector4[])'})
call add(f,{'word':'select','kind':'f','menu':'string[](const int,const string[],const string[])'})
call add(f,{'word':'select','kind':'f','menu':'vector2[](const int,const vector2[],const vector2[])'})
call add(f,{'word':'select','kind':'f','menu':'vector[](const int,const vector[],const vector[])'})
let c['select'] = f
let f = []
call add(f,{'word':'sensor_panorama_create','kind':'f','menu':'int(const float,const vector,const int,const float,const float,const string,const string,const string,const int)'})
let c['sensor_panorama_create'] = f
let f = []
call add(f,{'word':'sensor_panorama_getcolor','kind':'f','menu':'vector(const int,const vector)'})
let c['sensor_panorama_getcolor'] = f
let f = []
call add(f,{'word':'sensor_panorama_getcone','kind':'f','menu':'void(const int,const vector,const float,const vector,const vector,const float,const float,float,vector,vector,float)'})
call add(f,{'word':'sensor_panorama_getcone','kind':'f','menu':'float(const int,const vector,const float,const vector,const vector,const float,const float,vector,vector,float)'})
let c['sensor_panorama_getcone'] = f
let f = []
call add(f,{'word':'sensor_panorama_getdepth','kind':'f','menu':'float(const int,const vector)'})
let c['sensor_panorama_getdepth'] = f
let f = []
call add(f,{'word':'sensor_save','kind':'f','menu':'int(const int,const string,const string)'})
let c['sensor_save'] = f
let f = []
call add(f,{'word':'serialize','kind':'f','menu':'float[](const matrix2[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const matrix3[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const matrix[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const vector4[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const vector2[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const vector[])'})
let c['serialize'] = f
let f = []
call add(f,{'word':'set','kind':'f','menu':'matrix2(const matrix2)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const float,const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const int)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const vector2,const vector2)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const matrix2)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const float,const float,const float,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const int)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const vector,const vector,const vector)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const vector[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const matrix2)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const int)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const vector4,const vector4,const vector4,const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const vector4[])'})
call add(f,{'word':'set','kind':'f','menu':'bsdf(const bsdf)'})
call add(f,{'word':'set','kind':'f','menu':'float(const float)'})
call add(f,{'word':'set','kind':'f','menu':'float(const int)'})
call add(f,{'word':'set','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'set','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'int(const float)'})
call add(f,{'word':'set','kind':'f','menu':'int(const int)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const float,const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const int)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const vector2)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const vector)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'string(const string)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const int)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const vector)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const vector2)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix2[](const matrix2[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix2[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix3[](const matrix3[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix3[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix[](const matrix[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'bsdf[](const bsdf[])'})
call add(f,{'word':'set','kind':'f','menu':'float[](const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const float)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const vector)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'float[](const int[])'})
call add(f,{'word':'set','kind':'f','menu':'int[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'int[](const int[])'})
call add(f,{'word':'set','kind':'f','menu':'vector4[](const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'vector4[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'vector4[](const vector4[])'})
call add(f,{'word':'set','kind':'f','menu':'string[](const string[])'})
call add(f,{'word':'set','kind':'f','menu':'vector2[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'vector2[](const vector2[])'})
call add(f,{'word':'set','kind':'f','menu':'vector[](const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'vector[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'vector[](const vector[])'})
let c['set'] = f
let f = []
call add(f,{'word':'setagentclipnames','kind':'f','menu':'void(const int,const int,const string[])'})
let c['setagentclipnames'] = f
let f = []
call add(f,{'word':'setagentclips','kind':'f','menu':'int(const int,const int,const string[],const float[],const float[],const string[],const int[],const int[],const float[],const int[])'})
let c['setagentclips'] = f
let f = []
call add(f,{'word':'setagentcliptimes','kind':'f','menu':'void(const int,const int,const float[])'})
let c['setagentcliptimes'] = f
let f = []
call add(f,{'word':'setagentclipweights','kind':'f','menu':'void(const int,const int,const float[])'})
let c['setagentclipweights'] = f
let f = []
call add(f,{'word':'setagentcollisionlayer','kind':'f','menu':'void(const int,const int,const string)'})
let c['setagentcollisionlayer'] = f
let f = []
call add(f,{'word':'setagentcurrentlayer','kind':'f','menu':'void(const int,const int,const string)'})
let c['setagentcurrentlayer'] = f
let f = []
call add(f,{'word':'setagentlocaltransform','kind':'f','menu':'int(const int,const int,const matrix,const int)'})
let c['setagentlocaltransform'] = f
let f = []
call add(f,{'word':'setagentlocaltransforms','kind':'f','menu':'void(const int,const int,const matrix[])'})
let c['setagentlocaltransforms'] = f
let f = []
call add(f,{'word':'setagentworldtransform','kind':'f','menu':'int(const int,const int,const matrix,const int)'})
let c['setagentworldtransform'] = f
let f = []
call add(f,{'word':'setagentworldtransforms','kind':'f','menu':'void(const int,const int,const matrix[])'})
let c['setagentworldtransforms'] = f
let f = []
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix2)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix2,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix3)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix3,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const float)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const float,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const int)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const int,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector4)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector4,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const string,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector2)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector2,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix2[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix2[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix3[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix3[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const float[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const float[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const int[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const int[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector4[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector4[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const string[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const string[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector2[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector2[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector[],const string)'})
let c['setattrib'] = f
let f = []
call add(f,{'word':'setattribtypeinfo','kind':'f','menu':'int(const int,const string,const string,const string)'})
let c['setattribtypeinfo'] = f
let f = []
call add(f,{'word':'setcomp','kind':'f','menu':'void(export matrix2,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'matrix2(export matrix2[],const matrix2,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export matrix3,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'matrix3(export matrix3[],const matrix3,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export matrix,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'matrix(export matrix[],const matrix,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'bsdf(export bsdf[],const bsdf,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export matrix2,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export matrix3,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export matrix,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export vector4,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export vector2,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export vector,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export float[],const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'int(export int[],const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export vector4,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'vector4(export vector4[],const vector4,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'string(export string[],const string,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export vector2,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'vector2(export vector2[],const vector2,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export vector,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'vector(export vector[],const vector,const int)'})
let c['setcomp'] = f
let f = []
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix2[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix2[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix3[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix3[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector4[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector4[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector2[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector2[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector[],const string)'})
let c['setdetailattrib'] = f
let f = []
call add(f,{'word':'setedgegroup','kind':'f','menu':'int(const int,const string,const int,const int,const int)'})
let c['setedgegroup'] = f
let f = []
let c['setelem'] = f
let f = []
call add(f,{'word':'setpackedtransform','kind':'f','menu':'void(const int,const int,const matrix)'})
let c['setpackedtransform'] = f
let f = []
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const float)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const float,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector4)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector4,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const string,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector2)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector2,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const float[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const float[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const int[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const int[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector4[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector4[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const string[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const string[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector2[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector2[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector[],const string)'})
let c['setpointattrib'] = f
let f = []
call add(f,{'word':'setpointgroup','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setpointgroup','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
let c['setpointgroup'] = f
let f = []
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const float)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const float,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector4)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector4,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const string,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector2)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector2,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const float[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const float[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const int[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const int[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector4[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector4[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const string[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const string[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector2[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector2[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector[],const string)'})
let c['setprimattrib'] = f
let f = []
call add(f,{'word':'setprimgroup','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setprimgroup','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
let c['setprimgroup'] = f
let f = []
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix2)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix2,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix3)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix3,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const float)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const float,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector4)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector4,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const string,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector2)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector2,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix2[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix2[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix3[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix3[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const float[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const float[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const int[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const int[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector4[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector4[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const string[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const string[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector2[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector2[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector[],const string)'})
let c['setprimintrinsic'] = f
let f = []
call add(f,{'word':'setprimvertex','kind':'f','menu':'int(const int,const int,const int,const int)'})
let c['setprimvertex'] = f
let f = []
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix2)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix2,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix3)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix3,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const float)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const float,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const int)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const int,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector4)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector4,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector2)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector2,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix2[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix2[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix3[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix3[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const float[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const float[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const int[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const int[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector4[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector4[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector2[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector2[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector[],const string)'})
let c['setvertexattrib'] = f
let f = []
call add(f,{'word':'setvertexgroup','kind':'f','menu':'int(const int,const string,const int,const int,const int)'})
call add(f,{'word':'setvertexgroup','kind':'f','menu':'int(const int,const string,const int,const int,const int,const string)'})
let c['setvertexgroup'] = f
let f = []
call add(f,{'word':'setvertexpoint','kind':'f','menu':'int(const int,const int,const int,const int)'})
let c['setvertexpoint'] = f
let f = []
call add(f,{'word':'shadowmap','kind':'f','menu':'float(const string,const vector,const float,const float,const float)'})
call add(f,{'word':'shadowmap','kind':'f','menu':'vector(const string,const vector,const float,const float,const float)'})
call add(f,{'word':'shadowmap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector,const float,const float,const float)'})
let c['shadowmap'] = f
let f = []
call add(f,{'word':'shl','kind':'f','menu':'int(const int,const int)'})
let c['shl'] = f
let f = []
call add(f,{'word':'shr','kind':'f','menu':'int(const int,const int)'})
let c['shr'] = f
let f = []
call add(f,{'word':'shrz','kind':'f','menu':'int(const int,const int)'})
let c['shrz'] = f
let f = []
call add(f,{'word':'sign','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sign','kind':'f','menu':'int(const int)'})
call add(f,{'word':'sign','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sign','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sign','kind':'f','menu':'vector(const vector)'})
let c['sign'] = f
let f = []
call add(f,{'word':'sin','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sin','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sin','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sin','kind':'f','menu':'vector(const vector)'})
let c['sin'] = f
let f = []
call add(f,{'word':'sinh','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sinh','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sinh','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sinh','kind':'f','menu':'vector(const vector)'})
let c['sinh'] = f
let f = []
call add(f,{'word':'sleep','kind':'f','menu':'void(const int)'})
let c['sleep'] = f
let f = []
call add(f,{'word':'slerp','kind':'f','menu':'vector4(const vector4,const vector4,const float)'})
call add(f,{'word':'slerp','kind':'f','menu':'vector4(const vector4[],const float[])'})
let c['slerp'] = f
let f = []
call add(f,{'word':'slice','kind':'f','menu':'string(const string,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string(const string,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string(const string,const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix2[](const matrix2[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix2[](const matrix2[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix2[](const matrix2[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix3[](const matrix3[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix3[](const matrix3[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix3[](const matrix3[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix[](const matrix[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix[](const matrix[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix[](const matrix[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'float[](const float[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'float[](const float[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'float[](const float[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'int[](const int[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'int[](const int[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'int[](const int[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector4[](const vector4[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector4[](const vector4[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector4[](const vector4[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string[](const string[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string[](const string[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string[](const string[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector2[](const vector2[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector2[](const vector2[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector2[](const vector2[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector[](const vector[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector[](const vector[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector[](const vector[],const int,const int,const int,const int,const int,const int)'})
let c['slice'] = f
let f = []
call add(f,{'word':'slideframe','kind':'f','menu':'vector(const vector,const vector,const vector,const vector,const vector)'})
let c['slideframe'] = f
let f = []
call add(f,{'word':'smooth','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'smooth','kind':'f','menu':'float(const float,const float,const float,const float)'})
let c['smooth'] = f
let f = []
call add(f,{'word':'smoothrotation','kind':'f','menu':'vector(const int,const vector,const vector)'})
let c['smoothrotation'] = f
let f = []
call add(f,{'word':'snoise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'snoise','kind':'f','menu':'float(const vector,const int,const float,const float)'})
call add(f,{'word':'snoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'snoise','kind':'f','menu':'float(const vector,const int,const int,const int,const int,const float,const float)'})
call add(f,{'word':'snoise','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'snoise','kind':'f','menu':'vector(const vector,const int,const float,const float)'})
call add(f,{'word':'snoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
call add(f,{'word':'snoise','kind':'f','menu':'vector(const vector,const int,const int,const int,const int,const float,const float)'})
let c['snoise'] = f
let f = []
call add(f,{'word':'solid_angle','kind':'f','menu':'float(const bsdf,const int)'})
let c['solid_angle'] = f
let f = []
call add(f,{'word':'solveconstraint','kind':'f','menu':'vector[](const float[],const vector,const float,const matrix,const vector[])'})
let c['solveconstraint'] = f
let f = []
call add(f,{'word':'solvecubic','kind':'f','menu':'int(const float,const float,const float,const float,float,float,float)'})
call add(f,{'word':'solvecubic','kind':'f','menu':'int(const float,const float,const float,const float,vector2,vector2,vector2)'})
let c['solvecubic'] = f
let f = []
call add(f,{'word':'solvecurve','kind':'f','menu':'vector[](const string,const float[],const int,const int,const vector,const int,const matrix)'})
call add(f,{'word':'solvecurve','kind':'f','menu':'vector[](const float[],const int,const int,const vector,const vector[],const vector[])'})
let c['solvecurve'] = f
let f = []
call add(f,{'word':'solvefbik','kind':'f','menu':'matrix[](const matrix[],const int[],const int[],const matrix[],const int)'})
call add(f,{'word':'solvefbik','kind':'f','menu':'matrix[](const matrix[],const int[],const int[],const matrix[],const int,const float,const int)'})
call add(f,{'word':'solvefbik','kind':'f','menu':'matrix[](const matrix[],const int[],const int[],const matrix[],const int,const float,const int,const float[],const int[],const int[])'})
call add(f,{'word':'solvefbik','kind':'f','menu':'matrix[](const matrix[],const int[],const int[],const matrix[],const int,const float,const int,const float[],const int[],const int[],const matrix[],const vector4[],const vector[])'})
let c['solvefbik'] = f
let f = []
call add(f,{'word':'solveik','kind':'f','menu':'vector[](const float[],const vector,const vector,const float,const int,const float,const int,const float,const matrix,const vector[])'})
let c['solveik'] = f
let f = []
call add(f,{'word':'solvepoly','kind':'f','menu':'int(const float[],float[])'})
call add(f,{'word':'solvepoly','kind':'f','menu':'int(const float[],float[],const int)'})
let c['solvepoly'] = f
let f = []
call add(f,{'word':'solvequadratic','kind':'f','menu':'int(const float,const float,const float,float,float)'})
call add(f,{'word':'solvequadratic','kind':'f','menu':'int(const float,const float,const float,vector2,vector2)'})
let c['solvequadratic'] = f
let f = []
call add(f,{'word':'sort','kind':'f','menu':'float[](const float[])'})
call add(f,{'word':'sort','kind':'f','menu':'int[](const int[])'})
call add(f,{'word':'sort','kind':'f','menu':'string[](const string[])'})
let c['sort'] = f
let f = []
call add(f,{'word':'specular','kind':'f','menu':'bsdf(const vector)'})
let c['specular'] = f
let f = []
call add(f,{'word':'specularBRDF','kind':'f','menu':'float(const vector,const vector,const vector,const float)'})
let c['specularBRDF'] = f
let f = []
call add(f,{'word':'spline','kind':'f','menu':'float(const string,const float,const float)'})
call add(f,{'word':'spline','kind':'f','menu':'float(const string,const float,const float[])'})
call add(f,{'word':'spline','kind':'f','menu':'float(const string[],const float,const float[])'})
call add(f,{'word':'spline','kind':'f','menu':'float(const string[],const float,const float[],const float[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector4(const string,const float,const vector4)'})
call add(f,{'word':'spline','kind':'f','menu':'vector4(const string,const float,const vector4[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector4(const string[],const float,const vector4[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector4(const string[],const float,const vector4[],const float[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector(const string,const float,const vector)'})
call add(f,{'word':'spline','kind':'f','menu':'vector(const string,const float,const vector[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector(const string[],const float,const vector[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector(const string[],const float,const vector[],const float[])'})
let c['spline'] = f
let f = []
call add(f,{'word':'split','kind':'f','menu':'string[](const string)'})
call add(f,{'word':'split','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'split','kind':'f','menu':'string[](const string,const string,const int)'})
let c['split'] = f
let f = []
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[],const int,const int,const float,const float[])'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[],const int,const int,const float,const float[])'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[],const int,const int,const float)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[],const int,const int,const float)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[],const int,const int)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[],const int,const int)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[],const int)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[],const int)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[])'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[])'})
let c['split_bsdf'] = f
let f = []
call add(f,{'word':'splitpath','kind':'f','menu':'void(const string,string,string)'})
call add(f,{'word':'splitpath','kind':'f','menu':'string(const string,string)'})
let c['splitpath'] = f
let f = []
call add(f,{'word':'sprintf','kind':'f','menu':'string(const string)'})
let c['sprintf'] = f
let f = []
call add(f,{'word':'sqrt','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sqrt','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sqrt','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sqrt','kind':'f','menu':'vector(const vector)'})
let c['sqrt'] = f
let f = []
call add(f,{'word':'sssapprox','kind':'f','menu':'bsdf(const vector,const float,const float,const float)'})
let c['sssapprox'] = f
let f = []
call add(f,{'word':'startswith','kind':'f','menu':'int(const string,const string)'})
let c['startswith'] = f
let f = []
call add(f,{'word':'strip','kind':'f','menu':'string(const string)'})
call add(f,{'word':'strip','kind':'f','menu':'string(const string,const string)'})
let c['strip'] = f
let f = []
call add(f,{'word':'strlen','kind':'f','menu':'int(const string)'})
let c['strlen'] = f
let f = []
let c['struct'] = f
let f = []
let c['sub'] = f
let f = []
call add(f,{'word':'sum','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sum','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'sum','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'sum','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'sum','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'sum','kind':'f','menu':'int(const int)'})
call add(f,{'word':'sum','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'sum','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'sum','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'sum','kind':'f','menu':'vector(const vector[])'})
let c['sum'] = f
let f = []
call add(f,{'word':'surfacedist','kind':'f','menu':'float(const int,const string,const string,const int,const float,int,const string)'})
call add(f,{'word':'surfacedist','kind':'f','menu':'float(const string,const string,const string,const int,const float,int,const string)'})
let c['surfacedist'] = f
let f = []
let c['swap'] = f
let f = []
call add(f,{'word':'switch','kind':'f','menu':'bsdf(const bsdf,const bsdf)'})
let c['switch'] = f
let f = []
call add(f,{'word':'swizzle','kind':'f','menu':'vector4(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'swizzle','kind':'f','menu':'vector2(const vector2,const int,const int)'})
call add(f,{'word':'swizzle','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
let c['swizzle'] = f
let f = []
call add(f,{'word':'tan','kind':'f','menu':'float(const float)'})
call add(f,{'word':'tan','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'tan','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'tan','kind':'f','menu':'vector(const vector)'})
let c['tan'] = f
let f = []
call add(f,{'word':'tanh','kind':'f','menu':'float(const float)'})
call add(f,{'word':'tanh','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'tanh','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'tanh','kind':'f','menu':'vector(const vector)'})
let c['tanh'] = f
let f = []
call add(f,{'word':'tet_adjacent','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'tet_adjacent','kind':'f','menu':'int(const string,const int,const int)'})
let c['tet_adjacent'] = f
let f = []
call add(f,{'word':'tet_faceindex','kind':'f','menu':'int(const int,const int)'})
let c['tet_faceindex'] = f
let f = []
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export matrix3)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export matrix)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export float)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export int)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export vector4)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export string)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export vector)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export int[])'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export string[])'})
let c['teximport'] = f
let f = []
call add(f,{'word':'texprintf','kind':'f','menu':'string(const float,const float,const string)'})
let c['texprintf'] = f
let f = []
call add(f,{'word':'texture','kind':'f','menu':'vector4(const string,const float,const float)'})
call add(f,{'word':'texture','kind':'f','menu':'vector4(const string,const float,const float,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'texture','kind':'f','menu':'vector(const string,const float,const float)'})
call add(f,{'word':'texture','kind':'f','menu':'vector(const string,const float,const float,const float,const float,const float,const float,const float,const float)'})
let c['texture'] = f
let f = []
call add(f,{'word':'texture3d','kind':'f','menu':'matrix3(const string,const string,const vector)'})
call add(f,{'word':'texture3d','kind':'f','menu':'matrix(const string,const string,const vector)'})
call add(f,{'word':'texture3d','kind':'f','menu':'float(const string,const string,const vector)'})
call add(f,{'word':'texture3d','kind':'f','menu':'vector4(const string,const string,const vector)'})
call add(f,{'word':'texture3d','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['texture3d'] = f
let f = []
call add(f,{'word':'texture3dBox','kind':'f','menu':'void(const string,const string,vector,vector)'})
call add(f,{'word':'texture3dBox','kind':'f','menu':'vector(const string,const string,vector)'})
let c['texture3dBox'] = f
let f = []
call add(f,{'word':'titlecase','kind':'f','menu':'string(const string)'})
let c['titlecase'] = f
let f = []
call add(f,{'word':'toNDC','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'toNDC','kind':'f','menu':'vector(const vector)'})
let c['toNDC'] = f
let f = []
call add(f,{'word':'tolower','kind':'f','menu':'string(const string)'})
let c['tolower'] = f
let f = []
call add(f,{'word':'toupper','kind':'f','menu':'string(const string)'})
let c['toupper'] = f
let f = []
call add(f,{'word':'translate','kind':'f','menu':'void(export matrix,const vector4)'})
call add(f,{'word':'translate','kind':'f','menu':'void(export matrix,const vector)'})
let c['translate'] = f
let f = []
call add(f,{'word':'translucent','kind':'f','menu':'bsdf(const vector,const vector)'})
let c['translucent'] = f
let f = []
call add(f,{'word':'transpose','kind':'f','menu':'void(export matrix2)'})
call add(f,{'word':'transpose','kind':'f','menu':'matrix2(const matrix2)'})
call add(f,{'word':'transpose','kind':'f','menu':'void(export matrix3)'})
call add(f,{'word':'transpose','kind':'f','menu':'matrix3(const matrix3)'})
call add(f,{'word':'transpose','kind':'f','menu':'void(export matrix)'})
call add(f,{'word':'transpose','kind':'f','menu':'matrix(const matrix)'})
let c['transpose'] = f
let f = []
call add(f,{'word':'trunc','kind':'f','menu':'float(const float)'})
call add(f,{'word':'trunc','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'trunc','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'trunc','kind':'f','menu':'vector(const vector)'})
let c['trunc'] = f
let f = []
call add(f,{'word':'tw_nspace','kind':'f','menu':'vector(const vector)'})
let c['tw_nspace'] = f
let f = []
call add(f,{'word':'tw_space','kind':'f','menu':'matrix()'})
call add(f,{'word':'tw_space','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'tw_space','kind':'f','menu':'vector(const vector)'})
let c['tw_space'] = f
let f = []
call add(f,{'word':'tw_vspace','kind':'f','menu':'vector(const vector)'})
let c['tw_vspace'] = f
let f = []
call add(f,{'word':'uniqueval','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'uniqueval','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'uniqueval','kind':'f','menu':'string(const int,const string,const string,const int)'})
call add(f,{'word':'uniqueval','kind':'f','menu':'string(const string,const string,const string,const int)'})
let c['uniqueval'] = f
let f = []
call add(f,{'word':'uniquevals','kind':'f','menu':'int[](const int,const string,const string)'})
call add(f,{'word':'uniquevals','kind':'f','menu':'int[](const string,const string,const string)'})
call add(f,{'word':'uniquevals','kind':'f','menu':'string[](const int,const string,const string)'})
call add(f,{'word':'uniquevals','kind':'f','menu':'string[](const string,const string,const string)'})
let c['uniquevals'] = f
let f = []
call add(f,{'word':'unpack_intfromsafefloat','kind':'f','menu':'int(const float)'})
let c['unpack_intfromsafefloat'] = f
let f = []
call add(f,{'word':'unserialize','kind':'f','menu':'matrix2[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'matrix3[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'matrix[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'vector4[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'vector2[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'vector[](const float[])'})
let c['unserialize'] = f
let f = []
call add(f,{'word':'upush','kind':'f','menu':'void(export matrix2[],const matrix2)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export matrix3[],const matrix3)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export matrix[],const matrix)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export bsdf[],const bsdf)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export float[],const float)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export int[],const int)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export vector4[],const vector4)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export string[],const string)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export vector2[],const vector2)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export vector[],const vector)'})
let c['upush'] = f
let f = []
let c['urandom'] = f
let f = []
call add(f,{'word':'usd_addtransform','kind':'f','menu':'int(const int,const string,const string,const matrix)'})
let c['usd_addtransform'] = f
let f = []
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector[](const string,const string,const string)'})
let c['usd_attrib'] = f
let f = []
call add(f,{'word':'usd_attriblen','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_attriblen','kind':'f','menu':'int(const string,const string,const string)'})
let c['usd_attriblen'] = f
let f = []
call add(f,{'word':'usd_attribnames','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'usd_attribnames','kind':'f','menu':'string[](const string,const string)'})
let c['usd_attribnames'] = f
let f = []
call add(f,{'word':'usd_attribsize','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_attribsize','kind':'f','menu':'int(const string,const string,const string)'})
let c['usd_attribsize'] = f
let f = []
call add(f,{'word':'usd_attribtypename','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'usd_attribtypename','kind':'f','menu':'string(const string,const string,const string)'})
let c['usd_attribtypename'] = f
let f = []
call add(f,{'word':'usd_cleartransformorder','kind':'f','menu':'int(const int,const string)'})
let c['usd_cleartransformorder'] = f
let f = []
call add(f,{'word':'usd_drawmode','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_drawmode','kind':'f','menu':'string(const string,const string)'})
let c['usd_drawmode'] = f
let f = []
call add(f,{'word':'usd_isactive','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'usd_isactive','kind':'f','menu':'int(const string,const string)'})
let c['usd_isactive'] = f
let f = []
call add(f,{'word':'usd_isarray','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_isarray','kind':'f','menu':'int(const string,const string,const string)'})
let c['usd_isarray'] = f
let f = []
call add(f,{'word':'usd_isattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_isattrib','kind':'f','menu':'int(const string,const string,const string)'})
let c['usd_isattrib'] = f
let f = []
call add(f,{'word':'usd_isprim','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'usd_isprim','kind':'f','menu':'int(const string,const string)'})
let c['usd_isprim'] = f
let f = []
call add(f,{'word':'usd_isstage','kind':'f','menu':'int(const int)'})
call add(f,{'word':'usd_isstage','kind':'f','menu':'int(const string)'})
let c['usd_isstage'] = f
let f = []
call add(f,{'word':'usd_istransformreset','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'usd_istransformreset','kind':'f','menu':'int(const string,const string)'})
let c['usd_istransformreset'] = f
let f = []
call add(f,{'word':'usd_isvisible','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'usd_isvisible','kind':'f','menu':'int(const string,const string)'})
let c['usd_isvisible'] = f
let f = []
call add(f,{'word':'usd_kind','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_kind','kind':'f','menu':'string(const string,const string)'})
let c['usd_kind'] = f
let f = []
call add(f,{'word':'usd_localtransform','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'usd_localtransform','kind':'f','menu':'matrix(const string,const string)'})
let c['usd_localtransform'] = f
let f = []
call add(f,{'word':'usd_name','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_name','kind':'f','menu':'string(const string,const string)'})
let c['usd_name'] = f
let f = []
call add(f,{'word':'usd_parentpath','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_parentpath','kind':'f','menu':'string(const string,const string)'})
let c['usd_parentpath'] = f
let f = []
call add(f,{'word':'usd_purpose','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_purpose','kind':'f','menu':'string(const string,const string)'})
let c['usd_purpose'] = f
let f = []
call add(f,{'word':'usd_setactive','kind':'f','menu':'int(const int,const string,const int)'})
let c['usd_setactive'] = f
let f = []
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix2)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix3)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const float)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector4)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector2)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix2[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix3[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const float[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const int[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector4[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const string[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector2[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector[])'})
let c['usd_setattrib'] = f
let f = []
call add(f,{'word':'usd_setdrawmode','kind':'f','menu':'int(const int,const string,const string)'})
let c['usd_setdrawmode'] = f
let f = []
call add(f,{'word':'usd_setkind','kind':'f','menu':'int(const int,const string,const string)'})
let c['usd_setkind'] = f
let f = []
call add(f,{'word':'usd_setpurpose','kind':'f','menu':'int(const int,const string,const string)'})
let c['usd_setpurpose'] = f
let f = []
call add(f,{'word':'usd_setvariantselection','kind':'f','menu':'int(const int,const string,const string,const string)'})
let c['usd_setvariantselection'] = f
let f = []
call add(f,{'word':'usd_setvisible','kind':'f','menu':'int(const int,const string,const int)'})
let c['usd_setvisible'] = f
let f = []
call add(f,{'word':'usd_transformorder','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'usd_transformorder','kind':'f','menu':'string[](const string,const string)'})
let c['usd_transformorder'] = f
let f = []
call add(f,{'word':'usd_typename','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_typename','kind':'f','menu':'string(const string,const string)'})
let c['usd_typename'] = f
let f = []
call add(f,{'word':'usd_variants','kind':'f','menu':'string[](const int,const string,const string)'})
call add(f,{'word':'usd_variants','kind':'f','menu':'string[](const string,const string,const string)'})
let c['usd_variants'] = f
let f = []
call add(f,{'word':'usd_variantselection','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'usd_variantselection','kind':'f','menu':'string(const string,const string,const string)'})
let c['usd_variantselection'] = f
let f = []
call add(f,{'word':'usd_variantsets','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'usd_variantsets','kind':'f','menu':'string[](const string,const string)'})
let c['usd_variantsets'] = f
let f = []
call add(f,{'word':'usd_worldtransform','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'usd_worldtransform','kind':'f','menu':'matrix(const string,const string)'})
let c['usd_worldtransform'] = f
let f = []
call add(f,{'word':'uvdist','kind':'f','menu':'float(const int,const string,const string,const vector,int,vector)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const int,const string,const string,const vector,int,vector,const float)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const int,const string,const vector,int,vector)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const int,const string,const vector,int,vector,const float)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const string,const string,const string,const vector,int,vector)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const string,const string,const string,const vector,int,vector,const float)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const string,const string,const vector,int,vector)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const string,const string,const vector,int,vector,const float)'})
let c['uvdist'] = f
let f = []
call add(f,{'word':'uvintersect','kind':'f','menu':'int(const int,const string,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'uvintersect','kind':'f','menu':'int(const int,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'uvintersect','kind':'f','menu':'int(const string,const string,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'uvintersect','kind':'f','menu':'int(const string,const string,const vector,const vector,vector,vector)'})
let c['uvintersect'] = f
let f = []
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector[](const string,const string,const string,const vector)'})
let c['uvsample'] = f
let f = []
call add(f,{'word':'uvunwrap','kind':'f','menu':'int(const string,const float,const float,const float,vector,vector)'})
call add(f,{'word':'uvunwrap','kind':'f','menu':'int(const string,const float,const float,const float,vector,vector,vector,vector)'})
let c['uvunwrap'] = f
let f = []
call add(f,{'word':'variance','kind':'f','menu':'float(const float,float,int)'})
let c['variance'] = f
let f = []
call add(f,{'word':'vertex','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector[](const string,const string,const int,const int)'})
let c['vertex'] = f
let f = []
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix2(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix2(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix3(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix3(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'float(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'float(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'int(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'int(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector4(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector4(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'string(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'string(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector2(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector2(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix2[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix2[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix3[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix3[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'float[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'float[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'int[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'int[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector4[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector4[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'string[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'string[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector2[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector2[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector[](const string,const string,const int,int)'})
let c['vertexattrib'] = f
let f = []
call add(f,{'word':'vertexattribsize','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'vertexattribsize','kind':'f','menu':'int(const string,const string)'})
let c['vertexattribsize'] = f
let f = []
call add(f,{'word':'vertexattribtype','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'vertexattribtype','kind':'f','menu':'int(const string,const string)'})
let c['vertexattribtype'] = f
let f = []
call add(f,{'word':'vertexattribtypeinfo','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'vertexattribtypeinfo','kind':'f','menu':'string(const string,const string)'})
let c['vertexattribtypeinfo'] = f
let f = []
call add(f,{'word':'vertexhedge','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexhedge','kind':'f','menu':'int(const string,const int)'})
let c['vertexhedge'] = f
let f = []
call add(f,{'word':'vertexindex','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'vertexindex','kind':'f','menu':'int(const string,const int,const int)'})
let c['vertexindex'] = f
let f = []
call add(f,{'word':'vertexnext','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexnext','kind':'f','menu':'int(const string,const int)'})
let c['vertexnext'] = f
let f = []
call add(f,{'word':'vertexpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexpoint','kind':'f','menu':'int(const string,const int)'})
let c['vertexpoint'] = f
let f = []
call add(f,{'word':'vertexprev','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexprev','kind':'f','menu':'int(const string,const int)'})
let c['vertexprev'] = f
let f = []
call add(f,{'word':'vertexprim','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexprim','kind':'f','menu':'int(const string,const int)'})
let c['vertexprim'] = f
let f = []
call add(f,{'word':'vertexprimindex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexprimindex','kind':'f','menu':'int(const string,const int)'})
let c['vertexprimindex'] = f
let f = []
call add(f,{'word':'vnoise','kind':'f','menu':'void(const float,const float,const float,const float,int,float,float,float,float,float,float)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const float,const float,const float,const float,float,float,float,float,float,float)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const float,const float,const float,const float,int,float,float,float,float,float,float,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const float,const float,const float,const float,float,float,float,float,float,float,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const float,const float,float,float,float,float)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const float,const float,float,float,float,float,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector4,const vector4,int,float,float,vector4,vector4)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector4,const vector4,float,float,vector4,vector4)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector4,const vector4,int,float,float,vector4,vector4,const int,const int,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector4,const vector4,float,float,vector4,vector4,const int,const int,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector4,const vector4,int,float,float,vector4,vector4,const vector4)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector4,const vector4,float,float,vector4,vector4,const vector4)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector,const vector,int,float,float,vector,vector)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector,const vector,float,float,vector,vector)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector,const vector,int,float,float,vector,vector,const int,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector,const vector,float,float,vector,vector,const int,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector,const vector,int,float,float,vector,vector,const vector)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector,const vector,float,float,vector,vector,const vector)'})
let c['vnoise'] = f
let f = []
call add(f,{'word':'volume','kind':'f','menu':'float(const vector)'})
let c['volume'] = f
let f = []
call add(f,{'word':'volumegradient','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumegradient','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumegradient','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumegradient','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumegradient'] = f
let f = []
call add(f,{'word':'volumeindex','kind':'f','menu':'float(const int,const int,const vector)'})
call add(f,{'word':'volumeindex','kind':'f','menu':'float(const int,const string,const vector)'})
call add(f,{'word':'volumeindex','kind':'f','menu':'float(const string,const int,const vector)'})
call add(f,{'word':'volumeindex','kind':'f','menu':'float(const string,const string,const vector)'})
let c['volumeindex'] = f
let f = []
call add(f,{'word':'volumeindexactive','kind':'f','menu':'int(const int,const int,const vector)'})
call add(f,{'word':'volumeindexactive','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'volumeindexactive','kind':'f','menu':'int(const string,const int,const vector)'})
call add(f,{'word':'volumeindexactive','kind':'f','menu':'int(const string,const string,const vector)'})
let c['volumeindexactive'] = f
let f = []
call add(f,{'word':'volumeindexorigin','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'volumeindexorigin','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'volumeindexorigin','kind':'f','menu':'vector(const string,const int)'})
call add(f,{'word':'volumeindexorigin','kind':'f','menu':'vector(const string,const string)'})
let c['volumeindexorigin'] = f
let f = []
call add(f,{'word':'volumeindextopos','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumeindextopos','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumeindextopos','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumeindextopos','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumeindextopos'] = f
let f = []
call add(f,{'word':'volumeindexv','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumeindexv','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumeindexv','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumeindexv','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumeindexv'] = f
let f = []
call add(f,{'word':'volumepostoindex','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumepostoindex','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumepostoindex','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumepostoindex','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumepostoindex'] = f
let f = []
call add(f,{'word':'volumeres','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'volumeres','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'volumeres','kind':'f','menu':'vector(const string,const int)'})
call add(f,{'word':'volumeres','kind':'f','menu':'vector(const string,const string)'})
let c['volumeres'] = f
let f = []
call add(f,{'word':'volumesample','kind':'f','menu':'float(const int,const int,const vector)'})
call add(f,{'word':'volumesample','kind':'f','menu':'float(const int,const string,const vector)'})
call add(f,{'word':'volumesample','kind':'f','menu':'float(const string,const int,const vector)'})
call add(f,{'word':'volumesample','kind':'f','menu':'float(const string,const string,const vector)'})
let c['volumesample'] = f
let f = []
call add(f,{'word':'volumesamplev','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumesamplev','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumesamplev','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumesamplev','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumesamplev'] = f
let f = []
call add(f,{'word':'volumevoxeldiameter','kind':'f','menu':'float(const int,const int)'})
call add(f,{'word':'volumevoxeldiameter','kind':'f','menu':'float(const int,const string)'})
call add(f,{'word':'volumevoxeldiameter','kind':'f','menu':'float(const string,const int)'})
call add(f,{'word':'volumevoxeldiameter','kind':'f','menu':'float(const string,const string)'})
let c['volumevoxeldiameter'] = f
let f = []
call add(f,{'word':'vtransform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'vtransform','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'vtransform','kind':'f','menu':'vector(const vector,const matrix)'})
let c['vtransform'] = f
let f = []
call add(f,{'word':'warning','kind':'f','menu':'void(const string)'})
let c['warning'] = f
let f = []
let c['while'] = f
let f = []
call add(f,{'word':'wireblinn','kind':'f','menu':'bsdf(const vector,const float)'})
let c['wireblinn'] = f
let f = []
call add(f,{'word':'wirediffuse','kind':'f','menu':'bsdf(const vector)'})
let c['wirediffuse'] = f
let f = []
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,const float,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,const float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,const float,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,const float,float,float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,const float,int,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,const float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,int,float,float,float,float,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,float,float,float,float,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,int,float,float,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,float,float,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector4,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector4,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector4,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector4,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector4,int,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector4,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector2,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector2,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector2,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector2,float,float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector2,int,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector2,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector,int,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector,int,float,float,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector,float,float,const int,const int,const int)'})
let c['wnoise'] = f
let f = []
call add(f,{'word':'wo_nspace','kind':'f','menu':'vector(const vector)'})
let c['wo_nspace'] = f
let f = []
call add(f,{'word':'wo_space','kind':'f','menu':'matrix()'})
call add(f,{'word':'wo_space','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'wo_space','kind':'f','menu':'vector(const vector)'})
let c['wo_space'] = f
let f = []
call add(f,{'word':'wo_vspace','kind':'f','menu':'vector(const vector)'})
let c['wo_vspace'] = f
let f = []
call add(f,{'word':'wt_nspace','kind':'f','menu':'vector(const vector)'})
let c['wt_nspace'] = f
let f = []
call add(f,{'word':'wt_space','kind':'f','menu':'matrix()'})
call add(f,{'word':'wt_space','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'wt_space','kind':'f','menu':'vector(const vector)'})
let c['wt_space'] = f
let f = []
call add(f,{'word':'wt_vspace','kind':'f','menu':'vector(const vector)'})
let c['wt_vspace'] = f
let f = []
call add(f,{'word':'xnoise','kind':'f','menu':'float(const float)'})
call add(f,{'word':'xnoise','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'xnoise','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'xnoise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'xnoise','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'xnoise','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'xnoise','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'xnoise','kind':'f','menu':'vector(const vector)'})
let c['xnoise'] = f
let f = []
call add(f,{'word':'xnoised','kind':'f','menu':'void(const float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'float(const float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const float,const float,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'float(const float,const float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const float,const float,vector,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'vector(const float,const float,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const float,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'vector(const float,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const vector4,float,float,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'float(const vector4,float,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const vector4,vector,vector,vector,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'vector(const vector4,vector,vector,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const vector,float,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'float(const vector,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const vector,vector,vector,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'vector(const vector,vector,vector,vector)'})
let c['xnoised'] = f
let f = []
let c['xor'] = f
let f = []
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const string,const vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const string,const vector,int,vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const string,const vector,int,vector,const float)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const vector,int,vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const vector,int,vector,const float)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const string,const vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const string,const vector,int,vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const string,const vector,int,vector,const float)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const vector,int,vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const vector,int,vector,const float)'})
let c['xyzdist'] = f
let f = []
call add(f,{'word':'xyztorgb','kind':'f','menu':'vector(const vector)'})
let c['xyztorgb'] = f
let contexts['sop'] = c
" CONTEXT: cop2 
let c = {}
let c['XRES'] = [{'word':'XRES','kind':'v','menu':'int'}]
let c['YRES'] = [{'word':'YRES','kind':'v','menu':'int'}]
let c['AR'] = [{'word':'AR','kind':'v','menu':'float'}]
let c['R'] = [{'word':'R','kind':'v','menu':'float'}]
let c['G'] = [{'word':'G','kind':'v','menu':'float'}]
let c['B'] = [{'word':'B','kind':'v','menu':'float'}]
let c['A'] = [{'word':'A','kind':'v','menu':'float'}]
let c['Cr'] = [{'word':'Cr','kind':'v','menu':'float'}]
let c['Cg'] = [{'word':'Cg','kind':'v','menu':'float'}]
let c['Cb'] = [{'word':'Cb','kind':'v','menu':'float'}]
let c['C4'] = [{'word':'C4','kind':'v','menu':'float'}]
let c['PNAME'] = [{'word':'PNAME','kind':'v','menu':'string'}]
let c['PL'] = [{'word':'PL','kind':'v','menu':'int'}]
let c['NP'] = [{'word':'NP','kind':'v','menu':'int'}]
let c['PS'] = [{'word':'PS','kind':'v','menu':'int'}]
let c['AI'] = [{'word':'AI','kind':'v','menu':'int'}]
let c['AS'] = [{'word':'AS','kind':'v','menu':'int'}]
let c['I'] = [{'word':'I','kind':'v','menu':'int'}]
let c['NI'] = [{'word':'NI','kind':'v','menu':'int'}]
let c['H'] = [{'word':'H','kind':'v','menu':'float'}]
let c['S'] = [{'word':'S','kind':'v','menu':'float'}]
let c['V'] = [{'word':'V','kind':'v','menu':'float'}]
let c['X'] = [{'word':'X','kind':'v','menu':'float'}]
let c['Y'] = [{'word':'Y','kind':'v','menu':'float'}]
let c['IX'] = [{'word':'IX','kind':'v','menu':'int'}]
let c['IY'] = [{'word':'IY','kind':'v','menu':'int'}]
let c['SF'] = [{'word':'SF','kind':'v','menu':'int'}]
let c['EF'] = [{'word':'EF','kind':'v','menu':'int'}]
let c['F'] = [{'word':'F','kind':'v','menu':'int'}]
let c['FR'] = [{'word':'FR','kind':'v','menu':'int'}]
let c['TIME'] = [{'word':'TIME','kind':'v','menu':'float'}]
let c['TINC'] = [{'word':'TINC','kind':'v','menu':'float'}]
let c['PXSC'] = [{'word':'PXSC','kind':'v','menu':'float'}]
let f = []
call add(f,{'word':'Du','kind':'f','menu':'float(const float)'})
call add(f,{'word':'Du','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'Du','kind':'f','menu':'vector(const vector)'})
let c['Du'] = f
let f = []
call add(f,{'word':'Dv','kind':'f','menu':'float(const float)'})
call add(f,{'word':'Dv','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'Dv','kind':'f','menu':'vector(const vector)'})
let c['Dv'] = f
let f = []
call add(f,{'word':'Dw','kind':'f','menu':'float(const float)'})
call add(f,{'word':'Dw','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'Dw','kind':'f','menu':'vector(const vector)'})
let c['Dw'] = f
let f = []
let c['__ptexture_shift_coord'] = f
let f = []
let c['_export'] = f
let f = []
call add(f,{'word':'abs','kind':'f','menu':'float(const float)'})
call add(f,{'word':'abs','kind':'f','menu':'int(const int)'})
call add(f,{'word':'abs','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'abs','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'abs','kind':'f','menu':'vector(const vector)'})
let c['abs'] = f
let f = []
call add(f,{'word':'accessframe','kind':'f','menu':'void(const int)'})
let c['accessframe'] = f
let f = []
call add(f,{'word':'acos','kind':'f','menu':'float(const float)'})
call add(f,{'word':'acos','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'acos','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'acos','kind':'f','menu':'vector(const vector)'})
let c['acos'] = f
let f = []
let c['add'] = f
let f = []
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix2)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix3)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const float)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector4)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector2)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix2[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix3[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const float[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const int[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector4[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const string[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector2[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector[])'})
let c['addattrib'] = f
let f = []
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
let c['adddetailattrib'] = f
let f = []
call add(f,{'word':'addpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'addpoint','kind':'f','menu':'int(const int,const vector)'})
let c['addpoint'] = f
let f = []
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
let c['addpointattrib'] = f
let f = []
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,const int)'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,const int,const int)'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int,const int,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int[],int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int[],int[])'})
let c['addprim'] = f
let f = []
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
let c['addprimattrib'] = f
let f = []
call add(f,{'word':'addvariablename','kind':'f','menu':'int(const int,const string,const string)'})
let c['addvariablename'] = f
let f = []
call add(f,{'word':'addvertex','kind':'f','menu':'int(const int,const int,const int)'})
let c['addvertex'] = f
let f = []
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
let c['addvertexattrib'] = f
let f = []
call add(f,{'word':'addvisualizer','kind':'f','menu':'int(const int,const string)'})
let c['addvisualizer'] = f
let f = []
call add(f,{'word':'agentaddclip','kind':'f','menu':'int(const int,const int,const string,const string,const int)'})
let c['agentaddclip'] = f
let f = []
call add(f,{'word':'agentclipcatalog','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agentclipcatalog','kind':'f','menu':'string[](const string,const int)'})
let c['agentclipcatalog'] = f
let f = []
call add(f,{'word':'agentclipchannel','kind':'f','menu':'int(const int,const int,const string,const string)'})
call add(f,{'word':'agentclipchannel','kind':'f','menu':'int(const string,const int,const string,const string)'})
let c['agentclipchannel'] = f
let f = []
call add(f,{'word':'agentclipchannelnames','kind':'f','menu':'string[](const int,const int,const string)'})
call add(f,{'word':'agentclipchannelnames','kind':'f','menu':'string[](const string,const int,const string)'})
let c['agentclipchannelnames'] = f
let f = []
call add(f,{'word':'agentcliplength','kind':'f','menu':'float(const int,const int,const string)'})
call add(f,{'word':'agentcliplength','kind':'f','menu':'float(const string,const int,const string)'})
let c['agentcliplength'] = f
let f = []
call add(f,{'word':'agentclipnames','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agentclipnames','kind':'f','menu':'string[](const string,const int)'})
let c['agentclipnames'] = f
let f = []
call add(f,{'word':'agentclipsample','kind':'f','menu':'float(const int,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsample','kind':'f','menu':'float(const int,const int,const string,const float,const string)'})
call add(f,{'word':'agentclipsample','kind':'f','menu':'float(const string,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsample','kind':'f','menu':'float(const string,const int,const string,const float,const string)'})
let c['agentclipsample'] = f
let f = []
call add(f,{'word':'agentclipsamplelocal','kind':'f','menu':'matrix(const int,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsamplelocal','kind':'f','menu':'matrix(const string,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsamplelocal','kind':'f','menu':'matrix[](const int,const int,const string,const float)'})
call add(f,{'word':'agentclipsamplelocal','kind':'f','menu':'matrix[](const string,const int,const string,const float)'})
let c['agentclipsamplelocal'] = f
let f = []
call add(f,{'word':'agentclipsamplerate','kind':'f','menu':'float(const int,const int,const string)'})
call add(f,{'word':'agentclipsamplerate','kind':'f','menu':'float(const string,const int,const string)'})
let c['agentclipsamplerate'] = f
let f = []
call add(f,{'word':'agentclipsampleworld','kind':'f','menu':'matrix(const int,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsampleworld','kind':'f','menu':'matrix(const string,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsampleworld','kind':'f','menu':'matrix[](const int,const int,const string,const float)'})
call add(f,{'word':'agentclipsampleworld','kind':'f','menu':'matrix[](const string,const int,const string,const float)'})
let c['agentclipsampleworld'] = f
let f = []
call add(f,{'word':'agentcliptimes','kind':'f','menu':'float[](const int,const int)'})
call add(f,{'word':'agentcliptimes','kind':'f','menu':'float[](const string,const int)'})
let c['agentcliptimes'] = f
let f = []
call add(f,{'word':'agentcliptransformgroups','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agentcliptransformgroups','kind':'f','menu':'string[](const string,const int)'})
let c['agentcliptransformgroups'] = f
let f = []
call add(f,{'word':'agentclipweights','kind':'f','menu':'float[](const int,const int)'})
call add(f,{'word':'agentclipweights','kind':'f','menu':'float[](const string,const int)'})
let c['agentclipweights'] = f
let f = []
call add(f,{'word':'agentcollisionlayer','kind':'f','menu':'string(const int,const int)'})
call add(f,{'word':'agentcollisionlayer','kind':'f','menu':'string(const string,const int)'})
let c['agentcollisionlayer'] = f
let f = []
call add(f,{'word':'agentcurrentlayer','kind':'f','menu':'string(const int,const int)'})
call add(f,{'word':'agentcurrentlayer','kind':'f','menu':'string(const string,const int)'})
let c['agentcurrentlayer'] = f
let f = []
call add(f,{'word':'agentfindtransformgroup','kind':'f','menu':'int(const int,const int,const string)'})
call add(f,{'word':'agentfindtransformgroup','kind':'f','menu':'int(const string,const int,const string)'})
let c['agentfindtransformgroup'] = f
let f = []
call add(f,{'word':'agentlayerbindings','kind':'f','menu':'int[](const int,const int,const string,const string)'})
call add(f,{'word':'agentlayerbindings','kind':'f','menu':'int[](const string,const int,const string,const string)'})
let c['agentlayerbindings'] = f
let f = []
call add(f,{'word':'agentlayers','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agentlayers','kind':'f','menu':'string[](const string,const int)'})
let c['agentlayers'] = f
let f = []
call add(f,{'word':'agentlayershapes','kind':'f','menu':'string[](const int,const int,const string,const int)'})
call add(f,{'word':'agentlayershapes','kind':'f','menu':'string[](const int,const int,const string,const string)'})
call add(f,{'word':'agentlayershapes','kind':'f','menu':'string[](const string,const int,const string,const int)'})
call add(f,{'word':'agentlayershapes','kind':'f','menu':'string[](const string,const int,const string,const string)'})
let c['agentlayershapes'] = f
let f = []
call add(f,{'word':'agentlocaltransform','kind':'f','menu':'matrix(const int,const int,const int)'})
call add(f,{'word':'agentlocaltransform','kind':'f','menu':'matrix(const string,const int,const int)'})
let c['agentlocaltransform'] = f
let f = []
call add(f,{'word':'agentlocaltransforms','kind':'f','menu':'matrix[](const int,const int)'})
call add(f,{'word':'agentlocaltransforms','kind':'f','menu':'matrix[](const string,const int)'})
let c['agentlocaltransforms'] = f
let f = []
call add(f,{'word':'agentrigchildren','kind':'f','menu':'int[](const int,const int,const int)'})
call add(f,{'word':'agentrigchildren','kind':'f','menu':'int[](const string,const int,const int)'})
let c['agentrigchildren'] = f
let f = []
call add(f,{'word':'agentrigfind','kind':'f','menu':'int(const int,const int,const string)'})
call add(f,{'word':'agentrigfind','kind':'f','menu':'int(const string,const int,const string)'})
let c['agentrigfind'] = f
let f = []
call add(f,{'word':'agentrigparent','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'agentrigparent','kind':'f','menu':'int(const string,const int,const int)'})
let c['agentrigparent'] = f
let f = []
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const int,const int,const int,const int[],const matrix[],const int,const int)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const int,const int,const int,const int[],const matrix[],const int,const int,const float,const int)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const int,const int,const int,const int[],const matrix[],const int,const int,const float,const int,const float[],const int[],const int[])'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const int,const int,const int,const int[],const matrix[],const int,const int,const float,const int,const float[],const int[],const int[],const string,const string,const string)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const string,const int,const int,const int[],const matrix[],const int,const int)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const string,const int,const int,const int[],const matrix[],const int,const int,const float,const int)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const string,const int,const int,const int[],const matrix[],const int,const int,const float,const int,const float[],const int[],const int[])'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const string,const int,const int,const int[],const matrix[],const int,const int,const float,const int,const float[],const int[],const int[],const string,const string,const string)'})
let c['agentsolvefbik'] = f
let f = []
call add(f,{'word':'agenttransformcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'agenttransformcount','kind':'f','menu':'int(const string,const int)'})
let c['agenttransformcount'] = f
let f = []
call add(f,{'word':'agenttransformgroupmember','kind':'f','menu':'int(const int,const int,const int,const int)'})
call add(f,{'word':'agenttransformgroupmember','kind':'f','menu':'int(const int,const int,const string,const int)'})
call add(f,{'word':'agenttransformgroupmember','kind':'f','menu':'int(const string,const int,const int,const int)'})
call add(f,{'word':'agenttransformgroupmember','kind':'f','menu':'int(const string,const int,const string,const int)'})
let c['agenttransformgroupmember'] = f
let f = []
call add(f,{'word':'agenttransformgroups','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agenttransformgroups','kind':'f','menu':'string[](const string,const int)'})
let c['agenttransformgroups'] = f
let f = []
call add(f,{'word':'agenttransformgroupweight','kind':'f','menu':'float(const int,const int,const int,const int)'})
call add(f,{'word':'agenttransformgroupweight','kind':'f','menu':'float(const string,const int,const int,const int)'})
let c['agenttransformgroupweight'] = f
let f = []
call add(f,{'word':'agenttransformnames','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agenttransformnames','kind':'f','menu':'string[](const string,const int)'})
let c['agenttransformnames'] = f
let f = []
call add(f,{'word':'agenttransformtolocal','kind':'f','menu':'int(const int,const int,export matrix[])'})
call add(f,{'word':'agenttransformtolocal','kind':'f','menu':'int(const string,const int,export matrix[])'})
let c['agenttransformtolocal'] = f
let f = []
call add(f,{'word':'agenttransformtoworld','kind':'f','menu':'int(const int,const int,export matrix[])'})
call add(f,{'word':'agenttransformtoworld','kind':'f','menu':'int(const string,const int,export matrix[])'})
let c['agenttransformtoworld'] = f
let f = []
call add(f,{'word':'agentworldtransform','kind':'f','menu':'matrix(const int,const int,const int)'})
call add(f,{'word':'agentworldtransform','kind':'f','menu':'matrix(const string,const int,const int)'})
let c['agentworldtransform'] = f
let f = []
call add(f,{'word':'agentworldtransforms','kind':'f','menu':'matrix[](const int,const int)'})
call add(f,{'word':'agentworldtransforms','kind':'f','menu':'matrix[](const string,const int)'})
let c['agentworldtransforms'] = f
let f = []
call add(f,{'word':'albedo','kind':'f','menu':'vector(const bsdf,const int)'})
call add(f,{'word':'albedo','kind':'f','menu':'vector(const bsdf,const vector,const int)'})
call add(f,{'word':'albedo','kind':'f','menu':'vector(const bsdf,const vector)'})
call add(f,{'word':'albedo','kind':'f','menu':'vector(const bsdf)'})
let c['albedo'] = f
let f = []
call add(f,{'word':'alphaname','kind':'f','menu':'string()'})
let c['alphaname'] = f
let f = []
let c['and'] = f
let f = []
call add(f,{'word':'anoise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'anoise','kind':'f','menu':'float(const vector,const int,const float,const float)'})
call add(f,{'word':'anoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'anoise','kind':'f','menu':'float(const vector,const int,const int,const int,const int,const float,const float)'})
call add(f,{'word':'anoise','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'anoise','kind':'f','menu':'vector(const vector,const int,const float,const float)'})
call add(f,{'word':'anoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
call add(f,{'word':'anoise','kind':'f','menu':'vector(const vector,const int,const int,const int,const int,const float,const float)'})
let c['anoise'] = f
let f = []
call add(f,{'word':'append','kind':'f','menu':'void(export string,const string)'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix2[],const matrix2)'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix2[],const matrix2[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix3[],const matrix3)'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix3[],const matrix3[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix[],const matrix)'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix[],const matrix[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export float[],const float)'})
call add(f,{'word':'append','kind':'f','menu':'void(export float[],const float[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export int[],const int)'})
call add(f,{'word':'append','kind':'f','menu':'void(export int[],const int[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector4[],const vector4)'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector4[],const vector4[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export string[],const string)'})
call add(f,{'word':'append','kind':'f','menu':'void(export string[],const string[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector2[],const vector2)'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector2[],const vector2[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector[],const vector)'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector[],const vector[])'})
let c['append'] = f
let f = []
call add(f,{'word':'area','kind':'f','menu':'float(const vector)'})
let c['area'] = f
let f = []
call add(f,{'word':'argsort','kind':'f','menu':'int[](const float[])'})
call add(f,{'word':'argsort','kind':'f','menu':'int[](const int[])'})
call add(f,{'word':'argsort','kind':'f','menu':'int[](const string[])'})
let c['argsort'] = f
let f = []
call add(f,{'word':'array','kind':'f','menu':'matrix2[]()'})
call add(f,{'word':'array','kind':'f','menu':'matrix3[]()'})
call add(f,{'word':'array','kind':'f','menu':'matrix[]()'})
call add(f,{'word':'array','kind':'f','menu':'float[]()'})
call add(f,{'word':'array','kind':'f','menu':'int[]()'})
call add(f,{'word':'array','kind':'f','menu':'vector4[]()'})
call add(f,{'word':'array','kind':'f','menu':'string[]()'})
call add(f,{'word':'array','kind':'f','menu':'vector2[]()'})
call add(f,{'word':'array','kind':'f','menu':'vector[]()'})
let c['array'] = f
let f = []
call add(f,{'word':'arraylength','kind':'f','menu':'int(const matrix3)'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const matrix)'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const vector4)'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const vector)'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const matrix3[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const matrix[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const bsdf[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const float[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const vector4[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const string[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const vector[])'})
let c['arraylength'] = f
let f = []
call add(f,{'word':'ashikhmin','kind':'f','menu':'bsdf(const vector,const float,const float,const vector,const vector)'})
let c['ashikhmin'] = f
let f = []
call add(f,{'word':'asin','kind':'f','menu':'float(const float)'})
call add(f,{'word':'asin','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'asin','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'asin','kind':'f','menu':'vector(const vector)'})
let c['asin'] = f
let f = []
call add(f,{'word':'assert_enabled','kind':'f','menu':'int()'})
let c['assert_enabled'] = f
let f = []
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,float,const matrix2)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,float,const matrix2)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,float,float,float,float,float,float,const matrix3)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,float,float,float,float,float,float,const matrix3)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,const matrix)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,const matrix)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,float,const vector4)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,float,const vector4)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,const vector)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,const vector)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,const vector2)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,const vector2)'})
let c['assign'] = f
let f = []
call add(f,{'word':'atan','kind':'f','menu':'float(const float)'})
call add(f,{'word':'atan','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'atan','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'atan','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'atan','kind':'f','menu':'vector(const vector)'})
let c['atan'] = f
let f = []
call add(f,{'word':'atan2','kind':'f','menu':'float(const float,const float)'})
let c['atan2'] = f
let f = []
call add(f,{'word':'atof','kind':'f','menu':'float(const string)'})
let c['atof'] = f
let f = []
call add(f,{'word':'atoi','kind':'f','menu':'int(const string)'})
let c['atoi'] = f
let f = []
call add(f,{'word':'atten','kind':'f','menu':'float(const float,const float)'})
let c['atten'] = f
let f = []
call add(f,{'word':'attrib','kind':'f','menu':'matrix2(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix2(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix3(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix3(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'float(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'float(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector4(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector4(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'string(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'string(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector2(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector2(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix2[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix2[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix3[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix3[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'float[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'float[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'int[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'int[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector4[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector4[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'string[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'string[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector2[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector2[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector[](const string,const string,const string,const int)'})
let c['attrib'] = f
let f = []
call add(f,{'word':'attribclass','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'attribclass','kind':'f','menu':'string(const string,const string)'})
let c['attribclass'] = f
let f = []
call add(f,{'word':'attribdataid','kind':'f','menu':'int[](const int,const string,const string)'})
call add(f,{'word':'attribdataid','kind':'f','menu':'int[](const string,const string,const string)'})
let c['attribdataid'] = f
let f = []
call add(f,{'word':'attribsize','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'attribsize','kind':'f','menu':'int(const string,const string,const string)'})
let c['attribsize'] = f
let f = []
call add(f,{'word':'attribtype','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'attribtype','kind':'f','menu':'int(const string,const string,const string)'})
let c['attribtype'] = f
let f = []
call add(f,{'word':'attribtypeinfo','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'attribtypeinfo','kind':'f','menu':'string(const string,const string,const string)'})
let c['attribtypeinfo'] = f
let f = []
call add(f,{'word':'avg','kind':'f','menu':'float(const float)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'avg','kind':'f','menu':'int(const int)'})
call add(f,{'word':'avg','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'avg','kind':'f','menu':'vector4(const vector4,const vector4)'})
call add(f,{'word':'avg','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'avg','kind':'f','menu':'vector2(const vector2,const vector2)'})
call add(f,{'word':'avg','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'avg','kind':'f','menu':'vector(const vector,const vector)'})
call add(f,{'word':'avg','kind':'f','menu':'vector(const vector[])'})
let c['avg'] = f
let f = []
let c['band'] = f
let f = []
call add(f,{'word':'binput','kind':'f','menu':'float(const int,const float,const float)'})
call add(f,{'word':'binput','kind':'f','menu':'float(const int,const int,const int)'})
call add(f,{'word':'binput','kind':'f','menu':'float(const int,const int,const int,const float,const float)'})
call add(f,{'word':'binput','kind':'f','menu':'float(const int,const int,const int,const int,const float,const float,const int)'})
call add(f,{'word':'binput','kind':'f','menu':'float(const int,const int,const int,const int,const int)'})
call add(f,{'word':'binput','kind':'f','menu':'float(const int,const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'binput','kind':'f','menu':'vector4(const float,const float)'})
call add(f,{'word':'binput','kind':'f','menu':'vector4(const int,const int)'})
call add(f,{'word':'binput','kind':'f','menu':'vector4(const int,const int,const float,const float)'})
call add(f,{'word':'binput','kind':'f','menu':'vector4(const int,const int,const int,const float,const float,const int)'})
call add(f,{'word':'binput','kind':'f','menu':'vector4(const int,const int,const int,const int)'})
call add(f,{'word':'binput','kind':'f','menu':'vector4(const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'binput','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'binput','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'binput','kind':'f','menu':'vector(const int,const int,const float,const float)'})
call add(f,{'word':'binput','kind':'f','menu':'vector(const int,const int,const int,const float,const float,const int)'})
call add(f,{'word':'binput','kind':'f','menu':'vector(const int,const int,const int,const int)'})
call add(f,{'word':'binput','kind':'f','menu':'vector(const int,const int,const int,const int,const int,const int)'})
let c['binput'] = f
let f = []
call add(f,{'word':'blackbody','kind':'f','menu':'vector(const float,const float)'})
let c['blackbody'] = f
let f = []
call add(f,{'word':'blinn','kind':'f','menu':'bsdf(const vector,const float)'})
let c['blinn'] = f
let f = []
call add(f,{'word':'blinnBRDF','kind':'f','menu':'float(const vector,const vector,const vector,const float)'})
let c['blinnBRDF'] = f
let f = []
let c['bnot'] = f
let f = []
let c['bor'] = f
let f = []
call add(f,{'word':'bouncelabel','kind':'f','menu':'string(const int)'})
let c['bouncelabel'] = f
let f = []
call add(f,{'word':'bouncemask','kind':'f','menu':'int(const string)'})
let c['bouncemask'] = f
let f = []
let c['br'] = f
let f = []
let c['break'] = f
let f = []
call add(f,{'word':'bumpmap','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmap','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmap','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmap','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmap'] = f
let f = []
call add(f,{'word':'bumpmapA','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapA','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapA','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapA','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapA'] = f
let f = []
call add(f,{'word':'bumpmapB','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapB','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapB','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapB','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapB'] = f
let f = []
call add(f,{'word':'bumpmapG','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapG','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapG','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapG','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapG'] = f
let f = []
call add(f,{'word':'bumpmapL','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapL','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapL','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapL','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapL'] = f
let f = []
call add(f,{'word':'bumpmapR','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapR','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapR','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapR','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapR'] = f
let f = []
call add(f,{'word':'bumpname','kind':'f','menu':'string()'})
let c['bumpname'] = f
let f = []
let c['bwhile'] = f
let f = []
let c['bxor'] = f
let f = []
call add(f,{'word':'cbrt','kind':'f','menu':'float(const float)'})
call add(f,{'word':'cbrt','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'cbrt','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'cbrt','kind':'f','menu':'vector(const vector)'})
let c['cbrt'] = f
let f = []
call add(f,{'word':'ceil','kind':'f','menu':'float(const float)'})
call add(f,{'word':'ceil','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'ceil','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'ceil','kind':'f','menu':'vector(const vector)'})
let c['ceil'] = f
let f = []
call add(f,{'word':'ch','kind':'f','menu':'float(const int,const int,const int)'})
call add(f,{'word':'ch','kind':'f','menu':'float(const int,const int,const int,const float)'})
call add(f,{'word':'ch','kind':'f','menu':'float(const string)'})
call add(f,{'word':'ch','kind':'f','menu':'float(const string,const float)'})
call add(f,{'word':'ch','kind':'f','menu':'string(const string)'})
call add(f,{'word':'ch','kind':'f','menu':'string(const string,const float)'})
let c['ch'] = f
let f = []
call add(f,{'word':'ch2','kind':'f','menu':'matrix2(const string)'})
call add(f,{'word':'ch2','kind':'f','menu':'matrix2(const string,const float)'})
let c['ch2'] = f
let f = []
call add(f,{'word':'ch3','kind':'f','menu':'matrix3(const string)'})
call add(f,{'word':'ch3','kind':'f','menu':'matrix3(const string,const float)'})
let c['ch3'] = f
let f = []
call add(f,{'word':'ch4','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'ch4','kind':'f','menu':'matrix(const string,const float)'})
let c['ch4'] = f
let f = []
call add(f,{'word':'chexpr','kind':'f','menu':'float(const string,const string)'})
let c['chexpr'] = f
let f = []
call add(f,{'word':'chexprf','kind':'f','menu':'float(const string,const string,const float)'})
let c['chexprf'] = f
let f = []
call add(f,{'word':'chexprt','kind':'f','menu':'float(const string,const string,const float)'})
let c['chexprt'] = f
let f = []
call add(f,{'word':'chf','kind':'f','menu':'float(const int,const int,const int)'})
call add(f,{'word':'chf','kind':'f','menu':'float(const int,const int,const int,const float)'})
call add(f,{'word':'chf','kind':'f','menu':'float(const string)'})
call add(f,{'word':'chf','kind':'f','menu':'float(const string,const float)'})
let c['chf'] = f
let f = []
call add(f,{'word':'chi','kind':'f','menu':'int(const string)'})
call add(f,{'word':'chi','kind':'f','menu':'int(const string,const float)'})
let c['chi'] = f
let f = []
call add(f,{'word':'chid','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'chid','kind':'f','menu':'void(const string,int,int,int)'})
call add(f,{'word':'chid','kind':'f','menu':'int(const string,int,int)'})
call add(f,{'word':'chid','kind':'f','menu':'void(const string,const string,int,int,int)'})
call add(f,{'word':'chid','kind':'f','menu':'int(const string,const string,int,int)'})
let c['chid'] = f
let f = []
call add(f,{'word':'chname','kind':'f','menu':'string(const int,const int)'})
let c['chname'] = f
let f = []
call add(f,{'word':'chop','kind':'f','menu':'matrix(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'matrix(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'matrix(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'float(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'float(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'float(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector4(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector4(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector4(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector2(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector2(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector2(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector(const string,const string,const int)'})
let c['chop'] = f
let f = []
call add(f,{'word':'choplocal','kind':'f','menu':'matrix(const string,const int,const float)'})
call add(f,{'word':'choplocal','kind':'f','menu':'matrix(const string,const int,const int)'})
call add(f,{'word':'choplocal','kind':'f','menu':'matrix(const string,const string,const float)'})
call add(f,{'word':'choplocal','kind':'f','menu':'matrix(const string,const string,const int)'})
let c['choplocal'] = f
let f = []
call add(f,{'word':'choplocalt','kind':'f','menu':'matrix(const string,const int,const float,const float)'})
call add(f,{'word':'choplocalt','kind':'f','menu':'matrix(const string,const int,const int,const float)'})
call add(f,{'word':'choplocalt','kind':'f','menu':'matrix(const string,const string,const float,const float)'})
call add(f,{'word':'choplocalt','kind':'f','menu':'matrix(const string,const string,const int,const float)'})
let c['choplocalt'] = f
let f = []
call add(f,{'word':'chopt','kind':'f','menu':'matrix(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'matrix(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'matrix(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'matrix(const string,const string,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'float(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'float(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'float(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'float(const string,const string,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector4(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector4(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector4(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector4(const string,const string,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector2(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector2(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector2(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector2(const string,const string,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector(const string,const string,const int,const float)'})
let c['chopt'] = f
let f = []
call add(f,{'word':'chp','kind':'f','menu':'vector4(const string)'})
call add(f,{'word':'chp','kind':'f','menu':'vector4(const string,const float)'})
let c['chp'] = f
let f = []
call add(f,{'word':'chr','kind':'f','menu':'string(const int)'})
let c['chr'] = f
let f = []
call add(f,{'word':'chramp','kind':'f','menu':'float(const string,const float)'})
call add(f,{'word':'chramp','kind':'f','menu':'float(const string,const float,const float)'})
call add(f,{'word':'chramp','kind':'f','menu':'vector(const string,const float)'})
call add(f,{'word':'chramp','kind':'f','menu':'vector(const string,const float,const float)'})
let c['chramp'] = f
let f = []
call add(f,{'word':'chs','kind':'f','menu':'string(const string)'})
call add(f,{'word':'chs','kind':'f','menu':'string(const string,const float)'})
let c['chs'] = f
let f = []
call add(f,{'word':'chsraw','kind':'f','menu':'string(const string)'})
let c['chsraw'] = f
let f = []
call add(f,{'word':'chu','kind':'f','menu':'vector2(const string)'})
call add(f,{'word':'chu','kind':'f','menu':'vector2(const string,const float)'})
let c['chu'] = f
let f = []
call add(f,{'word':'chv','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'chv','kind':'f','menu':'vector(const int,const int,const float)'})
call add(f,{'word':'chv','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'chv','kind':'f','menu':'vector(const string,const float)'})
let c['chv'] = f
let f = []
call add(f,{'word':'cinput','kind':'f','menu':'float(const int,const float,const float)'})
call add(f,{'word':'cinput','kind':'f','menu':'float(const int,const int,const int)'})
call add(f,{'word':'cinput','kind':'f','menu':'float(const int,const int,const int,const float,const float)'})
call add(f,{'word':'cinput','kind':'f','menu':'float(const int,const int,const int,const int,const float,const float,const int)'})
call add(f,{'word':'cinput','kind':'f','menu':'float(const int,const int,const int,const int,const int)'})
call add(f,{'word':'cinput','kind':'f','menu':'float(const int,const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'cinput','kind':'f','menu':'vector4(const float,const float)'})
call add(f,{'word':'cinput','kind':'f','menu':'vector4(const int,const int)'})
call add(f,{'word':'cinput','kind':'f','menu':'vector4(const int,const int,const float,const float)'})
call add(f,{'word':'cinput','kind':'f','menu':'vector4(const int,const int,const int,const float,const float,const int)'})
call add(f,{'word':'cinput','kind':'f','menu':'vector4(const int,const int,const int,const int)'})
call add(f,{'word':'cinput','kind':'f','menu':'vector4(const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'cinput','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'cinput','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'cinput','kind':'f','menu':'vector(const int,const int,const float,const float)'})
call add(f,{'word':'cinput','kind':'f','menu':'vector(const int,const int,const int,const float,const float,const int)'})
call add(f,{'word':'cinput','kind':'f','menu':'vector(const int,const int,const int,const int)'})
call add(f,{'word':'cinput','kind':'f','menu':'vector(const int,const int,const int,const int,const int,const int)'})
let c['cinput'] = f
let f = []
call add(f,{'word':'ckspline','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'ckspline','kind':'f','menu':'vector4(const float,const vector4,const float)'})
call add(f,{'word':'ckspline','kind':'f','menu':'vector(const float,const vector,const float)'})
let c['ckspline'] = f
let f = []
call add(f,{'word':'clamp','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'clamp','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'clamp','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'clamp','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'clamp','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['clamp'] = f
let f = []
call add(f,{'word':'clip','kind':'f','menu':'void(int,export vector,export vector,const vector4)'})
call add(f,{'word':'clip','kind':'f','menu':'int(export vector,export vector,const vector4)'})
call add(f,{'word':'clip','kind':'f','menu':'void(int,export vector,export vector,const vector,const vector)'})
call add(f,{'word':'clip','kind':'f','menu':'int(export vector,export vector,const vector,const vector)'})
let c['clip'] = f
let f = []
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const float,const float)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const float,const float,const float,const float,const float,const float,const float,const float,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const vector)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const float,const float)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const float,const float,const float,const float,const float,const float,const float,const float,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector,const int)'})
let c['colormap'] = f
let f = []
call add(f,{'word':'colorname','kind':'f','menu':'string()'})
let c['colorname'] = f
let f = []
call add(f,{'word':'computenormal','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'computenormal','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['computenormal'] = f
let f = []
call add(f,{'word':'concat','kind':'f','menu':'string(const string,const string)'})
let c['concat'] = f
let f = []
call add(f,{'word':'cone','kind':'f','menu':'bsdf(const vector,const vector,const float)'})
let c['cone'] = f
let f = []
call add(f,{'word':'cos','kind':'f','menu':'float(const float)'})
call add(f,{'word':'cos','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'cos','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'cos','kind':'f','menu':'vector(const vector)'})
let c['cos'] = f
let f = []
call add(f,{'word':'cosh','kind':'f','menu':'float(const float)'})
call add(f,{'word':'cosh','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'cosh','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'cosh','kind':'f','menu':'vector(const vector)'})
let c['cosh'] = f
let f = []
call add(f,{'word':'cout','kind':'f','menu':'void()'})
let c['cout'] = f
let f = []
call add(f,{'word':'cracktransform','kind':'f','menu':'void(const int,const int,const vector,const matrix,vector,vector,vector)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'vector(const int,const int,const vector,const matrix,vector,vector)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'void(const int,const int,const vector,const vector,const matrix,vector,vector,vector,vector)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'vector(const int,const int,const vector,const vector,const matrix,vector,vector,vector)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'vector(const int,const int,const int,const vector,const matrix)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'vector(const int,const int,const int,const vector,const vector,const matrix)'})
let c['cracktransform'] = f
let f = []
call add(f,{'word':'create_cdf','kind':'f','menu':'float[](const float[])'})
let c['create_cdf'] = f
let f = []
call add(f,{'word':'create_pdf','kind':'f','menu':'float[](const float[])'})
let c['create_pdf'] = f
let f = []
call add(f,{'word':'cross','kind':'f','menu':'vector(const vector,const vector)'})
let c['cross'] = f
let f = []
call add(f,{'word':'cspline','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'cspline','kind':'f','menu':'vector4(const float,const vector4)'})
call add(f,{'word':'cspline','kind':'f','menu':'vector(const float,const vector)'})
let c['cspline'] = f
let f = []
call add(f,{'word':'ctransform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'ctransform','kind':'f','menu':'vector(const string,const vector)'})
let c['ctransform'] = f
let f = []
call add(f,{'word':'curlnoise','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'curlnoise','kind':'f','menu':'vector(const vector)'})
let c['curlnoise'] = f
let f = []
call add(f,{'word':'curlnoise2d','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'curlnoise2d','kind':'f','menu':'vector(const vector)'})
let c['curlnoise2d'] = f
let f = []
call add(f,{'word':'curlxnoise','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'curlxnoise','kind':'f','menu':'vector(const vector)'})
let c['curlxnoise'] = f
let f = []
call add(f,{'word':'curlxnoise2d','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'curlxnoise2d','kind':'f','menu':'vector(const vector)'})
let c['curlxnoise2d'] = f
let f = []
call add(f,{'word':'cvex_bsdf','kind':'f','menu':'bsdf(const string,const string)'})
let c['cvex_bsdf'] = f
let f = []
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,const float,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,const float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,const float,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,const float,float,float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,const float,int,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,const float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,int,float,float,float,float,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,float,float,float,float,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,int,float,float,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,float,float,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector4,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector4,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector4,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector4,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector4,int,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector4,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector2,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector2,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector2,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector2,float,float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector2,int,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector2,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector,int,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector,int,float,float,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector,float,float,const int,const int,const int)'})
let c['cwnoise'] = f
let f = []
call add(f,{'word':'decode','kind':'f','menu':'string(const string)'})
let c['decode'] = f
let f = []
call add(f,{'word':'degrees','kind':'f','menu':'float(const float)'})
call add(f,{'word':'degrees','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'degrees','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'degrees','kind':'f','menu':'vector(const vector)'})
let c['degrees'] = f
let f = []
call add(f,{'word':'depthmap','kind':'f','menu':'float(const string,const float,const float)'})
call add(f,{'word':'depthmap','kind':'f','menu':'float(const string,const vector)'})
let c['depthmap'] = f
let f = []
call add(f,{'word':'depthname','kind':'f','menu':'string()'})
let c['depthname'] = f
let f = []
call add(f,{'word':'detail','kind':'f','menu':'matrix2(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'float(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'float(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'int(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'string(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'float[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'float[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'int[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector[](const string,const string,const int)'})
let c['detail'] = f
let f = []
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix2(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix2(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix3(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix3(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'float(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'float(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'int(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'int(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector4(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector4(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'string(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'string(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector2(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector2(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix2[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix2[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix3[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix3[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'float[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'float[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'int[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'int[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector4[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector4[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'string[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'string[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector2[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector2[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector[](const string,const string,const int,int)'})
let c['detailattrib'] = f
let f = []
call add(f,{'word':'detailattribsize','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'detailattribsize','kind':'f','menu':'int(const string,const string)'})
let c['detailattribsize'] = f
let f = []
call add(f,{'word':'detailattribtype','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'detailattribtype','kind':'f','menu':'int(const string,const string)'})
let c['detailattribtype'] = f
let f = []
call add(f,{'word':'detailattribtypeinfo','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'detailattribtypeinfo','kind':'f','menu':'string(const string,const string)'})
let c['detailattribtypeinfo'] = f
let f = []
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix2(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix2(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix3(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix3(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'float(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'float(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'int(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector4(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector4(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'string(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector2(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector2(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix2[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix2[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix3[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix3[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'float[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'float[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'int[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector4[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector4[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector2[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector2[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector[](const string,const string)'})
let c['detailintrinsic'] = f
let f = []
call add(f,{'word':'determinant','kind':'f','menu':'float(const matrix2)'})
call add(f,{'word':'determinant','kind':'f','menu':'float(const matrix3)'})
call add(f,{'word':'determinant','kind':'f','menu':'float(const matrix)'})
let c['determinant'] = f
let f = []
call add(f,{'word':'diagonalizesymmetric','kind':'f','menu':'matrix3(const matrix3,vector)'})
let c['diagonalizesymmetric'] = f
let f = []
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf(const vector,const float)'})
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf(const vector,const vector,const float)'})
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf(const vector,const vector)'})
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf(const vector)'})
let c['diffuse'] = f
let f = []
call add(f,{'word':'diffuseBRDF','kind':'f','menu':'float(const vector,const vector)'})
call add(f,{'word':'diffuseBRDF','kind':'f','menu':'float(const vector,const vector,const vector,const float)'})
let c['diffuseBRDF'] = f
let f = []
call add(f,{'word':'dihedral','kind':'f','menu':'matrix3(const vector,const vector)'})
call add(f,{'word':'dihedral','kind':'f','menu':'vector4(const vector,const vector)'})
let c['dihedral'] = f
let f = []
call add(f,{'word':'distance','kind':'f','menu':'float(const vector4,const vector4)'})
call add(f,{'word':'distance','kind':'f','menu':'float(const vector2,const vector2)'})
call add(f,{'word':'distance','kind':'f','menu':'float(const vector,const vector)'})
let c['distance'] = f
let f = []
call add(f,{'word':'distance2','kind':'f','menu':'float(const vector4,const vector4)'})
call add(f,{'word':'distance2','kind':'f','menu':'float(const vector2,const vector2)'})
call add(f,{'word':'distance2','kind':'f','menu':'float(const vector,const vector)'})
let c['distance2'] = f
let f = []
let c['div'] = f
let f = []
call add(f,{'word':'dot','kind':'f','menu':'float(const vector4,const vector4)'})
call add(f,{'word':'dot','kind':'f','menu':'float(const vector4,const vector)'})
call add(f,{'word':'dot','kind':'f','menu':'float(const vector2,const vector2)'})
call add(f,{'word':'dot','kind':'f','menu':'float(const vector,const vector4)'})
call add(f,{'word':'dot','kind':'f','menu':'float(const vector,const vector)'})
let c['dot'] = f
let f = []
call add(f,{'word':'dsmpixel','kind':'f','menu':'int(const string,const string,const int,const int,float[])'})
call add(f,{'word':'dsmpixel','kind':'f','menu':'int(const string,const string,const int,const int,vector4[])'})
call add(f,{'word':'dsmpixel','kind':'f','menu':'int(const string,const string,const int,const int,vector[])'})
let c['dsmpixel'] = f
let f = []
call add(f,{'word':'efit','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
call add(f,{'word':'efit','kind':'f','menu':'vector4(const vector4,const vector4,const vector4,const float,const float)'})
call add(f,{'word':'efit','kind':'f','menu':'vector4(const vector4,const vector4,const vector4,const vector4,const vector4)'})
call add(f,{'word':'efit','kind':'f','menu':'vector2(const vector2,const vector2,const vector2,const float,const float)'})
call add(f,{'word':'efit','kind':'f','menu':'vector2(const vector2,const vector2,const vector2,const vector2,const vector2)'})
call add(f,{'word':'efit','kind':'f','menu':'vector(const vector,const vector,const vector,const float,const float)'})
call add(f,{'word':'efit','kind':'f','menu':'vector(const vector,const vector,const vector,const vector,const vector)'})
let c['efit'] = f
let f = []
call add(f,{'word':'eigenvalues','kind':'f','menu':'void(int,const matrix3,vector,vector)'})
call add(f,{'word':'eigenvalues','kind':'f','menu':'int(const matrix3,vector,vector)'})
let c['eigenvalues'] = f
let f = []
let c['else'] = f
let f = []
call add(f,{'word':'encode','kind':'f','menu':'string(const string)'})
let c['encode'] = f
let f = []
let c['endel'] = f
let f = []
let c['endif'] = f
let f = []
let c['endnotif'] = f
let f = []
call add(f,{'word':'endswith','kind':'f','menu':'int(const string,const string)'})
let c['endswith'] = f
let f = []
call add(f,{'word':'environment','kind':'f','menu':'vector4(const string,const vector)'})
call add(f,{'word':'environment','kind':'f','menu':'vector4(const string,const vector,const float)'})
call add(f,{'word':'environment','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'environment','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'environment','kind':'f','menu':'vector(const string,const vector,const float)'})
call add(f,{'word':'environment','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector)'})
let c['environment'] = f
let f = []
let c['eq'] = f
let f = []
call add(f,{'word':'erf','kind':'f','menu':'float(const float)'})
call add(f,{'word':'erf','kind':'f','menu':'vector2(const vector2)'})
let c['erf'] = f
let f = []
call add(f,{'word':'erf_inv','kind':'f','menu':'float(const float)'})
let c['erf_inv'] = f
let f = []
call add(f,{'word':'erfc','kind':'f','menu':'float(const float)'})
let c['erfc'] = f
let f = []
call add(f,{'word':'error','kind':'f','menu':'void(const string)'})
let c['error'] = f
let f = []
call add(f,{'word':'eulertoquaternion','kind':'f','menu':'vector4(const vector,const int)'})
let c['eulertoquaternion'] = f
let f = []
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,float,const int)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,const int)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,const vector,float,const int)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,const vector,const int)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,const vector)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector)'})
let c['eval_bsdf'] = f
let f = []
call add(f,{'word':'exp','kind':'f','menu':'float(const float)'})
call add(f,{'word':'exp','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'exp','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'exp','kind':'f','menu':'vector(const vector)'})
let c['exp'] = f
let f = []
call add(f,{'word':'expand_udim','kind':'f','menu':'string(const float,const float,const string)'})
let c['expand_udim'] = f
let f = []
call add(f,{'word':'expandedgegroup','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'expandedgegroup','kind':'f','menu':'int[](const string,const string)'})
let c['expandedgegroup'] = f
let f = []
call add(f,{'word':'expandpointgroup','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'expandpointgroup','kind':'f','menu':'int[](const string,const string)'})
let c['expandpointgroup'] = f
let f = []
call add(f,{'word':'expandprimgroup','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'expandprimgroup','kind':'f','menu':'int[](const string,const string)'})
let c['expandprimgroup'] = f
let f = []
call add(f,{'word':'expandvertexgroup','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'expandvertexgroup','kind':'f','menu':'int[](const string,const string)'})
let c['expandvertexgroup'] = f
let f = []
call add(f,{'word':'filamentsample','kind':'f','menu':'vector(const int,const vector)'})
call add(f,{'word':'filamentsample','kind':'f','menu':'vector(const string,const vector)'})
let c['filamentsample'] = f
let f = []
call add(f,{'word':'file_stat','kind':'f','menu':'int(const string,int[])'})
let c['file_stat'] = f
let f = []
call add(f,{'word':'filterstep','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'filterstep','kind':'f','menu':'float(const float,const float,const float)'})
let c['filterstep'] = f
let f = []
call add(f,{'word':'find','kind':'f','menu':'int(const string,const string)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string,const string,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix2[],const matrix2)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix2[],const matrix2,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix2[],const matrix2,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix3[],const matrix3)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix3[],const matrix3,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix3[],const matrix3,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix[],const matrix)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix[],const matrix,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix[],const matrix,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const float[],const float)'})
call add(f,{'word':'find','kind':'f','menu':'int(const float[],const float,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const float[],const float,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const int[],const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const int[],const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const int[],const int,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector4[],const vector4)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector4[],const vector4,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector4[],const vector4,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string[],const string)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string[],const string,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string[],const string,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector2[],const vector2)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector2[],const vector2,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector2[],const vector2,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector[],const vector)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector[],const vector,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector[],const vector,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string,const string)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string,const string,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix2[],const matrix2)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix2[],const matrix2,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix2[],const matrix2,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix3[],const matrix3)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix3[],const matrix3,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix3[],const matrix3,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix[],const matrix)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix[],const matrix,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix[],const matrix,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const float[],const float)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const float[],const float,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const float[],const float,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const int[],const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const int[],const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const int[],const int,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector4[],const vector4)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector4[],const vector4,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector4[],const vector4,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string[],const string)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string[],const string,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string[],const string,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector2[],const vector2)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector2[],const vector2,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector2[],const vector2,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector[],const vector)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector[],const vector,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector[],const vector,const int,const int)'})
let c['find'] = f
let f = []
call add(f,{'word':'findattribval','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const int,const string,const string,const int,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const int,const string,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const string,const string,const string,const int,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const string,const string,const string,const string)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const string,const string,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int[](const int,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int[](const int,const string,const string,const string)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int[](const string,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int[](const string,const string,const string,const string)'})
let c['findattribval'] = f
let f = []
call add(f,{'word':'findattribvalcount','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'findattribvalcount','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'findattribvalcount','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'findattribvalcount','kind':'f','menu':'int(const string,const string,const string,const string)'})
let c['findattribvalcount'] = f
let f = []
call add(f,{'word':'finput','kind':'f','menu':'float(const int,const float,const float)'})
call add(f,{'word':'finput','kind':'f','menu':'float(const int,const int,const int)'})
call add(f,{'word':'finput','kind':'f','menu':'float(const int,const int,const int,const float,const float)'})
call add(f,{'word':'finput','kind':'f','menu':'float(const int,const int,const int,const int,const float,const float,const int)'})
call add(f,{'word':'finput','kind':'f','menu':'float(const int,const int,const int,const int,const int)'})
call add(f,{'word':'finput','kind':'f','menu':'float(const int,const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'finput','kind':'f','menu':'vector4(const float,const float)'})
call add(f,{'word':'finput','kind':'f','menu':'vector4(const int,const int)'})
call add(f,{'word':'finput','kind':'f','menu':'vector4(const int,const int,const float,const float)'})
call add(f,{'word':'finput','kind':'f','menu':'vector4(const int,const int,const int,const float,const float,const int)'})
call add(f,{'word':'finput','kind':'f','menu':'vector4(const int,const int,const int,const int)'})
call add(f,{'word':'finput','kind':'f','menu':'vector4(const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'finput','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'finput','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'finput','kind':'f','menu':'vector(const int,const int,const float,const float)'})
call add(f,{'word':'finput','kind':'f','menu':'vector(const int,const int,const int,const float,const float,const int)'})
call add(f,{'word':'finput','kind':'f','menu':'vector(const int,const int,const int,const int)'})
call add(f,{'word':'finput','kind':'f','menu':'vector(const int,const int,const int,const int,const int,const int)'})
let c['finput'] = f
let f = []
call add(f,{'word':'fit','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
call add(f,{'word':'fit','kind':'f','menu':'vector4(const vector4,const vector4,const vector4,const vector4,const vector4)'})
call add(f,{'word':'fit','kind':'f','menu':'vector2(const vector2,const vector2,const vector2,const vector2,const vector2)'})
call add(f,{'word':'fit','kind':'f','menu':'vector(const vector,const vector,const vector,const vector,const vector)'})
let c['fit'] = f
let f = []
call add(f,{'word':'fit01','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'fit01','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'fit01','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'fit01','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['fit01'] = f
let f = []
call add(f,{'word':'fit10','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'fit10','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'fit10','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'fit10','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['fit10'] = f
let f = []
call add(f,{'word':'fit11','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'fit11','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'fit11','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'fit11','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['fit11'] = f
let f = []
call add(f,{'word':'floor','kind':'f','menu':'float(const float)'})
call add(f,{'word':'floor','kind':'f','menu':'int(const float)'})
call add(f,{'word':'floor','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'floor','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'floor','kind':'f','menu':'vector(const vector)'})
let c['floor'] = f
let f = []
call add(f,{'word':'flownoise','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'float(const vector4,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'float(const vector,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'vector(const float,const float,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'vector(const vector4,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'vector(const vector,const float)'})
let c['flownoise'] = f
let f = []
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const float,const float,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const vector4,const int,const int,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const vector4,const vector4,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const vector,const int,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const vector,const vector,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const float,const float,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const vector4,const int,const int,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const vector4,const vector4,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const vector,const int,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const vector,const vector,const float)'})
let c['flowpnoise'] = f
let f = []
call add(f,{'word':'frac','kind':'f','menu':'float(const float)'})
call add(f,{'word':'frac','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'frac','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'frac','kind':'f','menu':'vector(const vector)'})
let c['frac'] = f
let f = []
call add(f,{'word':'fresnel','kind':'f','menu':'void(const vector,const vector,const float,float,float)'})
call add(f,{'word':'fresnel','kind':'f','menu':'float(const vector,const vector,const float,float)'})
call add(f,{'word':'fresnel','kind':'f','menu':'void(const vector,const vector,const float,float,float,vector,vector)'})
call add(f,{'word':'fresnel','kind':'f','menu':'float(const vector,const vector,const float,float,vector,vector)'})
let c['fresnel'] = f
let f = []
call add(f,{'word':'fromNDC','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'fromNDC','kind':'f','menu':'vector(const vector)'})
let c['fromNDC'] = f
let f = []
call add(f,{'word':'frontface','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['frontface'] = f
let f = []
call add(f,{'word':'fuzzify','kind':'f','menu':'float(const string[],const float[],const float[],const float,const float,const float)'})
let c['fuzzify'] = f
let f = []
call add(f,{'word':'fuzzy_and','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_and','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_and'] = f
let f = []
call add(f,{'word':'fuzzy_defuzz_centroid','kind':'f','menu':'float(const float[],const float,const float)'})
let c['fuzzy_defuzz_centroid'] = f
let f = []
call add(f,{'word':'fuzzy_nand','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_nand','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_nand'] = f
let f = []
call add(f,{'word':'fuzzy_nor','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_nor','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_nor'] = f
let f = []
call add(f,{'word':'fuzzy_not','kind':'f','menu':'float(const float)'})
call add(f,{'word':'fuzzy_not','kind':'f','menu':'int(const int)'})
let c['fuzzy_not'] = f
let f = []
call add(f,{'word':'fuzzy_nxor','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_nxor','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_nxor'] = f
let f = []
call add(f,{'word':'fuzzy_or','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_or','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_or'] = f
let f = []
call add(f,{'word':'fuzzy_xor','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_xor','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_xor'] = f
let f = []
let c['ge'] = f
let f = []
call add(f,{'word':'geoself','kind':'f','menu':'int()'})
let c['geoself'] = f
let f = []
call add(f,{'word':'geounwrap','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'geounwrap','kind':'f','menu':'string(const string,const string)'})
let c['geounwrap'] = f
let f = []
call add(f,{'word':'getattrib','kind':'f','menu':'matrix2(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix2(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix3(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix3(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'float(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'float(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'int(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'int(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector4(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector4(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'string(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'string(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector2(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector2(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix2[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix2[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix3[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix3[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'float[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'float[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'int[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'int[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector4[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector4[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'string[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'string[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector2[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector2[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector[](const string,const string,const string,const int,int)'})
let c['getattrib'] = f
let f = []
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,matrix3,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,matrix,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,float,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,int,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,vector4,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,string,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,vector,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,float[],const string,const string,const int,const int)'})
let c['getattribute'] = f
let f = []
call add(f,{'word':'getbbox','kind':'f','menu':'void(const int,const string,vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(const int,const string,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'void(const int,vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(const int,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'void(const string,const string,vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(const string,const string,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'void(const string,vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(const string,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'void(vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(vector)'})
let c['getbbox'] = f
let f = []
call add(f,{'word':'getbbox_center','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getbbox_center','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getbbox_center','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getbbox_center','kind':'f','menu':'vector(const string,const string)'})
let c['getbbox_center'] = f
let f = []
call add(f,{'word':'getbbox_max','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getbbox_max','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getbbox_max','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getbbox_max','kind':'f','menu':'vector(const string,const string)'})
let c['getbbox_max'] = f
let f = []
call add(f,{'word':'getbbox_min','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getbbox_min','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getbbox_min','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getbbox_min','kind':'f','menu':'vector(const string,const string)'})
let c['getbbox_min'] = f
let f = []
call add(f,{'word':'getbbox_size','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getbbox_size','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getbbox_size','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getbbox_size','kind':'f','menu':'vector(const string,const string)'})
let c['getbbox_size'] = f
let f = []
call add(f,{'word':'getbounces','kind':'f','menu':'int(const bsdf)'})
let c['getbounces'] = f
let f = []
call add(f,{'word':'getbounds','kind':'f','menu':'int(const string,const string,vector,vector)'})
call add(f,{'word':'getbounds','kind':'f','menu':'int(const string,vector,vector)'})
let c['getbounds'] = f
let f = []
call add(f,{'word':'getcomp','kind':'f','menu':'matrix2(const matrix2[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'matrix3(const matrix3[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'matrix(const matrix[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'bsdf(const bsdf[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const matrix2,const int,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const matrix3,const int,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const matrix,const int,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const vector4,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const vector2,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const vector,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const float[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'int(const int[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'vector4(const vector4[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'string(const string,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'string(const string[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'vector2(const vector2[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'vector(const vector[],const int)'})
let c['getcomp'] = f
let f = []
let c['getelem'] = f
let f = []
call add(f,{'word':'getpackedtransform','kind':'f','menu':'matrix(const int,const int)'})
let c['getpackedtransform'] = f
let f = []
call add(f,{'word':'getpointbbox','kind':'f','menu':'void(const int,const string,vector,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'vector(const int,const string,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'void(const int,vector,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'vector(const int,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'void(const string,const string,vector,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'vector(const string,const string,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'void(const string,vector,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'vector(const string,vector)'})
let c['getpointbbox'] = f
let f = []
call add(f,{'word':'getpointbbox_center','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getpointbbox_center','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getpointbbox_center','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getpointbbox_center','kind':'f','menu':'vector(const string,const string)'})
let c['getpointbbox_center'] = f
let f = []
call add(f,{'word':'getpointbbox_max','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getpointbbox_max','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getpointbbox_max','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getpointbbox_max','kind':'f','menu':'vector(const string,const string)'})
let c['getpointbbox_max'] = f
let f = []
call add(f,{'word':'getpointbbox_min','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getpointbbox_min','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getpointbbox_min','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getpointbbox_min','kind':'f','menu':'vector(const string,const string)'})
let c['getpointbbox_min'] = f
let f = []
call add(f,{'word':'getpointbbox_size','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getpointbbox_size','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getpointbbox_size','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getpointbbox_size','kind':'f','menu':'vector(const string,const string)'})
let c['getpointbbox_size'] = f
let f = []
call add(f,{'word':'getspace','kind':'f','menu':'matrix(const string,const string)'})
let c['getspace'] = f
let f = []
call add(f,{'word':'gradient','kind':'f','menu':'vector(const vector,const float)'})
let c['gradient'] = f
let f = []
call add(f,{'word':'gradient3d','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['gradient3d'] = f
let f = []
let c['gt'] = f
let f = []
call add(f,{'word':'hair','kind':'f','menu':'bsdf(const vector,const vector,const float,const float,const float,const float,const float)'})
call add(f,{'word':'hair','kind':'f','menu':'bsdf(const vector,const vector,const float,const float,const float)'})
call add(f,{'word':'hair','kind':'f','menu':'bsdf(const vector,const vector,const float,const float)'})
let c['hair'] = f
let f = []
call add(f,{'word':'has_udim','kind':'f','menu':'int(const string)'})
let c['has_udim'] = f
let f = []
call add(f,{'word':'hasattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'hasattrib','kind':'f','menu':'int(const string,const string,const string)'})
let c['hasattrib'] = f
let f = []
call add(f,{'word':'hasdetailattrib','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'hasdetailattrib','kind':'f','menu':'int(const string,const string)'})
let c['hasdetailattrib'] = f
let f = []
call add(f,{'word':'hasmetadata','kind':'f','menu':'int(const int,const string)'})
let c['hasmetadata'] = f
let f = []
call add(f,{'word':'hasplane','kind':'f','menu':'int(const string)'})
let c['hasplane'] = f
let f = []
call add(f,{'word':'haspointattrib','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'haspointattrib','kind':'f','menu':'int(const string,const string)'})
let c['haspointattrib'] = f
let f = []
call add(f,{'word':'hasprimattrib','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'hasprimattrib','kind':'f','menu':'int(const string,const string)'})
let c['hasprimattrib'] = f
let f = []
call add(f,{'word':'hasvertexattrib','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'hasvertexattrib','kind':'f','menu':'int(const string,const string)'})
let c['hasvertexattrib'] = f
let f = []
call add(f,{'word':'hedge_dstpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_dstpoint','kind':'f','menu':'int(const string,const int)'})
let c['hedge_dstpoint'] = f
let f = []
call add(f,{'word':'hedge_dstvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_dstvertex','kind':'f','menu':'int(const string,const int)'})
let c['hedge_dstvertex'] = f
let f = []
call add(f,{'word':'hedge_equivcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_equivcount','kind':'f','menu':'int(const string,const int)'})
let c['hedge_equivcount'] = f
let f = []
call add(f,{'word':'hedge_isequiv','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'hedge_isequiv','kind':'f','menu':'int(const string,const int,const int)'})
let c['hedge_isequiv'] = f
let f = []
call add(f,{'word':'hedge_isprimary','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_isprimary','kind':'f','menu':'int(const string,const int)'})
let c['hedge_isprimary'] = f
let f = []
call add(f,{'word':'hedge_isvalid','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_isvalid','kind':'f','menu':'int(const string,const int)'})
let c['hedge_isvalid'] = f
let f = []
call add(f,{'word':'hedge_next','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_next','kind':'f','menu':'int(const string,const int)'})
let c['hedge_next'] = f
let f = []
call add(f,{'word':'hedge_nextequiv','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_nextequiv','kind':'f','menu':'int(const string,const int)'})
let c['hedge_nextequiv'] = f
let f = []
call add(f,{'word':'hedge_postdstpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_postdstpoint','kind':'f','menu':'int(const string,const int)'})
let c['hedge_postdstpoint'] = f
let f = []
call add(f,{'word':'hedge_postdstvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_postdstvertex','kind':'f','menu':'int(const string,const int)'})
let c['hedge_postdstvertex'] = f
let f = []
call add(f,{'word':'hedge_presrcpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_presrcpoint','kind':'f','menu':'int(const string,const int)'})
let c['hedge_presrcpoint'] = f
let f = []
call add(f,{'word':'hedge_presrcvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_presrcvertex','kind':'f','menu':'int(const string,const int)'})
let c['hedge_presrcvertex'] = f
let f = []
call add(f,{'word':'hedge_prev','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_prev','kind':'f','menu':'int(const string,const int)'})
let c['hedge_prev'] = f
let f = []
call add(f,{'word':'hedge_prim','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_prim','kind':'f','menu':'int(const string,const int)'})
let c['hedge_prim'] = f
let f = []
call add(f,{'word':'hedge_primary','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_primary','kind':'f','menu':'int(const string,const int)'})
let c['hedge_primary'] = f
let f = []
call add(f,{'word':'hedge_srcpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_srcpoint','kind':'f','menu':'int(const string,const int)'})
let c['hedge_srcpoint'] = f
let f = []
call add(f,{'word':'hedge_srcvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_srcvertex','kind':'f','menu':'int(const string,const int)'})
let c['hedge_srcvertex'] = f
let f = []
call add(f,{'word':'henyeygreenstein','kind':'f','menu':'bsdf(const float)'})
let c['henyeygreenstein'] = f
let f = []
call add(f,{'word':'hscript_noise','kind':'f','menu':'float(const vector)'})
let c['hscript_noise'] = f
let f = []
call add(f,{'word':'hscript_rand','kind':'f','menu':'float(const float)'})
call add(f,{'word':'hscript_rand','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'hscript_rand','kind':'f','menu':'vector(const float)'})
let c['hscript_rand'] = f
let f = []
call add(f,{'word':'hscript_snoise','kind':'f','menu':'float(const vector)'})
let c['hscript_snoise'] = f
let f = []
call add(f,{'word':'hscript_sturb','kind':'f','menu':'float(const vector,const int)'})
let c['hscript_sturb'] = f
let f = []
call add(f,{'word':'hscript_turb','kind':'f','menu':'float(const vector,const int)'})
let c['hscript_turb'] = f
let f = []
call add(f,{'word':'hsvtorgb','kind':'f','menu':'vector(const float,const float,const float)'})
call add(f,{'word':'hsvtorgb','kind':'f','menu':'vector(const vector)'})
let c['hsvtorgb'] = f
let f = []
call add(f,{'word':'iaspect','kind':'f','menu':'float(const int)'})
let c['iaspect'] = f
let f = []
call add(f,{'word':'ichname','kind':'f','menu':'string(const int,const int,const int)'})
let c['ichname'] = f
let f = []
call add(f,{'word':'ident','kind':'f','menu':'matrix2()'})
call add(f,{'word':'ident','kind':'f','menu':'matrix3()'})
call add(f,{'word':'ident','kind':'f','menu':'matrix()'})
let c['ident'] = f
let f = []
call add(f,{'word':'idtopoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'idtopoint','kind':'f','menu':'int(const string,const int)'})
let c['idtopoint'] = f
let f = []
call add(f,{'word':'idtoprim','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'idtoprim','kind':'f','menu':'int(const string,const int)'})
let c['idtoprim'] = f
let f = []
call add(f,{'word':'iend','kind':'f','menu':'int(const int)'})
let c['iend'] = f
let f = []
call add(f,{'word':'iendtime','kind':'f','menu':'float(const int)'})
let c['iendtime'] = f
let f = []
let c['if'] = f
let f = []
call add(f,{'word':'ihasplane','kind':'f','menu':'int(const int,const string)'})
let c['ihasplane'] = f
let f = []
call add(f,{'word':'inedgegroup','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'inedgegroup','kind':'f','menu':'int(const string,const string,const int,const int)'})
let c['inedgegroup'] = f
let f = []
call add(f,{'word':'inpointgroup','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'inpointgroup','kind':'f','menu':'int(const string,const string,const int)'})
let c['inpointgroup'] = f
let f = []
call add(f,{'word':'inprimgroup','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'inprimgroup','kind':'f','menu':'int(const string,const string,const int)'})
let c['inprimgroup'] = f
let f = []
call add(f,{'word':'insert','kind':'f','menu':'void(export string,const int,const string)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix2[],const int,const matrix2)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix2[],const int,const matrix2[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix3[],const int,const matrix3)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix3[],const int,const matrix3[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix[],const int,const matrix)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix[],const int,const matrix[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export float[],const int,const float)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export float[],const int,const float[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export int[],const int,const int)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export int[],const int,const int[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector4[],const int,const vector4)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector4[],const int,const vector4[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export string[],const int,const string)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export string[],const int,const string[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector2[],const int,const vector2)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector2[],const int,const vector2[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector[],const int,const vector)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector[],const int,const vector[])'})
let c['insert'] = f
let f = []
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector4,const vector4)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector4,const vector4,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector4,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector4,const vector,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector)'})
let c['instance'] = f
let f = []
call add(f,{'word':'integrate3d','kind':'f','menu':'float(const string,const string,const vector,const vector)'})
call add(f,{'word':'integrate3d','kind':'f','menu':'vector4(const string,const string,const vector,const vector)'})
call add(f,{'word':'integrate3d','kind':'f','menu':'vector(const string,const string,const vector,const vector)'})
let c['integrate3d'] = f
let f = []
call add(f,{'word':'integrate3dClip','kind':'f','menu':'int(const string,const string,export vector,export vector,const float)'})
let c['integrate3dClip'] = f
let f = []
call add(f,{'word':'interpolate','kind':'f','menu':'bsdf(const bsdf,const float,const float)'})
call add(f,{'word':'interpolate','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'interpolate','kind':'f','menu':'vector4(const vector4,const float,const float)'})
call add(f,{'word':'interpolate','kind':'f','menu':'vector(const vector,const float,const float)'})
let c['interpolate'] = f
let f = []
call add(f,{'word':'intersect','kind':'f','menu':'int(const int,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const int,const vector,const vector,vector,float,float)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const int,const vector,const vector,vector,vector)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const string,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const string,const vector,const vector,vector,float,float)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const string,const vector,const vector,vector,vector)'})
let c['intersect'] = f
let f = []
call add(f,{'word':'intersect3d','kind':'f','menu':'int(const string,const string,const vector,const vector,const float)'})
let c['intersect3d'] = f
let f = []
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const int,const string,const vector,const vector,vector[],int[],vector[])'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const int,const string,const vector,const vector,vector[],int[],vector[],const float,const float)'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const int,const vector,const vector,vector[],int[],vector[])'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const int,const vector,const vector,vector[],int[],vector[],const float,const float)'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const string,const string,const vector,const vector,vector[],int[],vector[])'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const string,const string,const vector,const vector,vector[],int[],vector[],const float,const float)'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const string,const vector,const vector,vector[],int[],vector[])'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const string,const vector,const vector,vector[],int[],vector[],const float,const float)'})
let c['intersect_all'] = f
let f = []
call add(f,{'word':'inumplanes','kind':'f','menu':'int(const int)'})
let c['inumplanes'] = f
let f = []
call add(f,{'word':'invert','kind':'f','menu':'matrix2(const matrix2)'})
call add(f,{'word':'invert','kind':'f','menu':'matrix3(const matrix3)'})
call add(f,{'word':'invert','kind':'f','menu':'matrix(const matrix)'})
let c['invert'] = f
let f = []
call add(f,{'word':'invertexgroup','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'invertexgroup','kind':'f','menu':'int(const string,const string,const int)'})
let c['invertexgroup'] = f
let f = []
call add(f,{'word':'iplaneindex','kind':'f','menu':'int(const int,const string)'})
let c['iplaneindex'] = f
let f = []
call add(f,{'word':'iplanename','kind':'f','menu':'string(const int,const int)'})
let c['iplanename'] = f
let f = []
call add(f,{'word':'iplanesize','kind':'f','menu':'int(const int,const int)'})
let c['iplanesize'] = f
let f = []
call add(f,{'word':'irate','kind':'f','menu':'float(const int)'})
let c['irate'] = f
let f = []
call add(f,{'word':'isalpha','kind':'f','menu':'int(const string)'})
let c['isalpha'] = f
let f = []
call add(f,{'word':'isbound','kind':'f','menu':'int(const string)'})
let c['isbound'] = f
let f = []
call add(f,{'word':'isconnected','kind':'f','menu':'int(const int)'})
let c['isconnected'] = f
let f = []
call add(f,{'word':'isdigit','kind':'f','menu':'int(const string)'})
let c['isdigit'] = f
let f = []
call add(f,{'word':'isfinite','kind':'f','menu':'int(const float)'})
let c['isfinite'] = f
let f = []
call add(f,{'word':'isnan','kind':'f','menu':'int(const float)'})
let c['isnan'] = f
let f = []
call add(f,{'word':'isotropic','kind':'f','menu':'bsdf()'})
let c['isotropic'] = f
let f = []
call add(f,{'word':'istart','kind':'f','menu':'int(const int)'})
let c['istart'] = f
let f = []
call add(f,{'word':'istarttime','kind':'f','menu':'float(const int)'})
let c['istarttime'] = f
let f = []
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(const string,const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export matrix2[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export matrix3[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export matrix[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export float[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export int[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export vector4[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export string[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export vector2[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export vector[],const int)'})
let c['isvalidindex'] = f
let f = []
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix2)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix3)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const bsdf)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const float)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const int)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector4)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const string)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector2)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix2[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix3[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const bsdf[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const float[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector4[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const string[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector2[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector[])'})
let c['isvarying'] = f
let f = []
call add(f,{'word':'itoa','kind':'f','menu':'string(const int)'})
let c['itoa'] = f
let f = []
call add(f,{'word':'ixres','kind':'f','menu':'int(const int)'})
let c['ixres'] = f
let f = []
call add(f,{'word':'iyres','kind':'f','menu':'int(const int)'})
let c['iyres'] = f
let f = []
call add(f,{'word':'join','kind':'f','menu':'string(const string[],const string)'})
let c['join'] = f
let f = []
let c['jump'] = f
let f = []
call add(f,{'word':'kspline','kind':'f','menu':'float(const string,const float,const float,const float)'})
call add(f,{'word':'kspline','kind':'f','menu':'vector4(const string,const float,const vector4,const float)'})
call add(f,{'word':'kspline','kind':'f','menu':'vector(const string,const float,const vector,const float)'})
let c['kspline'] = f
let f = []
let c['le'] = f
let f = []
call add(f,{'word':'len','kind':'f','menu':'int(const matrix2)'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix3)'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix)'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector4)'})
call add(f,{'word':'len','kind':'f','menu':'int(const string)'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector2)'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector)'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix2[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix3[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const bsdf[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const float[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector4[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const string[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector2[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector[])'})
let c['len'] = f
let f = []
call add(f,{'word':'length','kind':'f','menu':'float(const float)'})
call add(f,{'word':'length','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'length','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'length','kind':'f','menu':'float(const vector)'})
let c['length'] = f
let f = []
call add(f,{'word':'length2','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'length2','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'length2','kind':'f','menu':'float(const vector)'})
let c['length2'] = f
let f = []
call add(f,{'word':'lerp','kind':'f','menu':'bsdf(const bsdf,const bsdf,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector4(const vector4,const vector4,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector2(const vector2,const vector2,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector(const vector,const vector,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['lerp'] = f
let f = []
call add(f,{'word':'limit_sample_space','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'limit_sample_space','kind':'f','menu':'float(const float,const float,const float)'})
let c['limit_sample_space'] = f
let f = []
call add(f,{'word':'lkspline','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'lkspline','kind':'f','menu':'vector4(const float,const vector4,const float)'})
call add(f,{'word':'lkspline','kind':'f','menu':'vector(const float,const vector,const float)'})
let c['lkspline'] = f
let f = []
call add(f,{'word':'log','kind':'f','menu':'float(const float)'})
call add(f,{'word':'log','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'log','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'log','kind':'f','menu':'vector(const vector)'})
let c['log'] = f
let f = []
call add(f,{'word':'log10','kind':'f','menu':'float(const float)'})
call add(f,{'word':'log10','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'log10','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'log10','kind':'f','menu':'vector(const vector)'})
let c['log10'] = f
let f = []
call add(f,{'word':'lookat','kind':'f','menu':'matrix3(const vector,const vector)'})
call add(f,{'word':'lookat','kind':'f','menu':'matrix3(const vector,const vector,const float)'})
call add(f,{'word':'lookat','kind':'f','menu':'matrix3(const vector,const vector,const vector)'})
call add(f,{'word':'lookat','kind':'f','menu':'vector(const vector,const vector,const float,const int)'})
call add(f,{'word':'lookat','kind':'f','menu':'vector(const vector,const vector,const vector,const int)'})
let c['lookat'] = f
let f = []
let c['loop'] = f
let f = []
call add(f,{'word':'lspline','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'lspline','kind':'f','menu':'vector4(const float,const vector4)'})
call add(f,{'word':'lspline','kind':'f','menu':'vector(const float,const vector)'})
let c['lspline'] = f
let f = []
call add(f,{'word':'lstrip','kind':'f','menu':'string(const string)'})
call add(f,{'word':'lstrip','kind':'f','menu':'string(const string,const string)'})
let c['lstrip'] = f
let f = []
let c['lt'] = f
let f = []
call add(f,{'word':'luminance','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'luminance','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'luminance','kind':'f','menu':'float(const vector)'})
let c['luminance'] = f
let f = []
call add(f,{'word':'lumname','kind':'f','menu':'string()'})
let c['lumname'] = f
let f = []
call add(f,{'word':'makebasis','kind':'f','menu':'void(vector,vector,const vector)'})
call add(f,{'word':'makebasis','kind':'f','menu':'vector(vector,const vector)'})
call add(f,{'word':'makebasis','kind':'f','menu':'void(export vector,export vector,const vector,const vector)'})
let c['makebasis'] = f
let f = []
call add(f,{'word':'maketransform','kind':'f','menu':'matrix3(const int,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix3(const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const int,const int,const vector,const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const int,const int,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const int,const int,const vector,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const int,const int,const vector,const vector,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const vector,const vector,const vector)'})
let c['maketransform'] = f
let f = []
call add(f,{'word':'mask_bsdf','kind':'f','menu':'bsdf(const bsdf,const int)'})
let c['mask_bsdf'] = f
let f = []
call add(f,{'word':'maskname','kind':'f','menu':'string()'})
let c['maskname'] = f
let f = []
call add(f,{'word':'match','kind':'f','menu':'int(const string,const string)'})
let c['match'] = f
let f = []
call add(f,{'word':'matchvex_blinn','kind':'f','menu':'bsdf(const vector,const float)'})
let c['matchvex_blinn'] = f
let f = []
call add(f,{'word':'matchvex_specular','kind':'f','menu':'bsdf(const vector,const float)'})
let c['matchvex_specular'] = f
let f = []
call add(f,{'word':'max','kind':'f','menu':'float(const float)'})
call add(f,{'word':'max','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'max','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'max','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'max','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'max','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'max','kind':'f','menu':'int(const int)'})
call add(f,{'word':'max','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'max','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'max','kind':'f','menu':'vector4(const vector4,const vector4)'})
call add(f,{'word':'max','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'max','kind':'f','menu':'vector2(const vector2,const vector2)'})
call add(f,{'word':'max','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'max','kind':'f','menu':'vector(const vector,const vector)'})
call add(f,{'word':'max','kind':'f','menu':'vector(const vector[])'})
let c['max'] = f
let f = []
let c['measured'] = f
let f = []
let c['merge'] = f
let f = []
call add(f,{'word':'metadata','kind':'f','menu':'matrix2(const int,const string)'})
call add(f,{'word':'metadata','kind':'f','menu':'matrix3(const int,const string)'})
call add(f,{'word':'metadata','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'metadata','kind':'f','menu':'float(const int,const string)'})
call add(f,{'word':'metadata','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'metadata','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'metadata','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'metadata','kind':'f','menu':'vector4(const int,const string)'})
call add(f,{'word':'metadata','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'metadata','kind':'f','menu':'vector(const int,const string)'})
let c['metadata'] = f
let f = []
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,matrix2)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,matrix3)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,matrix)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,float)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,int)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,vector4)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,vector2)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'matrix3[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'matrix[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'float[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'vector4[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'vector[](const string,const string,const vector)'})
let c['metaimport'] = f
let f = []
call add(f,{'word':'metamarch','kind':'f','menu':'int(export int,const string,export vector,export vector,const float)'})
let c['metamarch'] = f
let f = []
call add(f,{'word':'metanext','kind':'f','menu':'int(const int)'})
let c['metanext'] = f
let f = []
call add(f,{'word':'metastart','kind':'f','menu':'int(const string,const vector)'})
let c['metastart'] = f
let f = []
call add(f,{'word':'metaweight','kind':'f','menu':'float(const string,const vector)'})
let c['metaweight'] = f
let f = []
call add(f,{'word':'min','kind':'f','menu':'float(const float)'})
call add(f,{'word':'min','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'min','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'min','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'min','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'min','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'min','kind':'f','menu':'int(const int)'})
call add(f,{'word':'min','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'min','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'min','kind':'f','menu':'vector4(const vector4,const vector4)'})
call add(f,{'word':'min','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'min','kind':'f','menu':'vector2(const vector2,const vector2)'})
call add(f,{'word':'min','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'min','kind':'f','menu':'vector(const vector,const vector)'})
call add(f,{'word':'min','kind':'f','menu':'vector(const vector[])'})
let c['min'] = f
let f = []
call add(f,{'word':'minpos','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const int,const string,const vector,const float)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const int,const vector)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const int,const vector,const float)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const string,const string,const vector,const float)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const string,const vector,const float)'})
let c['minpos'] = f
let f = []
let c['mod'] = f
let f = []
let c['mul'] = f
let f = []
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,const float,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,const float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,const float,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,const float,float,float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,const float,int,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,const float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,int,float,float,float,float,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,float,float,float,float,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,int,float,float,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,float,float,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector4,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector4,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector4,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector4,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector4,int,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector4,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector2,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector2,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector2,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector2,float,float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector2,int,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector2,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector,int,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector,int,float,float,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector,float,float,const int,const int,const int)'})
let c['mwnoise'] = f
let f = []
call add(f,{'word':'nametopoint','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nametopoint','kind':'f','menu':'int(const string,const string)'})
let c['nametopoint'] = f
let f = []
call add(f,{'word':'nametoprim','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nametoprim','kind':'f','menu':'int(const string,const string)'})
let c['nametoprim'] = f
let f = []
call add(f,{'word':'nbouncetypes','kind':'f','menu':'int()'})
let c['nbouncetypes'] = f
let f = []
let c['ne'] = f
let f = []
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const int,const string,const vector,const float)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const int,const vector)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const int,const vector,const float)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const string,const string,const vector)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const string,const string,const vector,const float)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const string,const vector)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const string,const vector,const float)'})
let c['nearpoint'] = f
let f = []
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const int,const string,const vector,const float)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const int,const string,const vector,const float,const int)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const int,const vector,const float)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const int,const vector,const float,const int)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const string,const string,const vector,const float)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const string,const string,const vector,const float,const int)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const string,const vector,const float)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const string,const vector,const float,const int)'})
let c['nearpoints'] = f
let f = []
call add(f,{'word':'nedgesgroup','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nedgesgroup','kind':'f','menu':'int(const string,const string)'})
let c['nedgesgroup'] = f
let f = []
let c['neg'] = f
let f = []
call add(f,{'word':'neighbour','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'neighbour','kind':'f','menu':'int(const string,const int,const int)'})
let c['neighbour'] = f
let f = []
call add(f,{'word':'neighbourcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'neighbourcount','kind':'f','menu':'int(const string,const int)'})
let c['neighbourcount'] = f
let f = []
call add(f,{'word':'neighbours','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'neighbours','kind':'f','menu':'int[](const string,const int)'})
let c['neighbours'] = f
let f = []
call add(f,{'word':'ninput','kind':'f','menu':'matrix3(const int,const int,const int,const int,const float,const float,const int)'})
call add(f,{'word':'ninput','kind':'f','menu':'matrix3(const int,const int,const int,const int,const int,const int,const int)'})
let c['ninput'] = f
let f = []
call add(f,{'word':'noise','kind':'f','menu':'float(const float)'})
call add(f,{'word':'noise','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'noise','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'noise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'noise','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'noise','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'noise','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'noise','kind':'f','menu':'vector(const vector)'})
let c['noise'] = f
let f = []
call add(f,{'word':'noised','kind':'f','menu':'void(const float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'float(const float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const float,const float,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'float(const float,const float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const float,const float,vector,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'vector(const float,const float,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const float,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'vector(const float,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const vector4,float,float,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'float(const vector4,float,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const vector4,vector,vector,vector,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'vector(const vector4,vector,vector,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const vector,float,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'float(const vector,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const vector,vector,vector,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'vector(const vector,vector,vector,vector)'})
let c['noised'] = f
let f = []
let c['nop'] = f
let f = []
call add(f,{'word':'normal_bsdf','kind':'f','menu':'vector(const bsdf)'})
let c['normal_bsdf'] = f
let f = []
call add(f,{'word':'normalize','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'normalize','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'normalize','kind':'f','menu':'vector(const vector)'})
let c['normalize'] = f
let f = []
call add(f,{'word':'normalname','kind':'f','menu':'string()'})
let c['normalname'] = f
let f = []
let c['not'] = f
let f = []
let c['notif'] = f
let f = []
call add(f,{'word':'npoints','kind':'f','menu':'int(const int)'})
call add(f,{'word':'npoints','kind':'f','menu':'int(const string)'})
let c['npoints'] = f
let f = []
call add(f,{'word':'npointsgroup','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'npointsgroup','kind':'f','menu':'int(const string,const string)'})
let c['npointsgroup'] = f
let f = []
call add(f,{'word':'nprimitives','kind':'f','menu':'int(const int)'})
call add(f,{'word':'nprimitives','kind':'f','menu':'int(const string)'})
let c['nprimitives'] = f
let f = []
call add(f,{'word':'nprimitivesgroup','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nprimitivesgroup','kind':'f','menu':'int(const string,const string)'})
let c['nprimitivesgroup'] = f
let f = []
call add(f,{'word':'nrandom','kind':'f','menu':'float()'})
call add(f,{'word':'nrandom','kind':'f','menu':'void(float,float)'})
call add(f,{'word':'nrandom','kind':'f','menu':'float(float)'})
call add(f,{'word':'nrandom','kind':'f','menu':'vector4()'})
call add(f,{'word':'nrandom','kind':'f','menu':'vector()'})
let c['nrandom'] = f
let f = []
call add(f,{'word':'ntransform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'ntransform','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'ntransform','kind':'f','menu':'vector(const vector,const matrix)'})
let c['ntransform'] = f
let f = []
call add(f,{'word':'nuniqueval','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'nuniqueval','kind':'f','menu':'int(const string,const string,const string)'})
let c['nuniqueval'] = f
let f = []
call add(f,{'word':'nvertices','kind':'f','menu':'int(const int)'})
call add(f,{'word':'nvertices','kind':'f','menu':'int(const string)'})
let c['nvertices'] = f
let f = []
call add(f,{'word':'nverticesgroup','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nverticesgroup','kind':'f','menu':'int(const string,const string)'})
let c['nverticesgroup'] = f
let f = []
call add(f,{'word':'ocean_sample','kind':'f','menu':'vector(const string,const int,const int,const int,const float,const float,const int,const int,const vector)'})
let c['ocean_sample'] = f
let f = []
call add(f,{'word':'ocio_activedisplays','kind':'f','menu':'string[]()'})
let c['ocio_activedisplays'] = f
let f = []
call add(f,{'word':'ocio_activeviews','kind':'f','menu':'string[]()'})
let c['ocio_activeviews'] = f
let f = []
call add(f,{'word':'ocio_import','kind':'f','menu':'int(const string,const string,int)'})
call add(f,{'word':'ocio_import','kind':'f','menu':'int(const string,const string,string)'})
call add(f,{'word':'ocio_import','kind':'f','menu':'int(const string,const string,vector)'})
let c['ocio_import'] = f
let f = []
call add(f,{'word':'ocio_roles','kind':'f','menu':'string[]()'})
let c['ocio_roles'] = f
let f = []
call add(f,{'word':'ocio_spaces','kind':'f','menu':'string[]()'})
let c['ocio_spaces'] = f
let f = []
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector4(const string,const vector4)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector4(const string,const string,const vector4)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector4(const string,const string,const string,const vector4)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector(const string,const string,const string,const vector)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector(const string,const vector)'})
let c['ocio_transform'] = f
let f = []
call add(f,{'word':'onoise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'onoise','kind':'f','menu':'float(const vector,const int,const float,const float)'})
call add(f,{'word':'onoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'onoise','kind':'f','menu':'float(const vector,const int,const int,const int,const int,const float,const float)'})
call add(f,{'word':'onoise','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'onoise','kind':'f','menu':'vector(const vector,const int,const float,const float)'})
call add(f,{'word':'onoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
call add(f,{'word':'onoise','kind':'f','menu':'vector(const vector,const int,const int,const int,const int,const float,const float)'})
let c['onoise'] = f
let f = []
call add(f,{'word':'opdigits','kind':'f','menu':'int()'})
call add(f,{'word':'opdigits','kind':'f','menu':'int(const string)'})
let c['opdigits'] = f
let f = []
call add(f,{'word':'opfullpath','kind':'f','menu':'string(const string)'})
let c['opfullpath'] = f
let f = []
call add(f,{'word':'opid','kind':'f','menu':'int(const int)'})
call add(f,{'word':'opid','kind':'f','menu':'int(const string)'})
let c['opid'] = f
let f = []
call add(f,{'word':'opparentbonetransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'opparentbonetransform','kind':'f','menu':'matrix(const string,const float)'})
let c['opparentbonetransform'] = f
let f = []
call add(f,{'word':'opparenttransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'opparenttransform','kind':'f','menu':'matrix(const string,const float)'})
let c['opparenttransform'] = f
let f = []
call add(f,{'word':'opparmtransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'opparmtransform','kind':'f','menu':'matrix(const string,const float)'})
let c['opparmtransform'] = f
let f = []
call add(f,{'word':'oppreconstrainttransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'oppreconstrainttransform','kind':'f','menu':'matrix(const string,const float)'})
let c['oppreconstrainttransform'] = f
let f = []
call add(f,{'word':'oppretransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'oppretransform','kind':'f','menu':'matrix(const string,const float)'})
let c['oppretransform'] = f
let f = []
call add(f,{'word':'optransform','kind':'f','menu':'matrix(const int)'})
call add(f,{'word':'optransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'optransform','kind':'f','menu':'matrix(const string,const float)'})
let c['optransform'] = f
let f = []
let c['or'] = f
let f = []
call add(f,{'word':'ord','kind':'f','menu':'int(const string)'})
let c['ord'] = f
let f = []
call add(f,{'word':'orthographic','kind':'f','menu':'matrix(const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'orthographic','kind':'f','menu':'matrix(const float,const float,const float,const float,const float,const float,const vector4)'})
let c['orthographic'] = f
let f = []
call add(f,{'word':'osd_facecount','kind':'f','menu':'int(const int)'})
call add(f,{'word':'osd_facecount','kind':'f','menu':'int(const string)'})
let c['osd_facecount'] = f
let f = []
call add(f,{'word':'osd_firstpatch','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'osd_firstpatch','kind':'f','menu':'int(const string,const int)'})
let c['osd_firstpatch'] = f
let f = []
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix2)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix3)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,float)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector4)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector2)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,float[])'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix2)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix3)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,float)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector4)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector2)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,float[])'})
let c['osd_limitsurface'] = f
let f = []
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix2)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix3)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,float)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector4)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector2)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,float[])'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix2)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix3)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,float)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector4)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector2)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,float[])'})
let c['osd_limitsurfacevertex'] = f
let f = []
call add(f,{'word':'osd_lookupface','kind':'f','menu':'int(const int,const int,const float,const float,int,float,float)'})
call add(f,{'word':'osd_lookupface','kind':'f','menu':'int(const int,const int,const float,const float,int,float,float,const string)'})
call add(f,{'word':'osd_lookupface','kind':'f','menu':'int(const string,const int,const float,const float,int,float,float)'})
call add(f,{'word':'osd_lookupface','kind':'f','menu':'int(const string,const int,const float,const float,int,float,float,const string)'})
let c['osd_lookupface'] = f
let f = []
call add(f,{'word':'osd_lookuppatch','kind':'f','menu':'int(const int,const int,const float,const float,int,float,float)'})
call add(f,{'word':'osd_lookuppatch','kind':'f','menu':'int(const int,const int,const float,const float,int,float,float,const string)'})
call add(f,{'word':'osd_lookuppatch','kind':'f','menu':'int(const string,const int,const float,const float,int,float,float)'})
call add(f,{'word':'osd_lookuppatch','kind':'f','menu':'int(const string,const int,const float,const float,int,float,float,const string)'})
let c['osd_lookuppatch'] = f
let f = []
call add(f,{'word':'osd_patchcount','kind':'f','menu':'int(const int)'})
call add(f,{'word':'osd_patchcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'osd_patchcount','kind':'f','menu':'int(const string)'})
call add(f,{'word':'osd_patchcount','kind':'f','menu':'int(const string,const int)'})
let c['osd_patchcount'] = f
let f = []
call add(f,{'word':'osd_patches','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'osd_patches','kind':'f','menu':'int[](const string,const int)'})
let c['osd_patches'] = f
let f = []
call add(f,{'word':'outerproduct','kind':'f','menu':'matrix2(const vector2,const vector2)'})
call add(f,{'word':'outerproduct','kind':'f','menu':'matrix3(const vector,const vector)'})
call add(f,{'word':'outerproduct','kind':'f','menu':'matrix(const vector4,const vector4)'})
let c['outerproduct'] = f
let f = []
call add(f,{'word':'ow_nspace','kind':'f','menu':'vector(const vector)'})
let c['ow_nspace'] = f
let f = []
call add(f,{'word':'ow_space','kind':'f','menu':'matrix()'})
call add(f,{'word':'ow_space','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'ow_space','kind':'f','menu':'vector(const vector)'})
let c['ow_space'] = f
let f = []
call add(f,{'word':'ow_vspace','kind':'f','menu':'vector(const vector)'})
let c['ow_vspace'] = f
let f = []
call add(f,{'word':'pack_inttosafefloat','kind':'f','menu':'float(const int)'})
let c['pack_inttosafefloat'] = f
let f = []
call add(f,{'word':'packedtransform','kind':'f','menu':'void(const int,const int,const matrix)'})
let c['packedtransform'] = f
let f = []
call add(f,{'word':'pcclose','kind':'f','menu':'void(export int)'})
let c['pcclose'] = f
let f = []
call add(f,{'word':'pcconvex','kind':'f','menu':'float(const int,const string,const vector)'})
let c['pcconvex'] = f
let f = []
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const vector,const float)'})
let c['pcexport'] = f
let f = []
call add(f,{'word':'pcfarthest','kind':'f','menu':'float(const int)'})
let c['pcfarthest'] = f
let f = []
call add(f,{'word':'pcfilter','kind':'f','menu':'matrix3(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'float(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'vector4(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'vector(const int,const string)'})
let c['pcfilter'] = f
let f = []
call add(f,{'word':'pcfind','kind':'f','menu':'int[](const int,const string,const string,const vector,const float,const int)'})
call add(f,{'word':'pcfind','kind':'f','menu':'int[](const int,const string,const vector,const float,const int)'})
call add(f,{'word':'pcfind','kind':'f','menu':'int[](const string,const string,const string,const vector,const float,const int)'})
call add(f,{'word':'pcfind','kind':'f','menu':'int[](const string,const string,const vector,const float,const int)'})
let c['pcfind'] = f
let f = []
call add(f,{'word':'pcfind_radius','kind':'f','menu':'int[](const int,const string,const string,const float,const vector,const float,const int)'})
call add(f,{'word':'pcfind_radius','kind':'f','menu':'int[](const int,const string,const string,const string,const float,const vector,const float,const int)'})
call add(f,{'word':'pcfind_radius','kind':'f','menu':'int[](const string,const string,const string,const float,const vector,const float,const int)'})
call add(f,{'word':'pcfind_radius','kind':'f','menu':'int[](const string,const string,const string,const string,const float,const vector,const float,const int)'})
let c['pcfind_radius'] = f
let f = []
call add(f,{'word':'pcgenerate','kind':'f','menu':'int(const string,const int)'})
let c['pcgenerate'] = f
let f = []
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,matrix3)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,matrix)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,float)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,int)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,vector4)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,string)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,vector)'})
let c['pcimport'] = f
let f = []
call add(f,{'word':'pcimportbyidx3','kind':'f','menu':'matrix3(const int,const string,const int)'})
let c['pcimportbyidx3'] = f
let f = []
call add(f,{'word':'pcimportbyidx4','kind':'f','menu':'matrix(const int,const string,const int)'})
let c['pcimportbyidx4'] = f
let f = []
call add(f,{'word':'pcimportbyidxf','kind':'f','menu':'float(const int,const string,const int)'})
let c['pcimportbyidxf'] = f
let f = []
call add(f,{'word':'pcimportbyidxi','kind':'f','menu':'int(const int,const string,const int)'})
let c['pcimportbyidxi'] = f
let f = []
call add(f,{'word':'pcimportbyidxp','kind':'f','menu':'vector4(const int,const string,const int)'})
let c['pcimportbyidxp'] = f
let f = []
call add(f,{'word':'pcimportbyidxs','kind':'f','menu':'string(const int,const string,const int)'})
let c['pcimportbyidxs'] = f
let f = []
call add(f,{'word':'pcimportbyidxv','kind':'f','menu':'vector(const int,const string,const int)'})
let c['pcimportbyidxv'] = f
let f = []
call add(f,{'word':'pciterate','kind':'f','menu':'int(const int)'})
let c['pciterate'] = f
let f = []
call add(f,{'word':'pcnumfound','kind':'f','menu':'int(const int)'})
let c['pcnumfound'] = f
let f = []
call add(f,{'word':'pcopen','kind':'f','menu':'int(const int,const string,const vector,const float,const int)'})
call add(f,{'word':'pcopen','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'pcopen','kind':'f','menu':'int(const string,const string,const vector,const float,const int)'})
call add(f,{'word':'pcopen','kind':'f','menu':'int(const string,const string,const vector,const string,const vector,const float,const int)'})
let c['pcopen'] = f
let f = []
call add(f,{'word':'pcopenlod','kind':'f','menu':'int(const string,const string,const vector,const int)'})
let c['pcopenlod'] = f
let f = []
call add(f,{'word':'pcsampleleaf','kind':'f','menu':'void(const int,const float)'})
let c['pcsampleleaf'] = f
let f = []
call add(f,{'word':'pcsize','kind':'f','menu':'int(const int)'})
let c['pcsize'] = f
let f = []
call add(f,{'word':'pcunshaded','kind':'f','menu':'int(const int,const string)'})
let c['pcunshaded'] = f
let f = []
call add(f,{'word':'pcwrite','kind':'f','menu':'int(const string)'})
let c['pcwrite'] = f
let f = []
call add(f,{'word':'perspective','kind':'f','menu':'matrix(const float,const float,const float,const float,const float)'})
call add(f,{'word':'perspective','kind':'f','menu':'matrix(const float,const float,const float,const float,const float,const vector4)'})
let c['perspective'] = f
let f = []
call add(f,{'word':'pgfind','kind':'f','menu':'int[](const int,const string,const vector,const float,const int,const float)'})
call add(f,{'word':'pgfind','kind':'f','menu':'int[](const int,const vector,const float,const int,const float)'})
call add(f,{'word':'pgfind','kind':'f','menu':'int[](const string,const string,const vector,const float,const int,const float)'})
call add(f,{'word':'pgfind','kind':'f','menu':'int[](const string,const vector,const float,const int,const float)'})
let c['pgfind'] = f
let f = []
call add(f,{'word':'phongBRDF','kind':'f','menu':'float(const vector,const vector,const vector,const float)'})
let c['phongBRDF'] = f
let f = []
call add(f,{'word':'phonglobe','kind':'f','menu':'bsdf(const vector,const vector,const float,const float,const vector,const vector)'})
call add(f,{'word':'phonglobe','kind':'f','menu':'bsdf(const vector,const vector,const float)'})
let c['phonglobe'] = f
let f = []
call add(f,{'word':'photonmap','kind':'f','menu':'vector(const string,const vector,const vector)'})
call add(f,{'word':'photonmap','kind':'f','menu':'void(const string,const vector,const vector,vector,float)'})
call add(f,{'word':'photonmap','kind':'f','menu':'vector(const string,const vector,const vector,float)'})
let c['photonmap'] = f
let f = []
call add(f,{'word':'planeindex','kind':'f','menu':'int(const string)'})
let c['planeindex'] = f
let f = []
call add(f,{'word':'planename','kind':'f','menu':'string(const int)'})
let c['planename'] = f
let f = []
call add(f,{'word':'planepointdistance','kind':'f','menu':'float(const vector,const vector,const vector,vector)'})
let c['planepointdistance'] = f
let f = []
call add(f,{'word':'planesize','kind':'f','menu':'int(const int)'})
let c['planesize'] = f
let f = []
call add(f,{'word':'planesphereintersect','kind':'f','menu':'int(const vector,const vector,const vector,const float,vector,float,float)'})
let c['planesphereintersect'] = f
let f = []
call add(f,{'word':'pluralize','kind':'f','menu':'string(const string)'})
let c['pluralize'] = f
let f = []
call add(f,{'word':'pnoise','kind':'f','menu':'float(const float,const float,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const float,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const vector4,const vector4)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const vector,const vector)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const float,const float,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const float,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const vector4,const vector4)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const vector,const vector)'})
let c['pnoise'] = f
let f = []
call add(f,{'word':'point','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector[](const string,const string,const int)'})
let c['point'] = f
let f = []
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix2(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix2(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix3(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix3(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'float(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'float(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'int(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'int(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector4(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector4(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'string(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'string(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector2(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector2(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix2[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix2[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix3[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix3[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'float[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'float[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'int[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'int[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector4[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector4[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'string[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'string[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector2[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector2[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector[](const string,const string,const int,int)'})
let c['pointattrib'] = f
let f = []
call add(f,{'word':'pointattribsize','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'pointattribsize','kind':'f','menu':'int(const string,const string)'})
let c['pointattribsize'] = f
let f = []
call add(f,{'word':'pointattribtype','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'pointattribtype','kind':'f','menu':'int(const string,const string)'})
let c['pointattribtype'] = f
let f = []
call add(f,{'word':'pointattribtypeinfo','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'pointattribtypeinfo','kind':'f','menu':'string(const string,const string)'})
let c['pointattribtypeinfo'] = f
let f = []
call add(f,{'word':'pointedge','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'pointedge','kind':'f','menu':'int(const string,const int,const int)'})
let c['pointedge'] = f
let f = []
call add(f,{'word':'pointhedge','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'pointhedge','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'pointhedge','kind':'f','menu':'int(const string,const int)'})
call add(f,{'word':'pointhedge','kind':'f','menu':'int(const string,const int,const int)'})
let c['pointhedge'] = f
let f = []
call add(f,{'word':'pointhedgenext','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'pointhedgenext','kind':'f','menu':'int(const string,const int)'})
let c['pointhedgenext'] = f
let f = []
call add(f,{'word':'pointname','kind':'f','menu':'string()'})
let c['pointname'] = f
let f = []
call add(f,{'word':'pointprims','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'pointprims','kind':'f','menu':'int[](const string,const int)'})
let c['pointprims'] = f
let f = []
call add(f,{'word':'pointvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'pointvertex','kind':'f','menu':'int(const string,const int)'})
let c['pointvertex'] = f
let f = []
call add(f,{'word':'pointvertices','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'pointvertices','kind':'f','menu':'int[](const string,const int)'})
let c['pointvertices'] = f
let f = []
call add(f,{'word':'polardecomp','kind':'f','menu':'matrix3(const matrix3)'})
let c['polardecomp'] = f
let f = []
call add(f,{'word':'polyneighbours','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'polyneighbours','kind':'f','menu':'int[](const string,const int)'})
let c['polyneighbours'] = f
let f = []
call add(f,{'word':'pop','kind':'f','menu':'matrix2(export matrix2[])'})
call add(f,{'word':'pop','kind':'f','menu':'matrix2(export matrix2[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'matrix3(export matrix3[])'})
call add(f,{'word':'pop','kind':'f','menu':'matrix3(export matrix3[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'matrix(export matrix[])'})
call add(f,{'word':'pop','kind':'f','menu':'matrix(export matrix[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'bsdf(export bsdf[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'bsdf(export bsdf[])'})
call add(f,{'word':'pop','kind':'f','menu':'float(export float[])'})
call add(f,{'word':'pop','kind':'f','menu':'float(export float[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'int(export int[])'})
call add(f,{'word':'pop','kind':'f','menu':'int(export int[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'vector4(export vector4[])'})
call add(f,{'word':'pop','kind':'f','menu':'vector4(export vector4[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'string(export string[])'})
call add(f,{'word':'pop','kind':'f','menu':'string(export string[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'vector2(export vector2[])'})
call add(f,{'word':'pop','kind':'f','menu':'vector2(export vector2[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'vector(export vector[])'})
call add(f,{'word':'pop','kind':'f','menu':'vector(export vector[],const int)'})
let c['pop'] = f
let f = []
let c['popinline'] = f
let f = []
call add(f,{'word':'pow','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'pow','kind':'f','menu':'vector4(const vector4,const float)'})
call add(f,{'word':'pow','kind':'f','menu':'vector2(const vector2,const float)'})
call add(f,{'word':'pow','kind':'f','menu':'vector(const vector,const float)'})
let c['pow'] = f
let f = []
call add(f,{'word':'predicate_incircle','kind':'f','menu':'float(const vector2,const vector2,const vector2,const vector2)'})
let c['predicate_incircle'] = f
let f = []
call add(f,{'word':'predicate_insphere','kind':'f','menu':'float(const vector,const vector,const vector,const vector,const vector)'})
let c['predicate_insphere'] = f
let f = []
call add(f,{'word':'predicate_orient2d','kind':'f','menu':'float(const vector2,const vector2,const vector2)'})
let c['predicate_orient2d'] = f
let f = []
call add(f,{'word':'predicate_orient3d','kind':'f','menu':'float(const vector,const vector,const vector,const vector)'})
let c['predicate_orient3d'] = f
let f = []
call add(f,{'word':'prerotate','kind':'f','menu':'void(export matrix3,const float,const vector)'})
call add(f,{'word':'prerotate','kind':'f','menu':'void(export matrix3,const vector,const int)'})
call add(f,{'word':'prerotate','kind':'f','menu':'void(export matrix,const float,const vector)'})
call add(f,{'word':'prerotate','kind':'f','menu':'void(export matrix,const vector,const int)'})
let c['prerotate'] = f
let f = []
call add(f,{'word':'prescale','kind':'f','menu':'void(export matrix3,const vector)'})
call add(f,{'word':'prescale','kind':'f','menu':'void(export matrix,const vector)'})
let c['prescale'] = f
let f = []
call add(f,{'word':'pretranslate','kind':'f','menu':'void(export matrix,const vector)'})
let c['pretranslate'] = f
let f = []
call add(f,{'word':'prim','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector[](const string,const string,const int)'})
let c['prim'] = f
let f = []
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix2,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix3,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix3,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,float,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,float,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,int,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,int,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector4,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector4,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector2,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix2[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix3[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,float[],const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,float[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,int[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector4[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector2[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector[],const string,const int,const vector)'})
let c['prim_attribute'] = f
let f = []
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const int,const int,const float,const float)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const int,const int,const float,const float,const float)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const string,const int,const float,const float)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const string,const int,const float,const float,const float)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const string,const int,const vector)'})
let c['prim_normal'] = f
let f = []
call add(f,{'word':'primarclen','kind':'f','menu':'float(const string,const vector2,const vector2,const int)'})
call add(f,{'word':'primarclen','kind':'f','menu':'float(const string,const vector2,const vector2,const int,const int)'})
let c['primarclen'] = f
let f = []
call add(f,{'word':'primattrib','kind':'f','menu':'matrix2(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix2(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix3(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix3(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'float(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'float(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'int(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'int(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector4(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector4(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'string(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'string(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector2(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector2(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix2[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix2[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix3[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix3[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'float[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'float[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'int[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'int[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector4[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector4[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'string[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'string[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector2[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector2[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector[](const string,const string,const int,int)'})
let c['primattrib'] = f
let f = []
call add(f,{'word':'primattribsize','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'primattribsize','kind':'f','menu':'int(const string,const string)'})
let c['primattribsize'] = f
let f = []
call add(f,{'word':'primattribtype','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'primattribtype','kind':'f','menu':'int(const string,const string)'})
let c['primattribtype'] = f
let f = []
call add(f,{'word':'primattribtypeinfo','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'primattribtypeinfo','kind':'f','menu':'string(const string,const string)'})
let c['primattribtypeinfo'] = f
let f = []
call add(f,{'word':'primduv','kind':'f','menu':'vector(const string,const int,const vector2,const int,const int)'})
let c['primduv'] = f
let f = []
call add(f,{'word':'primfind','kind':'f','menu':'int[](const int,const string,const vector,const vector)'})
call add(f,{'word':'primfind','kind':'f','menu':'int[](const int,const vector,const vector)'})
call add(f,{'word':'primfind','kind':'f','menu':'int[](const string,const string,const vector,const vector)'})
call add(f,{'word':'primfind','kind':'f','menu':'int[](const string,const vector,const vector)'})
let c['primfind'] = f
let f = []
call add(f,{'word':'primhedge','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'primhedge','kind':'f','menu':'int(const string,const int)'})
let c['primhedge'] = f
let f = []
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector[](const string,const string,const int)'})
let c['primintrinsic'] = f
let f = []
call add(f,{'word':'primpoint','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'primpoint','kind':'f','menu':'int(const string,const int,const int)'})
let c['primpoint'] = f
let f = []
call add(f,{'word':'primpoints','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'primpoints','kind':'f','menu':'int[](const string,const int)'})
let c['primpoints'] = f
let f = []
call add(f,{'word':'primuv','kind':'f','menu':'matrix2(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix2(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix3(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix3(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'float(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'float(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'int(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'int(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector4(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector4(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector2(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector2(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix2[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix2[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix3[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix3[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'float[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'float[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'int[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'int[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector4[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector4[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector2[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector2[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector[](const string,const string,const int,const vector)'})
let c['primuv'] = f
let f = []
call add(f,{'word':'primuvconvert','kind':'f','menu':'vector2(const string,const vector2,const int,const int)'})
call add(f,{'word':'primuvconvert','kind':'f','menu':'vector2(const string,const vector2,const int,const int,const float)'})
let c['primuvconvert'] = f
let f = []
call add(f,{'word':'primvertex','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'primvertex','kind':'f','menu':'int(const string,const int,const int)'})
let c['primvertex'] = f
let f = []
call add(f,{'word':'primvertexcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'primvertexcount','kind':'f','menu':'int(const string,const int)'})
let c['primvertexcount'] = f
let f = []
call add(f,{'word':'primvertices','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'primvertices','kind':'f','menu':'int[](const string,const int)'})
let c['primvertices'] = f
let f = []
call add(f,{'word':'print_once','kind':'f','menu':'void(const string)'})
let c['print_once'] = f
let f = []
call add(f,{'word':'printf','kind':'f','menu':'void(const string)'})
let c['printf'] = f
let f = []
call add(f,{'word':'product','kind':'f','menu':'float(const float)'})
call add(f,{'word':'product','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'product','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'product','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'product','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'product','kind':'f','menu':'int(const int)'})
call add(f,{'word':'product','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'product','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'product','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'product','kind':'f','menu':'vector(const vector[])'})
let c['product'] = f
let f = []
call add(f,{'word':'ptexture','kind':'f','menu':'matrix3(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'matrix3(const string,const int,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'matrix(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'matrix(const string,const int,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'float(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'float(const string,const int,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector4(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector4(const string,const int,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector(const string,const int,const float,const float,const float,const float,const float,const float)'})
let c['ptexture'] = f
let f = []
call add(f,{'word':'ptlined','kind':'f','menu':'float(const vector,const vector,const vector)'})
let c['ptlined'] = f
let f = []
call add(f,{'word':'ptransform','kind':'f','menu':'vector4(const vector4,const matrix)'})
call add(f,{'word':'ptransform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'ptransform','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'ptransform','kind':'f','menu':'vector(const vector,const matrix)'})
let c['ptransform'] = f
let f = []
call add(f,{'word':'push','kind':'f','menu':'void(export matrix2[],const matrix2)'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix2[],const matrix2[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix3[],const matrix3)'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix3[],const matrix3[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix[],const matrix)'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix[],const matrix[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export bsdf[],const bsdf)'})
call add(f,{'word':'push','kind':'f','menu':'void(export bsdf[],const bsdf[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export float[],const float)'})
call add(f,{'word':'push','kind':'f','menu':'void(export float[],const float[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export int[],const int)'})
call add(f,{'word':'push','kind':'f','menu':'void(export int[],const int[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector4[],const vector4)'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector4[],const vector4[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export string[],const string)'})
call add(f,{'word':'push','kind':'f','menu':'void(export string[],const string[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector2[],const vector2)'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector2[],const vector2[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector[],const vector)'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector[],const vector[])'})
let c['push'] = f
let f = []
let c['pushinline'] = f
let f = []
call add(f,{'word':'pxnoise','kind':'f','menu':'float(const float,const float,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'float(const float,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'float(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'vector(const float,const float,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'vector(const float,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'vector(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
let c['pxnoise'] = f
let f = []
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const float,const float,const int,const int,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'float(const float,const float,const int,const int,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const float,const float,const int,const int,vector,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'vector(const float,const float,const int,const int,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const float,const int,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'float(const float,const int,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const float,const int,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'vector(const float,const int,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const vector4,const int,const int,const int,const int,float,float,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'float(const vector4,const int,const int,const int,const int,float,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const vector4,const int,const int,const int,const int,vector,vector,vector,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'vector(const vector4,const int,const int,const int,const int,vector,vector,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const vector,const int,const int,const int,float,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'float(const vector,const int,const int,const int,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const vector,const int,const int,const int,vector,vector,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'vector(const vector,const int,const int,const int,vector,vector,vector)'})
let c['pxnoised'] = f
let f = []
call add(f,{'word':'qconvert','kind':'f','menu':'matrix3(const vector4)'})
call add(f,{'word':'qconvert','kind':'f','menu':'vector(const vector4)'})
let c['qconvert'] = f
let f = []
call add(f,{'word':'qdistance','kind':'f','menu':'float(const vector4,const vector4)'})
let c['qdistance'] = f
let f = []
call add(f,{'word':'qinvert','kind':'f','menu':'vector4(const vector4)'})
let c['qinvert'] = f
let f = []
call add(f,{'word':'qmultiply','kind':'f','menu':'vector4(const vector4,const vector4)'})
let c['qmultiply'] = f
let f = []
call add(f,{'word':'qrotate','kind':'f','menu':'vector(const vector4,const vector)'})
let c['qrotate'] = f
let f = []
call add(f,{'word':'quaternion','kind':'f','menu':'vector4(const matrix3)'})
call add(f,{'word':'quaternion','kind':'f','menu':'vector4(const float,const vector)'})
call add(f,{'word':'quaternion','kind':'f','menu':'vector4(const vector)'})
let c['quaternion'] = f
let f = []
call add(f,{'word':'quaterniontoeuler','kind':'f','menu':'vector(const vector4,const int)'})
let c['quaterniontoeuler'] = f
let f = []
call add(f,{'word':'radians','kind':'f','menu':'float(const float)'})
call add(f,{'word':'radians','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'radians','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'radians','kind':'f','menu':'vector(const vector)'})
let c['radians'] = f
let f = []
call add(f,{'word':'rand','kind':'f','menu':'float(const float)'})
call add(f,{'word':'rand','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'rand','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'rand','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'rand','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const float,const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const vector2)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const vector)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const float,const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const vector4)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const vector)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const vector2)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const vector)'})
let c['rand'] = f
let f = []
call add(f,{'word':'random','kind':'f','menu':'float(const float)'})
call add(f,{'word':'random','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'random','kind':'f','menu':'float(const int)'})
call add(f,{'word':'random','kind':'f','menu':'float(const int,const int)'})
call add(f,{'word':'random','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'random','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const float,const float)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const int,const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const vector)'})
call add(f,{'word':'random','kind':'f','menu':'vector2(const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const vector)'})
let c['random'] = f
let f = []
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const float)'})
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const float,const float)'})
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const vector4)'})
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const vector2)'})
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const vector)'})
let c['random_fhash'] = f
let f = []
let c['random_hash'] = f
let f = []
call add(f,{'word':'random_ihash','kind':'f','menu':'int(const int)'})
let c['random_ihash'] = f
let f = []
call add(f,{'word':'random_poisson','kind':'f','menu':'int(const int,const float)'})
call add(f,{'word':'random_poisson','kind':'f','menu':'int(const int,const float,const int,const int)'})
let c['random_poisson'] = f
let f = []
call add(f,{'word':'random_shash','kind':'f','menu':'int(const string)'})
let c['random_shash'] = f
let f = []
call add(f,{'word':'random_sobol','kind':'f','menu':'float(const float,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'float(const int,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'float(const vector4,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'float(const vector,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector4(const float,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector4(const int,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector4(const vector4,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector4(const vector,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector(const float,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector(const vector4,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector(const vector,const int)'})
let c['random_sobol'] = f
let f = []
call add(f,{'word':'randomf','kind':'f','menu':'float(const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'randomf','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector4(const float,const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector4(const vector)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector(const vector)'})
let c['randomf'] = f
let f = []
call add(f,{'word':'rawbumpmap','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmap','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmap','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmap','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmap'] = f
let f = []
call add(f,{'word':'rawbumpmapA','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapA','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapA','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapA','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapA'] = f
let f = []
call add(f,{'word':'rawbumpmapB','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapB','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapB','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapB','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapB'] = f
let f = []
call add(f,{'word':'rawbumpmapG','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapG','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapG','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapG','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapG'] = f
let f = []
call add(f,{'word':'rawbumpmapL','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapL','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapL','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapL','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapL'] = f
let f = []
call add(f,{'word':'rawbumpmapR','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapR','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapR','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapR','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapR'] = f
let f = []
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const float,const float)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const float,const float,const float,const float,const float,const float,const float,const float,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const vector)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const float,const float)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const float,const float,const float,const float,const float,const float,const float,const float,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector,const int)'})
let c['rawcolormap'] = f
let f = []
call add(f,{'word':'re_find','kind':'f','menu':'int(const string,const string)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(const string,const string,const int,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(int[],int[],const string,const string)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(int[],int[],const string,const string,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(int[],int[],const string,const string,const int,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'string(const string,const string)'})
call add(f,{'word':'re_find','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'string(const string,const string,const int,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'re_find','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'string[](const string,const string,const int,const int)'})
let c['re_find'] = f
let f = []
call add(f,{'word':'re_findall','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'re_findall','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'re_findall','kind':'f','menu':'string[](const string,const string,const int,const int)'})
let c['re_findall'] = f
let f = []
call add(f,{'word':'re_match','kind':'f','menu':'int(const string,const string)'})
let c['re_match'] = f
let f = []
call add(f,{'word':'re_replace','kind':'f','menu':'string(const string,const string,const string)'})
call add(f,{'word':'re_replace','kind':'f','menu':'string(const string,const string,const string,const int)'})
let c['re_replace'] = f
let f = []
call add(f,{'word':'re_split','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'re_split','kind':'f','menu':'string[](const string,const string,const int)'})
let c['re_split'] = f
let f = []
call add(f,{'word':'reflect','kind':'f','menu':'vector(const vector,const vector)'})
let c['reflect'] = f
let f = []
call add(f,{'word':'refract','kind':'f','menu':'vector(const vector,const vector,const float)'})
let c['refract'] = f
let f = []
call add(f,{'word':'relativepath','kind':'f','menu':'string(const string,const string)'})
let c['relativepath'] = f
let f = []
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const int,const vector)'})
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const vector)'})
let c['relbbox'] = f
let f = []
call add(f,{'word':'relpointbbox','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'relpointbbox','kind':'f','menu':'vector(const int,const vector)'})
call add(f,{'word':'relpointbbox','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'relpointbbox','kind':'f','menu':'vector(const string,const vector)'})
let c['relpointbbox'] = f
let f = []
call add(f,{'word':'removeindex','kind':'f','menu':'matrix2(export matrix2[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'matrix3(export matrix3[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'matrix(export matrix[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'float(export float[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'int(export int[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'vector4(export vector4[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'string(export string[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'vector2(export vector2[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'vector(export vector[],const int)'})
let c['removeindex'] = f
let f = []
call add(f,{'word':'removepoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'removepoint','kind':'f','menu':'int(const int,const int,const int)'})
let c['removepoint'] = f
let f = []
call add(f,{'word':'removeprim','kind':'f','menu':'int(const int,const int,const int)'})
let c['removeprim'] = f
let f = []
call add(f,{'word':'removevalue','kind':'f','menu':'int(export matrix2[],const matrix2)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export matrix3[],const matrix3)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export matrix[],const matrix)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export float[],const float)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export int[],const int)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export vector4[],const vector4)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export string[],const string)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export vector2[],const vector2)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export vector[],const vector)'})
let c['removevalue'] = f
let f = []
call add(f,{'word':'reorder','kind':'f','menu':'string(const string,const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'matrix2[](const matrix2[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'matrix3[](const matrix3[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'matrix[](const matrix[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'float[](const float[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'int[](const int[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'vector4[](const vector4[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'string[](const string[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'vector2[](const vector2[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'vector[](const vector[],const int[])'})
let c['reorder'] = f
let f = []
call add(f,{'word':'resample_linear','kind':'f','menu':'float[](const float[],const int)'})
call add(f,{'word':'resample_linear','kind':'f','menu':'vector4[](const vector4[],const int)'})
call add(f,{'word':'resample_linear','kind':'f','menu':'vector2[](const vector2[],const int)'})
call add(f,{'word':'resample_linear','kind':'f','menu':'vector[](const vector[],const int)'})
let c['resample_linear'] = f
let f = []
call add(f,{'word':'resize','kind':'f','menu':'void(export matrix2[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export matrix3[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export matrix[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export bsdf[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export float[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export int[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export vector4[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export string[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export vector2[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export vector[],const int)'})
let c['resize'] = f
let f = []
let c['returninline'] = f
let f = []
call add(f,{'word':'reverse','kind':'f','menu':'string(const string)'})
call add(f,{'word':'reverse','kind':'f','menu':'matrix2[](const matrix2[])'})
call add(f,{'word':'reverse','kind':'f','menu':'matrix3[](const matrix3[])'})
call add(f,{'word':'reverse','kind':'f','menu':'matrix[](const matrix[])'})
call add(f,{'word':'reverse','kind':'f','menu':'float[](const float[])'})
call add(f,{'word':'reverse','kind':'f','menu':'int[](const int[])'})
call add(f,{'word':'reverse','kind':'f','menu':'vector4[](const vector4[])'})
call add(f,{'word':'reverse','kind':'f','menu':'string[](const string[])'})
call add(f,{'word':'reverse','kind':'f','menu':'vector2[](const vector2[])'})
call add(f,{'word':'reverse','kind':'f','menu':'vector[](const vector[])'})
let c['reverse'] = f
let f = []
call add(f,{'word':'rgbtohsv','kind':'f','menu':'vector(const float,const float,const float)'})
call add(f,{'word':'rgbtohsv','kind':'f','menu':'vector(const vector)'})
let c['rgbtohsv'] = f
let f = []
call add(f,{'word':'rgbtoxyz','kind':'f','menu':'vector(const vector)'})
let c['rgbtoxyz'] = f
let f = []
call add(f,{'word':'rint','kind':'f','menu':'float(const float)'})
call add(f,{'word':'rint','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'rint','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'rint','kind':'f','menu':'vector(const vector)'})
let c['rint'] = f
let f = []
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix2,const float)'})
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix3,const float,const vector)'})
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix3,const vector,const int)'})
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix,const float,const vector)'})
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix,const vector,const int)'})
let c['rotate'] = f
let f = []
call add(f,{'word':'rotate_x_to','kind':'f','menu':'vector4(const vector4,const vector4)'})
call add(f,{'word':'rotate_x_to','kind':'f','menu':'vector2(const vector2,const vector2)'})
call add(f,{'word':'rotate_x_to','kind':'f','menu':'vector(const vector,const vector)'})
let c['rotate_x_to'] = f
let f = []
call add(f,{'word':'rstrip','kind':'f','menu':'string(const string)'})
call add(f,{'word':'rstrip','kind':'f','menu':'string(const string,const string)'})
let c['rstrip'] = f
let f = []
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,const vector,int,vector,vector,float,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'int(const bsdf,const vector,const vector,vector,vector,float,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,vector,vector,float,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'vector(const bsdf,const vector,vector,float,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,vector,vector,float,int,const float,const float)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'vector(const bsdf,const vector,vector,float,int,const float,const float)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,vector,vector,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'vector(const bsdf,const vector,vector,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,vector,vector,int,const float,const float)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'vector(const bsdf,const vector,vector,int,const float,const float)'})
let c['sample_bsdf'] = f
let f = []
call add(f,{'word':'sample_cauchy','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'float(const float,const float,const float,const float)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'vector2(const float,const vector2)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'vector(const vector)'})
let c['sample_cauchy'] = f
let f = []
call add(f,{'word':'sample_cdf','kind':'f','menu':'int(const float[],const float)'})
call add(f,{'word':'sample_cdf','kind':'f','menu':'void(const float[],const float,int,float)'})
call add(f,{'word':'sample_cdf','kind':'f','menu':'int(const float[],const float,float)'})
call add(f,{'word':'sample_cdf','kind':'f','menu':'void(const float[],const float,int,float,float)'})
call add(f,{'word':'sample_cdf','kind':'f','menu':'int(const float[],const float,float,float)'})
let c['sample_cdf'] = f
let f = []
call add(f,{'word':'sample_circle_arc','kind':'f','menu':'vector2(const vector2,const float,const float)'})
let c['sample_circle_arc'] = f
let f = []
call add(f,{'word':'sample_circle_edge_uniform','kind':'f','menu':'vector2(const float)'})
let c['sample_circle_edge_uniform'] = f
let f = []
call add(f,{'word':'sample_circle_ring_uniform','kind':'f','menu':'vector2(const vector2,const float)'})
let c['sample_circle_ring_uniform'] = f
let f = []
call add(f,{'word':'sample_circle_slice','kind':'f','menu':'vector2(const vector2,const float,const vector2)'})
let c['sample_circle_slice'] = f
let f = []
call add(f,{'word':'sample_circle_uniform','kind':'f','menu':'vector2(const vector2)'})
let c['sample_circle_uniform'] = f
let f = []
call add(f,{'word':'sample_direction_cone','kind':'f','menu':'vector(const vector,const float,const vector2)'})
let c['sample_direction_cone'] = f
let f = []
call add(f,{'word':'sample_direction_uniform','kind':'f','menu':'vector(const vector2)'})
let c['sample_direction_uniform'] = f
let f = []
call add(f,{'word':'sample_discrete','kind':'f','menu':'int(const int,const float)'})
call add(f,{'word':'sample_discrete','kind':'f','menu':'int(const float[],const float)'})
let c['sample_discrete'] = f
let f = []
call add(f,{'word':'sample_exponential','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sample_exponential','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'sample_exponential','kind':'f','menu':'float(const float,const float,const float)'})
let c['sample_exponential'] = f
let f = []
call add(f,{'word':'sample_hemisphere','kind':'f','menu':'vector(const float,const vector2)'})
call add(f,{'word':'sample_hemisphere','kind':'f','menu':'vector(const vector2)'})
call add(f,{'word':'sample_hemisphere','kind':'f','menu':'vector(const vector,const float,const vector2)'})
call add(f,{'word':'sample_hemisphere','kind':'f','menu':'vector(const vector,const vector2)'})
let c['sample_hemisphere'] = f
let f = []
call add(f,{'word':'sample_hypersphere_cone','kind':'f','menu':'vector4(const vector4,const float,const vector4)'})
let c['sample_hypersphere_cone'] = f
let f = []
call add(f,{'word':'sample_hypersphere_uniform','kind':'f','menu':'vector4(const vector4)'})
let c['sample_hypersphere_uniform'] = f
let f = []
call add(f,{'word':'sample_lognormal','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'sample_lognormal','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
let c['sample_lognormal'] = f
let f = []
call add(f,{'word':'sample_lognormal_by_median','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'sample_lognormal_by_median','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
let c['sample_lognormal_by_median'] = f
let f = []
call add(f,{'word':'sample_normal','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'vector(const vector)'})
let c['sample_normal'] = f
let f = []
call add(f,{'word':'sample_orientation_cone','kind':'f','menu':'vector4(const vector4,const float,const vector)'})
let c['sample_orientation_cone'] = f
let f = []
call add(f,{'word':'sample_orientation_uniform','kind':'f','menu':'vector4(const vector)'})
let c['sample_orientation_uniform'] = f
let f = []
call add(f,{'word':'sample_sphere_cone','kind':'f','menu':'vector(const vector,const float,const vector)'})
let c['sample_sphere_cone'] = f
let f = []
call add(f,{'word':'sample_sphere_shell_uniform','kind':'f','menu':'vector(const vector,const float)'})
let c['sample_sphere_shell_uniform'] = f
let f = []
call add(f,{'word':'sample_sphere_uniform','kind':'f','menu':'vector(const vector)'})
let c['sample_sphere_uniform'] = f
let f = []
call add(f,{'word':'sampledisk','kind':'f','menu':'void(float,float,const float,const float)'})
call add(f,{'word':'sampledisk','kind':'f','menu':'float(float,const float,const float)'})
let c['sampledisk'] = f
let f = []
call add(f,{'word':'scale','kind':'f','menu':'void(export matrix2,const vector2)'})
call add(f,{'word':'scale','kind':'f','menu':'void(export matrix3,const vector)'})
call add(f,{'word':'scale','kind':'f','menu':'void(export matrix,const vector)'})
let c['scale'] = f
let f = []
call add(f,{'word':'select','kind':'f','menu':'matrix2(const int,const matrix2,const matrix2)'})
call add(f,{'word':'select','kind':'f','menu':'matrix3(const int,const matrix3,const matrix3)'})
call add(f,{'word':'select','kind':'f','menu':'matrix(const int,const matrix,const matrix)'})
call add(f,{'word':'select','kind':'f','menu':'bsdf(const int,const bsdf,const bsdf)'})
call add(f,{'word':'select','kind':'f','menu':'float(const int,const float,const float)'})
call add(f,{'word':'select','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'select','kind':'f','menu':'vector4(const int,const vector4,const vector4)'})
call add(f,{'word':'select','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'select','kind':'f','menu':'vector2(const int,const vector2,const vector2)'})
call add(f,{'word':'select','kind':'f','menu':'vector(const int,const vector,const vector)'})
call add(f,{'word':'select','kind':'f','menu':'matrix2[](const int,const matrix2[],const matrix2[])'})
call add(f,{'word':'select','kind':'f','menu':'matrix3[](const int,const matrix3[],const matrix3[])'})
call add(f,{'word':'select','kind':'f','menu':'matrix[](const int,const matrix[],const matrix[])'})
call add(f,{'word':'select','kind':'f','menu':'bsdf[](const int,const bsdf[],const bsdf[])'})
call add(f,{'word':'select','kind':'f','menu':'float[](const int,const float[],const float[])'})
call add(f,{'word':'select','kind':'f','menu':'int[](const int,const int[],const int[])'})
call add(f,{'word':'select','kind':'f','menu':'vector4[](const int,const vector4[],const vector4[])'})
call add(f,{'word':'select','kind':'f','menu':'string[](const int,const string[],const string[])'})
call add(f,{'word':'select','kind':'f','menu':'vector2[](const int,const vector2[],const vector2[])'})
call add(f,{'word':'select','kind':'f','menu':'vector[](const int,const vector[],const vector[])'})
let c['select'] = f
let f = []
call add(f,{'word':'sensor_panorama_create','kind':'f','menu':'int(const float,const vector,const int,const float,const float,const string,const string,const string,const int)'})
let c['sensor_panorama_create'] = f
let f = []
call add(f,{'word':'sensor_panorama_getcolor','kind':'f','menu':'vector(const int,const vector)'})
let c['sensor_panorama_getcolor'] = f
let f = []
call add(f,{'word':'sensor_panorama_getcone','kind':'f','menu':'void(const int,const vector,const float,const vector,const vector,const float,const float,float,vector,vector,float)'})
call add(f,{'word':'sensor_panorama_getcone','kind':'f','menu':'float(const int,const vector,const float,const vector,const vector,const float,const float,vector,vector,float)'})
let c['sensor_panorama_getcone'] = f
let f = []
call add(f,{'word':'sensor_panorama_getdepth','kind':'f','menu':'float(const int,const vector)'})
let c['sensor_panorama_getdepth'] = f
let f = []
call add(f,{'word':'sensor_save','kind':'f','menu':'int(const int,const string,const string)'})
let c['sensor_save'] = f
let f = []
call add(f,{'word':'serialize','kind':'f','menu':'float[](const matrix2[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const matrix3[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const matrix[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const vector4[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const vector2[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const vector[])'})
let c['serialize'] = f
let f = []
call add(f,{'word':'set','kind':'f','menu':'matrix2(const matrix2)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const float,const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const int)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const vector2,const vector2)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const matrix2)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const float,const float,const float,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const int)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const vector,const vector,const vector)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const vector[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const matrix2)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const int)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const vector4,const vector4,const vector4,const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const vector4[])'})
call add(f,{'word':'set','kind':'f','menu':'bsdf(const bsdf)'})
call add(f,{'word':'set','kind':'f','menu':'float(const float)'})
call add(f,{'word':'set','kind':'f','menu':'float(const int)'})
call add(f,{'word':'set','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'set','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'int(const float)'})
call add(f,{'word':'set','kind':'f','menu':'int(const int)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const float,const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const int)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const vector2)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const vector)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'string(const string)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const int)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const vector)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const vector2)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix2[](const matrix2[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix2[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix3[](const matrix3[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix3[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix[](const matrix[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'bsdf[](const bsdf[])'})
call add(f,{'word':'set','kind':'f','menu':'float[](const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const float)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const vector)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'float[](const int[])'})
call add(f,{'word':'set','kind':'f','menu':'int[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'int[](const int[])'})
call add(f,{'word':'set','kind':'f','menu':'vector4[](const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'vector4[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'vector4[](const vector4[])'})
call add(f,{'word':'set','kind':'f','menu':'string[](const string[])'})
call add(f,{'word':'set','kind':'f','menu':'vector2[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'vector2[](const vector2[])'})
call add(f,{'word':'set','kind':'f','menu':'vector[](const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'vector[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'vector[](const vector[])'})
let c['set'] = f
let f = []
call add(f,{'word':'setagentclipnames','kind':'f','menu':'void(const int,const int,const string[])'})
let c['setagentclipnames'] = f
let f = []
call add(f,{'word':'setagentclips','kind':'f','menu':'int(const int,const int,const string[],const float[],const float[],const string[],const int[],const int[],const float[],const int[])'})
let c['setagentclips'] = f
let f = []
call add(f,{'word':'setagentcliptimes','kind':'f','menu':'void(const int,const int,const float[])'})
let c['setagentcliptimes'] = f
let f = []
call add(f,{'word':'setagentclipweights','kind':'f','menu':'void(const int,const int,const float[])'})
let c['setagentclipweights'] = f
let f = []
call add(f,{'word':'setagentcollisionlayer','kind':'f','menu':'void(const int,const int,const string)'})
let c['setagentcollisionlayer'] = f
let f = []
call add(f,{'word':'setagentcurrentlayer','kind':'f','menu':'void(const int,const int,const string)'})
let c['setagentcurrentlayer'] = f
let f = []
call add(f,{'word':'setagentlocaltransform','kind':'f','menu':'int(const int,const int,const matrix,const int)'})
let c['setagentlocaltransform'] = f
let f = []
call add(f,{'word':'setagentlocaltransforms','kind':'f','menu':'void(const int,const int,const matrix[])'})
let c['setagentlocaltransforms'] = f
let f = []
call add(f,{'word':'setagentworldtransform','kind':'f','menu':'int(const int,const int,const matrix,const int)'})
let c['setagentworldtransform'] = f
let f = []
call add(f,{'word':'setagentworldtransforms','kind':'f','menu':'void(const int,const int,const matrix[])'})
let c['setagentworldtransforms'] = f
let f = []
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix2)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix2,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix3)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix3,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const float)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const float,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const int)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const int,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector4)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector4,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const string,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector2)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector2,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix2[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix2[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix3[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix3[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const float[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const float[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const int[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const int[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector4[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector4[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const string[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const string[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector2[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector2[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector[],const string)'})
let c['setattrib'] = f
let f = []
call add(f,{'word':'setattribtypeinfo','kind':'f','menu':'int(const int,const string,const string,const string)'})
let c['setattribtypeinfo'] = f
let f = []
call add(f,{'word':'setcomp','kind':'f','menu':'void(export matrix2,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'matrix2(export matrix2[],const matrix2,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export matrix3,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'matrix3(export matrix3[],const matrix3,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export matrix,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'matrix(export matrix[],const matrix,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'bsdf(export bsdf[],const bsdf,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export matrix2,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export matrix3,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export matrix,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export vector4,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export vector2,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export vector,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export float[],const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'int(export int[],const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export vector4,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'vector4(export vector4[],const vector4,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'string(export string[],const string,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export vector2,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'vector2(export vector2[],const vector2,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export vector,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'vector(export vector[],const vector,const int)'})
let c['setcomp'] = f
let f = []
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix2[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix2[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix3[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix3[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector4[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector4[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector2[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector2[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector[],const string)'})
let c['setdetailattrib'] = f
let f = []
call add(f,{'word':'setedgegroup','kind':'f','menu':'int(const int,const string,const int,const int,const int)'})
let c['setedgegroup'] = f
let f = []
let c['setelem'] = f
let f = []
call add(f,{'word':'setpackedtransform','kind':'f','menu':'void(const int,const int,const matrix)'})
let c['setpackedtransform'] = f
let f = []
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const float)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const float,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector4)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector4,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const string,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector2)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector2,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const float[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const float[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const int[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const int[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector4[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector4[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const string[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const string[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector2[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector2[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector[],const string)'})
let c['setpointattrib'] = f
let f = []
call add(f,{'word':'setpointgroup','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setpointgroup','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
let c['setpointgroup'] = f
let f = []
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const float)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const float,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector4)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector4,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const string,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector2)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector2,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const float[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const float[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const int[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const int[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector4[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector4[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const string[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const string[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector2[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector2[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector[],const string)'})
let c['setprimattrib'] = f
let f = []
call add(f,{'word':'setprimgroup','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setprimgroup','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
let c['setprimgroup'] = f
let f = []
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix2)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix2,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix3)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix3,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const float)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const float,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector4)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector4,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const string,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector2)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector2,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix2[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix2[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix3[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix3[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const float[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const float[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const int[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const int[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector4[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector4[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const string[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const string[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector2[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector2[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector[],const string)'})
let c['setprimintrinsic'] = f
let f = []
call add(f,{'word':'setprimvertex','kind':'f','menu':'int(const int,const int,const int,const int)'})
let c['setprimvertex'] = f
let f = []
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix2)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix2,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix3)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix3,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const float)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const float,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const int)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const int,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector4)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector4,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector2)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector2,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix2[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix2[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix3[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix3[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const float[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const float[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const int[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const int[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector4[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector4[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector2[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector2[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector[],const string)'})
let c['setvertexattrib'] = f
let f = []
call add(f,{'word':'setvertexgroup','kind':'f','menu':'int(const int,const string,const int,const int,const int)'})
call add(f,{'word':'setvertexgroup','kind':'f','menu':'int(const int,const string,const int,const int,const int,const string)'})
let c['setvertexgroup'] = f
let f = []
call add(f,{'word':'setvertexpoint','kind':'f','menu':'int(const int,const int,const int,const int)'})
let c['setvertexpoint'] = f
let f = []
call add(f,{'word':'shadowmap','kind':'f','menu':'float(const string,const vector,const float,const float,const float)'})
call add(f,{'word':'shadowmap','kind':'f','menu':'vector(const string,const vector,const float,const float,const float)'})
call add(f,{'word':'shadowmap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector,const float,const float,const float)'})
let c['shadowmap'] = f
let f = []
call add(f,{'word':'shl','kind':'f','menu':'int(const int,const int)'})
let c['shl'] = f
let f = []
call add(f,{'word':'shr','kind':'f','menu':'int(const int,const int)'})
let c['shr'] = f
let f = []
call add(f,{'word':'shrz','kind':'f','menu':'int(const int,const int)'})
let c['shrz'] = f
let f = []
call add(f,{'word':'sign','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sign','kind':'f','menu':'int(const int)'})
call add(f,{'word':'sign','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sign','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sign','kind':'f','menu':'vector(const vector)'})
let c['sign'] = f
let f = []
call add(f,{'word':'sin','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sin','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sin','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sin','kind':'f','menu':'vector(const vector)'})
let c['sin'] = f
let f = []
call add(f,{'word':'sinh','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sinh','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sinh','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sinh','kind':'f','menu':'vector(const vector)'})
let c['sinh'] = f
let f = []
call add(f,{'word':'sleep','kind':'f','menu':'void(const int)'})
let c['sleep'] = f
let f = []
call add(f,{'word':'slerp','kind':'f','menu':'vector4(const vector4,const vector4,const float)'})
call add(f,{'word':'slerp','kind':'f','menu':'vector4(const vector4[],const float[])'})
let c['slerp'] = f
let f = []
call add(f,{'word':'slice','kind':'f','menu':'string(const string,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string(const string,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string(const string,const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix2[](const matrix2[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix2[](const matrix2[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix2[](const matrix2[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix3[](const matrix3[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix3[](const matrix3[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix3[](const matrix3[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix[](const matrix[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix[](const matrix[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix[](const matrix[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'float[](const float[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'float[](const float[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'float[](const float[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'int[](const int[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'int[](const int[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'int[](const int[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector4[](const vector4[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector4[](const vector4[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector4[](const vector4[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string[](const string[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string[](const string[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string[](const string[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector2[](const vector2[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector2[](const vector2[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector2[](const vector2[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector[](const vector[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector[](const vector[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector[](const vector[],const int,const int,const int,const int,const int,const int)'})
let c['slice'] = f
let f = []
call add(f,{'word':'slideframe','kind':'f','menu':'vector(const vector,const vector,const vector,const vector,const vector)'})
let c['slideframe'] = f
let f = []
call add(f,{'word':'smooth','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'smooth','kind':'f','menu':'float(const float,const float,const float,const float)'})
let c['smooth'] = f
let f = []
call add(f,{'word':'smoothrotation','kind':'f','menu':'vector(const int,const vector,const vector)'})
let c['smoothrotation'] = f
let f = []
call add(f,{'word':'snoise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'snoise','kind':'f','menu':'float(const vector,const int,const float,const float)'})
call add(f,{'word':'snoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'snoise','kind':'f','menu':'float(const vector,const int,const int,const int,const int,const float,const float)'})
call add(f,{'word':'snoise','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'snoise','kind':'f','menu':'vector(const vector,const int,const float,const float)'})
call add(f,{'word':'snoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
call add(f,{'word':'snoise','kind':'f','menu':'vector(const vector,const int,const int,const int,const int,const float,const float)'})
let c['snoise'] = f
let f = []
call add(f,{'word':'solid_angle','kind':'f','menu':'float(const bsdf,const int)'})
let c['solid_angle'] = f
let f = []
call add(f,{'word':'solveconstraint','kind':'f','menu':'vector[](const float[],const vector,const float,const matrix,const vector[])'})
let c['solveconstraint'] = f
let f = []
call add(f,{'word':'solvecubic','kind':'f','menu':'int(const float,const float,const float,const float,float,float,float)'})
call add(f,{'word':'solvecubic','kind':'f','menu':'int(const float,const float,const float,const float,vector2,vector2,vector2)'})
let c['solvecubic'] = f
let f = []
call add(f,{'word':'solvecurve','kind':'f','menu':'vector[](const string,const float[],const int,const int,const vector,const int,const matrix)'})
call add(f,{'word':'solvecurve','kind':'f','menu':'vector[](const float[],const int,const int,const vector,const vector[],const vector[])'})
let c['solvecurve'] = f
let f = []
call add(f,{'word':'solvefbik','kind':'f','menu':'matrix[](const matrix[],const int[],const int[],const matrix[],const int)'})
call add(f,{'word':'solvefbik','kind':'f','menu':'matrix[](const matrix[],const int[],const int[],const matrix[],const int,const float,const int)'})
call add(f,{'word':'solvefbik','kind':'f','menu':'matrix[](const matrix[],const int[],const int[],const matrix[],const int,const float,const int,const float[],const int[],const int[])'})
call add(f,{'word':'solvefbik','kind':'f','menu':'matrix[](const matrix[],const int[],const int[],const matrix[],const int,const float,const int,const float[],const int[],const int[],const matrix[],const vector4[],const vector[])'})
let c['solvefbik'] = f
let f = []
call add(f,{'word':'solveik','kind':'f','menu':'vector[](const float[],const vector,const vector,const float,const int,const float,const int,const float,const matrix,const vector[])'})
let c['solveik'] = f
let f = []
call add(f,{'word':'solvepoly','kind':'f','menu':'int(const float[],float[])'})
call add(f,{'word':'solvepoly','kind':'f','menu':'int(const float[],float[],const int)'})
let c['solvepoly'] = f
let f = []
call add(f,{'word':'solvequadratic','kind':'f','menu':'int(const float,const float,const float,float,float)'})
call add(f,{'word':'solvequadratic','kind':'f','menu':'int(const float,const float,const float,vector2,vector2)'})
let c['solvequadratic'] = f
let f = []
call add(f,{'word':'sort','kind':'f','menu':'float[](const float[])'})
call add(f,{'word':'sort','kind':'f','menu':'int[](const int[])'})
call add(f,{'word':'sort','kind':'f','menu':'string[](const string[])'})
let c['sort'] = f
let f = []
call add(f,{'word':'specular','kind':'f','menu':'bsdf(const vector)'})
let c['specular'] = f
let f = []
call add(f,{'word':'specularBRDF','kind':'f','menu':'float(const vector,const vector,const vector,const float)'})
let c['specularBRDF'] = f
let f = []
call add(f,{'word':'spline','kind':'f','menu':'float(const string,const float,const float)'})
call add(f,{'word':'spline','kind':'f','menu':'float(const string,const float,const float[])'})
call add(f,{'word':'spline','kind':'f','menu':'float(const string[],const float,const float[])'})
call add(f,{'word':'spline','kind':'f','menu':'float(const string[],const float,const float[],const float[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector4(const string,const float,const vector4)'})
call add(f,{'word':'spline','kind':'f','menu':'vector4(const string,const float,const vector4[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector4(const string[],const float,const vector4[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector4(const string[],const float,const vector4[],const float[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector(const string,const float,const vector)'})
call add(f,{'word':'spline','kind':'f','menu':'vector(const string,const float,const vector[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector(const string[],const float,const vector[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector(const string[],const float,const vector[],const float[])'})
let c['spline'] = f
let f = []
call add(f,{'word':'split','kind':'f','menu':'string[](const string)'})
call add(f,{'word':'split','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'split','kind':'f','menu':'string[](const string,const string,const int)'})
let c['split'] = f
let f = []
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[],const int,const int,const float,const float[])'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[],const int,const int,const float,const float[])'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[],const int,const int,const float)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[],const int,const int,const float)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[],const int,const int)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[],const int,const int)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[],const int)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[],const int)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[])'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[])'})
let c['split_bsdf'] = f
let f = []
call add(f,{'word':'splitpath','kind':'f','menu':'void(const string,string,string)'})
call add(f,{'word':'splitpath','kind':'f','menu':'string(const string,string)'})
let c['splitpath'] = f
let f = []
call add(f,{'word':'sprintf','kind':'f','menu':'string(const string)'})
let c['sprintf'] = f
let f = []
call add(f,{'word':'sqrt','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sqrt','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sqrt','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sqrt','kind':'f','menu':'vector(const vector)'})
let c['sqrt'] = f
let f = []
call add(f,{'word':'sssapprox','kind':'f','menu':'bsdf(const vector,const float,const float,const float)'})
let c['sssapprox'] = f
let f = []
call add(f,{'word':'startswith','kind':'f','menu':'int(const string,const string)'})
let c['startswith'] = f
let f = []
call add(f,{'word':'strip','kind':'f','menu':'string(const string)'})
call add(f,{'word':'strip','kind':'f','menu':'string(const string,const string)'})
let c['strip'] = f
let f = []
call add(f,{'word':'strlen','kind':'f','menu':'int(const string)'})
let c['strlen'] = f
let f = []
let c['struct'] = f
let f = []
let c['sub'] = f
let f = []
call add(f,{'word':'sum','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sum','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'sum','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'sum','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'sum','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'sum','kind':'f','menu':'int(const int)'})
call add(f,{'word':'sum','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'sum','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'sum','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'sum','kind':'f','menu':'vector(const vector[])'})
let c['sum'] = f
let f = []
call add(f,{'word':'surfacedist','kind':'f','menu':'float(const int,const string,const string,const int,const float,int,const string)'})
call add(f,{'word':'surfacedist','kind':'f','menu':'float(const string,const string,const string,const int,const float,int,const string)'})
let c['surfacedist'] = f
let f = []
let c['swap'] = f
let f = []
call add(f,{'word':'switch','kind':'f','menu':'bsdf(const bsdf,const bsdf)'})
let c['switch'] = f
let f = []
call add(f,{'word':'swizzle','kind':'f','menu':'vector4(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'swizzle','kind':'f','menu':'vector2(const vector2,const int,const int)'})
call add(f,{'word':'swizzle','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
let c['swizzle'] = f
let f = []
call add(f,{'word':'tan','kind':'f','menu':'float(const float)'})
call add(f,{'word':'tan','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'tan','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'tan','kind':'f','menu':'vector(const vector)'})
let c['tan'] = f
let f = []
call add(f,{'word':'tanh','kind':'f','menu':'float(const float)'})
call add(f,{'word':'tanh','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'tanh','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'tanh','kind':'f','menu':'vector(const vector)'})
let c['tanh'] = f
let f = []
call add(f,{'word':'tet_adjacent','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'tet_adjacent','kind':'f','menu':'int(const string,const int,const int)'})
let c['tet_adjacent'] = f
let f = []
call add(f,{'word':'tet_faceindex','kind':'f','menu':'int(const int,const int)'})
let c['tet_faceindex'] = f
let f = []
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export matrix3)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export matrix)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export float)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export int)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export vector4)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export string)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export vector)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export int[])'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export string[])'})
let c['teximport'] = f
let f = []
call add(f,{'word':'texprintf','kind':'f','menu':'string(const float,const float,const string)'})
let c['texprintf'] = f
let f = []
call add(f,{'word':'texture','kind':'f','menu':'vector4(const string,const float,const float)'})
call add(f,{'word':'texture','kind':'f','menu':'vector4(const string,const float,const float,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'texture','kind':'f','menu':'vector(const string,const float,const float)'})
call add(f,{'word':'texture','kind':'f','menu':'vector(const string,const float,const float,const float,const float,const float,const float,const float,const float)'})
let c['texture'] = f
let f = []
call add(f,{'word':'texture3d','kind':'f','menu':'matrix3(const string,const string,const vector)'})
call add(f,{'word':'texture3d','kind':'f','menu':'matrix(const string,const string,const vector)'})
call add(f,{'word':'texture3d','kind':'f','menu':'float(const string,const string,const vector)'})
call add(f,{'word':'texture3d','kind':'f','menu':'vector4(const string,const string,const vector)'})
call add(f,{'word':'texture3d','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['texture3d'] = f
let f = []
call add(f,{'word':'texture3dBox','kind':'f','menu':'void(const string,const string,vector,vector)'})
call add(f,{'word':'texture3dBox','kind':'f','menu':'vector(const string,const string,vector)'})
let c['texture3dBox'] = f
let f = []
call add(f,{'word':'titlecase','kind':'f','menu':'string(const string)'})
let c['titlecase'] = f
let f = []
call add(f,{'word':'toNDC','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'toNDC','kind':'f','menu':'vector(const vector)'})
let c['toNDC'] = f
let f = []
call add(f,{'word':'tolower','kind':'f','menu':'string(const string)'})
let c['tolower'] = f
let f = []
call add(f,{'word':'toupper','kind':'f','menu':'string(const string)'})
let c['toupper'] = f
let f = []
call add(f,{'word':'translate','kind':'f','menu':'void(export matrix,const vector4)'})
call add(f,{'word':'translate','kind':'f','menu':'void(export matrix,const vector)'})
let c['translate'] = f
let f = []
call add(f,{'word':'translucent','kind':'f','menu':'bsdf(const vector,const vector)'})
let c['translucent'] = f
let f = []
call add(f,{'word':'transpose','kind':'f','menu':'void(export matrix2)'})
call add(f,{'word':'transpose','kind':'f','menu':'matrix2(const matrix2)'})
call add(f,{'word':'transpose','kind':'f','menu':'void(export matrix3)'})
call add(f,{'word':'transpose','kind':'f','menu':'matrix3(const matrix3)'})
call add(f,{'word':'transpose','kind':'f','menu':'void(export matrix)'})
call add(f,{'word':'transpose','kind':'f','menu':'matrix(const matrix)'})
let c['transpose'] = f
let f = []
call add(f,{'word':'trunc','kind':'f','menu':'float(const float)'})
call add(f,{'word':'trunc','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'trunc','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'trunc','kind':'f','menu':'vector(const vector)'})
let c['trunc'] = f
let f = []
call add(f,{'word':'tw_nspace','kind':'f','menu':'vector(const vector)'})
let c['tw_nspace'] = f
let f = []
call add(f,{'word':'tw_space','kind':'f','menu':'matrix()'})
call add(f,{'word':'tw_space','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'tw_space','kind':'f','menu':'vector(const vector)'})
let c['tw_space'] = f
let f = []
call add(f,{'word':'tw_vspace','kind':'f','menu':'vector(const vector)'})
let c['tw_vspace'] = f
let f = []
call add(f,{'word':'uniqueval','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'uniqueval','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'uniqueval','kind':'f','menu':'string(const int,const string,const string,const int)'})
call add(f,{'word':'uniqueval','kind':'f','menu':'string(const string,const string,const string,const int)'})
let c['uniqueval'] = f
let f = []
call add(f,{'word':'uniquevals','kind':'f','menu':'int[](const int,const string,const string)'})
call add(f,{'word':'uniquevals','kind':'f','menu':'int[](const string,const string,const string)'})
call add(f,{'word':'uniquevals','kind':'f','menu':'string[](const int,const string,const string)'})
call add(f,{'word':'uniquevals','kind':'f','menu':'string[](const string,const string,const string)'})
let c['uniquevals'] = f
let f = []
call add(f,{'word':'unpack_intfromsafefloat','kind':'f','menu':'int(const float)'})
let c['unpack_intfromsafefloat'] = f
let f = []
call add(f,{'word':'unserialize','kind':'f','menu':'matrix2[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'matrix3[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'matrix[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'vector4[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'vector2[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'vector[](const float[])'})
let c['unserialize'] = f
let f = []
call add(f,{'word':'upush','kind':'f','menu':'void(export matrix2[],const matrix2)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export matrix3[],const matrix3)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export matrix[],const matrix)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export bsdf[],const bsdf)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export float[],const float)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export int[],const int)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export vector4[],const vector4)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export string[],const string)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export vector2[],const vector2)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export vector[],const vector)'})
let c['upush'] = f
let f = []
let c['urandom'] = f
let f = []
call add(f,{'word':'usd_addtransform','kind':'f','menu':'int(const int,const string,const string,const matrix)'})
let c['usd_addtransform'] = f
let f = []
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector[](const string,const string,const string)'})
let c['usd_attrib'] = f
let f = []
call add(f,{'word':'usd_attriblen','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_attriblen','kind':'f','menu':'int(const string,const string,const string)'})
let c['usd_attriblen'] = f
let f = []
call add(f,{'word':'usd_attribnames','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'usd_attribnames','kind':'f','menu':'string[](const string,const string)'})
let c['usd_attribnames'] = f
let f = []
call add(f,{'word':'usd_attribsize','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_attribsize','kind':'f','menu':'int(const string,const string,const string)'})
let c['usd_attribsize'] = f
let f = []
call add(f,{'word':'usd_attribtypename','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'usd_attribtypename','kind':'f','menu':'string(const string,const string,const string)'})
let c['usd_attribtypename'] = f
let f = []
call add(f,{'word':'usd_cleartransformorder','kind':'f','menu':'int(const int,const string)'})
let c['usd_cleartransformorder'] = f
let f = []
call add(f,{'word':'usd_drawmode','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_drawmode','kind':'f','menu':'string(const string,const string)'})
let c['usd_drawmode'] = f
let f = []
call add(f,{'word':'usd_isactive','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'usd_isactive','kind':'f','menu':'int(const string,const string)'})
let c['usd_isactive'] = f
let f = []
call add(f,{'word':'usd_isarray','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_isarray','kind':'f','menu':'int(const string,const string,const string)'})
let c['usd_isarray'] = f
let f = []
call add(f,{'word':'usd_isattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_isattrib','kind':'f','menu':'int(const string,const string,const string)'})
let c['usd_isattrib'] = f
let f = []
call add(f,{'word':'usd_isprim','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'usd_isprim','kind':'f','menu':'int(const string,const string)'})
let c['usd_isprim'] = f
let f = []
call add(f,{'word':'usd_isstage','kind':'f','menu':'int(const int)'})
call add(f,{'word':'usd_isstage','kind':'f','menu':'int(const string)'})
let c['usd_isstage'] = f
let f = []
call add(f,{'word':'usd_istransformreset','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'usd_istransformreset','kind':'f','menu':'int(const string,const string)'})
let c['usd_istransformreset'] = f
let f = []
call add(f,{'word':'usd_isvisible','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'usd_isvisible','kind':'f','menu':'int(const string,const string)'})
let c['usd_isvisible'] = f
let f = []
call add(f,{'word':'usd_kind','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_kind','kind':'f','menu':'string(const string,const string)'})
let c['usd_kind'] = f
let f = []
call add(f,{'word':'usd_localtransform','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'usd_localtransform','kind':'f','menu':'matrix(const string,const string)'})
let c['usd_localtransform'] = f
let f = []
call add(f,{'word':'usd_name','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_name','kind':'f','menu':'string(const string,const string)'})
let c['usd_name'] = f
let f = []
call add(f,{'word':'usd_parentpath','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_parentpath','kind':'f','menu':'string(const string,const string)'})
let c['usd_parentpath'] = f
let f = []
call add(f,{'word':'usd_purpose','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_purpose','kind':'f','menu':'string(const string,const string)'})
let c['usd_purpose'] = f
let f = []
call add(f,{'word':'usd_setactive','kind':'f','menu':'int(const int,const string,const int)'})
let c['usd_setactive'] = f
let f = []
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix2)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix3)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const float)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector4)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector2)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix2[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix3[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const float[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const int[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector4[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const string[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector2[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector[])'})
let c['usd_setattrib'] = f
let f = []
call add(f,{'word':'usd_setdrawmode','kind':'f','menu':'int(const int,const string,const string)'})
let c['usd_setdrawmode'] = f
let f = []
call add(f,{'word':'usd_setkind','kind':'f','menu':'int(const int,const string,const string)'})
let c['usd_setkind'] = f
let f = []
call add(f,{'word':'usd_setpurpose','kind':'f','menu':'int(const int,const string,const string)'})
let c['usd_setpurpose'] = f
let f = []
call add(f,{'word':'usd_setvariantselection','kind':'f','menu':'int(const int,const string,const string,const string)'})
let c['usd_setvariantselection'] = f
let f = []
call add(f,{'word':'usd_setvisible','kind':'f','menu':'int(const int,const string,const int)'})
let c['usd_setvisible'] = f
let f = []
call add(f,{'word':'usd_transformorder','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'usd_transformorder','kind':'f','menu':'string[](const string,const string)'})
let c['usd_transformorder'] = f
let f = []
call add(f,{'word':'usd_typename','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_typename','kind':'f','menu':'string(const string,const string)'})
let c['usd_typename'] = f
let f = []
call add(f,{'word':'usd_variants','kind':'f','menu':'string[](const int,const string,const string)'})
call add(f,{'word':'usd_variants','kind':'f','menu':'string[](const string,const string,const string)'})
let c['usd_variants'] = f
let f = []
call add(f,{'word':'usd_variantselection','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'usd_variantselection','kind':'f','menu':'string(const string,const string,const string)'})
let c['usd_variantselection'] = f
let f = []
call add(f,{'word':'usd_variantsets','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'usd_variantsets','kind':'f','menu':'string[](const string,const string)'})
let c['usd_variantsets'] = f
let f = []
call add(f,{'word':'usd_worldtransform','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'usd_worldtransform','kind':'f','menu':'matrix(const string,const string)'})
let c['usd_worldtransform'] = f
let f = []
call add(f,{'word':'uvdist','kind':'f','menu':'float(const int,const string,const string,const vector,int,vector)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const int,const string,const string,const vector,int,vector,const float)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const int,const string,const vector,int,vector)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const int,const string,const vector,int,vector,const float)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const string,const string,const string,const vector,int,vector)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const string,const string,const string,const vector,int,vector,const float)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const string,const string,const vector,int,vector)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const string,const string,const vector,int,vector,const float)'})
let c['uvdist'] = f
let f = []
call add(f,{'word':'uvintersect','kind':'f','menu':'int(const int,const string,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'uvintersect','kind':'f','menu':'int(const int,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'uvintersect','kind':'f','menu':'int(const string,const string,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'uvintersect','kind':'f','menu':'int(const string,const string,const vector,const vector,vector,vector)'})
let c['uvintersect'] = f
let f = []
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector[](const string,const string,const string,const vector)'})
let c['uvsample'] = f
let f = []
call add(f,{'word':'uvunwrap','kind':'f','menu':'int(const string,const float,const float,const float,vector,vector)'})
call add(f,{'word':'uvunwrap','kind':'f','menu':'int(const string,const float,const float,const float,vector,vector,vector,vector)'})
let c['uvunwrap'] = f
let f = []
call add(f,{'word':'variance','kind':'f','menu':'float(const float,float,int)'})
let c['variance'] = f
let f = []
call add(f,{'word':'velocityname','kind':'f','menu':'string()'})
let c['velocityname'] = f
let f = []
call add(f,{'word':'vertex','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector[](const string,const string,const int,const int)'})
let c['vertex'] = f
let f = []
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix2(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix2(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix3(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix3(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'float(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'float(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'int(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'int(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector4(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector4(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'string(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'string(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector2(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector2(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix2[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix2[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix3[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix3[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'float[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'float[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'int[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'int[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector4[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector4[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'string[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'string[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector2[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector2[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector[](const string,const string,const int,int)'})
let c['vertexattrib'] = f
let f = []
call add(f,{'word':'vertexattribsize','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'vertexattribsize','kind':'f','menu':'int(const string,const string)'})
let c['vertexattribsize'] = f
let f = []
call add(f,{'word':'vertexattribtype','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'vertexattribtype','kind':'f','menu':'int(const string,const string)'})
let c['vertexattribtype'] = f
let f = []
call add(f,{'word':'vertexattribtypeinfo','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'vertexattribtypeinfo','kind':'f','menu':'string(const string,const string)'})
let c['vertexattribtypeinfo'] = f
let f = []
call add(f,{'word':'vertexhedge','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexhedge','kind':'f','menu':'int(const string,const int)'})
let c['vertexhedge'] = f
let f = []
call add(f,{'word':'vertexindex','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'vertexindex','kind':'f','menu':'int(const string,const int,const int)'})
let c['vertexindex'] = f
let f = []
call add(f,{'word':'vertexnext','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexnext','kind':'f','menu':'int(const string,const int)'})
let c['vertexnext'] = f
let f = []
call add(f,{'word':'vertexpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexpoint','kind':'f','menu':'int(const string,const int)'})
let c['vertexpoint'] = f
let f = []
call add(f,{'word':'vertexprev','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexprev','kind':'f','menu':'int(const string,const int)'})
let c['vertexprev'] = f
let f = []
call add(f,{'word':'vertexprim','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexprim','kind':'f','menu':'int(const string,const int)'})
let c['vertexprim'] = f
let f = []
call add(f,{'word':'vertexprimindex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexprimindex','kind':'f','menu':'int(const string,const int)'})
let c['vertexprimindex'] = f
let f = []
call add(f,{'word':'vnoise','kind':'f','menu':'void(const float,const float,const float,const float,int,float,float,float,float,float,float)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const float,const float,const float,const float,float,float,float,float,float,float)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const float,const float,const float,const float,int,float,float,float,float,float,float,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const float,const float,const float,const float,float,float,float,float,float,float,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const float,const float,float,float,float,float)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const float,const float,float,float,float,float,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector4,const vector4,int,float,float,vector4,vector4)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector4,const vector4,float,float,vector4,vector4)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector4,const vector4,int,float,float,vector4,vector4,const int,const int,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector4,const vector4,float,float,vector4,vector4,const int,const int,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector4,const vector4,int,float,float,vector4,vector4,const vector4)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector4,const vector4,float,float,vector4,vector4,const vector4)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector,const vector,int,float,float,vector,vector)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector,const vector,float,float,vector,vector)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector,const vector,int,float,float,vector,vector,const int,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector,const vector,float,float,vector,vector,const int,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector,const vector,int,float,float,vector,vector,const vector)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector,const vector,float,float,vector,vector,const vector)'})
let c['vnoise'] = f
let f = []
call add(f,{'word':'volume','kind':'f','menu':'float(const vector)'})
let c['volume'] = f
let f = []
call add(f,{'word':'volumegradient','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumegradient','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumegradient','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumegradient','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumegradient'] = f
let f = []
call add(f,{'word':'volumeindex','kind':'f','menu':'float(const int,const int,const vector)'})
call add(f,{'word':'volumeindex','kind':'f','menu':'float(const int,const string,const vector)'})
call add(f,{'word':'volumeindex','kind':'f','menu':'float(const string,const int,const vector)'})
call add(f,{'word':'volumeindex','kind':'f','menu':'float(const string,const string,const vector)'})
let c['volumeindex'] = f
let f = []
call add(f,{'word':'volumeindexactive','kind':'f','menu':'int(const int,const int,const vector)'})
call add(f,{'word':'volumeindexactive','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'volumeindexactive','kind':'f','menu':'int(const string,const int,const vector)'})
call add(f,{'word':'volumeindexactive','kind':'f','menu':'int(const string,const string,const vector)'})
let c['volumeindexactive'] = f
let f = []
call add(f,{'word':'volumeindexorigin','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'volumeindexorigin','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'volumeindexorigin','kind':'f','menu':'vector(const string,const int)'})
call add(f,{'word':'volumeindexorigin','kind':'f','menu':'vector(const string,const string)'})
let c['volumeindexorigin'] = f
let f = []
call add(f,{'word':'volumeindextopos','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumeindextopos','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumeindextopos','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumeindextopos','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumeindextopos'] = f
let f = []
call add(f,{'word':'volumeindexv','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumeindexv','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumeindexv','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumeindexv','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumeindexv'] = f
let f = []
call add(f,{'word':'volumepostoindex','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumepostoindex','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumepostoindex','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumepostoindex','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumepostoindex'] = f
let f = []
call add(f,{'word':'volumeres','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'volumeres','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'volumeres','kind':'f','menu':'vector(const string,const int)'})
call add(f,{'word':'volumeres','kind':'f','menu':'vector(const string,const string)'})
let c['volumeres'] = f
let f = []
call add(f,{'word':'volumesample','kind':'f','menu':'float(const int,const int,const vector)'})
call add(f,{'word':'volumesample','kind':'f','menu':'float(const int,const string,const vector)'})
call add(f,{'word':'volumesample','kind':'f','menu':'float(const string,const int,const vector)'})
call add(f,{'word':'volumesample','kind':'f','menu':'float(const string,const string,const vector)'})
let c['volumesample'] = f
let f = []
call add(f,{'word':'volumesamplev','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumesamplev','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumesamplev','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumesamplev','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumesamplev'] = f
let f = []
call add(f,{'word':'volumevoxeldiameter','kind':'f','menu':'float(const int,const int)'})
call add(f,{'word':'volumevoxeldiameter','kind':'f','menu':'float(const int,const string)'})
call add(f,{'word':'volumevoxeldiameter','kind':'f','menu':'float(const string,const int)'})
call add(f,{'word':'volumevoxeldiameter','kind':'f','menu':'float(const string,const string)'})
let c['volumevoxeldiameter'] = f
let f = []
call add(f,{'word':'vtransform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'vtransform','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'vtransform','kind':'f','menu':'vector(const vector,const matrix)'})
let c['vtransform'] = f
let f = []
call add(f,{'word':'warning','kind':'f','menu':'void(const string)'})
let c['warning'] = f
let f = []
let c['while'] = f
let f = []
call add(f,{'word':'wireblinn','kind':'f','menu':'bsdf(const vector,const float)'})
let c['wireblinn'] = f
let f = []
call add(f,{'word':'wirediffuse','kind':'f','menu':'bsdf(const vector)'})
let c['wirediffuse'] = f
let f = []
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,const float,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,const float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,const float,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,const float,float,float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,const float,int,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,const float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,int,float,float,float,float,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,float,float,float,float,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,int,float,float,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,float,float,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector4,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector4,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector4,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector4,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector4,int,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector4,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector2,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector2,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector2,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector2,float,float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector2,int,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector2,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector,int,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector,int,float,float,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector,float,float,const int,const int,const int)'})
let c['wnoise'] = f
let f = []
call add(f,{'word':'wo_nspace','kind':'f','menu':'vector(const vector)'})
let c['wo_nspace'] = f
let f = []
call add(f,{'word':'wo_space','kind':'f','menu':'matrix()'})
call add(f,{'word':'wo_space','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'wo_space','kind':'f','menu':'vector(const vector)'})
let c['wo_space'] = f
let f = []
call add(f,{'word':'wo_vspace','kind':'f','menu':'vector(const vector)'})
let c['wo_vspace'] = f
let f = []
call add(f,{'word':'wt_nspace','kind':'f','menu':'vector(const vector)'})
let c['wt_nspace'] = f
let f = []
call add(f,{'word':'wt_space','kind':'f','menu':'matrix()'})
call add(f,{'word':'wt_space','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'wt_space','kind':'f','menu':'vector(const vector)'})
let c['wt_space'] = f
let f = []
call add(f,{'word':'wt_vspace','kind':'f','menu':'vector(const vector)'})
let c['wt_vspace'] = f
let f = []
call add(f,{'word':'xnoise','kind':'f','menu':'float(const float)'})
call add(f,{'word':'xnoise','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'xnoise','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'xnoise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'xnoise','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'xnoise','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'xnoise','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'xnoise','kind':'f','menu':'vector(const vector)'})
let c['xnoise'] = f
let f = []
call add(f,{'word':'xnoised','kind':'f','menu':'void(const float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'float(const float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const float,const float,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'float(const float,const float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const float,const float,vector,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'vector(const float,const float,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const float,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'vector(const float,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const vector4,float,float,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'float(const vector4,float,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const vector4,vector,vector,vector,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'vector(const vector4,vector,vector,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const vector,float,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'float(const vector,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const vector,vector,vector,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'vector(const vector,vector,vector,vector)'})
let c['xnoised'] = f
let f = []
let c['xor'] = f
let f = []
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const string,const vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const string,const vector,int,vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const string,const vector,int,vector,const float)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const vector,int,vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const vector,int,vector,const float)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const string,const vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const string,const vector,int,vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const string,const vector,int,vector,const float)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const vector,int,vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const vector,int,vector,const float)'})
let c['xyzdist'] = f
let f = []
call add(f,{'word':'xyztorgb','kind':'f','menu':'vector(const vector)'})
let c['xyztorgb'] = f
let contexts['cop2'] = c
" CONTEXT: image3d 
let c = {}
let c['P'] = [{'word':'P','kind':'v','menu':'vector'}]
let c['density'] = [{'word':'density','kind':'v','menu':'float'}]
let f = []
call add(f,{'word':'Du','kind':'f','menu':'float(const float)'})
call add(f,{'word':'Du','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'Du','kind':'f','menu':'vector(const vector)'})
let c['Du'] = f
let f = []
call add(f,{'word':'Dv','kind':'f','menu':'float(const float)'})
call add(f,{'word':'Dv','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'Dv','kind':'f','menu':'vector(const vector)'})
let c['Dv'] = f
let f = []
call add(f,{'word':'Dw','kind':'f','menu':'float(const float)'})
call add(f,{'word':'Dw','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'Dw','kind':'f','menu':'vector(const vector)'})
let c['Dw'] = f
let f = []
let c['__nextmeta'] = f
let f = []
let c['__ptexture_shift_coord'] = f
let f = []
let c['_export'] = f
let f = []
call add(f,{'word':'abs','kind':'f','menu':'float(const float)'})
call add(f,{'word':'abs','kind':'f','menu':'int(const int)'})
call add(f,{'word':'abs','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'abs','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'abs','kind':'f','menu':'vector(const vector)'})
let c['abs'] = f
let f = []
call add(f,{'word':'acos','kind':'f','menu':'float(const float)'})
call add(f,{'word':'acos','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'acos','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'acos','kind':'f','menu':'vector(const vector)'})
let c['acos'] = f
let f = []
let c['add'] = f
let f = []
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix2)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix3)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const float)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector4)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector2)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix2[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix3[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const float[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const int[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector4[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const string[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector2[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector[])'})
let c['addattrib'] = f
let f = []
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
let c['adddetailattrib'] = f
let f = []
call add(f,{'word':'addpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'addpoint','kind':'f','menu':'int(const int,const vector)'})
let c['addpoint'] = f
let f = []
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
let c['addpointattrib'] = f
let f = []
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,const int)'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,const int,const int)'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int,const int,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int[],int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int[],int[])'})
let c['addprim'] = f
let f = []
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
let c['addprimattrib'] = f
let f = []
call add(f,{'word':'addvariablename','kind':'f','menu':'int(const int,const string,const string)'})
let c['addvariablename'] = f
let f = []
call add(f,{'word':'addvertex','kind':'f','menu':'int(const int,const int,const int)'})
let c['addvertex'] = f
let f = []
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
let c['addvertexattrib'] = f
let f = []
call add(f,{'word':'addvisualizer','kind':'f','menu':'int(const int,const string)'})
let c['addvisualizer'] = f
let f = []
call add(f,{'word':'agentaddclip','kind':'f','menu':'int(const int,const int,const string,const string,const int)'})
let c['agentaddclip'] = f
let f = []
call add(f,{'word':'agentclipcatalog','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agentclipcatalog','kind':'f','menu':'string[](const string,const int)'})
let c['agentclipcatalog'] = f
let f = []
call add(f,{'word':'agentclipchannel','kind':'f','menu':'int(const int,const int,const string,const string)'})
call add(f,{'word':'agentclipchannel','kind':'f','menu':'int(const string,const int,const string,const string)'})
let c['agentclipchannel'] = f
let f = []
call add(f,{'word':'agentclipchannelnames','kind':'f','menu':'string[](const int,const int,const string)'})
call add(f,{'word':'agentclipchannelnames','kind':'f','menu':'string[](const string,const int,const string)'})
let c['agentclipchannelnames'] = f
let f = []
call add(f,{'word':'agentcliplength','kind':'f','menu':'float(const int,const int,const string)'})
call add(f,{'word':'agentcliplength','kind':'f','menu':'float(const string,const int,const string)'})
let c['agentcliplength'] = f
let f = []
call add(f,{'word':'agentclipnames','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agentclipnames','kind':'f','menu':'string[](const string,const int)'})
let c['agentclipnames'] = f
let f = []
call add(f,{'word':'agentclipsample','kind':'f','menu':'float(const int,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsample','kind':'f','menu':'float(const int,const int,const string,const float,const string)'})
call add(f,{'word':'agentclipsample','kind':'f','menu':'float(const string,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsample','kind':'f','menu':'float(const string,const int,const string,const float,const string)'})
let c['agentclipsample'] = f
let f = []
call add(f,{'word':'agentclipsamplelocal','kind':'f','menu':'matrix(const int,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsamplelocal','kind':'f','menu':'matrix(const string,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsamplelocal','kind':'f','menu':'matrix[](const int,const int,const string,const float)'})
call add(f,{'word':'agentclipsamplelocal','kind':'f','menu':'matrix[](const string,const int,const string,const float)'})
let c['agentclipsamplelocal'] = f
let f = []
call add(f,{'word':'agentclipsamplerate','kind':'f','menu':'float(const int,const int,const string)'})
call add(f,{'word':'agentclipsamplerate','kind':'f','menu':'float(const string,const int,const string)'})
let c['agentclipsamplerate'] = f
let f = []
call add(f,{'word':'agentclipsampleworld','kind':'f','menu':'matrix(const int,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsampleworld','kind':'f','menu':'matrix(const string,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsampleworld','kind':'f','menu':'matrix[](const int,const int,const string,const float)'})
call add(f,{'word':'agentclipsampleworld','kind':'f','menu':'matrix[](const string,const int,const string,const float)'})
let c['agentclipsampleworld'] = f
let f = []
call add(f,{'word':'agentcliptimes','kind':'f','menu':'float[](const int,const int)'})
call add(f,{'word':'agentcliptimes','kind':'f','menu':'float[](const string,const int)'})
let c['agentcliptimes'] = f
let f = []
call add(f,{'word':'agentcliptransformgroups','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agentcliptransformgroups','kind':'f','menu':'string[](const string,const int)'})
let c['agentcliptransformgroups'] = f
let f = []
call add(f,{'word':'agentclipweights','kind':'f','menu':'float[](const int,const int)'})
call add(f,{'word':'agentclipweights','kind':'f','menu':'float[](const string,const int)'})
let c['agentclipweights'] = f
let f = []
call add(f,{'word':'agentcollisionlayer','kind':'f','menu':'string(const int,const int)'})
call add(f,{'word':'agentcollisionlayer','kind':'f','menu':'string(const string,const int)'})
let c['agentcollisionlayer'] = f
let f = []
call add(f,{'word':'agentcurrentlayer','kind':'f','menu':'string(const int,const int)'})
call add(f,{'word':'agentcurrentlayer','kind':'f','menu':'string(const string,const int)'})
let c['agentcurrentlayer'] = f
let f = []
call add(f,{'word':'agentfindtransformgroup','kind':'f','menu':'int(const int,const int,const string)'})
call add(f,{'word':'agentfindtransformgroup','kind':'f','menu':'int(const string,const int,const string)'})
let c['agentfindtransformgroup'] = f
let f = []
call add(f,{'word':'agentlayerbindings','kind':'f','menu':'int[](const int,const int,const string,const string)'})
call add(f,{'word':'agentlayerbindings','kind':'f','menu':'int[](const string,const int,const string,const string)'})
let c['agentlayerbindings'] = f
let f = []
call add(f,{'word':'agentlayers','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agentlayers','kind':'f','menu':'string[](const string,const int)'})
let c['agentlayers'] = f
let f = []
call add(f,{'word':'agentlayershapes','kind':'f','menu':'string[](const int,const int,const string,const int)'})
call add(f,{'word':'agentlayershapes','kind':'f','menu':'string[](const int,const int,const string,const string)'})
call add(f,{'word':'agentlayershapes','kind':'f','menu':'string[](const string,const int,const string,const int)'})
call add(f,{'word':'agentlayershapes','kind':'f','menu':'string[](const string,const int,const string,const string)'})
let c['agentlayershapes'] = f
let f = []
call add(f,{'word':'agentlocaltransform','kind':'f','menu':'matrix(const int,const int,const int)'})
call add(f,{'word':'agentlocaltransform','kind':'f','menu':'matrix(const string,const int,const int)'})
let c['agentlocaltransform'] = f
let f = []
call add(f,{'word':'agentlocaltransforms','kind':'f','menu':'matrix[](const int,const int)'})
call add(f,{'word':'agentlocaltransforms','kind':'f','menu':'matrix[](const string,const int)'})
let c['agentlocaltransforms'] = f
let f = []
call add(f,{'word':'agentrigchildren','kind':'f','menu':'int[](const int,const int,const int)'})
call add(f,{'word':'agentrigchildren','kind':'f','menu':'int[](const string,const int,const int)'})
let c['agentrigchildren'] = f
let f = []
call add(f,{'word':'agentrigfind','kind':'f','menu':'int(const int,const int,const string)'})
call add(f,{'word':'agentrigfind','kind':'f','menu':'int(const string,const int,const string)'})
let c['agentrigfind'] = f
let f = []
call add(f,{'word':'agentrigparent','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'agentrigparent','kind':'f','menu':'int(const string,const int,const int)'})
let c['agentrigparent'] = f
let f = []
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const int,const int,const int,const int[],const matrix[],const int,const int)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const int,const int,const int,const int[],const matrix[],const int,const int,const float,const int)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const int,const int,const int,const int[],const matrix[],const int,const int,const float,const int,const float[],const int[],const int[])'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const int,const int,const int,const int[],const matrix[],const int,const int,const float,const int,const float[],const int[],const int[],const string,const string,const string)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const string,const int,const int,const int[],const matrix[],const int,const int)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const string,const int,const int,const int[],const matrix[],const int,const int,const float,const int)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const string,const int,const int,const int[],const matrix[],const int,const int,const float,const int,const float[],const int[],const int[])'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const string,const int,const int,const int[],const matrix[],const int,const int,const float,const int,const float[],const int[],const int[],const string,const string,const string)'})
let c['agentsolvefbik'] = f
let f = []
call add(f,{'word':'agenttransformcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'agenttransformcount','kind':'f','menu':'int(const string,const int)'})
let c['agenttransformcount'] = f
let f = []
call add(f,{'word':'agenttransformgroupmember','kind':'f','menu':'int(const int,const int,const int,const int)'})
call add(f,{'word':'agenttransformgroupmember','kind':'f','menu':'int(const int,const int,const string,const int)'})
call add(f,{'word':'agenttransformgroupmember','kind':'f','menu':'int(const string,const int,const int,const int)'})
call add(f,{'word':'agenttransformgroupmember','kind':'f','menu':'int(const string,const int,const string,const int)'})
let c['agenttransformgroupmember'] = f
let f = []
call add(f,{'word':'agenttransformgroups','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agenttransformgroups','kind':'f','menu':'string[](const string,const int)'})
let c['agenttransformgroups'] = f
let f = []
call add(f,{'word':'agenttransformgroupweight','kind':'f','menu':'float(const int,const int,const int,const int)'})
call add(f,{'word':'agenttransformgroupweight','kind':'f','menu':'float(const string,const int,const int,const int)'})
let c['agenttransformgroupweight'] = f
let f = []
call add(f,{'word':'agenttransformnames','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agenttransformnames','kind':'f','menu':'string[](const string,const int)'})
let c['agenttransformnames'] = f
let f = []
call add(f,{'word':'agenttransformtolocal','kind':'f','menu':'int(const int,const int,export matrix[])'})
call add(f,{'word':'agenttransformtolocal','kind':'f','menu':'int(const string,const int,export matrix[])'})
let c['agenttransformtolocal'] = f
let f = []
call add(f,{'word':'agenttransformtoworld','kind':'f','menu':'int(const int,const int,export matrix[])'})
call add(f,{'word':'agenttransformtoworld','kind':'f','menu':'int(const string,const int,export matrix[])'})
let c['agenttransformtoworld'] = f
let f = []
call add(f,{'word':'agentworldtransform','kind':'f','menu':'matrix(const int,const int,const int)'})
call add(f,{'word':'agentworldtransform','kind':'f','menu':'matrix(const string,const int,const int)'})
let c['agentworldtransform'] = f
let f = []
call add(f,{'word':'agentworldtransforms','kind':'f','menu':'matrix[](const int,const int)'})
call add(f,{'word':'agentworldtransforms','kind':'f','menu':'matrix[](const string,const int)'})
let c['agentworldtransforms'] = f
let f = []
call add(f,{'word':'albedo','kind':'f','menu':'vector(const bsdf,const int)'})
call add(f,{'word':'albedo','kind':'f','menu':'vector(const bsdf,const vector,const int)'})
call add(f,{'word':'albedo','kind':'f','menu':'vector(const bsdf,const vector)'})
call add(f,{'word':'albedo','kind':'f','menu':'vector(const bsdf)'})
let c['albedo'] = f
let f = []
let c['and'] = f
let f = []
call add(f,{'word':'anoise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'anoise','kind':'f','menu':'float(const vector,const int,const float,const float)'})
call add(f,{'word':'anoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'anoise','kind':'f','menu':'float(const vector,const int,const int,const int,const int,const float,const float)'})
call add(f,{'word':'anoise','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'anoise','kind':'f','menu':'vector(const vector,const int,const float,const float)'})
call add(f,{'word':'anoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
call add(f,{'word':'anoise','kind':'f','menu':'vector(const vector,const int,const int,const int,const int,const float,const float)'})
let c['anoise'] = f
let f = []
call add(f,{'word':'append','kind':'f','menu':'void(export string,const string)'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix2[],const matrix2)'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix2[],const matrix2[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix3[],const matrix3)'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix3[],const matrix3[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix[],const matrix)'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix[],const matrix[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export float[],const float)'})
call add(f,{'word':'append','kind':'f','menu':'void(export float[],const float[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export int[],const int)'})
call add(f,{'word':'append','kind':'f','menu':'void(export int[],const int[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector4[],const vector4)'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector4[],const vector4[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export string[],const string)'})
call add(f,{'word':'append','kind':'f','menu':'void(export string[],const string[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector2[],const vector2)'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector2[],const vector2[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector[],const vector)'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector[],const vector[])'})
let c['append'] = f
let f = []
call add(f,{'word':'area','kind':'f','menu':'float(const vector)'})
let c['area'] = f
let f = []
call add(f,{'word':'argsort','kind':'f','menu':'int[](const float[])'})
call add(f,{'word':'argsort','kind':'f','menu':'int[](const int[])'})
call add(f,{'word':'argsort','kind':'f','menu':'int[](const string[])'})
let c['argsort'] = f
let f = []
call add(f,{'word':'array','kind':'f','menu':'matrix2[]()'})
call add(f,{'word':'array','kind':'f','menu':'matrix3[]()'})
call add(f,{'word':'array','kind':'f','menu':'matrix[]()'})
call add(f,{'word':'array','kind':'f','menu':'float[]()'})
call add(f,{'word':'array','kind':'f','menu':'int[]()'})
call add(f,{'word':'array','kind':'f','menu':'vector4[]()'})
call add(f,{'word':'array','kind':'f','menu':'string[]()'})
call add(f,{'word':'array','kind':'f','menu':'vector2[]()'})
call add(f,{'word':'array','kind':'f','menu':'vector[]()'})
let c['array'] = f
let f = []
call add(f,{'word':'arraylength','kind':'f','menu':'int(const matrix3)'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const matrix)'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const vector4)'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const vector)'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const matrix3[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const matrix[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const bsdf[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const float[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const vector4[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const string[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const vector[])'})
let c['arraylength'] = f
let f = []
call add(f,{'word':'ashikhmin','kind':'f','menu':'bsdf(const vector,const float,const float,const vector,const vector)'})
let c['ashikhmin'] = f
let f = []
call add(f,{'word':'asin','kind':'f','menu':'float(const float)'})
call add(f,{'word':'asin','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'asin','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'asin','kind':'f','menu':'vector(const vector)'})
let c['asin'] = f
let f = []
call add(f,{'word':'assert_enabled','kind':'f','menu':'int()'})
let c['assert_enabled'] = f
let f = []
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,float,const matrix2)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,float,const matrix2)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,float,float,float,float,float,float,const matrix3)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,float,float,float,float,float,float,const matrix3)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,const matrix)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,const matrix)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,float,const vector4)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,float,const vector4)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,const vector)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,const vector)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,const vector2)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,const vector2)'})
let c['assign'] = f
let f = []
call add(f,{'word':'atan','kind':'f','menu':'float(const float)'})
call add(f,{'word':'atan','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'atan','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'atan','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'atan','kind':'f','menu':'vector(const vector)'})
let c['atan'] = f
let f = []
call add(f,{'word':'atan2','kind':'f','menu':'float(const float,const float)'})
let c['atan2'] = f
let f = []
call add(f,{'word':'atof','kind':'f','menu':'float(const string)'})
let c['atof'] = f
let f = []
call add(f,{'word':'atoi','kind':'f','menu':'int(const string)'})
let c['atoi'] = f
let f = []
call add(f,{'word':'atten','kind':'f','menu':'float(const float,const float)'})
let c['atten'] = f
let f = []
call add(f,{'word':'attrib','kind':'f','menu':'matrix2(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix2(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix3(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix3(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'float(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'float(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector4(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector4(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'string(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'string(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector2(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector2(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix2[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix2[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix3[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix3[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'float[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'float[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'int[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'int[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector4[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector4[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'string[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'string[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector2[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector2[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector[](const string,const string,const string,const int)'})
let c['attrib'] = f
let f = []
call add(f,{'word':'attribclass','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'attribclass','kind':'f','menu':'string(const string,const string)'})
let c['attribclass'] = f
let f = []
call add(f,{'word':'attribdataid','kind':'f','menu':'int[](const int,const string,const string)'})
call add(f,{'word':'attribdataid','kind':'f','menu':'int[](const string,const string,const string)'})
let c['attribdataid'] = f
let f = []
call add(f,{'word':'attribsize','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'attribsize','kind':'f','menu':'int(const string,const string,const string)'})
let c['attribsize'] = f
let f = []
call add(f,{'word':'attribtype','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'attribtype','kind':'f','menu':'int(const string,const string,const string)'})
let c['attribtype'] = f
let f = []
call add(f,{'word':'attribtypeinfo','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'attribtypeinfo','kind':'f','menu':'string(const string,const string,const string)'})
let c['attribtypeinfo'] = f
let f = []
call add(f,{'word':'avg','kind':'f','menu':'float(const float)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'avg','kind':'f','menu':'int(const int)'})
call add(f,{'word':'avg','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'avg','kind':'f','menu':'vector4(const vector4,const vector4)'})
call add(f,{'word':'avg','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'avg','kind':'f','menu':'vector2(const vector2,const vector2)'})
call add(f,{'word':'avg','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'avg','kind':'f','menu':'vector(const vector,const vector)'})
call add(f,{'word':'avg','kind':'f','menu':'vector(const vector[])'})
let c['avg'] = f
let f = []
let c['band'] = f
let f = []
call add(f,{'word':'blackbody','kind':'f','menu':'vector(const float,const float)'})
let c['blackbody'] = f
let f = []
call add(f,{'word':'blinn','kind':'f','menu':'bsdf(const vector,const float)'})
let c['blinn'] = f
let f = []
call add(f,{'word':'blinnBRDF','kind':'f','menu':'float(const vector,const vector,const vector,const float)'})
let c['blinnBRDF'] = f
let f = []
let c['bnot'] = f
let f = []
let c['bor'] = f
let f = []
call add(f,{'word':'bouncelabel','kind':'f','menu':'string(const int)'})
let c['bouncelabel'] = f
let f = []
call add(f,{'word':'bouncemask','kind':'f','menu':'int(const string)'})
let c['bouncemask'] = f
let f = []
let c['bpointloop'] = f
let f = []
let c['br'] = f
let f = []
let c['break'] = f
let f = []
call add(f,{'word':'bumpmap','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmap','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmap','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmap','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmap'] = f
let f = []
call add(f,{'word':'bumpmapA','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapA','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapA','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapA','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapA'] = f
let f = []
call add(f,{'word':'bumpmapB','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapB','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapB','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapB','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapB'] = f
let f = []
call add(f,{'word':'bumpmapG','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapG','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapG','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapG','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapG'] = f
let f = []
call add(f,{'word':'bumpmapL','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapL','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapL','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapL','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapL'] = f
let f = []
call add(f,{'word':'bumpmapR','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapR','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapR','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapR','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapR'] = f
let f = []
let c['bwhile'] = f
let f = []
let c['bxor'] = f
let f = []
call add(f,{'word':'cbrt','kind':'f','menu':'float(const float)'})
call add(f,{'word':'cbrt','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'cbrt','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'cbrt','kind':'f','menu':'vector(const vector)'})
let c['cbrt'] = f
let f = []
call add(f,{'word':'ceil','kind':'f','menu':'float(const float)'})
call add(f,{'word':'ceil','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'ceil','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'ceil','kind':'f','menu':'vector(const vector)'})
let c['ceil'] = f
let f = []
call add(f,{'word':'ch','kind':'f','menu':'float(const int,const int,const int)'})
call add(f,{'word':'ch','kind':'f','menu':'float(const int,const int,const int,const float)'})
call add(f,{'word':'ch','kind':'f','menu':'float(const string)'})
call add(f,{'word':'ch','kind':'f','menu':'float(const string,const float)'})
call add(f,{'word':'ch','kind':'f','menu':'string(const string)'})
call add(f,{'word':'ch','kind':'f','menu':'string(const string,const float)'})
let c['ch'] = f
let f = []
call add(f,{'word':'ch2','kind':'f','menu':'matrix2(const string)'})
call add(f,{'word':'ch2','kind':'f','menu':'matrix2(const string,const float)'})
let c['ch2'] = f
let f = []
call add(f,{'word':'ch3','kind':'f','menu':'matrix3(const string)'})
call add(f,{'word':'ch3','kind':'f','menu':'matrix3(const string,const float)'})
let c['ch3'] = f
let f = []
call add(f,{'word':'ch4','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'ch4','kind':'f','menu':'matrix(const string,const float)'})
let c['ch4'] = f
let f = []
call add(f,{'word':'chexpr','kind':'f','menu':'float(const string,const string)'})
let c['chexpr'] = f
let f = []
call add(f,{'word':'chexprf','kind':'f','menu':'float(const string,const string,const float)'})
let c['chexprf'] = f
let f = []
call add(f,{'word':'chexprt','kind':'f','menu':'float(const string,const string,const float)'})
let c['chexprt'] = f
let f = []
call add(f,{'word':'chf','kind':'f','menu':'float(const int,const int,const int)'})
call add(f,{'word':'chf','kind':'f','menu':'float(const int,const int,const int,const float)'})
call add(f,{'word':'chf','kind':'f','menu':'float(const string)'})
call add(f,{'word':'chf','kind':'f','menu':'float(const string,const float)'})
let c['chf'] = f
let f = []
call add(f,{'word':'chi','kind':'f','menu':'int(const string)'})
call add(f,{'word':'chi','kind':'f','menu':'int(const string,const float)'})
let c['chi'] = f
let f = []
call add(f,{'word':'chid','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'chid','kind':'f','menu':'void(const string,int,int,int)'})
call add(f,{'word':'chid','kind':'f','menu':'int(const string,int,int)'})
call add(f,{'word':'chid','kind':'f','menu':'void(const string,const string,int,int,int)'})
call add(f,{'word':'chid','kind':'f','menu':'int(const string,const string,int,int)'})
let c['chid'] = f
let f = []
call add(f,{'word':'chop','kind':'f','menu':'matrix(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'matrix(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'matrix(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'float(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'float(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'float(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector4(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector4(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector4(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector2(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector2(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector2(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector(const string,const string,const int)'})
let c['chop'] = f
let f = []
call add(f,{'word':'choplocal','kind':'f','menu':'matrix(const string,const int,const float)'})
call add(f,{'word':'choplocal','kind':'f','menu':'matrix(const string,const int,const int)'})
call add(f,{'word':'choplocal','kind':'f','menu':'matrix(const string,const string,const float)'})
call add(f,{'word':'choplocal','kind':'f','menu':'matrix(const string,const string,const int)'})
let c['choplocal'] = f
let f = []
call add(f,{'word':'choplocalt','kind':'f','menu':'matrix(const string,const int,const float,const float)'})
call add(f,{'word':'choplocalt','kind':'f','menu':'matrix(const string,const int,const int,const float)'})
call add(f,{'word':'choplocalt','kind':'f','menu':'matrix(const string,const string,const float,const float)'})
call add(f,{'word':'choplocalt','kind':'f','menu':'matrix(const string,const string,const int,const float)'})
let c['choplocalt'] = f
let f = []
call add(f,{'word':'chopt','kind':'f','menu':'matrix(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'matrix(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'matrix(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'matrix(const string,const string,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'float(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'float(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'float(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'float(const string,const string,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector4(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector4(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector4(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector4(const string,const string,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector2(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector2(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector2(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector2(const string,const string,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector(const string,const string,const int,const float)'})
let c['chopt'] = f
let f = []
call add(f,{'word':'chp','kind':'f','menu':'vector4(const string)'})
call add(f,{'word':'chp','kind':'f','menu':'vector4(const string,const float)'})
let c['chp'] = f
let f = []
call add(f,{'word':'chr','kind':'f','menu':'string(const int)'})
let c['chr'] = f
let f = []
call add(f,{'word':'chramp','kind':'f','menu':'float(const string,const float)'})
call add(f,{'word':'chramp','kind':'f','menu':'float(const string,const float,const float)'})
call add(f,{'word':'chramp','kind':'f','menu':'vector(const string,const float)'})
call add(f,{'word':'chramp','kind':'f','menu':'vector(const string,const float,const float)'})
let c['chramp'] = f
let f = []
call add(f,{'word':'chs','kind':'f','menu':'string(const string)'})
call add(f,{'word':'chs','kind':'f','menu':'string(const string,const float)'})
let c['chs'] = f
let f = []
call add(f,{'word':'chsraw','kind':'f','menu':'string(const string)'})
let c['chsraw'] = f
let f = []
call add(f,{'word':'chu','kind':'f','menu':'vector2(const string)'})
call add(f,{'word':'chu','kind':'f','menu':'vector2(const string,const float)'})
let c['chu'] = f
let f = []
call add(f,{'word':'chv','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'chv','kind':'f','menu':'vector(const int,const int,const float)'})
call add(f,{'word':'chv','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'chv','kind':'f','menu':'vector(const string,const float)'})
let c['chv'] = f
let f = []
call add(f,{'word':'ckspline','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'ckspline','kind':'f','menu':'vector4(const float,const vector4,const float)'})
call add(f,{'word':'ckspline','kind':'f','menu':'vector(const float,const vector,const float)'})
let c['ckspline'] = f
let f = []
call add(f,{'word':'clamp','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'clamp','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'clamp','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'clamp','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'clamp','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['clamp'] = f
let f = []
call add(f,{'word':'clip','kind':'f','menu':'void(int,export vector,export vector,const vector4)'})
call add(f,{'word':'clip','kind':'f','menu':'int(export vector,export vector,const vector4)'})
call add(f,{'word':'clip','kind':'f','menu':'void(int,export vector,export vector,const vector,const vector)'})
call add(f,{'word':'clip','kind':'f','menu':'int(export vector,export vector,const vector,const vector)'})
let c['clip'] = f
let f = []
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const float,const float)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const float,const float,const float,const float,const float,const float,const float,const float,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const vector)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const float,const float)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const float,const float,const float,const float,const float,const float,const float,const float,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector,const int)'})
let c['colormap'] = f
let f = []
call add(f,{'word':'computenormal','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'computenormal','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['computenormal'] = f
let f = []
call add(f,{'word':'concat','kind':'f','menu':'string(const string,const string)'})
let c['concat'] = f
let f = []
call add(f,{'word':'cone','kind':'f','menu':'bsdf(const vector,const vector,const float)'})
let c['cone'] = f
let f = []
call add(f,{'word':'cos','kind':'f','menu':'float(const float)'})
call add(f,{'word':'cos','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'cos','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'cos','kind':'f','menu':'vector(const vector)'})
let c['cos'] = f
let f = []
call add(f,{'word':'cosh','kind':'f','menu':'float(const float)'})
call add(f,{'word':'cosh','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'cosh','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'cosh','kind':'f','menu':'vector(const vector)'})
let c['cosh'] = f
let f = []
call add(f,{'word':'cout','kind':'f','menu':'void()'})
let c['cout'] = f
let f = []
call add(f,{'word':'cracktransform','kind':'f','menu':'void(const int,const int,const vector,const matrix,vector,vector,vector)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'vector(const int,const int,const vector,const matrix,vector,vector)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'void(const int,const int,const vector,const vector,const matrix,vector,vector,vector,vector)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'vector(const int,const int,const vector,const vector,const matrix,vector,vector,vector)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'vector(const int,const int,const int,const vector,const matrix)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'vector(const int,const int,const int,const vector,const vector,const matrix)'})
let c['cracktransform'] = f
let f = []
call add(f,{'word':'create_cdf','kind':'f','menu':'float[](const float[])'})
let c['create_cdf'] = f
let f = []
call add(f,{'word':'create_pdf','kind':'f','menu':'float[](const float[])'})
let c['create_pdf'] = f
let f = []
call add(f,{'word':'cross','kind':'f','menu':'vector(const vector,const vector)'})
let c['cross'] = f
let f = []
call add(f,{'word':'cspline','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'cspline','kind':'f','menu':'vector4(const float,const vector4)'})
call add(f,{'word':'cspline','kind':'f','menu':'vector(const float,const vector)'})
let c['cspline'] = f
let f = []
call add(f,{'word':'ctransform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'ctransform','kind':'f','menu':'vector(const string,const vector)'})
let c['ctransform'] = f
let f = []
call add(f,{'word':'curlnoise','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'curlnoise','kind':'f','menu':'vector(const vector)'})
let c['curlnoise'] = f
let f = []
call add(f,{'word':'curlnoise2d','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'curlnoise2d','kind':'f','menu':'vector(const vector)'})
let c['curlnoise2d'] = f
let f = []
call add(f,{'word':'curlxnoise','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'curlxnoise','kind':'f','menu':'vector(const vector)'})
let c['curlxnoise'] = f
let f = []
call add(f,{'word':'curlxnoise2d','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'curlxnoise2d','kind':'f','menu':'vector(const vector)'})
let c['curlxnoise2d'] = f
let f = []
call add(f,{'word':'cvex_bsdf','kind':'f','menu':'bsdf(const string,const string)'})
let c['cvex_bsdf'] = f
let f = []
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,const float,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,const float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,const float,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,const float,float,float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,const float,int,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,const float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,int,float,float,float,float,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,float,float,float,float,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,int,float,float,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,float,float,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector4,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector4,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector4,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector4,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector4,int,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector4,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector2,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector2,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector2,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector2,float,float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector2,int,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector2,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector,int,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector,int,float,float,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector,float,float,const int,const int,const int)'})
let c['cwnoise'] = f
let f = []
call add(f,{'word':'decode','kind':'f','menu':'string(const string)'})
let c['decode'] = f
let f = []
call add(f,{'word':'degrees','kind':'f','menu':'float(const float)'})
call add(f,{'word':'degrees','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'degrees','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'degrees','kind':'f','menu':'vector(const vector)'})
let c['degrees'] = f
let f = []
call add(f,{'word':'depthmap','kind':'f','menu':'float(const string,const float,const float)'})
call add(f,{'word':'depthmap','kind':'f','menu':'float(const string,const vector)'})
let c['depthmap'] = f
let f = []
call add(f,{'word':'detail','kind':'f','menu':'matrix2(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'float(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'float(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'int(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'string(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'float[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'float[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'int[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector[](const string,const string,const int)'})
let c['detail'] = f
let f = []
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix2(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix2(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix3(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix3(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'float(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'float(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'int(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'int(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector4(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector4(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'string(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'string(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector2(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector2(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix2[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix2[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix3[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix3[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'float[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'float[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'int[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'int[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector4[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector4[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'string[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'string[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector2[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector2[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector[](const string,const string,const int,int)'})
let c['detailattrib'] = f
let f = []
call add(f,{'word':'detailattribsize','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'detailattribsize','kind':'f','menu':'int(const string,const string)'})
let c['detailattribsize'] = f
let f = []
call add(f,{'word':'detailattribtype','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'detailattribtype','kind':'f','menu':'int(const string,const string)'})
let c['detailattribtype'] = f
let f = []
call add(f,{'word':'detailattribtypeinfo','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'detailattribtypeinfo','kind':'f','menu':'string(const string,const string)'})
let c['detailattribtypeinfo'] = f
let f = []
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix2(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix2(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix3(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix3(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'float(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'float(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'int(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector4(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector4(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'string(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector2(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector2(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix2[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix2[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix3[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix3[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'float[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'float[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'int[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector4[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector4[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector2[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector2[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector[](const string,const string)'})
let c['detailintrinsic'] = f
let f = []
call add(f,{'word':'determinant','kind':'f','menu':'float(const matrix2)'})
call add(f,{'word':'determinant','kind':'f','menu':'float(const matrix3)'})
call add(f,{'word':'determinant','kind':'f','menu':'float(const matrix)'})
let c['determinant'] = f
let f = []
call add(f,{'word':'diagonalizesymmetric','kind':'f','menu':'matrix3(const matrix3,vector)'})
let c['diagonalizesymmetric'] = f
let f = []
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf(const vector,const float)'})
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf(const vector,const vector,const float)'})
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf(const vector,const vector)'})
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf(const vector)'})
let c['diffuse'] = f
let f = []
call add(f,{'word':'diffuseBRDF','kind':'f','menu':'float(const vector,const vector)'})
call add(f,{'word':'diffuseBRDF','kind':'f','menu':'float(const vector,const vector,const vector,const float)'})
let c['diffuseBRDF'] = f
let f = []
call add(f,{'word':'dihedral','kind':'f','menu':'matrix3(const vector,const vector)'})
call add(f,{'word':'dihedral','kind':'f','menu':'vector4(const vector,const vector)'})
let c['dihedral'] = f
let f = []
call add(f,{'word':'distance','kind':'f','menu':'float(const vector4,const vector4)'})
call add(f,{'word':'distance','kind':'f','menu':'float(const vector2,const vector2)'})
call add(f,{'word':'distance','kind':'f','menu':'float(const vector,const vector)'})
let c['distance'] = f
let f = []
call add(f,{'word':'distance2','kind':'f','menu':'float(const vector4,const vector4)'})
call add(f,{'word':'distance2','kind':'f','menu':'float(const vector2,const vector2)'})
call add(f,{'word':'distance2','kind':'f','menu':'float(const vector,const vector)'})
let c['distance2'] = f
let f = []
let c['div'] = f
let f = []
call add(f,{'word':'dot','kind':'f','menu':'float(const vector4,const vector4)'})
call add(f,{'word':'dot','kind':'f','menu':'float(const vector4,const vector)'})
call add(f,{'word':'dot','kind':'f','menu':'float(const vector2,const vector2)'})
call add(f,{'word':'dot','kind':'f','menu':'float(const vector,const vector4)'})
call add(f,{'word':'dot','kind':'f','menu':'float(const vector,const vector)'})
let c['dot'] = f
let f = []
call add(f,{'word':'dsmpixel','kind':'f','menu':'int(const string,const string,const int,const int,float[])'})
call add(f,{'word':'dsmpixel','kind':'f','menu':'int(const string,const string,const int,const int,vector4[])'})
call add(f,{'word':'dsmpixel','kind':'f','menu':'int(const string,const string,const int,const int,vector[])'})
let c['dsmpixel'] = f
let f = []
call add(f,{'word':'efit','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
call add(f,{'word':'efit','kind':'f','menu':'vector4(const vector4,const vector4,const vector4,const float,const float)'})
call add(f,{'word':'efit','kind':'f','menu':'vector4(const vector4,const vector4,const vector4,const vector4,const vector4)'})
call add(f,{'word':'efit','kind':'f','menu':'vector2(const vector2,const vector2,const vector2,const float,const float)'})
call add(f,{'word':'efit','kind':'f','menu':'vector2(const vector2,const vector2,const vector2,const vector2,const vector2)'})
call add(f,{'word':'efit','kind':'f','menu':'vector(const vector,const vector,const vector,const float,const float)'})
call add(f,{'word':'efit','kind':'f','menu':'vector(const vector,const vector,const vector,const vector,const vector)'})
let c['efit'] = f
let f = []
call add(f,{'word':'eigenvalues','kind':'f','menu':'void(int,const matrix3,vector,vector)'})
call add(f,{'word':'eigenvalues','kind':'f','menu':'int(const matrix3,vector,vector)'})
let c['eigenvalues'] = f
let f = []
let c['else'] = f
let f = []
call add(f,{'word':'encode','kind':'f','menu':'string(const string)'})
let c['encode'] = f
let f = []
let c['endel'] = f
let f = []
let c['endif'] = f
let f = []
let c['endnotif'] = f
let f = []
call add(f,{'word':'endswith','kind':'f','menu':'int(const string,const string)'})
let c['endswith'] = f
let f = []
call add(f,{'word':'environment','kind':'f','menu':'vector4(const string,const vector)'})
call add(f,{'word':'environment','kind':'f','menu':'vector4(const string,const vector,const float)'})
call add(f,{'word':'environment','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'environment','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'environment','kind':'f','menu':'vector(const string,const vector,const float)'})
call add(f,{'word':'environment','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector)'})
let c['environment'] = f
let f = []
let c['eq'] = f
let f = []
call add(f,{'word':'erf','kind':'f','menu':'float(const float)'})
call add(f,{'word':'erf','kind':'f','menu':'vector2(const vector2)'})
let c['erf'] = f
let f = []
call add(f,{'word':'erf_inv','kind':'f','menu':'float(const float)'})
let c['erf_inv'] = f
let f = []
call add(f,{'word':'erfc','kind':'f','menu':'float(const float)'})
let c['erfc'] = f
let f = []
call add(f,{'word':'error','kind':'f','menu':'void(const string)'})
let c['error'] = f
let f = []
call add(f,{'word':'eulertoquaternion','kind':'f','menu':'vector4(const vector,const int)'})
let c['eulertoquaternion'] = f
let f = []
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,float,const int)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,const int)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,const vector,float,const int)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,const vector,const int)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,const vector)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector)'})
let c['eval_bsdf'] = f
let f = []
call add(f,{'word':'exp','kind':'f','menu':'float(const float)'})
call add(f,{'word':'exp','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'exp','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'exp','kind':'f','menu':'vector(const vector)'})
let c['exp'] = f
let f = []
call add(f,{'word':'expand_udim','kind':'f','menu':'string(const float,const float,const string)'})
let c['expand_udim'] = f
let f = []
call add(f,{'word':'expandedgegroup','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'expandedgegroup','kind':'f','menu':'int[](const string,const string)'})
let c['expandedgegroup'] = f
let f = []
call add(f,{'word':'expandpointgroup','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'expandpointgroup','kind':'f','menu':'int[](const string,const string)'})
let c['expandpointgroup'] = f
let f = []
call add(f,{'word':'expandprimgroup','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'expandprimgroup','kind':'f','menu':'int[](const string,const string)'})
let c['expandprimgroup'] = f
let f = []
call add(f,{'word':'expandvertexgroup','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'expandvertexgroup','kind':'f','menu':'int[](const string,const string)'})
let c['expandvertexgroup'] = f
let f = []
call add(f,{'word':'filamentsample','kind':'f','menu':'vector(const int,const vector)'})
call add(f,{'word':'filamentsample','kind':'f','menu':'vector(const string,const vector)'})
let c['filamentsample'] = f
let f = []
call add(f,{'word':'file_stat','kind':'f','menu':'int(const string,int[])'})
let c['file_stat'] = f
let f = []
call add(f,{'word':'filterstep','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'filterstep','kind':'f','menu':'float(const float,const float,const float)'})
let c['filterstep'] = f
let f = []
call add(f,{'word':'find','kind':'f','menu':'int(const string,const string)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string,const string,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix2[],const matrix2)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix2[],const matrix2,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix2[],const matrix2,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix3[],const matrix3)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix3[],const matrix3,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix3[],const matrix3,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix[],const matrix)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix[],const matrix,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix[],const matrix,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const float[],const float)'})
call add(f,{'word':'find','kind':'f','menu':'int(const float[],const float,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const float[],const float,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const int[],const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const int[],const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const int[],const int,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector4[],const vector4)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector4[],const vector4,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector4[],const vector4,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string[],const string)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string[],const string,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string[],const string,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector2[],const vector2)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector2[],const vector2,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector2[],const vector2,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector[],const vector)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector[],const vector,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector[],const vector,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string,const string)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string,const string,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix2[],const matrix2)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix2[],const matrix2,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix2[],const matrix2,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix3[],const matrix3)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix3[],const matrix3,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix3[],const matrix3,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix[],const matrix)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix[],const matrix,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix[],const matrix,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const float[],const float)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const float[],const float,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const float[],const float,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const int[],const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const int[],const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const int[],const int,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector4[],const vector4)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector4[],const vector4,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector4[],const vector4,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string[],const string)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string[],const string,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string[],const string,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector2[],const vector2)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector2[],const vector2,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector2[],const vector2,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector[],const vector)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector[],const vector,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector[],const vector,const int,const int)'})
let c['find'] = f
let f = []
call add(f,{'word':'findattribval','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const int,const string,const string,const int,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const int,const string,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const string,const string,const string,const int,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const string,const string,const string,const string)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const string,const string,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int[](const int,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int[](const int,const string,const string,const string)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int[](const string,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int[](const string,const string,const string,const string)'})
let c['findattribval'] = f
let f = []
call add(f,{'word':'findattribvalcount','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'findattribvalcount','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'findattribvalcount','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'findattribvalcount','kind':'f','menu':'int(const string,const string,const string,const string)'})
let c['findattribvalcount'] = f
let f = []
call add(f,{'word':'fit','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
call add(f,{'word':'fit','kind':'f','menu':'vector4(const vector4,const vector4,const vector4,const vector4,const vector4)'})
call add(f,{'word':'fit','kind':'f','menu':'vector2(const vector2,const vector2,const vector2,const vector2,const vector2)'})
call add(f,{'word':'fit','kind':'f','menu':'vector(const vector,const vector,const vector,const vector,const vector)'})
let c['fit'] = f
let f = []
call add(f,{'word':'fit01','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'fit01','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'fit01','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'fit01','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['fit01'] = f
let f = []
call add(f,{'word':'fit10','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'fit10','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'fit10','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'fit10','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['fit10'] = f
let f = []
call add(f,{'word':'fit11','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'fit11','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'fit11','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'fit11','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['fit11'] = f
let f = []
call add(f,{'word':'floor','kind':'f','menu':'float(const float)'})
call add(f,{'word':'floor','kind':'f','menu':'int(const float)'})
call add(f,{'word':'floor','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'floor','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'floor','kind':'f','menu':'vector(const vector)'})
let c['floor'] = f
let f = []
call add(f,{'word':'flownoise','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'float(const vector4,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'float(const vector,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'vector(const float,const float,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'vector(const vector4,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'vector(const vector,const float)'})
let c['flownoise'] = f
let f = []
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const float,const float,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const vector4,const int,const int,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const vector4,const vector4,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const vector,const int,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const vector,const vector,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const float,const float,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const vector4,const int,const int,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const vector4,const vector4,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const vector,const int,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const vector,const vector,const float)'})
let c['flowpnoise'] = f
let f = []
call add(f,{'word':'frac','kind':'f','menu':'float(const float)'})
call add(f,{'word':'frac','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'frac','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'frac','kind':'f','menu':'vector(const vector)'})
let c['frac'] = f
let f = []
call add(f,{'word':'fresnel','kind':'f','menu':'void(const vector,const vector,const float,float,float)'})
call add(f,{'word':'fresnel','kind':'f','menu':'float(const vector,const vector,const float,float)'})
call add(f,{'word':'fresnel','kind':'f','menu':'void(const vector,const vector,const float,float,float,vector,vector)'})
call add(f,{'word':'fresnel','kind':'f','menu':'float(const vector,const vector,const float,float,vector,vector)'})
let c['fresnel'] = f
let f = []
call add(f,{'word':'fromNDC','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'fromNDC','kind':'f','menu':'vector(const vector)'})
let c['fromNDC'] = f
let f = []
call add(f,{'word':'frontface','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['frontface'] = f
let f = []
call add(f,{'word':'fuzzify','kind':'f','menu':'float(const string[],const float[],const float[],const float,const float,const float)'})
let c['fuzzify'] = f
let f = []
call add(f,{'word':'fuzzy_and','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_and','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_and'] = f
let f = []
call add(f,{'word':'fuzzy_defuzz_centroid','kind':'f','menu':'float(const float[],const float,const float)'})
let c['fuzzy_defuzz_centroid'] = f
let f = []
call add(f,{'word':'fuzzy_nand','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_nand','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_nand'] = f
let f = []
call add(f,{'word':'fuzzy_nor','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_nor','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_nor'] = f
let f = []
call add(f,{'word':'fuzzy_not','kind':'f','menu':'float(const float)'})
call add(f,{'word':'fuzzy_not','kind':'f','menu':'int(const int)'})
let c['fuzzy_not'] = f
let f = []
call add(f,{'word':'fuzzy_nxor','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_nxor','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_nxor'] = f
let f = []
call add(f,{'word':'fuzzy_or','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_or','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_or'] = f
let f = []
call add(f,{'word':'fuzzy_xor','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_xor','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_xor'] = f
let f = []
let c['ge'] = f
let f = []
call add(f,{'word':'geoself','kind':'f','menu':'int()'})
let c['geoself'] = f
let f = []
call add(f,{'word':'geounwrap','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'geounwrap','kind':'f','menu':'string(const string,const string)'})
let c['geounwrap'] = f
let f = []
call add(f,{'word':'getattrib','kind':'f','menu':'matrix2(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix2(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix3(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix3(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'float(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'float(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'int(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'int(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector4(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector4(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'string(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'string(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector2(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector2(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix2[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix2[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix3[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix3[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'float[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'float[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'int[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'int[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector4[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector4[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'string[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'string[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector2[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector2[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector[](const string,const string,const string,const int,int)'})
let c['getattrib'] = f
let f = []
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,matrix3,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,matrix,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,float,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,int,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,vector4,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,string,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,vector,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,float[],const string,const string,const int,const int)'})
let c['getattribute'] = f
let f = []
call add(f,{'word':'getbbox','kind':'f','menu':'void(const int,const string,vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(const int,const string,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'void(const int,vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(const int,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'void(const string,const string,vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(const string,const string,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'void(const string,vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(const string,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'void(vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(vector)'})
let c['getbbox'] = f
let f = []
call add(f,{'word':'getbbox_center','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getbbox_center','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getbbox_center','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getbbox_center','kind':'f','menu':'vector(const string,const string)'})
let c['getbbox_center'] = f
let f = []
call add(f,{'word':'getbbox_max','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getbbox_max','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getbbox_max','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getbbox_max','kind':'f','menu':'vector(const string,const string)'})
let c['getbbox_max'] = f
let f = []
call add(f,{'word':'getbbox_min','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getbbox_min','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getbbox_min','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getbbox_min','kind':'f','menu':'vector(const string,const string)'})
let c['getbbox_min'] = f
let f = []
call add(f,{'word':'getbbox_size','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getbbox_size','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getbbox_size','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getbbox_size','kind':'f','menu':'vector(const string,const string)'})
let c['getbbox_size'] = f
let f = []
call add(f,{'word':'getbounces','kind':'f','menu':'int(const bsdf)'})
let c['getbounces'] = f
let f = []
call add(f,{'word':'getbounds','kind':'f','menu':'int(const string,const string,vector,vector)'})
call add(f,{'word':'getbounds','kind':'f','menu':'int(const string,vector,vector)'})
let c['getbounds'] = f
let f = []
call add(f,{'word':'getcomp','kind':'f','menu':'matrix2(const matrix2[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'matrix3(const matrix3[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'matrix(const matrix[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'bsdf(const bsdf[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const matrix2,const int,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const matrix3,const int,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const matrix,const int,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const vector4,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const vector2,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const vector,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const float[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'int(const int[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'vector4(const vector4[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'string(const string,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'string(const string[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'vector2(const vector2[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'vector(const vector[],const int)'})
let c['getcomp'] = f
let f = []
let c['getelem'] = f
let f = []
call add(f,{'word':'getpackedtransform','kind':'f','menu':'matrix(const int,const int)'})
let c['getpackedtransform'] = f
let f = []
call add(f,{'word':'getpointbbox','kind':'f','menu':'void(const int,const string,vector,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'vector(const int,const string,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'void(const int,vector,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'vector(const int,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'void(const string,const string,vector,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'vector(const string,const string,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'void(const string,vector,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'vector(const string,vector)'})
let c['getpointbbox'] = f
let f = []
call add(f,{'word':'getpointbbox_center','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getpointbbox_center','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getpointbbox_center','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getpointbbox_center','kind':'f','menu':'vector(const string,const string)'})
let c['getpointbbox_center'] = f
let f = []
call add(f,{'word':'getpointbbox_max','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getpointbbox_max','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getpointbbox_max','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getpointbbox_max','kind':'f','menu':'vector(const string,const string)'})
let c['getpointbbox_max'] = f
let f = []
call add(f,{'word':'getpointbbox_min','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getpointbbox_min','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getpointbbox_min','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getpointbbox_min','kind':'f','menu':'vector(const string,const string)'})
let c['getpointbbox_min'] = f
let f = []
call add(f,{'word':'getpointbbox_size','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getpointbbox_size','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getpointbbox_size','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getpointbbox_size','kind':'f','menu':'vector(const string,const string)'})
let c['getpointbbox_size'] = f
let f = []
call add(f,{'word':'getspace','kind':'f','menu':'matrix(const string,const string)'})
let c['getspace'] = f
let f = []
call add(f,{'word':'gradient','kind':'f','menu':'vector(const vector,const float)'})
let c['gradient'] = f
let f = []
call add(f,{'word':'gradient3d','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['gradient3d'] = f
let f = []
let c['gt'] = f
let f = []
call add(f,{'word':'hair','kind':'f','menu':'bsdf(const vector,const vector,const float,const float,const float,const float,const float)'})
call add(f,{'word':'hair','kind':'f','menu':'bsdf(const vector,const vector,const float,const float,const float)'})
call add(f,{'word':'hair','kind':'f','menu':'bsdf(const vector,const vector,const float,const float)'})
let c['hair'] = f
let f = []
call add(f,{'word':'has_udim','kind':'f','menu':'int(const string)'})
let c['has_udim'] = f
let f = []
call add(f,{'word':'hasattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'hasattrib','kind':'f','menu':'int(const string,const string,const string)'})
let c['hasattrib'] = f
let f = []
call add(f,{'word':'hasdetailattrib','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'hasdetailattrib','kind':'f','menu':'int(const string,const string)'})
let c['hasdetailattrib'] = f
let f = []
call add(f,{'word':'haspointattrib','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'haspointattrib','kind':'f','menu':'int(const string,const string)'})
let c['haspointattrib'] = f
let f = []
call add(f,{'word':'hasprimattrib','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'hasprimattrib','kind':'f','menu':'int(const string,const string)'})
let c['hasprimattrib'] = f
let f = []
call add(f,{'word':'hasvertexattrib','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'hasvertexattrib','kind':'f','menu':'int(const string,const string)'})
let c['hasvertexattrib'] = f
let f = []
call add(f,{'word':'hedge_dstpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_dstpoint','kind':'f','menu':'int(const string,const int)'})
let c['hedge_dstpoint'] = f
let f = []
call add(f,{'word':'hedge_dstvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_dstvertex','kind':'f','menu':'int(const string,const int)'})
let c['hedge_dstvertex'] = f
let f = []
call add(f,{'word':'hedge_equivcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_equivcount','kind':'f','menu':'int(const string,const int)'})
let c['hedge_equivcount'] = f
let f = []
call add(f,{'word':'hedge_isequiv','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'hedge_isequiv','kind':'f','menu':'int(const string,const int,const int)'})
let c['hedge_isequiv'] = f
let f = []
call add(f,{'word':'hedge_isprimary','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_isprimary','kind':'f','menu':'int(const string,const int)'})
let c['hedge_isprimary'] = f
let f = []
call add(f,{'word':'hedge_isvalid','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_isvalid','kind':'f','menu':'int(const string,const int)'})
let c['hedge_isvalid'] = f
let f = []
call add(f,{'word':'hedge_next','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_next','kind':'f','menu':'int(const string,const int)'})
let c['hedge_next'] = f
let f = []
call add(f,{'word':'hedge_nextequiv','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_nextequiv','kind':'f','menu':'int(const string,const int)'})
let c['hedge_nextequiv'] = f
let f = []
call add(f,{'word':'hedge_postdstpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_postdstpoint','kind':'f','menu':'int(const string,const int)'})
let c['hedge_postdstpoint'] = f
let f = []
call add(f,{'word':'hedge_postdstvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_postdstvertex','kind':'f','menu':'int(const string,const int)'})
let c['hedge_postdstvertex'] = f
let f = []
call add(f,{'word':'hedge_presrcpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_presrcpoint','kind':'f','menu':'int(const string,const int)'})
let c['hedge_presrcpoint'] = f
let f = []
call add(f,{'word':'hedge_presrcvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_presrcvertex','kind':'f','menu':'int(const string,const int)'})
let c['hedge_presrcvertex'] = f
let f = []
call add(f,{'word':'hedge_prev','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_prev','kind':'f','menu':'int(const string,const int)'})
let c['hedge_prev'] = f
let f = []
call add(f,{'word':'hedge_prim','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_prim','kind':'f','menu':'int(const string,const int)'})
let c['hedge_prim'] = f
let f = []
call add(f,{'word':'hedge_primary','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_primary','kind':'f','menu':'int(const string,const int)'})
let c['hedge_primary'] = f
let f = []
call add(f,{'word':'hedge_srcpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_srcpoint','kind':'f','menu':'int(const string,const int)'})
let c['hedge_srcpoint'] = f
let f = []
call add(f,{'word':'hedge_srcvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_srcvertex','kind':'f','menu':'int(const string,const int)'})
let c['hedge_srcvertex'] = f
let f = []
call add(f,{'word':'henyeygreenstein','kind':'f','menu':'bsdf(const float)'})
let c['henyeygreenstein'] = f
let f = []
call add(f,{'word':'hscript_noise','kind':'f','menu':'float(const vector)'})
let c['hscript_noise'] = f
let f = []
call add(f,{'word':'hscript_rand','kind':'f','menu':'float(const float)'})
call add(f,{'word':'hscript_rand','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'hscript_rand','kind':'f','menu':'vector(const float)'})
let c['hscript_rand'] = f
let f = []
call add(f,{'word':'hscript_snoise','kind':'f','menu':'float(const vector)'})
let c['hscript_snoise'] = f
let f = []
call add(f,{'word':'hscript_sturb','kind':'f','menu':'float(const vector,const int)'})
let c['hscript_sturb'] = f
let f = []
call add(f,{'word':'hscript_turb','kind':'f','menu':'float(const vector,const int)'})
let c['hscript_turb'] = f
let f = []
call add(f,{'word':'hsvtorgb','kind':'f','menu':'vector(const float,const float,const float)'})
call add(f,{'word':'hsvtorgb','kind':'f','menu':'vector(const vector)'})
let c['hsvtorgb'] = f
let f = []
call add(f,{'word':'ident','kind':'f','menu':'matrix2()'})
call add(f,{'word':'ident','kind':'f','menu':'matrix3()'})
call add(f,{'word':'ident','kind':'f','menu':'matrix()'})
let c['ident'] = f
let f = []
call add(f,{'word':'idtopoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'idtopoint','kind':'f','menu':'int(const string,const int)'})
let c['idtopoint'] = f
let f = []
call add(f,{'word':'idtoprim','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'idtoprim','kind':'f','menu':'int(const string,const int)'})
let c['idtoprim'] = f
let f = []
let c['if'] = f
let f = []
call add(f,{'word':'inedgegroup','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'inedgegroup','kind':'f','menu':'int(const string,const string,const int,const int)'})
let c['inedgegroup'] = f
let f = []
call add(f,{'word':'inpointgroup','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'inpointgroup','kind':'f','menu':'int(const string,const string,const int)'})
let c['inpointgroup'] = f
let f = []
call add(f,{'word':'inprimgroup','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'inprimgroup','kind':'f','menu':'int(const string,const string,const int)'})
let c['inprimgroup'] = f
let f = []
call add(f,{'word':'insert','kind':'f','menu':'void(export string,const int,const string)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix2[],const int,const matrix2)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix2[],const int,const matrix2[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix3[],const int,const matrix3)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix3[],const int,const matrix3[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix[],const int,const matrix)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix[],const int,const matrix[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export float[],const int,const float)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export float[],const int,const float[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export int[],const int,const int)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export int[],const int,const int[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector4[],const int,const vector4)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector4[],const int,const vector4[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export string[],const int,const string)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export string[],const int,const string[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector2[],const int,const vector2)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector2[],const int,const vector2[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector[],const int,const vector)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector[],const int,const vector[])'})
let c['insert'] = f
let f = []
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector4,const vector4)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector4,const vector4,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector4,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector4,const vector,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector)'})
let c['instance'] = f
let f = []
call add(f,{'word':'integrate3d','kind':'f','menu':'float(const string,const string,const vector,const vector)'})
call add(f,{'word':'integrate3d','kind':'f','menu':'vector4(const string,const string,const vector,const vector)'})
call add(f,{'word':'integrate3d','kind':'f','menu':'vector(const string,const string,const vector,const vector)'})
let c['integrate3d'] = f
let f = []
call add(f,{'word':'integrate3dClip','kind':'f','menu':'int(const string,const string,export vector,export vector,const float)'})
let c['integrate3dClip'] = f
let f = []
call add(f,{'word':'interpolate','kind':'f','menu':'bsdf(const bsdf,const float,const float)'})
call add(f,{'word':'interpolate','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'interpolate','kind':'f','menu':'vector4(const vector4,const float,const float)'})
call add(f,{'word':'interpolate','kind':'f','menu':'vector(const vector,const float,const float)'})
let c['interpolate'] = f
let f = []
call add(f,{'word':'intersect','kind':'f','menu':'int(const int,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const int,const vector,const vector,vector,float,float)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const int,const vector,const vector,vector,vector)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const string,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const string,const vector,const vector,vector,float,float)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const string,const vector,const vector,vector,vector)'})
let c['intersect'] = f
let f = []
call add(f,{'word':'intersect3d','kind':'f','menu':'int(const string,const string,const vector,const vector,const float)'})
let c['intersect3d'] = f
let f = []
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const int,const string,const vector,const vector,vector[],int[],vector[])'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const int,const string,const vector,const vector,vector[],int[],vector[],const float,const float)'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const int,const vector,const vector,vector[],int[],vector[])'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const int,const vector,const vector,vector[],int[],vector[],const float,const float)'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const string,const string,const vector,const vector,vector[],int[],vector[])'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const string,const string,const vector,const vector,vector[],int[],vector[],const float,const float)'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const string,const vector,const vector,vector[],int[],vector[])'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const string,const vector,const vector,vector[],int[],vector[],const float,const float)'})
let c['intersect_all'] = f
let f = []
call add(f,{'word':'invert','kind':'f','menu':'matrix2(const matrix2)'})
call add(f,{'word':'invert','kind':'f','menu':'matrix3(const matrix3)'})
call add(f,{'word':'invert','kind':'f','menu':'matrix(const matrix)'})
let c['invert'] = f
let f = []
call add(f,{'word':'invertexgroup','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'invertexgroup','kind':'f','menu':'int(const string,const string,const int)'})
let c['invertexgroup'] = f
let f = []
call add(f,{'word':'isalpha','kind':'f','menu':'int(const string)'})
let c['isalpha'] = f
let f = []
call add(f,{'word':'isbound','kind':'f','menu':'int(const string)'})
let c['isbound'] = f
let f = []
call add(f,{'word':'isdigit','kind':'f','menu':'int(const string)'})
let c['isdigit'] = f
let f = []
call add(f,{'word':'isfinite','kind':'f','menu':'int(const float)'})
let c['isfinite'] = f
let f = []
call add(f,{'word':'isnan','kind':'f','menu':'int(const float)'})
let c['isnan'] = f
let f = []
call add(f,{'word':'isotropic','kind':'f','menu':'bsdf()'})
let c['isotropic'] = f
let f = []
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(const string,const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export matrix2[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export matrix3[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export matrix[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export float[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export int[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export vector4[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export string[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export vector2[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export vector[],const int)'})
let c['isvalidindex'] = f
let f = []
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix2)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix3)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const bsdf)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const float)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const int)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector4)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const string)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector2)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix2[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix3[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const bsdf[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const float[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector4[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const string[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector2[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector[])'})
let c['isvarying'] = f
let f = []
call add(f,{'word':'itoa','kind':'f','menu':'string(const int)'})
let c['itoa'] = f
let f = []
call add(f,{'word':'join','kind':'f','menu':'string(const string[],const string)'})
let c['join'] = f
let f = []
let c['jump'] = f
let f = []
call add(f,{'word':'kspline','kind':'f','menu':'float(const string,const float,const float,const float)'})
call add(f,{'word':'kspline','kind':'f','menu':'vector4(const string,const float,const vector4,const float)'})
call add(f,{'word':'kspline','kind':'f','menu':'vector(const string,const float,const vector,const float)'})
let c['kspline'] = f
let f = []
let c['le'] = f
let f = []
call add(f,{'word':'len','kind':'f','menu':'int(const matrix2)'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix3)'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix)'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector4)'})
call add(f,{'word':'len','kind':'f','menu':'int(const string)'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector2)'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector)'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix2[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix3[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const bsdf[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const float[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector4[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const string[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector2[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector[])'})
let c['len'] = f
let f = []
call add(f,{'word':'length','kind':'f','menu':'float(const float)'})
call add(f,{'word':'length','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'length','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'length','kind':'f','menu':'float(const vector)'})
let c['length'] = f
let f = []
call add(f,{'word':'length2','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'length2','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'length2','kind':'f','menu':'float(const vector)'})
let c['length2'] = f
let f = []
call add(f,{'word':'lerp','kind':'f','menu':'bsdf(const bsdf,const bsdf,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector4(const vector4,const vector4,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector2(const vector2,const vector2,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector(const vector,const vector,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['lerp'] = f
let f = []
call add(f,{'word':'limit_sample_space','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'limit_sample_space','kind':'f','menu':'float(const float,const float,const float)'})
let c['limit_sample_space'] = f
let f = []
call add(f,{'word':'lkspline','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'lkspline','kind':'f','menu':'vector4(const float,const vector4,const float)'})
call add(f,{'word':'lkspline','kind':'f','menu':'vector(const float,const vector,const float)'})
let c['lkspline'] = f
let f = []
call add(f,{'word':'log','kind':'f','menu':'float(const float)'})
call add(f,{'word':'log','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'log','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'log','kind':'f','menu':'vector(const vector)'})
let c['log'] = f
let f = []
call add(f,{'word':'log10','kind':'f','menu':'float(const float)'})
call add(f,{'word':'log10','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'log10','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'log10','kind':'f','menu':'vector(const vector)'})
let c['log10'] = f
let f = []
call add(f,{'word':'lookat','kind':'f','menu':'matrix3(const vector,const vector)'})
call add(f,{'word':'lookat','kind':'f','menu':'matrix3(const vector,const vector,const float)'})
call add(f,{'word':'lookat','kind':'f','menu':'matrix3(const vector,const vector,const vector)'})
call add(f,{'word':'lookat','kind':'f','menu':'vector(const vector,const vector,const float,const int)'})
call add(f,{'word':'lookat','kind':'f','menu':'vector(const vector,const vector,const vector,const int)'})
let c['lookat'] = f
let f = []
let c['loop'] = f
let f = []
call add(f,{'word':'lspline','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'lspline','kind':'f','menu':'vector4(const float,const vector4)'})
call add(f,{'word':'lspline','kind':'f','menu':'vector(const float,const vector)'})
let c['lspline'] = f
let f = []
call add(f,{'word':'lstrip','kind':'f','menu':'string(const string)'})
call add(f,{'word':'lstrip','kind':'f','menu':'string(const string,const string)'})
let c['lstrip'] = f
let f = []
let c['lt'] = f
let f = []
call add(f,{'word':'luminance','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'luminance','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'luminance','kind':'f','menu':'float(const vector)'})
let c['luminance'] = f
let f = []
call add(f,{'word':'makebasis','kind':'f','menu':'void(vector,vector,const vector)'})
call add(f,{'word':'makebasis','kind':'f','menu':'vector(vector,const vector)'})
call add(f,{'word':'makebasis','kind':'f','menu':'void(export vector,export vector,const vector,const vector)'})
let c['makebasis'] = f
let f = []
call add(f,{'word':'maketransform','kind':'f','menu':'matrix3(const int,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix3(const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const int,const int,const vector,const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const int,const int,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const int,const int,const vector,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const int,const int,const vector,const vector,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const vector,const vector,const vector)'})
let c['maketransform'] = f
let f = []
call add(f,{'word':'mask_bsdf','kind':'f','menu':'bsdf(const bsdf,const int)'})
let c['mask_bsdf'] = f
let f = []
call add(f,{'word':'match','kind':'f','menu':'int(const string,const string)'})
let c['match'] = f
let f = []
call add(f,{'word':'matchvex_blinn','kind':'f','menu':'bsdf(const vector,const float)'})
let c['matchvex_blinn'] = f
let f = []
call add(f,{'word':'matchvex_specular','kind':'f','menu':'bsdf(const vector,const float)'})
let c['matchvex_specular'] = f
let f = []
call add(f,{'word':'mattrib','kind':'f','menu':'matrix3(const string,const vector)'})
call add(f,{'word':'mattrib','kind':'f','menu':'matrix(const string,const vector)'})
call add(f,{'word':'mattrib','kind':'f','menu':'float(const string,const vector)'})
call add(f,{'word':'mattrib','kind':'f','menu':'vector4(const string,const vector)'})
call add(f,{'word':'mattrib','kind':'f','menu':'vector(const string,const vector)'})
let c['mattrib'] = f
let f = []
call add(f,{'word':'max','kind':'f','menu':'float(const float)'})
call add(f,{'word':'max','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'max','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'max','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'max','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'max','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'max','kind':'f','menu':'int(const int)'})
call add(f,{'word':'max','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'max','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'max','kind':'f','menu':'vector4(const vector4,const vector4)'})
call add(f,{'word':'max','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'max','kind':'f','menu':'vector2(const vector2,const vector2)'})
call add(f,{'word':'max','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'max','kind':'f','menu':'vector(const vector,const vector)'})
call add(f,{'word':'max','kind':'f','menu':'vector(const vector[])'})
let c['max'] = f
let f = []
call add(f,{'word':'mdensity','kind':'f','menu':'float(const vector)'})
let c['mdensity'] = f
let f = []
let c['measured'] = f
let f = []
let c['merge'] = f
let f = []
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,matrix2)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,matrix3)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,matrix)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,float)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,int)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,vector4)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,vector2)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'matrix3[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'matrix[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'float[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'vector4[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'vector[](const string,const string,const vector)'})
let c['metaimport'] = f
let f = []
call add(f,{'word':'metamarch','kind':'f','menu':'int(export int,const string,export vector,export vector,const float)'})
let c['metamarch'] = f
let f = []
call add(f,{'word':'metanext','kind':'f','menu':'int(const int)'})
let c['metanext'] = f
let f = []
call add(f,{'word':'metastart','kind':'f','menu':'int(const string,const vector)'})
let c['metastart'] = f
let f = []
call add(f,{'word':'metaweight','kind':'f','menu':'float(const string,const vector)'})
let c['metaweight'] = f
let f = []
call add(f,{'word':'min','kind':'f','menu':'float(const float)'})
call add(f,{'word':'min','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'min','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'min','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'min','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'min','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'min','kind':'f','menu':'int(const int)'})
call add(f,{'word':'min','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'min','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'min','kind':'f','menu':'vector4(const vector4,const vector4)'})
call add(f,{'word':'min','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'min','kind':'f','menu':'vector2(const vector2,const vector2)'})
call add(f,{'word':'min','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'min','kind':'f','menu':'vector(const vector,const vector)'})
call add(f,{'word':'min','kind':'f','menu':'vector(const vector[])'})
let c['min'] = f
let f = []
call add(f,{'word':'minpos','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const int,const string,const vector,const float)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const int,const vector)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const int,const vector,const float)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const string,const string,const vector,const float)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const string,const vector,const float)'})
let c['minpos'] = f
let f = []
let c['mod'] = f
let f = []
call add(f,{'word':'mspace','kind':'f','menu':'vector(const vector)'})
let c['mspace'] = f
let f = []
let c['mul'] = f
let f = []
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,const float,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,const float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,const float,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,const float,float,float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,const float,int,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,const float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,int,float,float,float,float,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,float,float,float,float,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,int,float,float,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,float,float,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector4,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector4,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector4,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector4,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector4,int,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector4,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector2,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector2,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector2,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector2,float,float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector2,int,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector2,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector,int,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector,int,float,float,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector,float,float,const int,const int,const int)'})
let c['mwnoise'] = f
let f = []
call add(f,{'word':'nametopoint','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nametopoint','kind':'f','menu':'int(const string,const string)'})
let c['nametopoint'] = f
let f = []
call add(f,{'word':'nametoprim','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nametoprim','kind':'f','menu':'int(const string,const string)'})
let c['nametoprim'] = f
let f = []
call add(f,{'word':'nbouncetypes','kind':'f','menu':'int()'})
let c['nbouncetypes'] = f
let f = []
let c['ne'] = f
let f = []
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const int,const string,const vector,const float)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const int,const vector)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const int,const vector,const float)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const string,const string,const vector)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const string,const string,const vector,const float)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const string,const vector)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const string,const vector,const float)'})
let c['nearpoint'] = f
let f = []
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const int,const string,const vector,const float)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const int,const string,const vector,const float,const int)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const int,const vector,const float)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const int,const vector,const float,const int)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const string,const string,const vector,const float)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const string,const string,const vector,const float,const int)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const string,const vector,const float)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const string,const vector,const float,const int)'})
let c['nearpoints'] = f
let f = []
call add(f,{'word':'nedgesgroup','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nedgesgroup','kind':'f','menu':'int(const string,const string)'})
let c['nedgesgroup'] = f
let f = []
let c['neg'] = f
let f = []
call add(f,{'word':'neighbour','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'neighbour','kind':'f','menu':'int(const string,const int,const int)'})
let c['neighbour'] = f
let f = []
call add(f,{'word':'neighbourcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'neighbourcount','kind':'f','menu':'int(const string,const int)'})
let c['neighbourcount'] = f
let f = []
call add(f,{'word':'neighbours','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'neighbours','kind':'f','menu':'int[](const string,const int)'})
let c['neighbours'] = f
let f = []
call add(f,{'word':'noise','kind':'f','menu':'float(const float)'})
call add(f,{'word':'noise','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'noise','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'noise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'noise','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'noise','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'noise','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'noise','kind':'f','menu':'vector(const vector)'})
let c['noise'] = f
let f = []
call add(f,{'word':'noised','kind':'f','menu':'void(const float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'float(const float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const float,const float,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'float(const float,const float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const float,const float,vector,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'vector(const float,const float,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const float,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'vector(const float,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const vector4,float,float,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'float(const vector4,float,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const vector4,vector,vector,vector,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'vector(const vector4,vector,vector,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const vector,float,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'float(const vector,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const vector,vector,vector,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'vector(const vector,vector,vector,vector)'})
let c['noised'] = f
let f = []
let c['nop'] = f
let f = []
call add(f,{'word':'normal_bsdf','kind':'f','menu':'vector(const bsdf)'})
let c['normal_bsdf'] = f
let f = []
call add(f,{'word':'normalize','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'normalize','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'normalize','kind':'f','menu':'vector(const vector)'})
let c['normalize'] = f
let f = []
let c['not'] = f
let f = []
let c['notif'] = f
let f = []
call add(f,{'word':'npoints','kind':'f','menu':'int(const int)'})
call add(f,{'word':'npoints','kind':'f','menu':'int(const string)'})
let c['npoints'] = f
let f = []
call add(f,{'word':'npointsgroup','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'npointsgroup','kind':'f','menu':'int(const string,const string)'})
let c['npointsgroup'] = f
let f = []
call add(f,{'word':'nprimitives','kind':'f','menu':'int(const int)'})
call add(f,{'word':'nprimitives','kind':'f','menu':'int(const string)'})
let c['nprimitives'] = f
let f = []
call add(f,{'word':'nprimitivesgroup','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nprimitivesgroup','kind':'f','menu':'int(const string,const string)'})
let c['nprimitivesgroup'] = f
let f = []
call add(f,{'word':'nrandom','kind':'f','menu':'float()'})
call add(f,{'word':'nrandom','kind':'f','menu':'void(float,float)'})
call add(f,{'word':'nrandom','kind':'f','menu':'float(float)'})
call add(f,{'word':'nrandom','kind':'f','menu':'vector4()'})
call add(f,{'word':'nrandom','kind':'f','menu':'vector()'})
let c['nrandom'] = f
let f = []
call add(f,{'word':'ntransform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'ntransform','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'ntransform','kind':'f','menu':'vector(const vector,const matrix)'})
let c['ntransform'] = f
let f = []
call add(f,{'word':'nuniqueval','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'nuniqueval','kind':'f','menu':'int(const string,const string,const string)'})
let c['nuniqueval'] = f
let f = []
call add(f,{'word':'nvertices','kind':'f','menu':'int(const int)'})
call add(f,{'word':'nvertices','kind':'f','menu':'int(const string)'})
let c['nvertices'] = f
let f = []
call add(f,{'word':'nverticesgroup','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nverticesgroup','kind':'f','menu':'int(const string,const string)'})
let c['nverticesgroup'] = f
let f = []
call add(f,{'word':'ocean_sample','kind':'f','menu':'vector(const string,const int,const int,const int,const float,const float,const int,const int,const vector)'})
let c['ocean_sample'] = f
let f = []
call add(f,{'word':'ocio_activedisplays','kind':'f','menu':'string[]()'})
let c['ocio_activedisplays'] = f
let f = []
call add(f,{'word':'ocio_activeviews','kind':'f','menu':'string[]()'})
let c['ocio_activeviews'] = f
let f = []
call add(f,{'word':'ocio_import','kind':'f','menu':'int(const string,const string,int)'})
call add(f,{'word':'ocio_import','kind':'f','menu':'int(const string,const string,string)'})
call add(f,{'word':'ocio_import','kind':'f','menu':'int(const string,const string,vector)'})
let c['ocio_import'] = f
let f = []
call add(f,{'word':'ocio_roles','kind':'f','menu':'string[]()'})
let c['ocio_roles'] = f
let f = []
call add(f,{'word':'ocio_spaces','kind':'f','menu':'string[]()'})
let c['ocio_spaces'] = f
let f = []
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector4(const string,const vector4)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector4(const string,const string,const vector4)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector4(const string,const string,const string,const vector4)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector(const string,const string,const string,const vector)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector(const string,const vector)'})
let c['ocio_transform'] = f
let f = []
call add(f,{'word':'onoise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'onoise','kind':'f','menu':'float(const vector,const int,const float,const float)'})
call add(f,{'word':'onoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'onoise','kind':'f','menu':'float(const vector,const int,const int,const int,const int,const float,const float)'})
call add(f,{'word':'onoise','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'onoise','kind':'f','menu':'vector(const vector,const int,const float,const float)'})
call add(f,{'word':'onoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
call add(f,{'word':'onoise','kind':'f','menu':'vector(const vector,const int,const int,const int,const int,const float,const float)'})
let c['onoise'] = f
let f = []
call add(f,{'word':'opdigits','kind':'f','menu':'int()'})
call add(f,{'word':'opdigits','kind':'f','menu':'int(const string)'})
let c['opdigits'] = f
let f = []
call add(f,{'word':'opfullpath','kind':'f','menu':'string(const string)'})
let c['opfullpath'] = f
let f = []
call add(f,{'word':'opid','kind':'f','menu':'int(const int)'})
call add(f,{'word':'opid','kind':'f','menu':'int(const string)'})
let c['opid'] = f
let f = []
call add(f,{'word':'opparentbonetransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'opparentbonetransform','kind':'f','menu':'matrix(const string,const float)'})
let c['opparentbonetransform'] = f
let f = []
call add(f,{'word':'opparenttransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'opparenttransform','kind':'f','menu':'matrix(const string,const float)'})
let c['opparenttransform'] = f
let f = []
call add(f,{'word':'opparmtransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'opparmtransform','kind':'f','menu':'matrix(const string,const float)'})
let c['opparmtransform'] = f
let f = []
call add(f,{'word':'oppreconstrainttransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'oppreconstrainttransform','kind':'f','menu':'matrix(const string,const float)'})
let c['oppreconstrainttransform'] = f
let f = []
call add(f,{'word':'oppretransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'oppretransform','kind':'f','menu':'matrix(const string,const float)'})
let c['oppretransform'] = f
let f = []
call add(f,{'word':'optransform','kind':'f','menu':'matrix(const int)'})
call add(f,{'word':'optransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'optransform','kind':'f','menu':'matrix(const string,const float)'})
let c['optransform'] = f
let f = []
let c['or'] = f
let f = []
call add(f,{'word':'ord','kind':'f','menu':'int(const string)'})
let c['ord'] = f
let f = []
call add(f,{'word':'orthographic','kind':'f','menu':'matrix(const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'orthographic','kind':'f','menu':'matrix(const float,const float,const float,const float,const float,const float,const vector4)'})
let c['orthographic'] = f
let f = []
call add(f,{'word':'osd_facecount','kind':'f','menu':'int(const int)'})
call add(f,{'word':'osd_facecount','kind':'f','menu':'int(const string)'})
let c['osd_facecount'] = f
let f = []
call add(f,{'word':'osd_firstpatch','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'osd_firstpatch','kind':'f','menu':'int(const string,const int)'})
let c['osd_firstpatch'] = f
let f = []
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix2)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix3)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,float)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector4)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector2)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,float[])'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix2)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix3)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,float)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector4)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector2)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,float[])'})
let c['osd_limitsurface'] = f
let f = []
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix2)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix3)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,float)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector4)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector2)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,float[])'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix2)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix3)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,float)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector4)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector2)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,float[])'})
let c['osd_limitsurfacevertex'] = f
let f = []
call add(f,{'word':'osd_lookupface','kind':'f','menu':'int(const int,const int,const float,const float,int,float,float)'})
call add(f,{'word':'osd_lookupface','kind':'f','menu':'int(const int,const int,const float,const float,int,float,float,const string)'})
call add(f,{'word':'osd_lookupface','kind':'f','menu':'int(const string,const int,const float,const float,int,float,float)'})
call add(f,{'word':'osd_lookupface','kind':'f','menu':'int(const string,const int,const float,const float,int,float,float,const string)'})
let c['osd_lookupface'] = f
let f = []
call add(f,{'word':'osd_lookuppatch','kind':'f','menu':'int(const int,const int,const float,const float,int,float,float)'})
call add(f,{'word':'osd_lookuppatch','kind':'f','menu':'int(const int,const int,const float,const float,int,float,float,const string)'})
call add(f,{'word':'osd_lookuppatch','kind':'f','menu':'int(const string,const int,const float,const float,int,float,float)'})
call add(f,{'word':'osd_lookuppatch','kind':'f','menu':'int(const string,const int,const float,const float,int,float,float,const string)'})
let c['osd_lookuppatch'] = f
let f = []
call add(f,{'word':'osd_patchcount','kind':'f','menu':'int(const int)'})
call add(f,{'word':'osd_patchcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'osd_patchcount','kind':'f','menu':'int(const string)'})
call add(f,{'word':'osd_patchcount','kind':'f','menu':'int(const string,const int)'})
let c['osd_patchcount'] = f
let f = []
call add(f,{'word':'osd_patches','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'osd_patches','kind':'f','menu':'int[](const string,const int)'})
let c['osd_patches'] = f
let f = []
call add(f,{'word':'outerproduct','kind':'f','menu':'matrix2(const vector2,const vector2)'})
call add(f,{'word':'outerproduct','kind':'f','menu':'matrix3(const vector,const vector)'})
call add(f,{'word':'outerproduct','kind':'f','menu':'matrix(const vector4,const vector4)'})
let c['outerproduct'] = f
let f = []
call add(f,{'word':'ow_nspace','kind':'f','menu':'vector(const vector)'})
let c['ow_nspace'] = f
let f = []
call add(f,{'word':'ow_space','kind':'f','menu':'matrix()'})
call add(f,{'word':'ow_space','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'ow_space','kind':'f','menu':'vector(const vector)'})
let c['ow_space'] = f
let f = []
call add(f,{'word':'ow_vspace','kind':'f','menu':'vector(const vector)'})
let c['ow_vspace'] = f
let f = []
call add(f,{'word':'pack_inttosafefloat','kind':'f','menu':'float(const int)'})
let c['pack_inttosafefloat'] = f
let f = []
call add(f,{'word':'packedtransform','kind':'f','menu':'void(const int,const int,const matrix)'})
let c['packedtransform'] = f
let f = []
call add(f,{'word':'pcclose','kind':'f','menu':'void(export int)'})
let c['pcclose'] = f
let f = []
call add(f,{'word':'pcconvex','kind':'f','menu':'float(const int,const string,const vector)'})
let c['pcconvex'] = f
let f = []
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const vector,const float)'})
let c['pcexport'] = f
let f = []
call add(f,{'word':'pcfarthest','kind':'f','menu':'float(const int)'})
let c['pcfarthest'] = f
let f = []
call add(f,{'word':'pcfilter','kind':'f','menu':'matrix3(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'float(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'vector4(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'vector(const int,const string)'})
let c['pcfilter'] = f
let f = []
call add(f,{'word':'pcfind','kind':'f','menu':'int[](const int,const string,const string,const vector,const float,const int)'})
call add(f,{'word':'pcfind','kind':'f','menu':'int[](const int,const string,const vector,const float,const int)'})
call add(f,{'word':'pcfind','kind':'f','menu':'int[](const string,const string,const string,const vector,const float,const int)'})
call add(f,{'word':'pcfind','kind':'f','menu':'int[](const string,const string,const vector,const float,const int)'})
let c['pcfind'] = f
let f = []
call add(f,{'word':'pcfind_radius','kind':'f','menu':'int[](const int,const string,const string,const float,const vector,const float,const int)'})
call add(f,{'word':'pcfind_radius','kind':'f','menu':'int[](const int,const string,const string,const string,const float,const vector,const float,const int)'})
call add(f,{'word':'pcfind_radius','kind':'f','menu':'int[](const string,const string,const string,const float,const vector,const float,const int)'})
call add(f,{'word':'pcfind_radius','kind':'f','menu':'int[](const string,const string,const string,const string,const float,const vector,const float,const int)'})
let c['pcfind_radius'] = f
let f = []
call add(f,{'word':'pcgenerate','kind':'f','menu':'int(const string,const int)'})
let c['pcgenerate'] = f
let f = []
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,matrix3)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,matrix)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,float)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,int)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,vector4)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,string)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,vector)'})
let c['pcimport'] = f
let f = []
call add(f,{'word':'pcimportbyidx3','kind':'f','menu':'matrix3(const int,const string,const int)'})
let c['pcimportbyidx3'] = f
let f = []
call add(f,{'word':'pcimportbyidx4','kind':'f','menu':'matrix(const int,const string,const int)'})
let c['pcimportbyidx4'] = f
let f = []
call add(f,{'word':'pcimportbyidxf','kind':'f','menu':'float(const int,const string,const int)'})
let c['pcimportbyidxf'] = f
let f = []
call add(f,{'word':'pcimportbyidxi','kind':'f','menu':'int(const int,const string,const int)'})
let c['pcimportbyidxi'] = f
let f = []
call add(f,{'word':'pcimportbyidxp','kind':'f','menu':'vector4(const int,const string,const int)'})
let c['pcimportbyidxp'] = f
let f = []
call add(f,{'word':'pcimportbyidxs','kind':'f','menu':'string(const int,const string,const int)'})
let c['pcimportbyidxs'] = f
let f = []
call add(f,{'word':'pcimportbyidxv','kind':'f','menu':'vector(const int,const string,const int)'})
let c['pcimportbyidxv'] = f
let f = []
call add(f,{'word':'pciterate','kind':'f','menu':'int(const int)'})
let c['pciterate'] = f
let f = []
call add(f,{'word':'pcnumfound','kind':'f','menu':'int(const int)'})
let c['pcnumfound'] = f
let f = []
call add(f,{'word':'pcopen','kind':'f','menu':'int(const int,const string,const vector,const float,const int)'})
call add(f,{'word':'pcopen','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'pcopen','kind':'f','menu':'int(const string,const string,const vector,const float,const int)'})
call add(f,{'word':'pcopen','kind':'f','menu':'int(const string,const string,const vector,const string,const vector,const float,const int)'})
let c['pcopen'] = f
let f = []
call add(f,{'word':'pcopenlod','kind':'f','menu':'int(const string,const string,const vector,const int)'})
let c['pcopenlod'] = f
let f = []
call add(f,{'word':'pcsampleleaf','kind':'f','menu':'void(const int,const float)'})
let c['pcsampleleaf'] = f
let f = []
call add(f,{'word':'pcsize','kind':'f','menu':'int(const int)'})
let c['pcsize'] = f
let f = []
call add(f,{'word':'pcunshaded','kind':'f','menu':'int(const int,const string)'})
let c['pcunshaded'] = f
let f = []
call add(f,{'word':'pcwrite','kind':'f','menu':'int(const string)'})
let c['pcwrite'] = f
let f = []
call add(f,{'word':'perspective','kind':'f','menu':'matrix(const float,const float,const float,const float,const float)'})
call add(f,{'word':'perspective','kind':'f','menu':'matrix(const float,const float,const float,const float,const float,const vector4)'})
let c['perspective'] = f
let f = []
call add(f,{'word':'pgfind','kind':'f','menu':'int[](const int,const string,const vector,const float,const int,const float)'})
call add(f,{'word':'pgfind','kind':'f','menu':'int[](const int,const vector,const float,const int,const float)'})
call add(f,{'word':'pgfind','kind':'f','menu':'int[](const string,const string,const vector,const float,const int,const float)'})
call add(f,{'word':'pgfind','kind':'f','menu':'int[](const string,const vector,const float,const int,const float)'})
let c['pgfind'] = f
let f = []
call add(f,{'word':'phongBRDF','kind':'f','menu':'float(const vector,const vector,const vector,const float)'})
let c['phongBRDF'] = f
let f = []
call add(f,{'word':'phonglobe','kind':'f','menu':'bsdf(const vector,const vector,const float,const float,const vector,const vector)'})
call add(f,{'word':'phonglobe','kind':'f','menu':'bsdf(const vector,const vector,const float)'})
let c['phonglobe'] = f
let f = []
call add(f,{'word':'photonmap','kind':'f','menu':'vector(const string,const vector,const vector)'})
call add(f,{'word':'photonmap','kind':'f','menu':'void(const string,const vector,const vector,vector,float)'})
call add(f,{'word':'photonmap','kind':'f','menu':'vector(const string,const vector,const vector,float)'})
let c['photonmap'] = f
let f = []
call add(f,{'word':'planepointdistance','kind':'f','menu':'float(const vector,const vector,const vector,vector)'})
let c['planepointdistance'] = f
let f = []
call add(f,{'word':'planesphereintersect','kind':'f','menu':'int(const vector,const vector,const vector,const float,vector,float,float)'})
let c['planesphereintersect'] = f
let f = []
call add(f,{'word':'pluralize','kind':'f','menu':'string(const string)'})
let c['pluralize'] = f
let f = []
call add(f,{'word':'pnoise','kind':'f','menu':'float(const float,const float,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const float,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const vector4,const vector4)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const vector,const vector)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const float,const float,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const float,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const vector4,const vector4)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const vector,const vector)'})
let c['pnoise'] = f
let f = []
call add(f,{'word':'point','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector[](const string,const string,const int)'})
let c['point'] = f
let f = []
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix2(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix2(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix3(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix3(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'float(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'float(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'int(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'int(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector4(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector4(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'string(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'string(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector2(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector2(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix2[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix2[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix3[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix3[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'float[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'float[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'int[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'int[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector4[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector4[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'string[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'string[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector2[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector2[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector[](const string,const string,const int,int)'})
let c['pointattrib'] = f
let f = []
call add(f,{'word':'pointattribsize','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'pointattribsize','kind':'f','menu':'int(const string,const string)'})
let c['pointattribsize'] = f
let f = []
call add(f,{'word':'pointattribtype','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'pointattribtype','kind':'f','menu':'int(const string,const string)'})
let c['pointattribtype'] = f
let f = []
call add(f,{'word':'pointattribtypeinfo','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'pointattribtypeinfo','kind':'f','menu':'string(const string,const string)'})
let c['pointattribtypeinfo'] = f
let f = []
call add(f,{'word':'pointedge','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'pointedge','kind':'f','menu':'int(const string,const int,const int)'})
let c['pointedge'] = f
let f = []
call add(f,{'word':'pointhedge','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'pointhedge','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'pointhedge','kind':'f','menu':'int(const string,const int)'})
call add(f,{'word':'pointhedge','kind':'f','menu':'int(const string,const int,const int)'})
let c['pointhedge'] = f
let f = []
call add(f,{'word':'pointhedgenext','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'pointhedgenext','kind':'f','menu':'int(const string,const int)'})
let c['pointhedgenext'] = f
let f = []
let c['pointloop'] = f
let f = []
call add(f,{'word':'pointprims','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'pointprims','kind':'f','menu':'int[](const string,const int)'})
let c['pointprims'] = f
let f = []
call add(f,{'word':'pointvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'pointvertex','kind':'f','menu':'int(const string,const int)'})
let c['pointvertex'] = f
let f = []
call add(f,{'word':'pointvertices','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'pointvertices','kind':'f','menu':'int[](const string,const int)'})
let c['pointvertices'] = f
let f = []
call add(f,{'word':'polardecomp','kind':'f','menu':'matrix3(const matrix3)'})
let c['polardecomp'] = f
let f = []
call add(f,{'word':'polyneighbours','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'polyneighbours','kind':'f','menu':'int[](const string,const int)'})
let c['polyneighbours'] = f
let f = []
call add(f,{'word':'pop','kind':'f','menu':'matrix2(export matrix2[])'})
call add(f,{'word':'pop','kind':'f','menu':'matrix2(export matrix2[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'matrix3(export matrix3[])'})
call add(f,{'word':'pop','kind':'f','menu':'matrix3(export matrix3[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'matrix(export matrix[])'})
call add(f,{'word':'pop','kind':'f','menu':'matrix(export matrix[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'bsdf(export bsdf[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'bsdf(export bsdf[])'})
call add(f,{'word':'pop','kind':'f','menu':'float(export float[])'})
call add(f,{'word':'pop','kind':'f','menu':'float(export float[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'int(export int[])'})
call add(f,{'word':'pop','kind':'f','menu':'int(export int[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'vector4(export vector4[])'})
call add(f,{'word':'pop','kind':'f','menu':'vector4(export vector4[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'string(export string[])'})
call add(f,{'word':'pop','kind':'f','menu':'string(export string[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'vector2(export vector2[])'})
call add(f,{'word':'pop','kind':'f','menu':'vector2(export vector2[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'vector(export vector[])'})
call add(f,{'word':'pop','kind':'f','menu':'vector(export vector[],const int)'})
let c['pop'] = f
let f = []
let c['popinline'] = f
let f = []
call add(f,{'word':'pow','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'pow','kind':'f','menu':'vector4(const vector4,const float)'})
call add(f,{'word':'pow','kind':'f','menu':'vector2(const vector2,const float)'})
call add(f,{'word':'pow','kind':'f','menu':'vector(const vector,const float)'})
let c['pow'] = f
let f = []
call add(f,{'word':'predicate_incircle','kind':'f','menu':'float(const vector2,const vector2,const vector2,const vector2)'})
let c['predicate_incircle'] = f
let f = []
call add(f,{'word':'predicate_insphere','kind':'f','menu':'float(const vector,const vector,const vector,const vector,const vector)'})
let c['predicate_insphere'] = f
let f = []
call add(f,{'word':'predicate_orient2d','kind':'f','menu':'float(const vector2,const vector2,const vector2)'})
let c['predicate_orient2d'] = f
let f = []
call add(f,{'word':'predicate_orient3d','kind':'f','menu':'float(const vector,const vector,const vector,const vector)'})
let c['predicate_orient3d'] = f
let f = []
call add(f,{'word':'prerotate','kind':'f','menu':'void(export matrix3,const float,const vector)'})
call add(f,{'word':'prerotate','kind':'f','menu':'void(export matrix3,const vector,const int)'})
call add(f,{'word':'prerotate','kind':'f','menu':'void(export matrix,const float,const vector)'})
call add(f,{'word':'prerotate','kind':'f','menu':'void(export matrix,const vector,const int)'})
let c['prerotate'] = f
let f = []
call add(f,{'word':'prescale','kind':'f','menu':'void(export matrix3,const vector)'})
call add(f,{'word':'prescale','kind':'f','menu':'void(export matrix,const vector)'})
let c['prescale'] = f
let f = []
call add(f,{'word':'pretranslate','kind':'f','menu':'void(export matrix,const vector)'})
let c['pretranslate'] = f
let f = []
call add(f,{'word':'prim','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector[](const string,const string,const int)'})
let c['prim'] = f
let f = []
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix2,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix3,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix3,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,float,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,float,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,int,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,int,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector4,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector4,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector2,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix2[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix3[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,float[],const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,float[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,int[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector4[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector2[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector[],const string,const int,const vector)'})
let c['prim_attribute'] = f
let f = []
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const int,const int,const float,const float)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const int,const int,const float,const float,const float)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const string,const int,const float,const float)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const string,const int,const float,const float,const float)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const string,const int,const vector)'})
let c['prim_normal'] = f
let f = []
call add(f,{'word':'primarclen','kind':'f','menu':'float(const string,const vector2,const vector2,const int)'})
call add(f,{'word':'primarclen','kind':'f','menu':'float(const string,const vector2,const vector2,const int,const int)'})
let c['primarclen'] = f
let f = []
call add(f,{'word':'primattrib','kind':'f','menu':'matrix2(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix2(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix3(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix3(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'float(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'float(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'int(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'int(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector4(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector4(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'string(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'string(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector2(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector2(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix2[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix2[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix3[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix3[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'float[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'float[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'int[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'int[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector4[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector4[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'string[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'string[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector2[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector2[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector[](const string,const string,const int,int)'})
let c['primattrib'] = f
let f = []
call add(f,{'word':'primattribsize','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'primattribsize','kind':'f','menu':'int(const string,const string)'})
let c['primattribsize'] = f
let f = []
call add(f,{'word':'primattribtype','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'primattribtype','kind':'f','menu':'int(const string,const string)'})
let c['primattribtype'] = f
let f = []
call add(f,{'word':'primattribtypeinfo','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'primattribtypeinfo','kind':'f','menu':'string(const string,const string)'})
let c['primattribtypeinfo'] = f
let f = []
call add(f,{'word':'primduv','kind':'f','menu':'vector(const string,const int,const vector2,const int,const int)'})
let c['primduv'] = f
let f = []
call add(f,{'word':'primfind','kind':'f','menu':'int[](const int,const string,const vector,const vector)'})
call add(f,{'word':'primfind','kind':'f','menu':'int[](const int,const vector,const vector)'})
call add(f,{'word':'primfind','kind':'f','menu':'int[](const string,const string,const vector,const vector)'})
call add(f,{'word':'primfind','kind':'f','menu':'int[](const string,const vector,const vector)'})
let c['primfind'] = f
let f = []
call add(f,{'word':'primhedge','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'primhedge','kind':'f','menu':'int(const string,const int)'})
let c['primhedge'] = f
let f = []
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector[](const string,const string,const int)'})
let c['primintrinsic'] = f
let f = []
call add(f,{'word':'primpoint','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'primpoint','kind':'f','menu':'int(const string,const int,const int)'})
let c['primpoint'] = f
let f = []
call add(f,{'word':'primpoints','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'primpoints','kind':'f','menu':'int[](const string,const int)'})
let c['primpoints'] = f
let f = []
call add(f,{'word':'primuv','kind':'f','menu':'matrix2(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix2(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix3(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix3(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'float(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'float(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'int(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'int(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector4(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector4(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector2(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector2(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix2[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix2[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix3[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix3[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'float[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'float[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'int[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'int[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector4[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector4[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector2[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector2[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector[](const string,const string,const int,const vector)'})
let c['primuv'] = f
let f = []
call add(f,{'word':'primuvconvert','kind':'f','menu':'vector2(const string,const vector2,const int,const int)'})
call add(f,{'word':'primuvconvert','kind':'f','menu':'vector2(const string,const vector2,const int,const int,const float)'})
let c['primuvconvert'] = f
let f = []
call add(f,{'word':'primvertex','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'primvertex','kind':'f','menu':'int(const string,const int,const int)'})
let c['primvertex'] = f
let f = []
call add(f,{'word':'primvertexcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'primvertexcount','kind':'f','menu':'int(const string,const int)'})
let c['primvertexcount'] = f
let f = []
call add(f,{'word':'primvertices','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'primvertices','kind':'f','menu':'int[](const string,const int)'})
let c['primvertices'] = f
let f = []
call add(f,{'word':'print_once','kind':'f','menu':'void(const string)'})
let c['print_once'] = f
let f = []
call add(f,{'word':'printf','kind':'f','menu':'void(const string)'})
let c['printf'] = f
let f = []
call add(f,{'word':'product','kind':'f','menu':'float(const float)'})
call add(f,{'word':'product','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'product','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'product','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'product','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'product','kind':'f','menu':'int(const int)'})
call add(f,{'word':'product','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'product','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'product','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'product','kind':'f','menu':'vector(const vector[])'})
let c['product'] = f
let f = []
call add(f,{'word':'ptexture','kind':'f','menu':'matrix3(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'matrix3(const string,const int,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'matrix(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'matrix(const string,const int,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'float(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'float(const string,const int,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector4(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector4(const string,const int,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector(const string,const int,const float,const float,const float,const float,const float,const float)'})
let c['ptexture'] = f
let f = []
call add(f,{'word':'ptlined','kind':'f','menu':'float(const vector,const vector,const vector)'})
let c['ptlined'] = f
let f = []
call add(f,{'word':'ptransform','kind':'f','menu':'vector4(const vector4,const matrix)'})
call add(f,{'word':'ptransform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'ptransform','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'ptransform','kind':'f','menu':'vector(const vector,const matrix)'})
let c['ptransform'] = f
let f = []
call add(f,{'word':'push','kind':'f','menu':'void(export matrix2[],const matrix2)'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix2[],const matrix2[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix3[],const matrix3)'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix3[],const matrix3[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix[],const matrix)'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix[],const matrix[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export bsdf[],const bsdf)'})
call add(f,{'word':'push','kind':'f','menu':'void(export bsdf[],const bsdf[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export float[],const float)'})
call add(f,{'word':'push','kind':'f','menu':'void(export float[],const float[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export int[],const int)'})
call add(f,{'word':'push','kind':'f','menu':'void(export int[],const int[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector4[],const vector4)'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector4[],const vector4[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export string[],const string)'})
call add(f,{'word':'push','kind':'f','menu':'void(export string[],const string[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector2[],const vector2)'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector2[],const vector2[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector[],const vector)'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector[],const vector[])'})
let c['push'] = f
let f = []
let c['pushinline'] = f
let f = []
call add(f,{'word':'pxnoise','kind':'f','menu':'float(const float,const float,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'float(const float,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'float(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'vector(const float,const float,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'vector(const float,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'vector(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
let c['pxnoise'] = f
let f = []
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const float,const float,const int,const int,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'float(const float,const float,const int,const int,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const float,const float,const int,const int,vector,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'vector(const float,const float,const int,const int,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const float,const int,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'float(const float,const int,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const float,const int,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'vector(const float,const int,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const vector4,const int,const int,const int,const int,float,float,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'float(const vector4,const int,const int,const int,const int,float,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const vector4,const int,const int,const int,const int,vector,vector,vector,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'vector(const vector4,const int,const int,const int,const int,vector,vector,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const vector,const int,const int,const int,float,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'float(const vector,const int,const int,const int,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const vector,const int,const int,const int,vector,vector,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'vector(const vector,const int,const int,const int,vector,vector,vector)'})
let c['pxnoised'] = f
let f = []
call add(f,{'word':'qconvert','kind':'f','menu':'matrix3(const vector4)'})
call add(f,{'word':'qconvert','kind':'f','menu':'vector(const vector4)'})
let c['qconvert'] = f
let f = []
call add(f,{'word':'qdistance','kind':'f','menu':'float(const vector4,const vector4)'})
let c['qdistance'] = f
let f = []
call add(f,{'word':'qinvert','kind':'f','menu':'vector4(const vector4)'})
let c['qinvert'] = f
let f = []
call add(f,{'word':'qmultiply','kind':'f','menu':'vector4(const vector4,const vector4)'})
let c['qmultiply'] = f
let f = []
call add(f,{'word':'qrotate','kind':'f','menu':'vector(const vector4,const vector)'})
let c['qrotate'] = f
let f = []
call add(f,{'word':'quaternion','kind':'f','menu':'vector4(const matrix3)'})
call add(f,{'word':'quaternion','kind':'f','menu':'vector4(const float,const vector)'})
call add(f,{'word':'quaternion','kind':'f','menu':'vector4(const vector)'})
let c['quaternion'] = f
let f = []
call add(f,{'word':'quaterniontoeuler','kind':'f','menu':'vector(const vector4,const int)'})
let c['quaterniontoeuler'] = f
let f = []
call add(f,{'word':'radians','kind':'f','menu':'float(const float)'})
call add(f,{'word':'radians','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'radians','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'radians','kind':'f','menu':'vector(const vector)'})
let c['radians'] = f
let f = []
call add(f,{'word':'rand','kind':'f','menu':'float(const float)'})
call add(f,{'word':'rand','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'rand','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'rand','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'rand','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const float,const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const vector2)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const vector)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const float,const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const vector4)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const vector)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const vector2)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const vector)'})
let c['rand'] = f
let f = []
call add(f,{'word':'random','kind':'f','menu':'float(const float)'})
call add(f,{'word':'random','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'random','kind':'f','menu':'float(const int)'})
call add(f,{'word':'random','kind':'f','menu':'float(const int,const int)'})
call add(f,{'word':'random','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'random','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const float,const float)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const int,const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const vector)'})
call add(f,{'word':'random','kind':'f','menu':'vector2(const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const vector)'})
let c['random'] = f
let f = []
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const float)'})
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const float,const float)'})
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const vector4)'})
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const vector2)'})
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const vector)'})
let c['random_fhash'] = f
let f = []
let c['random_hash'] = f
let f = []
call add(f,{'word':'random_ihash','kind':'f','menu':'int(const int)'})
let c['random_ihash'] = f
let f = []
call add(f,{'word':'random_poisson','kind':'f','menu':'int(const int,const float)'})
call add(f,{'word':'random_poisson','kind':'f','menu':'int(const int,const float,const int,const int)'})
let c['random_poisson'] = f
let f = []
call add(f,{'word':'random_shash','kind':'f','menu':'int(const string)'})
let c['random_shash'] = f
let f = []
call add(f,{'word':'random_sobol','kind':'f','menu':'float(const float,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'float(const int,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'float(const vector4,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'float(const vector,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector4(const float,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector4(const int,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector4(const vector4,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector4(const vector,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector(const float,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector(const vector4,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector(const vector,const int)'})
let c['random_sobol'] = f
let f = []
call add(f,{'word':'randomf','kind':'f','menu':'float(const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'randomf','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector4(const float,const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector4(const vector)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector(const vector)'})
let c['randomf'] = f
let f = []
call add(f,{'word':'rawbumpmap','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmap','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmap','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmap','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmap'] = f
let f = []
call add(f,{'word':'rawbumpmapA','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapA','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapA','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapA','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapA'] = f
let f = []
call add(f,{'word':'rawbumpmapB','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapB','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapB','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapB','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapB'] = f
let f = []
call add(f,{'word':'rawbumpmapG','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapG','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapG','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapG','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapG'] = f
let f = []
call add(f,{'word':'rawbumpmapL','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapL','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapL','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapL','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapL'] = f
let f = []
call add(f,{'word':'rawbumpmapR','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapR','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapR','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapR','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapR'] = f
let f = []
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const float,const float)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const float,const float,const float,const float,const float,const float,const float,const float,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const vector)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const float,const float)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const float,const float,const float,const float,const float,const float,const float,const float,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector,const int)'})
let c['rawcolormap'] = f
let f = []
call add(f,{'word':'re_find','kind':'f','menu':'int(const string,const string)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(const string,const string,const int,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(int[],int[],const string,const string)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(int[],int[],const string,const string,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(int[],int[],const string,const string,const int,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'string(const string,const string)'})
call add(f,{'word':'re_find','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'string(const string,const string,const int,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'re_find','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'string[](const string,const string,const int,const int)'})
let c['re_find'] = f
let f = []
call add(f,{'word':'re_findall','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'re_findall','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'re_findall','kind':'f','menu':'string[](const string,const string,const int,const int)'})
let c['re_findall'] = f
let f = []
call add(f,{'word':'re_match','kind':'f','menu':'int(const string,const string)'})
let c['re_match'] = f
let f = []
call add(f,{'word':'re_replace','kind':'f','menu':'string(const string,const string,const string)'})
call add(f,{'word':'re_replace','kind':'f','menu':'string(const string,const string,const string,const int)'})
let c['re_replace'] = f
let f = []
call add(f,{'word':'re_split','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'re_split','kind':'f','menu':'string[](const string,const string,const int)'})
let c['re_split'] = f
let f = []
call add(f,{'word':'reflect','kind':'f','menu':'vector(const vector,const vector)'})
let c['reflect'] = f
let f = []
call add(f,{'word':'refract','kind':'f','menu':'vector(const vector,const vector,const float)'})
let c['refract'] = f
let f = []
call add(f,{'word':'relativepath','kind':'f','menu':'string(const string,const string)'})
let c['relativepath'] = f
let f = []
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const int,const vector)'})
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const vector)'})
let c['relbbox'] = f
let f = []
call add(f,{'word':'relpointbbox','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'relpointbbox','kind':'f','menu':'vector(const int,const vector)'})
call add(f,{'word':'relpointbbox','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'relpointbbox','kind':'f','menu':'vector(const string,const vector)'})
let c['relpointbbox'] = f
let f = []
call add(f,{'word':'removeindex','kind':'f','menu':'matrix2(export matrix2[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'matrix3(export matrix3[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'matrix(export matrix[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'float(export float[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'int(export int[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'vector4(export vector4[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'string(export string[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'vector2(export vector2[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'vector(export vector[],const int)'})
let c['removeindex'] = f
let f = []
call add(f,{'word':'removepoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'removepoint','kind':'f','menu':'int(const int,const int,const int)'})
let c['removepoint'] = f
let f = []
call add(f,{'word':'removeprim','kind':'f','menu':'int(const int,const int,const int)'})
let c['removeprim'] = f
let f = []
call add(f,{'word':'removevalue','kind':'f','menu':'int(export matrix2[],const matrix2)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export matrix3[],const matrix3)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export matrix[],const matrix)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export float[],const float)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export int[],const int)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export vector4[],const vector4)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export string[],const string)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export vector2[],const vector2)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export vector[],const vector)'})
let c['removevalue'] = f
let f = []
call add(f,{'word':'reorder','kind':'f','menu':'string(const string,const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'matrix2[](const matrix2[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'matrix3[](const matrix3[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'matrix[](const matrix[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'float[](const float[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'int[](const int[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'vector4[](const vector4[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'string[](const string[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'vector2[](const vector2[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'vector[](const vector[],const int[])'})
let c['reorder'] = f
let f = []
call add(f,{'word':'resample_linear','kind':'f','menu':'float[](const float[],const int)'})
call add(f,{'word':'resample_linear','kind':'f','menu':'vector4[](const vector4[],const int)'})
call add(f,{'word':'resample_linear','kind':'f','menu':'vector2[](const vector2[],const int)'})
call add(f,{'word':'resample_linear','kind':'f','menu':'vector[](const vector[],const int)'})
let c['resample_linear'] = f
let f = []
call add(f,{'word':'resize','kind':'f','menu':'void(export matrix2[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export matrix3[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export matrix[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export bsdf[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export float[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export int[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export vector4[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export string[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export vector2[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export vector[],const int)'})
let c['resize'] = f
let f = []
let c['returninline'] = f
let f = []
call add(f,{'word':'reverse','kind':'f','menu':'string(const string)'})
call add(f,{'word':'reverse','kind':'f','menu':'matrix2[](const matrix2[])'})
call add(f,{'word':'reverse','kind':'f','menu':'matrix3[](const matrix3[])'})
call add(f,{'word':'reverse','kind':'f','menu':'matrix[](const matrix[])'})
call add(f,{'word':'reverse','kind':'f','menu':'float[](const float[])'})
call add(f,{'word':'reverse','kind':'f','menu':'int[](const int[])'})
call add(f,{'word':'reverse','kind':'f','menu':'vector4[](const vector4[])'})
call add(f,{'word':'reverse','kind':'f','menu':'string[](const string[])'})
call add(f,{'word':'reverse','kind':'f','menu':'vector2[](const vector2[])'})
call add(f,{'word':'reverse','kind':'f','menu':'vector[](const vector[])'})
let c['reverse'] = f
let f = []
call add(f,{'word':'rgbtohsv','kind':'f','menu':'vector(const float,const float,const float)'})
call add(f,{'word':'rgbtohsv','kind':'f','menu':'vector(const vector)'})
let c['rgbtohsv'] = f
let f = []
call add(f,{'word':'rgbtoxyz','kind':'f','menu':'vector(const vector)'})
let c['rgbtoxyz'] = f
let f = []
call add(f,{'word':'rint','kind':'f','menu':'float(const float)'})
call add(f,{'word':'rint','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'rint','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'rint','kind':'f','menu':'vector(const vector)'})
let c['rint'] = f
let f = []
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix2,const float)'})
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix3,const float,const vector)'})
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix3,const vector,const int)'})
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix,const float,const vector)'})
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix,const vector,const int)'})
let c['rotate'] = f
let f = []
call add(f,{'word':'rotate_x_to','kind':'f','menu':'vector4(const vector4,const vector4)'})
call add(f,{'word':'rotate_x_to','kind':'f','menu':'vector2(const vector2,const vector2)'})
call add(f,{'word':'rotate_x_to','kind':'f','menu':'vector(const vector,const vector)'})
let c['rotate_x_to'] = f
let f = []
call add(f,{'word':'rstrip','kind':'f','menu':'string(const string)'})
call add(f,{'word':'rstrip','kind':'f','menu':'string(const string,const string)'})
let c['rstrip'] = f
let f = []
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,const vector,int,vector,vector,float,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'int(const bsdf,const vector,const vector,vector,vector,float,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,vector,vector,float,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'vector(const bsdf,const vector,vector,float,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,vector,vector,float,int,const float,const float)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'vector(const bsdf,const vector,vector,float,int,const float,const float)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,vector,vector,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'vector(const bsdf,const vector,vector,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,vector,vector,int,const float,const float)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'vector(const bsdf,const vector,vector,int,const float,const float)'})
let c['sample_bsdf'] = f
let f = []
call add(f,{'word':'sample_cauchy','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'float(const float,const float,const float,const float)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'vector2(const float,const vector2)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'vector(const vector)'})
let c['sample_cauchy'] = f
let f = []
call add(f,{'word':'sample_cdf','kind':'f','menu':'int(const float[],const float)'})
call add(f,{'word':'sample_cdf','kind':'f','menu':'void(const float[],const float,int,float)'})
call add(f,{'word':'sample_cdf','kind':'f','menu':'int(const float[],const float,float)'})
call add(f,{'word':'sample_cdf','kind':'f','menu':'void(const float[],const float,int,float,float)'})
call add(f,{'word':'sample_cdf','kind':'f','menu':'int(const float[],const float,float,float)'})
let c['sample_cdf'] = f
let f = []
call add(f,{'word':'sample_circle_arc','kind':'f','menu':'vector2(const vector2,const float,const float)'})
let c['sample_circle_arc'] = f
let f = []
call add(f,{'word':'sample_circle_edge_uniform','kind':'f','menu':'vector2(const float)'})
let c['sample_circle_edge_uniform'] = f
let f = []
call add(f,{'word':'sample_circle_ring_uniform','kind':'f','menu':'vector2(const vector2,const float)'})
let c['sample_circle_ring_uniform'] = f
let f = []
call add(f,{'word':'sample_circle_slice','kind':'f','menu':'vector2(const vector2,const float,const vector2)'})
let c['sample_circle_slice'] = f
let f = []
call add(f,{'word':'sample_circle_uniform','kind':'f','menu':'vector2(const vector2)'})
let c['sample_circle_uniform'] = f
let f = []
call add(f,{'word':'sample_direction_cone','kind':'f','menu':'vector(const vector,const float,const vector2)'})
let c['sample_direction_cone'] = f
let f = []
call add(f,{'word':'sample_direction_uniform','kind':'f','menu':'vector(const vector2)'})
let c['sample_direction_uniform'] = f
let f = []
call add(f,{'word':'sample_discrete','kind':'f','menu':'int(const int,const float)'})
call add(f,{'word':'sample_discrete','kind':'f','menu':'int(const float[],const float)'})
let c['sample_discrete'] = f
let f = []
call add(f,{'word':'sample_exponential','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sample_exponential','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'sample_exponential','kind':'f','menu':'float(const float,const float,const float)'})
let c['sample_exponential'] = f
let f = []
call add(f,{'word':'sample_hemisphere','kind':'f','menu':'vector(const float,const vector2)'})
call add(f,{'word':'sample_hemisphere','kind':'f','menu':'vector(const vector2)'})
call add(f,{'word':'sample_hemisphere','kind':'f','menu':'vector(const vector,const float,const vector2)'})
call add(f,{'word':'sample_hemisphere','kind':'f','menu':'vector(const vector,const vector2)'})
let c['sample_hemisphere'] = f
let f = []
call add(f,{'word':'sample_hypersphere_cone','kind':'f','menu':'vector4(const vector4,const float,const vector4)'})
let c['sample_hypersphere_cone'] = f
let f = []
call add(f,{'word':'sample_hypersphere_uniform','kind':'f','menu':'vector4(const vector4)'})
let c['sample_hypersphere_uniform'] = f
let f = []
call add(f,{'word':'sample_lognormal','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'sample_lognormal','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
let c['sample_lognormal'] = f
let f = []
call add(f,{'word':'sample_lognormal_by_median','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'sample_lognormal_by_median','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
let c['sample_lognormal_by_median'] = f
let f = []
call add(f,{'word':'sample_normal','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'vector(const vector)'})
let c['sample_normal'] = f
let f = []
call add(f,{'word':'sample_orientation_cone','kind':'f','menu':'vector4(const vector4,const float,const vector)'})
let c['sample_orientation_cone'] = f
let f = []
call add(f,{'word':'sample_orientation_uniform','kind':'f','menu':'vector4(const vector)'})
let c['sample_orientation_uniform'] = f
let f = []
call add(f,{'word':'sample_sphere_cone','kind':'f','menu':'vector(const vector,const float,const vector)'})
let c['sample_sphere_cone'] = f
let f = []
call add(f,{'word':'sample_sphere_shell_uniform','kind':'f','menu':'vector(const vector,const float)'})
let c['sample_sphere_shell_uniform'] = f
let f = []
call add(f,{'word':'sample_sphere_uniform','kind':'f','menu':'vector(const vector)'})
let c['sample_sphere_uniform'] = f
let f = []
call add(f,{'word':'sampledisk','kind':'f','menu':'void(float,float,const float,const float)'})
call add(f,{'word':'sampledisk','kind':'f','menu':'float(float,const float,const float)'})
let c['sampledisk'] = f
let f = []
call add(f,{'word':'scale','kind':'f','menu':'void(export matrix2,const vector2)'})
call add(f,{'word':'scale','kind':'f','menu':'void(export matrix3,const vector)'})
call add(f,{'word':'scale','kind':'f','menu':'void(export matrix,const vector)'})
let c['scale'] = f
let f = []
call add(f,{'word':'select','kind':'f','menu':'matrix2(const int,const matrix2,const matrix2)'})
call add(f,{'word':'select','kind':'f','menu':'matrix3(const int,const matrix3,const matrix3)'})
call add(f,{'word':'select','kind':'f','menu':'matrix(const int,const matrix,const matrix)'})
call add(f,{'word':'select','kind':'f','menu':'bsdf(const int,const bsdf,const bsdf)'})
call add(f,{'word':'select','kind':'f','menu':'float(const int,const float,const float)'})
call add(f,{'word':'select','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'select','kind':'f','menu':'vector4(const int,const vector4,const vector4)'})
call add(f,{'word':'select','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'select','kind':'f','menu':'vector2(const int,const vector2,const vector2)'})
call add(f,{'word':'select','kind':'f','menu':'vector(const int,const vector,const vector)'})
call add(f,{'word':'select','kind':'f','menu':'matrix2[](const int,const matrix2[],const matrix2[])'})
call add(f,{'word':'select','kind':'f','menu':'matrix3[](const int,const matrix3[],const matrix3[])'})
call add(f,{'word':'select','kind':'f','menu':'matrix[](const int,const matrix[],const matrix[])'})
call add(f,{'word':'select','kind':'f','menu':'bsdf[](const int,const bsdf[],const bsdf[])'})
call add(f,{'word':'select','kind':'f','menu':'float[](const int,const float[],const float[])'})
call add(f,{'word':'select','kind':'f','menu':'int[](const int,const int[],const int[])'})
call add(f,{'word':'select','kind':'f','menu':'vector4[](const int,const vector4[],const vector4[])'})
call add(f,{'word':'select','kind':'f','menu':'string[](const int,const string[],const string[])'})
call add(f,{'word':'select','kind':'f','menu':'vector2[](const int,const vector2[],const vector2[])'})
call add(f,{'word':'select','kind':'f','menu':'vector[](const int,const vector[],const vector[])'})
let c['select'] = f
let f = []
call add(f,{'word':'sensor_panorama_create','kind':'f','menu':'int(const float,const vector,const int,const float,const float,const string,const string,const string,const int)'})
let c['sensor_panorama_create'] = f
let f = []
call add(f,{'word':'sensor_panorama_getcolor','kind':'f','menu':'vector(const int,const vector)'})
let c['sensor_panorama_getcolor'] = f
let f = []
call add(f,{'word':'sensor_panorama_getcone','kind':'f','menu':'void(const int,const vector,const float,const vector,const vector,const float,const float,float,vector,vector,float)'})
call add(f,{'word':'sensor_panorama_getcone','kind':'f','menu':'float(const int,const vector,const float,const vector,const vector,const float,const float,vector,vector,float)'})
let c['sensor_panorama_getcone'] = f
let f = []
call add(f,{'word':'sensor_panorama_getdepth','kind':'f','menu':'float(const int,const vector)'})
let c['sensor_panorama_getdepth'] = f
let f = []
call add(f,{'word':'sensor_save','kind':'f','menu':'int(const int,const string,const string)'})
let c['sensor_save'] = f
let f = []
call add(f,{'word':'serialize','kind':'f','menu':'float[](const matrix2[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const matrix3[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const matrix[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const vector4[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const vector2[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const vector[])'})
let c['serialize'] = f
let f = []
call add(f,{'word':'set','kind':'f','menu':'matrix2(const matrix2)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const float,const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const int)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const vector2,const vector2)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const matrix2)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const float,const float,const float,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const int)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const vector,const vector,const vector)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const vector[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const matrix2)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const int)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const vector4,const vector4,const vector4,const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const vector4[])'})
call add(f,{'word':'set','kind':'f','menu':'bsdf(const bsdf)'})
call add(f,{'word':'set','kind':'f','menu':'float(const float)'})
call add(f,{'word':'set','kind':'f','menu':'float(const int)'})
call add(f,{'word':'set','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'set','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'int(const float)'})
call add(f,{'word':'set','kind':'f','menu':'int(const int)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const float,const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const int)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const vector2)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const vector)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'string(const string)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const int)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const vector)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const vector2)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix2[](const matrix2[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix2[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix3[](const matrix3[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix3[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix[](const matrix[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'bsdf[](const bsdf[])'})
call add(f,{'word':'set','kind':'f','menu':'float[](const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const float)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const vector)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'float[](const int[])'})
call add(f,{'word':'set','kind':'f','menu':'int[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'int[](const int[])'})
call add(f,{'word':'set','kind':'f','menu':'vector4[](const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'vector4[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'vector4[](const vector4[])'})
call add(f,{'word':'set','kind':'f','menu':'string[](const string[])'})
call add(f,{'word':'set','kind':'f','menu':'vector2[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'vector2[](const vector2[])'})
call add(f,{'word':'set','kind':'f','menu':'vector[](const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'vector[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'vector[](const vector[])'})
let c['set'] = f
let f = []
call add(f,{'word':'setagentclipnames','kind':'f','menu':'void(const int,const int,const string[])'})
let c['setagentclipnames'] = f
let f = []
call add(f,{'word':'setagentclips','kind':'f','menu':'int(const int,const int,const string[],const float[],const float[],const string[],const int[],const int[],const float[],const int[])'})
let c['setagentclips'] = f
let f = []
call add(f,{'word':'setagentcliptimes','kind':'f','menu':'void(const int,const int,const float[])'})
let c['setagentcliptimes'] = f
let f = []
call add(f,{'word':'setagentclipweights','kind':'f','menu':'void(const int,const int,const float[])'})
let c['setagentclipweights'] = f
let f = []
call add(f,{'word':'setagentcollisionlayer','kind':'f','menu':'void(const int,const int,const string)'})
let c['setagentcollisionlayer'] = f
let f = []
call add(f,{'word':'setagentcurrentlayer','kind':'f','menu':'void(const int,const int,const string)'})
let c['setagentcurrentlayer'] = f
let f = []
call add(f,{'word':'setagentlocaltransform','kind':'f','menu':'int(const int,const int,const matrix,const int)'})
let c['setagentlocaltransform'] = f
let f = []
call add(f,{'word':'setagentlocaltransforms','kind':'f','menu':'void(const int,const int,const matrix[])'})
let c['setagentlocaltransforms'] = f
let f = []
call add(f,{'word':'setagentworldtransform','kind':'f','menu':'int(const int,const int,const matrix,const int)'})
let c['setagentworldtransform'] = f
let f = []
call add(f,{'word':'setagentworldtransforms','kind':'f','menu':'void(const int,const int,const matrix[])'})
let c['setagentworldtransforms'] = f
let f = []
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix2)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix2,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix3)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix3,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const float)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const float,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const int)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const int,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector4)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector4,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const string,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector2)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector2,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix2[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix2[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix3[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix3[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const float[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const float[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const int[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const int[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector4[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector4[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const string[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const string[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector2[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector2[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector[],const string)'})
let c['setattrib'] = f
let f = []
call add(f,{'word':'setattribtypeinfo','kind':'f','menu':'int(const int,const string,const string,const string)'})
let c['setattribtypeinfo'] = f
let f = []
call add(f,{'word':'setcomp','kind':'f','menu':'void(export matrix2,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'matrix2(export matrix2[],const matrix2,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export matrix3,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'matrix3(export matrix3[],const matrix3,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export matrix,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'matrix(export matrix[],const matrix,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'bsdf(export bsdf[],const bsdf,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export matrix2,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export matrix3,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export matrix,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export vector4,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export vector2,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export vector,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export float[],const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'int(export int[],const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export vector4,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'vector4(export vector4[],const vector4,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'string(export string[],const string,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export vector2,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'vector2(export vector2[],const vector2,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export vector,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'vector(export vector[],const vector,const int)'})
let c['setcomp'] = f
let f = []
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix2[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix2[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix3[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix3[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector4[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector4[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector2[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector2[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector[],const string)'})
let c['setdetailattrib'] = f
let f = []
call add(f,{'word':'setedgegroup','kind':'f','menu':'int(const int,const string,const int,const int,const int)'})
let c['setedgegroup'] = f
let f = []
let c['setelem'] = f
let f = []
call add(f,{'word':'setpackedtransform','kind':'f','menu':'void(const int,const int,const matrix)'})
let c['setpackedtransform'] = f
let f = []
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const float)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const float,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector4)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector4,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const string,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector2)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector2,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const float[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const float[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const int[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const int[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector4[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector4[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const string[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const string[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector2[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector2[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector[],const string)'})
let c['setpointattrib'] = f
let f = []
call add(f,{'word':'setpointgroup','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setpointgroup','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
let c['setpointgroup'] = f
let f = []
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const float)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const float,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector4)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector4,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const string,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector2)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector2,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const float[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const float[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const int[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const int[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector4[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector4[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const string[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const string[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector2[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector2[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector[],const string)'})
let c['setprimattrib'] = f
let f = []
call add(f,{'word':'setprimgroup','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setprimgroup','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
let c['setprimgroup'] = f
let f = []
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix2)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix2,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix3)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix3,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const float)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const float,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector4)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector4,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const string,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector2)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector2,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix2[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix2[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix3[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix3[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const float[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const float[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const int[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const int[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector4[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector4[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const string[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const string[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector2[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector2[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector[],const string)'})
let c['setprimintrinsic'] = f
let f = []
call add(f,{'word':'setprimvertex','kind':'f','menu':'int(const int,const int,const int,const int)'})
let c['setprimvertex'] = f
let f = []
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix2)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix2,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix3)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix3,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const float)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const float,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const int)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const int,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector4)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector4,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector2)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector2,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix2[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix2[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix3[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix3[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const float[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const float[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const int[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const int[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector4[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector4[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector2[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector2[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector[],const string)'})
let c['setvertexattrib'] = f
let f = []
call add(f,{'word':'setvertexgroup','kind':'f','menu':'int(const int,const string,const int,const int,const int)'})
call add(f,{'word':'setvertexgroup','kind':'f','menu':'int(const int,const string,const int,const int,const int,const string)'})
let c['setvertexgroup'] = f
let f = []
call add(f,{'word':'setvertexpoint','kind':'f','menu':'int(const int,const int,const int,const int)'})
let c['setvertexpoint'] = f
let f = []
call add(f,{'word':'shadowmap','kind':'f','menu':'float(const string,const vector,const float,const float,const float)'})
call add(f,{'word':'shadowmap','kind':'f','menu':'vector(const string,const vector,const float,const float,const float)'})
call add(f,{'word':'shadowmap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector,const float,const float,const float)'})
let c['shadowmap'] = f
let f = []
call add(f,{'word':'shl','kind':'f','menu':'int(const int,const int)'})
let c['shl'] = f
let f = []
call add(f,{'word':'shr','kind':'f','menu':'int(const int,const int)'})
let c['shr'] = f
let f = []
call add(f,{'word':'shrz','kind':'f','menu':'int(const int,const int)'})
let c['shrz'] = f
let f = []
call add(f,{'word':'sign','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sign','kind':'f','menu':'int(const int)'})
call add(f,{'word':'sign','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sign','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sign','kind':'f','menu':'vector(const vector)'})
let c['sign'] = f
let f = []
call add(f,{'word':'sin','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sin','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sin','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sin','kind':'f','menu':'vector(const vector)'})
let c['sin'] = f
let f = []
call add(f,{'word':'sinh','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sinh','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sinh','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sinh','kind':'f','menu':'vector(const vector)'})
let c['sinh'] = f
let f = []
call add(f,{'word':'sleep','kind':'f','menu':'void(const int)'})
let c['sleep'] = f
let f = []
call add(f,{'word':'slerp','kind':'f','menu':'vector4(const vector4,const vector4,const float)'})
call add(f,{'word':'slerp','kind':'f','menu':'vector4(const vector4[],const float[])'})
let c['slerp'] = f
let f = []
call add(f,{'word':'slice','kind':'f','menu':'string(const string,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string(const string,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string(const string,const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix2[](const matrix2[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix2[](const matrix2[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix2[](const matrix2[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix3[](const matrix3[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix3[](const matrix3[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix3[](const matrix3[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix[](const matrix[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix[](const matrix[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix[](const matrix[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'float[](const float[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'float[](const float[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'float[](const float[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'int[](const int[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'int[](const int[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'int[](const int[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector4[](const vector4[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector4[](const vector4[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector4[](const vector4[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string[](const string[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string[](const string[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string[](const string[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector2[](const vector2[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector2[](const vector2[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector2[](const vector2[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector[](const vector[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector[](const vector[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector[](const vector[],const int,const int,const int,const int,const int,const int)'})
let c['slice'] = f
let f = []
call add(f,{'word':'slideframe','kind':'f','menu':'vector(const vector,const vector,const vector,const vector,const vector)'})
let c['slideframe'] = f
let f = []
call add(f,{'word':'smooth','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'smooth','kind':'f','menu':'float(const float,const float,const float,const float)'})
let c['smooth'] = f
let f = []
call add(f,{'word':'smoothrotation','kind':'f','menu':'vector(const int,const vector,const vector)'})
let c['smoothrotation'] = f
let f = []
call add(f,{'word':'snoise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'snoise','kind':'f','menu':'float(const vector,const int,const float,const float)'})
call add(f,{'word':'snoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'snoise','kind':'f','menu':'float(const vector,const int,const int,const int,const int,const float,const float)'})
call add(f,{'word':'snoise','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'snoise','kind':'f','menu':'vector(const vector,const int,const float,const float)'})
call add(f,{'word':'snoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
call add(f,{'word':'snoise','kind':'f','menu':'vector(const vector,const int,const int,const int,const int,const float,const float)'})
let c['snoise'] = f
let f = []
call add(f,{'word':'solid_angle','kind':'f','menu':'float(const bsdf,const int)'})
let c['solid_angle'] = f
let f = []
call add(f,{'word':'solveconstraint','kind':'f','menu':'vector[](const float[],const vector,const float,const matrix,const vector[])'})
let c['solveconstraint'] = f
let f = []
call add(f,{'word':'solvecubic','kind':'f','menu':'int(const float,const float,const float,const float,float,float,float)'})
call add(f,{'word':'solvecubic','kind':'f','menu':'int(const float,const float,const float,const float,vector2,vector2,vector2)'})
let c['solvecubic'] = f
let f = []
call add(f,{'word':'solvecurve','kind':'f','menu':'vector[](const string,const float[],const int,const int,const vector,const int,const matrix)'})
call add(f,{'word':'solvecurve','kind':'f','menu':'vector[](const float[],const int,const int,const vector,const vector[],const vector[])'})
let c['solvecurve'] = f
let f = []
call add(f,{'word':'solvefbik','kind':'f','menu':'matrix[](const matrix[],const int[],const int[],const matrix[],const int)'})
call add(f,{'word':'solvefbik','kind':'f','menu':'matrix[](const matrix[],const int[],const int[],const matrix[],const int,const float,const int)'})
call add(f,{'word':'solvefbik','kind':'f','menu':'matrix[](const matrix[],const int[],const int[],const matrix[],const int,const float,const int,const float[],const int[],const int[])'})
call add(f,{'word':'solvefbik','kind':'f','menu':'matrix[](const matrix[],const int[],const int[],const matrix[],const int,const float,const int,const float[],const int[],const int[],const matrix[],const vector4[],const vector[])'})
let c['solvefbik'] = f
let f = []
call add(f,{'word':'solveik','kind':'f','menu':'vector[](const float[],const vector,const vector,const float,const int,const float,const int,const float,const matrix,const vector[])'})
let c['solveik'] = f
let f = []
call add(f,{'word':'solvepoly','kind':'f','menu':'int(const float[],float[])'})
call add(f,{'word':'solvepoly','kind':'f','menu':'int(const float[],float[],const int)'})
let c['solvepoly'] = f
let f = []
call add(f,{'word':'solvequadratic','kind':'f','menu':'int(const float,const float,const float,float,float)'})
call add(f,{'word':'solvequadratic','kind':'f','menu':'int(const float,const float,const float,vector2,vector2)'})
let c['solvequadratic'] = f
let f = []
call add(f,{'word':'sort','kind':'f','menu':'float[](const float[])'})
call add(f,{'word':'sort','kind':'f','menu':'int[](const int[])'})
call add(f,{'word':'sort','kind':'f','menu':'string[](const string[])'})
let c['sort'] = f
let f = []
call add(f,{'word':'specular','kind':'f','menu':'bsdf(const vector)'})
let c['specular'] = f
let f = []
call add(f,{'word':'specularBRDF','kind':'f','menu':'float(const vector,const vector,const vector,const float)'})
let c['specularBRDF'] = f
let f = []
call add(f,{'word':'spline','kind':'f','menu':'float(const string,const float,const float)'})
call add(f,{'word':'spline','kind':'f','menu':'float(const string,const float,const float[])'})
call add(f,{'word':'spline','kind':'f','menu':'float(const string[],const float,const float[])'})
call add(f,{'word':'spline','kind':'f','menu':'float(const string[],const float,const float[],const float[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector4(const string,const float,const vector4)'})
call add(f,{'word':'spline','kind':'f','menu':'vector4(const string,const float,const vector4[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector4(const string[],const float,const vector4[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector4(const string[],const float,const vector4[],const float[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector(const string,const float,const vector)'})
call add(f,{'word':'spline','kind':'f','menu':'vector(const string,const float,const vector[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector(const string[],const float,const vector[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector(const string[],const float,const vector[],const float[])'})
let c['spline'] = f
let f = []
call add(f,{'word':'split','kind':'f','menu':'string[](const string)'})
call add(f,{'word':'split','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'split','kind':'f','menu':'string[](const string,const string,const int)'})
let c['split'] = f
let f = []
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[],const int,const int,const float,const float[])'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[],const int,const int,const float,const float[])'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[],const int,const int,const float)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[],const int,const int,const float)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[],const int,const int)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[],const int,const int)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[],const int)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[],const int)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[])'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[])'})
let c['split_bsdf'] = f
let f = []
call add(f,{'word':'splitpath','kind':'f','menu':'void(const string,string,string)'})
call add(f,{'word':'splitpath','kind':'f','menu':'string(const string,string)'})
let c['splitpath'] = f
let f = []
call add(f,{'word':'sprintf','kind':'f','menu':'string(const string)'})
let c['sprintf'] = f
let f = []
call add(f,{'word':'sqrt','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sqrt','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sqrt','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sqrt','kind':'f','menu':'vector(const vector)'})
let c['sqrt'] = f
let f = []
call add(f,{'word':'sssapprox','kind':'f','menu':'bsdf(const vector,const float,const float,const float)'})
let c['sssapprox'] = f
let f = []
call add(f,{'word':'startswith','kind':'f','menu':'int(const string,const string)'})
let c['startswith'] = f
let f = []
call add(f,{'word':'strip','kind':'f','menu':'string(const string)'})
call add(f,{'word':'strip','kind':'f','menu':'string(const string,const string)'})
let c['strip'] = f
let f = []
call add(f,{'word':'strlen','kind':'f','menu':'int(const string)'})
let c['strlen'] = f
let f = []
let c['struct'] = f
let f = []
let c['sub'] = f
let f = []
call add(f,{'word':'sum','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sum','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'sum','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'sum','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'sum','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'sum','kind':'f','menu':'int(const int)'})
call add(f,{'word':'sum','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'sum','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'sum','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'sum','kind':'f','menu':'vector(const vector[])'})
let c['sum'] = f
let f = []
call add(f,{'word':'surfacedist','kind':'f','menu':'float(const int,const string,const string,const int,const float,int,const string)'})
call add(f,{'word':'surfacedist','kind':'f','menu':'float(const string,const string,const string,const int,const float,int,const string)'})
let c['surfacedist'] = f
let f = []
let c['swap'] = f
let f = []
call add(f,{'word':'switch','kind':'f','menu':'bsdf(const bsdf,const bsdf)'})
let c['switch'] = f
let f = []
call add(f,{'word':'swizzle','kind':'f','menu':'vector4(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'swizzle','kind':'f','menu':'vector2(const vector2,const int,const int)'})
call add(f,{'word':'swizzle','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
let c['swizzle'] = f
let f = []
call add(f,{'word':'tan','kind':'f','menu':'float(const float)'})
call add(f,{'word':'tan','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'tan','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'tan','kind':'f','menu':'vector(const vector)'})
let c['tan'] = f
let f = []
call add(f,{'word':'tanh','kind':'f','menu':'float(const float)'})
call add(f,{'word':'tanh','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'tanh','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'tanh','kind':'f','menu':'vector(const vector)'})
let c['tanh'] = f
let f = []
call add(f,{'word':'tet_adjacent','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'tet_adjacent','kind':'f','menu':'int(const string,const int,const int)'})
let c['tet_adjacent'] = f
let f = []
call add(f,{'word':'tet_faceindex','kind':'f','menu':'int(const int,const int)'})
let c['tet_faceindex'] = f
let f = []
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export matrix3)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export matrix)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export float)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export int)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export vector4)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export string)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export vector)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export int[])'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export string[])'})
let c['teximport'] = f
let f = []
call add(f,{'word':'texprintf','kind':'f','menu':'string(const float,const float,const string)'})
let c['texprintf'] = f
let f = []
call add(f,{'word':'texture','kind':'f','menu':'vector4(const string,const float,const float)'})
call add(f,{'word':'texture','kind':'f','menu':'vector4(const string,const float,const float,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'texture','kind':'f','menu':'vector(const string,const float,const float)'})
call add(f,{'word':'texture','kind':'f','menu':'vector(const string,const float,const float,const float,const float,const float,const float,const float,const float)'})
let c['texture'] = f
let f = []
call add(f,{'word':'texture3d','kind':'f','menu':'matrix3(const string,const string,const vector)'})
call add(f,{'word':'texture3d','kind':'f','menu':'matrix(const string,const string,const vector)'})
call add(f,{'word':'texture3d','kind':'f','menu':'float(const string,const string,const vector)'})
call add(f,{'word':'texture3d','kind':'f','menu':'vector4(const string,const string,const vector)'})
call add(f,{'word':'texture3d','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['texture3d'] = f
let f = []
call add(f,{'word':'texture3dBox','kind':'f','menu':'void(const string,const string,vector,vector)'})
call add(f,{'word':'texture3dBox','kind':'f','menu':'vector(const string,const string,vector)'})
let c['texture3dBox'] = f
let f = []
call add(f,{'word':'titlecase','kind':'f','menu':'string(const string)'})
let c['titlecase'] = f
let f = []
call add(f,{'word':'toNDC','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'toNDC','kind':'f','menu':'vector(const vector)'})
let c['toNDC'] = f
let f = []
call add(f,{'word':'tolower','kind':'f','menu':'string(const string)'})
let c['tolower'] = f
let f = []
call add(f,{'word':'toupper','kind':'f','menu':'string(const string)'})
let c['toupper'] = f
let f = []
call add(f,{'word':'translate','kind':'f','menu':'void(export matrix,const vector4)'})
call add(f,{'word':'translate','kind':'f','menu':'void(export matrix,const vector)'})
let c['translate'] = f
let f = []
call add(f,{'word':'translucent','kind':'f','menu':'bsdf(const vector,const vector)'})
let c['translucent'] = f
let f = []
call add(f,{'word':'transpose','kind':'f','menu':'void(export matrix2)'})
call add(f,{'word':'transpose','kind':'f','menu':'matrix2(const matrix2)'})
call add(f,{'word':'transpose','kind':'f','menu':'void(export matrix3)'})
call add(f,{'word':'transpose','kind':'f','menu':'matrix3(const matrix3)'})
call add(f,{'word':'transpose','kind':'f','menu':'void(export matrix)'})
call add(f,{'word':'transpose','kind':'f','menu':'matrix(const matrix)'})
let c['transpose'] = f
let f = []
call add(f,{'word':'trunc','kind':'f','menu':'float(const float)'})
call add(f,{'word':'trunc','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'trunc','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'trunc','kind':'f','menu':'vector(const vector)'})
let c['trunc'] = f
let f = []
call add(f,{'word':'tw_nspace','kind':'f','menu':'vector(const vector)'})
let c['tw_nspace'] = f
let f = []
call add(f,{'word':'tw_space','kind':'f','menu':'matrix()'})
call add(f,{'word':'tw_space','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'tw_space','kind':'f','menu':'vector(const vector)'})
let c['tw_space'] = f
let f = []
call add(f,{'word':'tw_vspace','kind':'f','menu':'vector(const vector)'})
let c['tw_vspace'] = f
let f = []
call add(f,{'word':'uniqueval','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'uniqueval','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'uniqueval','kind':'f','menu':'string(const int,const string,const string,const int)'})
call add(f,{'word':'uniqueval','kind':'f','menu':'string(const string,const string,const string,const int)'})
let c['uniqueval'] = f
let f = []
call add(f,{'word':'uniquevals','kind':'f','menu':'int[](const int,const string,const string)'})
call add(f,{'word':'uniquevals','kind':'f','menu':'int[](const string,const string,const string)'})
call add(f,{'word':'uniquevals','kind':'f','menu':'string[](const int,const string,const string)'})
call add(f,{'word':'uniquevals','kind':'f','menu':'string[](const string,const string,const string)'})
let c['uniquevals'] = f
let f = []
call add(f,{'word':'unpack_intfromsafefloat','kind':'f','menu':'int(const float)'})
let c['unpack_intfromsafefloat'] = f
let f = []
call add(f,{'word':'unserialize','kind':'f','menu':'matrix2[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'matrix3[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'matrix[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'vector4[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'vector2[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'vector[](const float[])'})
let c['unserialize'] = f
let f = []
call add(f,{'word':'upush','kind':'f','menu':'void(export matrix2[],const matrix2)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export matrix3[],const matrix3)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export matrix[],const matrix)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export bsdf[],const bsdf)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export float[],const float)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export int[],const int)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export vector4[],const vector4)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export string[],const string)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export vector2[],const vector2)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export vector[],const vector)'})
let c['upush'] = f
let f = []
let c['urandom'] = f
let f = []
call add(f,{'word':'usd_addtransform','kind':'f','menu':'int(const int,const string,const string,const matrix)'})
let c['usd_addtransform'] = f
let f = []
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector[](const string,const string,const string)'})
let c['usd_attrib'] = f
let f = []
call add(f,{'word':'usd_attriblen','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_attriblen','kind':'f','menu':'int(const string,const string,const string)'})
let c['usd_attriblen'] = f
let f = []
call add(f,{'word':'usd_attribnames','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'usd_attribnames','kind':'f','menu':'string[](const string,const string)'})
let c['usd_attribnames'] = f
let f = []
call add(f,{'word':'usd_attribsize','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_attribsize','kind':'f','menu':'int(const string,const string,const string)'})
let c['usd_attribsize'] = f
let f = []
call add(f,{'word':'usd_attribtypename','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'usd_attribtypename','kind':'f','menu':'string(const string,const string,const string)'})
let c['usd_attribtypename'] = f
let f = []
call add(f,{'word':'usd_cleartransformorder','kind':'f','menu':'int(const int,const string)'})
let c['usd_cleartransformorder'] = f
let f = []
call add(f,{'word':'usd_drawmode','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_drawmode','kind':'f','menu':'string(const string,const string)'})
let c['usd_drawmode'] = f
let f = []
call add(f,{'word':'usd_isactive','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'usd_isactive','kind':'f','menu':'int(const string,const string)'})
let c['usd_isactive'] = f
let f = []
call add(f,{'word':'usd_isarray','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_isarray','kind':'f','menu':'int(const string,const string,const string)'})
let c['usd_isarray'] = f
let f = []
call add(f,{'word':'usd_isattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_isattrib','kind':'f','menu':'int(const string,const string,const string)'})
let c['usd_isattrib'] = f
let f = []
call add(f,{'word':'usd_isprim','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'usd_isprim','kind':'f','menu':'int(const string,const string)'})
let c['usd_isprim'] = f
let f = []
call add(f,{'word':'usd_isstage','kind':'f','menu':'int(const int)'})
call add(f,{'word':'usd_isstage','kind':'f','menu':'int(const string)'})
let c['usd_isstage'] = f
let f = []
call add(f,{'word':'usd_istransformreset','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'usd_istransformreset','kind':'f','menu':'int(const string,const string)'})
let c['usd_istransformreset'] = f
let f = []
call add(f,{'word':'usd_isvisible','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'usd_isvisible','kind':'f','menu':'int(const string,const string)'})
let c['usd_isvisible'] = f
let f = []
call add(f,{'word':'usd_kind','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_kind','kind':'f','menu':'string(const string,const string)'})
let c['usd_kind'] = f
let f = []
call add(f,{'word':'usd_localtransform','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'usd_localtransform','kind':'f','menu':'matrix(const string,const string)'})
let c['usd_localtransform'] = f
let f = []
call add(f,{'word':'usd_name','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_name','kind':'f','menu':'string(const string,const string)'})
let c['usd_name'] = f
let f = []
call add(f,{'word':'usd_parentpath','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_parentpath','kind':'f','menu':'string(const string,const string)'})
let c['usd_parentpath'] = f
let f = []
call add(f,{'word':'usd_purpose','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_purpose','kind':'f','menu':'string(const string,const string)'})
let c['usd_purpose'] = f
let f = []
call add(f,{'word':'usd_setactive','kind':'f','menu':'int(const int,const string,const int)'})
let c['usd_setactive'] = f
let f = []
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix2)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix3)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const float)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector4)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector2)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix2[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix3[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const float[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const int[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector4[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const string[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector2[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector[])'})
let c['usd_setattrib'] = f
let f = []
call add(f,{'word':'usd_setdrawmode','kind':'f','menu':'int(const int,const string,const string)'})
let c['usd_setdrawmode'] = f
let f = []
call add(f,{'word':'usd_setkind','kind':'f','menu':'int(const int,const string,const string)'})
let c['usd_setkind'] = f
let f = []
call add(f,{'word':'usd_setpurpose','kind':'f','menu':'int(const int,const string,const string)'})
let c['usd_setpurpose'] = f
let f = []
call add(f,{'word':'usd_setvariantselection','kind':'f','menu':'int(const int,const string,const string,const string)'})
let c['usd_setvariantselection'] = f
let f = []
call add(f,{'word':'usd_setvisible','kind':'f','menu':'int(const int,const string,const int)'})
let c['usd_setvisible'] = f
let f = []
call add(f,{'word':'usd_transformorder','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'usd_transformorder','kind':'f','menu':'string[](const string,const string)'})
let c['usd_transformorder'] = f
let f = []
call add(f,{'word':'usd_typename','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_typename','kind':'f','menu':'string(const string,const string)'})
let c['usd_typename'] = f
let f = []
call add(f,{'word':'usd_variants','kind':'f','menu':'string[](const int,const string,const string)'})
call add(f,{'word':'usd_variants','kind':'f','menu':'string[](const string,const string,const string)'})
let c['usd_variants'] = f
let f = []
call add(f,{'word':'usd_variantselection','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'usd_variantselection','kind':'f','menu':'string(const string,const string,const string)'})
let c['usd_variantselection'] = f
let f = []
call add(f,{'word':'usd_variantsets','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'usd_variantsets','kind':'f','menu':'string[](const string,const string)'})
let c['usd_variantsets'] = f
let f = []
call add(f,{'word':'usd_worldtransform','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'usd_worldtransform','kind':'f','menu':'matrix(const string,const string)'})
let c['usd_worldtransform'] = f
let f = []
call add(f,{'word':'uvdist','kind':'f','menu':'float(const int,const string,const string,const vector,int,vector)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const int,const string,const string,const vector,int,vector,const float)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const int,const string,const vector,int,vector)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const int,const string,const vector,int,vector,const float)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const string,const string,const string,const vector,int,vector)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const string,const string,const string,const vector,int,vector,const float)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const string,const string,const vector,int,vector)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const string,const string,const vector,int,vector,const float)'})
let c['uvdist'] = f
let f = []
call add(f,{'word':'uvintersect','kind':'f','menu':'int(const int,const string,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'uvintersect','kind':'f','menu':'int(const int,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'uvintersect','kind':'f','menu':'int(const string,const string,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'uvintersect','kind':'f','menu':'int(const string,const string,const vector,const vector,vector,vector)'})
let c['uvintersect'] = f
let f = []
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector[](const string,const string,const string,const vector)'})
let c['uvsample'] = f
let f = []
call add(f,{'word':'uvunwrap','kind':'f','menu':'int(const string,const float,const float,const float,vector,vector)'})
call add(f,{'word':'uvunwrap','kind':'f','menu':'int(const string,const float,const float,const float,vector,vector,vector,vector)'})
let c['uvunwrap'] = f
let f = []
call add(f,{'word':'variance','kind':'f','menu':'float(const float,float,int)'})
let c['variance'] = f
let f = []
call add(f,{'word':'vertex','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector[](const string,const string,const int,const int)'})
let c['vertex'] = f
let f = []
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix2(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix2(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix3(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix3(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'float(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'float(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'int(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'int(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector4(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector4(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'string(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'string(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector2(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector2(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix2[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix2[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix3[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix3[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'float[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'float[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'int[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'int[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector4[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector4[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'string[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'string[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector2[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector2[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector[](const string,const string,const int,int)'})
let c['vertexattrib'] = f
let f = []
call add(f,{'word':'vertexattribsize','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'vertexattribsize','kind':'f','menu':'int(const string,const string)'})
let c['vertexattribsize'] = f
let f = []
call add(f,{'word':'vertexattribtype','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'vertexattribtype','kind':'f','menu':'int(const string,const string)'})
let c['vertexattribtype'] = f
let f = []
call add(f,{'word':'vertexattribtypeinfo','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'vertexattribtypeinfo','kind':'f','menu':'string(const string,const string)'})
let c['vertexattribtypeinfo'] = f
let f = []
call add(f,{'word':'vertexhedge','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexhedge','kind':'f','menu':'int(const string,const int)'})
let c['vertexhedge'] = f
let f = []
call add(f,{'word':'vertexindex','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'vertexindex','kind':'f','menu':'int(const string,const int,const int)'})
let c['vertexindex'] = f
let f = []
call add(f,{'word':'vertexnext','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexnext','kind':'f','menu':'int(const string,const int)'})
let c['vertexnext'] = f
let f = []
call add(f,{'word':'vertexpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexpoint','kind':'f','menu':'int(const string,const int)'})
let c['vertexpoint'] = f
let f = []
call add(f,{'word':'vertexprev','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexprev','kind':'f','menu':'int(const string,const int)'})
let c['vertexprev'] = f
let f = []
call add(f,{'word':'vertexprim','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexprim','kind':'f','menu':'int(const string,const int)'})
let c['vertexprim'] = f
let f = []
call add(f,{'word':'vertexprimindex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexprimindex','kind':'f','menu':'int(const string,const int)'})
let c['vertexprimindex'] = f
let f = []
call add(f,{'word':'vnoise','kind':'f','menu':'void(const float,const float,const float,const float,int,float,float,float,float,float,float)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const float,const float,const float,const float,float,float,float,float,float,float)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const float,const float,const float,const float,int,float,float,float,float,float,float,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const float,const float,const float,const float,float,float,float,float,float,float,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const float,const float,float,float,float,float)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const float,const float,float,float,float,float,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector4,const vector4,int,float,float,vector4,vector4)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector4,const vector4,float,float,vector4,vector4)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector4,const vector4,int,float,float,vector4,vector4,const int,const int,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector4,const vector4,float,float,vector4,vector4,const int,const int,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector4,const vector4,int,float,float,vector4,vector4,const vector4)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector4,const vector4,float,float,vector4,vector4,const vector4)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector,const vector,int,float,float,vector,vector)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector,const vector,float,float,vector,vector)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector,const vector,int,float,float,vector,vector,const int,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector,const vector,float,float,vector,vector,const int,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector,const vector,int,float,float,vector,vector,const vector)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector,const vector,float,float,vector,vector,const vector)'})
let c['vnoise'] = f
let f = []
call add(f,{'word':'volume','kind':'f','menu':'float(const vector)'})
let c['volume'] = f
let f = []
call add(f,{'word':'volumegradient','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumegradient','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumegradient','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumegradient','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumegradient'] = f
let f = []
call add(f,{'word':'volumeindex','kind':'f','menu':'float(const int,const int,const vector)'})
call add(f,{'word':'volumeindex','kind':'f','menu':'float(const int,const string,const vector)'})
call add(f,{'word':'volumeindex','kind':'f','menu':'float(const string,const int,const vector)'})
call add(f,{'word':'volumeindex','kind':'f','menu':'float(const string,const string,const vector)'})
let c['volumeindex'] = f
let f = []
call add(f,{'word':'volumeindexactive','kind':'f','menu':'int(const int,const int,const vector)'})
call add(f,{'word':'volumeindexactive','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'volumeindexactive','kind':'f','menu':'int(const string,const int,const vector)'})
call add(f,{'word':'volumeindexactive','kind':'f','menu':'int(const string,const string,const vector)'})
let c['volumeindexactive'] = f
let f = []
call add(f,{'word':'volumeindexorigin','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'volumeindexorigin','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'volumeindexorigin','kind':'f','menu':'vector(const string,const int)'})
call add(f,{'word':'volumeindexorigin','kind':'f','menu':'vector(const string,const string)'})
let c['volumeindexorigin'] = f
let f = []
call add(f,{'word':'volumeindextopos','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumeindextopos','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumeindextopos','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumeindextopos','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumeindextopos'] = f
let f = []
call add(f,{'word':'volumeindexv','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumeindexv','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumeindexv','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumeindexv','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumeindexv'] = f
let f = []
call add(f,{'word':'volumepostoindex','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumepostoindex','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumepostoindex','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumepostoindex','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumepostoindex'] = f
let f = []
call add(f,{'word':'volumeres','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'volumeres','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'volumeres','kind':'f','menu':'vector(const string,const int)'})
call add(f,{'word':'volumeres','kind':'f','menu':'vector(const string,const string)'})
let c['volumeres'] = f
let f = []
call add(f,{'word':'volumesample','kind':'f','menu':'float(const int,const int,const vector)'})
call add(f,{'word':'volumesample','kind':'f','menu':'float(const int,const string,const vector)'})
call add(f,{'word':'volumesample','kind':'f','menu':'float(const string,const int,const vector)'})
call add(f,{'word':'volumesample','kind':'f','menu':'float(const string,const string,const vector)'})
let c['volumesample'] = f
let f = []
call add(f,{'word':'volumesamplev','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumesamplev','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumesamplev','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumesamplev','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumesamplev'] = f
let f = []
call add(f,{'word':'volumevoxeldiameter','kind':'f','menu':'float(const int,const int)'})
call add(f,{'word':'volumevoxeldiameter','kind':'f','menu':'float(const int,const string)'})
call add(f,{'word':'volumevoxeldiameter','kind':'f','menu':'float(const string,const int)'})
call add(f,{'word':'volumevoxeldiameter','kind':'f','menu':'float(const string,const string)'})
let c['volumevoxeldiameter'] = f
let f = []
call add(f,{'word':'vtransform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'vtransform','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'vtransform','kind':'f','menu':'vector(const vector,const matrix)'})
let c['vtransform'] = f
let f = []
call add(f,{'word':'warning','kind':'f','menu':'void(const string)'})
let c['warning'] = f
let f = []
let c['while'] = f
let f = []
call add(f,{'word':'wireblinn','kind':'f','menu':'bsdf(const vector,const float)'})
let c['wireblinn'] = f
let f = []
call add(f,{'word':'wirediffuse','kind':'f','menu':'bsdf(const vector)'})
let c['wirediffuse'] = f
let f = []
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,const float,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,const float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,const float,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,const float,float,float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,const float,int,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,const float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,int,float,float,float,float,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,float,float,float,float,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,int,float,float,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,float,float,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector4,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector4,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector4,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector4,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector4,int,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector4,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector2,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector2,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector2,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector2,float,float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector2,int,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector2,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector,int,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector,int,float,float,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector,float,float,const int,const int,const int)'})
let c['wnoise'] = f
let f = []
call add(f,{'word':'wo_nspace','kind':'f','menu':'vector(const vector)'})
let c['wo_nspace'] = f
let f = []
call add(f,{'word':'wo_space','kind':'f','menu':'matrix()'})
call add(f,{'word':'wo_space','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'wo_space','kind':'f','menu':'vector(const vector)'})
let c['wo_space'] = f
let f = []
call add(f,{'word':'wo_vspace','kind':'f','menu':'vector(const vector)'})
let c['wo_vspace'] = f
let f = []
call add(f,{'word':'wt_nspace','kind':'f','menu':'vector(const vector)'})
let c['wt_nspace'] = f
let f = []
call add(f,{'word':'wt_space','kind':'f','menu':'matrix()'})
call add(f,{'word':'wt_space','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'wt_space','kind':'f','menu':'vector(const vector)'})
let c['wt_space'] = f
let f = []
call add(f,{'word':'wt_vspace','kind':'f','menu':'vector(const vector)'})
let c['wt_vspace'] = f
let f = []
call add(f,{'word':'xnoise','kind':'f','menu':'float(const float)'})
call add(f,{'word':'xnoise','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'xnoise','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'xnoise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'xnoise','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'xnoise','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'xnoise','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'xnoise','kind':'f','menu':'vector(const vector)'})
let c['xnoise'] = f
let f = []
call add(f,{'word':'xnoised','kind':'f','menu':'void(const float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'float(const float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const float,const float,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'float(const float,const float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const float,const float,vector,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'vector(const float,const float,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const float,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'vector(const float,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const vector4,float,float,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'float(const vector4,float,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const vector4,vector,vector,vector,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'vector(const vector4,vector,vector,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const vector,float,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'float(const vector,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const vector,vector,vector,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'vector(const vector,vector,vector,vector)'})
let c['xnoised'] = f
let f = []
let c['xor'] = f
let f = []
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const string,const vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const string,const vector,int,vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const string,const vector,int,vector,const float)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const vector,int,vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const vector,int,vector,const float)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const string,const vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const string,const vector,int,vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const string,const vector,int,vector,const float)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const vector,int,vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const vector,int,vector,const float)'})
let c['xyzdist'] = f
let f = []
call add(f,{'word':'xyztorgb','kind':'f','menu':'vector(const vector)'})
let c['xyztorgb'] = f
let contexts['image3d'] = c
" CONTEXT: cvex 
let c = {}
let f = []
call add(f,{'word':'Du','kind':'f','menu':'float(const float)'})
call add(f,{'word':'Du','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'Du','kind':'f','menu':'vector(const vector)'})
let c['Du'] = f
let f = []
call add(f,{'word':'Dv','kind':'f','menu':'float(const float)'})
call add(f,{'word':'Dv','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'Dv','kind':'f','menu':'vector(const vector)'})
let c['Dv'] = f
let f = []
call add(f,{'word':'Dw','kind':'f','menu':'float(const float)'})
call add(f,{'word':'Dw','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'Dw','kind':'f','menu':'vector(const vector)'})
let c['Dw'] = f
let f = []
let c['__ptexture_shift_coord'] = f
let f = []
let c['_export'] = f
let f = []
call add(f,{'word':'abs','kind':'f','menu':'float(const float)'})
call add(f,{'word':'abs','kind':'f','menu':'int(const int)'})
call add(f,{'word':'abs','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'abs','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'abs','kind':'f','menu':'vector(const vector)'})
let c['abs'] = f
let f = []
call add(f,{'word':'acos','kind':'f','menu':'float(const float)'})
call add(f,{'word':'acos','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'acos','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'acos','kind':'f','menu':'vector(const vector)'})
let c['acos'] = f
let f = []
let c['add'] = f
let f = []
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix2)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix3)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const float)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector4)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector2)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector)'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix2[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix3[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const matrix[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const float[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const int[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector4[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const string[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector2[])'})
call add(f,{'word':'addattrib','kind':'f','menu':'int(const int,const string,const string,const vector[])'})
let c['addattrib'] = f
let f = []
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'adddetailattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
let c['adddetailattrib'] = f
let f = []
call add(f,{'word':'addpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'addpoint','kind':'f','menu':'int(const int,const vector)'})
let c['addpoint'] = f
let f = []
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'addpointattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
let c['addpointattrib'] = f
let f = []
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,const int)'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,const int,const int)'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int,const int,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int,int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'void(int,const int,const string,const int[],int[])'})
call add(f,{'word':'addprim','kind':'f','menu':'int(const int,const string,const int[],int[])'})
let c['addprim'] = f
let f = []
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'addprimattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
let c['addprimattrib'] = f
let f = []
call add(f,{'word':'addvariablename','kind':'f','menu':'int(const int,const string,const string)'})
let c['addvariablename'] = f
let f = []
call add(f,{'word':'addvertex','kind':'f','menu':'int(const int,const int,const int)'})
let c['addvertex'] = f
let f = []
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'addvertexattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
let c['addvertexattrib'] = f
let f = []
call add(f,{'word':'addvisualizer','kind':'f','menu':'int(const int,const string)'})
let c['addvisualizer'] = f
let f = []
call add(f,{'word':'agentaddclip','kind':'f','menu':'int(const int,const int,const string,const string,const int)'})
let c['agentaddclip'] = f
let f = []
call add(f,{'word':'agentclipcatalog','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agentclipcatalog','kind':'f','menu':'string[](const string,const int)'})
let c['agentclipcatalog'] = f
let f = []
call add(f,{'word':'agentclipchannel','kind':'f','menu':'int(const int,const int,const string,const string)'})
call add(f,{'word':'agentclipchannel','kind':'f','menu':'int(const string,const int,const string,const string)'})
let c['agentclipchannel'] = f
let f = []
call add(f,{'word':'agentclipchannelnames','kind':'f','menu':'string[](const int,const int,const string)'})
call add(f,{'word':'agentclipchannelnames','kind':'f','menu':'string[](const string,const int,const string)'})
let c['agentclipchannelnames'] = f
let f = []
call add(f,{'word':'agentcliplength','kind':'f','menu':'float(const int,const int,const string)'})
call add(f,{'word':'agentcliplength','kind':'f','menu':'float(const string,const int,const string)'})
let c['agentcliplength'] = f
let f = []
call add(f,{'word':'agentclipnames','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agentclipnames','kind':'f','menu':'string[](const string,const int)'})
let c['agentclipnames'] = f
let f = []
call add(f,{'word':'agentclipsample','kind':'f','menu':'float(const int,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsample','kind':'f','menu':'float(const int,const int,const string,const float,const string)'})
call add(f,{'word':'agentclipsample','kind':'f','menu':'float(const string,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsample','kind':'f','menu':'float(const string,const int,const string,const float,const string)'})
let c['agentclipsample'] = f
let f = []
call add(f,{'word':'agentclipsamplelocal','kind':'f','menu':'matrix(const int,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsamplelocal','kind':'f','menu':'matrix(const string,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsamplelocal','kind':'f','menu':'matrix[](const int,const int,const string,const float)'})
call add(f,{'word':'agentclipsamplelocal','kind':'f','menu':'matrix[](const string,const int,const string,const float)'})
let c['agentclipsamplelocal'] = f
let f = []
call add(f,{'word':'agentclipsamplerate','kind':'f','menu':'float(const int,const int,const string)'})
call add(f,{'word':'agentclipsamplerate','kind':'f','menu':'float(const string,const int,const string)'})
let c['agentclipsamplerate'] = f
let f = []
call add(f,{'word':'agentclipsampleworld','kind':'f','menu':'matrix(const int,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsampleworld','kind':'f','menu':'matrix(const string,const int,const string,const float,const int)'})
call add(f,{'word':'agentclipsampleworld','kind':'f','menu':'matrix[](const int,const int,const string,const float)'})
call add(f,{'word':'agentclipsampleworld','kind':'f','menu':'matrix[](const string,const int,const string,const float)'})
let c['agentclipsampleworld'] = f
let f = []
call add(f,{'word':'agentcliptimes','kind':'f','menu':'float[](const int,const int)'})
call add(f,{'word':'agentcliptimes','kind':'f','menu':'float[](const string,const int)'})
let c['agentcliptimes'] = f
let f = []
call add(f,{'word':'agentcliptransformgroups','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agentcliptransformgroups','kind':'f','menu':'string[](const string,const int)'})
let c['agentcliptransformgroups'] = f
let f = []
call add(f,{'word':'agentclipweights','kind':'f','menu':'float[](const int,const int)'})
call add(f,{'word':'agentclipweights','kind':'f','menu':'float[](const string,const int)'})
let c['agentclipweights'] = f
let f = []
call add(f,{'word':'agentcollisionlayer','kind':'f','menu':'string(const int,const int)'})
call add(f,{'word':'agentcollisionlayer','kind':'f','menu':'string(const string,const int)'})
let c['agentcollisionlayer'] = f
let f = []
call add(f,{'word':'agentcurrentlayer','kind':'f','menu':'string(const int,const int)'})
call add(f,{'word':'agentcurrentlayer','kind':'f','menu':'string(const string,const int)'})
let c['agentcurrentlayer'] = f
let f = []
call add(f,{'word':'agentfindtransformgroup','kind':'f','menu':'int(const int,const int,const string)'})
call add(f,{'word':'agentfindtransformgroup','kind':'f','menu':'int(const string,const int,const string)'})
let c['agentfindtransformgroup'] = f
let f = []
call add(f,{'word':'agentlayerbindings','kind':'f','menu':'int[](const int,const int,const string,const string)'})
call add(f,{'word':'agentlayerbindings','kind':'f','menu':'int[](const string,const int,const string,const string)'})
let c['agentlayerbindings'] = f
let f = []
call add(f,{'word':'agentlayers','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agentlayers','kind':'f','menu':'string[](const string,const int)'})
let c['agentlayers'] = f
let f = []
call add(f,{'word':'agentlayershapes','kind':'f','menu':'string[](const int,const int,const string,const int)'})
call add(f,{'word':'agentlayershapes','kind':'f','menu':'string[](const int,const int,const string,const string)'})
call add(f,{'word':'agentlayershapes','kind':'f','menu':'string[](const string,const int,const string,const int)'})
call add(f,{'word':'agentlayershapes','kind':'f','menu':'string[](const string,const int,const string,const string)'})
let c['agentlayershapes'] = f
let f = []
call add(f,{'word':'agentlocaltransform','kind':'f','menu':'matrix(const int,const int,const int)'})
call add(f,{'word':'agentlocaltransform','kind':'f','menu':'matrix(const string,const int,const int)'})
let c['agentlocaltransform'] = f
let f = []
call add(f,{'word':'agentlocaltransforms','kind':'f','menu':'matrix[](const int,const int)'})
call add(f,{'word':'agentlocaltransforms','kind':'f','menu':'matrix[](const string,const int)'})
let c['agentlocaltransforms'] = f
let f = []
call add(f,{'word':'agentrigchildren','kind':'f','menu':'int[](const int,const int,const int)'})
call add(f,{'word':'agentrigchildren','kind':'f','menu':'int[](const string,const int,const int)'})
let c['agentrigchildren'] = f
let f = []
call add(f,{'word':'agentrigfind','kind':'f','menu':'int(const int,const int,const string)'})
call add(f,{'word':'agentrigfind','kind':'f','menu':'int(const string,const int,const string)'})
let c['agentrigfind'] = f
let f = []
call add(f,{'word':'agentrigparent','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'agentrigparent','kind':'f','menu':'int(const string,const int,const int)'})
let c['agentrigparent'] = f
let f = []
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const int,const int,const int,const int[],const matrix[],const int,const int)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const int,const int,const int,const int[],const matrix[],const int,const int,const float,const int)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const int,const int,const int,const int[],const matrix[],const int,const int,const float,const int,const float[],const int[],const int[])'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const int,const int,const int,const int[],const matrix[],const int,const int,const float,const int,const float[],const int[],const int[],const string,const string,const string)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const string,const int,const int,const int[],const matrix[],const int,const int)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const string,const int,const int,const int[],const matrix[],const int,const int,const float,const int)'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const string,const int,const int,const int[],const matrix[],const int,const int,const float,const int,const float[],const int[],const int[])'})
call add(f,{'word':'agentsolvefbik','kind':'f','menu':'int(const string,const int,const int,const int[],const matrix[],const int,const int,const float,const int,const float[],const int[],const int[],const string,const string,const string)'})
let c['agentsolvefbik'] = f
let f = []
call add(f,{'word':'agenttransformcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'agenttransformcount','kind':'f','menu':'int(const string,const int)'})
let c['agenttransformcount'] = f
let f = []
call add(f,{'word':'agenttransformgroupmember','kind':'f','menu':'int(const int,const int,const int,const int)'})
call add(f,{'word':'agenttransformgroupmember','kind':'f','menu':'int(const int,const int,const string,const int)'})
call add(f,{'word':'agenttransformgroupmember','kind':'f','menu':'int(const string,const int,const int,const int)'})
call add(f,{'word':'agenttransformgroupmember','kind':'f','menu':'int(const string,const int,const string,const int)'})
let c['agenttransformgroupmember'] = f
let f = []
call add(f,{'word':'agenttransformgroups','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agenttransformgroups','kind':'f','menu':'string[](const string,const int)'})
let c['agenttransformgroups'] = f
let f = []
call add(f,{'word':'agenttransformgroupweight','kind':'f','menu':'float(const int,const int,const int,const int)'})
call add(f,{'word':'agenttransformgroupweight','kind':'f','menu':'float(const string,const int,const int,const int)'})
let c['agenttransformgroupweight'] = f
let f = []
call add(f,{'word':'agenttransformnames','kind':'f','menu':'string[](const int,const int)'})
call add(f,{'word':'agenttransformnames','kind':'f','menu':'string[](const string,const int)'})
let c['agenttransformnames'] = f
let f = []
call add(f,{'word':'agenttransformtolocal','kind':'f','menu':'int(const int,const int,export matrix[])'})
call add(f,{'word':'agenttransformtolocal','kind':'f','menu':'int(const string,const int,export matrix[])'})
let c['agenttransformtolocal'] = f
let f = []
call add(f,{'word':'agenttransformtoworld','kind':'f','menu':'int(const int,const int,export matrix[])'})
call add(f,{'word':'agenttransformtoworld','kind':'f','menu':'int(const string,const int,export matrix[])'})
let c['agenttransformtoworld'] = f
let f = []
call add(f,{'word':'agentworldtransform','kind':'f','menu':'matrix(const int,const int,const int)'})
call add(f,{'word':'agentworldtransform','kind':'f','menu':'matrix(const string,const int,const int)'})
let c['agentworldtransform'] = f
let f = []
call add(f,{'word':'agentworldtransforms','kind':'f','menu':'matrix[](const int,const int)'})
call add(f,{'word':'agentworldtransforms','kind':'f','menu':'matrix[](const string,const int)'})
let c['agentworldtransforms'] = f
let f = []
call add(f,{'word':'albedo','kind':'f','menu':'vector(const bsdf,const int)'})
call add(f,{'word':'albedo','kind':'f','menu':'vector(const bsdf,const vector,const int)'})
call add(f,{'word':'albedo','kind':'f','menu':'vector(const bsdf,const vector)'})
call add(f,{'word':'albedo','kind':'f','menu':'vector(const bsdf)'})
let c['albedo'] = f
let f = []
let c['and'] = f
let f = []
call add(f,{'word':'anoise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'anoise','kind':'f','menu':'float(const vector,const int,const float,const float)'})
call add(f,{'word':'anoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'anoise','kind':'f','menu':'float(const vector,const int,const int,const int,const int,const float,const float)'})
call add(f,{'word':'anoise','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'anoise','kind':'f','menu':'vector(const vector,const int,const float,const float)'})
call add(f,{'word':'anoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
call add(f,{'word':'anoise','kind':'f','menu':'vector(const vector,const int,const int,const int,const int,const float,const float)'})
let c['anoise'] = f
let f = []
call add(f,{'word':'append','kind':'f','menu':'void(export string,const string)'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix2[],const matrix2)'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix2[],const matrix2[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix3[],const matrix3)'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix3[],const matrix3[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix[],const matrix)'})
call add(f,{'word':'append','kind':'f','menu':'void(export matrix[],const matrix[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export float[],const float)'})
call add(f,{'word':'append','kind':'f','menu':'void(export float[],const float[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export int[],const int)'})
call add(f,{'word':'append','kind':'f','menu':'void(export int[],const int[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector4[],const vector4)'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector4[],const vector4[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export string[],const string)'})
call add(f,{'word':'append','kind':'f','menu':'void(export string[],const string[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector2[],const vector2)'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector2[],const vector2[])'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector[],const vector)'})
call add(f,{'word':'append','kind':'f','menu':'void(export vector[],const vector[])'})
let c['append'] = f
let f = []
call add(f,{'word':'area','kind':'f','menu':'float(const vector)'})
let c['area'] = f
let f = []
call add(f,{'word':'argsort','kind':'f','menu':'int[](const float[])'})
call add(f,{'word':'argsort','kind':'f','menu':'int[](const int[])'})
call add(f,{'word':'argsort','kind':'f','menu':'int[](const string[])'})
let c['argsort'] = f
let f = []
call add(f,{'word':'array','kind':'f','menu':'matrix2[]()'})
call add(f,{'word':'array','kind':'f','menu':'matrix3[]()'})
call add(f,{'word':'array','kind':'f','menu':'matrix[]()'})
call add(f,{'word':'array','kind':'f','menu':'float[]()'})
call add(f,{'word':'array','kind':'f','menu':'int[]()'})
call add(f,{'word':'array','kind':'f','menu':'vector4[]()'})
call add(f,{'word':'array','kind':'f','menu':'string[]()'})
call add(f,{'word':'array','kind':'f','menu':'vector2[]()'})
call add(f,{'word':'array','kind':'f','menu':'vector[]()'})
let c['array'] = f
let f = []
call add(f,{'word':'arraylength','kind':'f','menu':'int(const matrix3)'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const matrix)'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const vector4)'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const vector)'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const matrix3[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const matrix[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const bsdf[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const float[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const vector4[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const string[])'})
call add(f,{'word':'arraylength','kind':'f','menu':'int(const vector[])'})
let c['arraylength'] = f
let f = []
call add(f,{'word':'ashikhmin','kind':'f','menu':'bsdf(const vector,const float,const float,const vector,const vector)'})
let c['ashikhmin'] = f
let f = []
call add(f,{'word':'asin','kind':'f','menu':'float(const float)'})
call add(f,{'word':'asin','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'asin','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'asin','kind':'f','menu':'vector(const vector)'})
let c['asin'] = f
let f = []
call add(f,{'word':'assert_enabled','kind':'f','menu':'int()'})
let c['assert_enabled'] = f
let f = []
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,float,const matrix2)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,float,const matrix2)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,float,float,float,float,float,float,const matrix3)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,float,float,float,float,float,float,const matrix3)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,const matrix)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,const matrix)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,float,const vector4)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,float,const vector4)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,float,const vector)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,float,const vector)'})
call add(f,{'word':'assign','kind':'f','menu':'void(float,float,const vector2)'})
call add(f,{'word':'assign','kind':'f','menu':'float(float,const vector2)'})
let c['assign'] = f
let f = []
call add(f,{'word':'atan','kind':'f','menu':'float(const float)'})
call add(f,{'word':'atan','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'atan','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'atan','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'atan','kind':'f','menu':'vector(const vector)'})
let c['atan'] = f
let f = []
call add(f,{'word':'atan2','kind':'f','menu':'float(const float,const float)'})
let c['atan2'] = f
let f = []
call add(f,{'word':'atof','kind':'f','menu':'float(const string)'})
let c['atof'] = f
let f = []
call add(f,{'word':'atoi','kind':'f','menu':'int(const string)'})
let c['atoi'] = f
let f = []
call add(f,{'word':'atten','kind':'f','menu':'float(const float,const float)'})
let c['atten'] = f
let f = []
call add(f,{'word':'attrib','kind':'f','menu':'matrix2(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix2(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix3(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix3(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'float(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'float(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector4(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector4(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'string(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'string(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector2(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector2(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector(const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector(const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix2[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix2[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix3[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix3[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'matrix[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'float[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'float[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'int[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'int[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector4[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector4[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'string[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'string[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector2[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector2[](const string,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector[](const int,const string,const string,const int)'})
call add(f,{'word':'attrib','kind':'f','menu':'vector[](const string,const string,const string,const int)'})
let c['attrib'] = f
let f = []
call add(f,{'word':'attribclass','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'attribclass','kind':'f','menu':'string(const string,const string)'})
let c['attribclass'] = f
let f = []
call add(f,{'word':'attribdataid','kind':'f','menu':'int[](const int,const string,const string)'})
call add(f,{'word':'attribdataid','kind':'f','menu':'int[](const string,const string,const string)'})
let c['attribdataid'] = f
let f = []
call add(f,{'word':'attribsize','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'attribsize','kind':'f','menu':'int(const string,const string,const string)'})
let c['attribsize'] = f
let f = []
call add(f,{'word':'attribtype','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'attribtype','kind':'f','menu':'int(const string,const string,const string)'})
let c['attribtype'] = f
let f = []
call add(f,{'word':'attribtypeinfo','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'attribtypeinfo','kind':'f','menu':'string(const string,const string,const string)'})
let c['attribtypeinfo'] = f
let f = []
call add(f,{'word':'avg','kind':'f','menu':'float(const float)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'avg','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'avg','kind':'f','menu':'int(const int)'})
call add(f,{'word':'avg','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'avg','kind':'f','menu':'vector4(const vector4,const vector4)'})
call add(f,{'word':'avg','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'avg','kind':'f','menu':'vector2(const vector2,const vector2)'})
call add(f,{'word':'avg','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'avg','kind':'f','menu':'vector(const vector,const vector)'})
call add(f,{'word':'avg','kind':'f','menu':'vector(const vector[])'})
let c['avg'] = f
let f = []
let c['band'] = f
let f = []
call add(f,{'word':'blackbody','kind':'f','menu':'vector(const float,const float)'})
let c['blackbody'] = f
let f = []
call add(f,{'word':'blinn','kind':'f','menu':'bsdf(const vector,const float)'})
let c['blinn'] = f
let f = []
call add(f,{'word':'blinnBRDF','kind':'f','menu':'float(const vector,const vector,const vector,const float)'})
let c['blinnBRDF'] = f
let f = []
let c['bnot'] = f
let f = []
let c['bor'] = f
let f = []
call add(f,{'word':'bouncelabel','kind':'f','menu':'string(const int)'})
let c['bouncelabel'] = f
let f = []
call add(f,{'word':'bouncemask','kind':'f','menu':'int(const string)'})
let c['bouncemask'] = f
let f = []
let c['br'] = f
let f = []
let c['break'] = f
let f = []
call add(f,{'word':'bumpmap','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmap','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmap','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmap','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmap'] = f
let f = []
call add(f,{'word':'bumpmapA','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapA','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapA','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapA','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapA'] = f
let f = []
call add(f,{'word':'bumpmapB','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapB','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapB','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapB','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapB'] = f
let f = []
call add(f,{'word':'bumpmapG','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapG','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapG','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapG','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapG'] = f
let f = []
call add(f,{'word':'bumpmapL','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapL','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapL','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapL','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapL'] = f
let f = []
call add(f,{'word':'bumpmapR','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'bumpmapR','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'bumpmapR','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'bumpmapR','kind':'f','menu':'float(const string,float,const vector)'})
let c['bumpmapR'] = f
let f = []
let c['bwhile'] = f
let f = []
let c['bxor'] = f
let f = []
call add(f,{'word':'cbrt','kind':'f','menu':'float(const float)'})
call add(f,{'word':'cbrt','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'cbrt','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'cbrt','kind':'f','menu':'vector(const vector)'})
let c['cbrt'] = f
let f = []
call add(f,{'word':'ceil','kind':'f','menu':'float(const float)'})
call add(f,{'word':'ceil','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'ceil','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'ceil','kind':'f','menu':'vector(const vector)'})
let c['ceil'] = f
let f = []
call add(f,{'word':'ch','kind':'f','menu':'float(const int,const int,const int)'})
call add(f,{'word':'ch','kind':'f','menu':'float(const int,const int,const int,const float)'})
call add(f,{'word':'ch','kind':'f','menu':'float(const string)'})
call add(f,{'word':'ch','kind':'f','menu':'float(const string,const float)'})
call add(f,{'word':'ch','kind':'f','menu':'string(const string)'})
call add(f,{'word':'ch','kind':'f','menu':'string(const string,const float)'})
let c['ch'] = f
let f = []
call add(f,{'word':'ch2','kind':'f','menu':'matrix2(const string)'})
call add(f,{'word':'ch2','kind':'f','menu':'matrix2(const string,const float)'})
let c['ch2'] = f
let f = []
call add(f,{'word':'ch3','kind':'f','menu':'matrix3(const string)'})
call add(f,{'word':'ch3','kind':'f','menu':'matrix3(const string,const float)'})
let c['ch3'] = f
let f = []
call add(f,{'word':'ch4','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'ch4','kind':'f','menu':'matrix(const string,const float)'})
let c['ch4'] = f
let f = []
call add(f,{'word':'chexpr','kind':'f','menu':'float(const string,const string)'})
let c['chexpr'] = f
let f = []
call add(f,{'word':'chexprf','kind':'f','menu':'float(const string,const string,const float)'})
let c['chexprf'] = f
let f = []
call add(f,{'word':'chexprt','kind':'f','menu':'float(const string,const string,const float)'})
let c['chexprt'] = f
let f = []
call add(f,{'word':'chf','kind':'f','menu':'float(const int,const int,const int)'})
call add(f,{'word':'chf','kind':'f','menu':'float(const int,const int,const int,const float)'})
call add(f,{'word':'chf','kind':'f','menu':'float(const string)'})
call add(f,{'word':'chf','kind':'f','menu':'float(const string,const float)'})
let c['chf'] = f
let f = []
call add(f,{'word':'chi','kind':'f','menu':'int(const string)'})
call add(f,{'word':'chi','kind':'f','menu':'int(const string,const float)'})
let c['chi'] = f
let f = []
call add(f,{'word':'chid','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'chid','kind':'f','menu':'void(const string,int,int,int)'})
call add(f,{'word':'chid','kind':'f','menu':'int(const string,int,int)'})
call add(f,{'word':'chid','kind':'f','menu':'void(const string,const string,int,int,int)'})
call add(f,{'word':'chid','kind':'f','menu':'int(const string,const string,int,int)'})
let c['chid'] = f
let f = []
call add(f,{'word':'chop','kind':'f','menu':'matrix(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'matrix(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'matrix(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'float(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'float(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'float(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector4(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector4(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector4(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector2(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector2(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector2(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector(const string,const int,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector(const string,const int,const int)'})
call add(f,{'word':'chop','kind':'f','menu':'vector(const string,const string,const float)'})
call add(f,{'word':'chop','kind':'f','menu':'vector(const string,const string,const int)'})
let c['chop'] = f
let f = []
call add(f,{'word':'choplocal','kind':'f','menu':'matrix(const string,const int,const float)'})
call add(f,{'word':'choplocal','kind':'f','menu':'matrix(const string,const int,const int)'})
call add(f,{'word':'choplocal','kind':'f','menu':'matrix(const string,const string,const float)'})
call add(f,{'word':'choplocal','kind':'f','menu':'matrix(const string,const string,const int)'})
let c['choplocal'] = f
let f = []
call add(f,{'word':'choplocalt','kind':'f','menu':'matrix(const string,const int,const float,const float)'})
call add(f,{'word':'choplocalt','kind':'f','menu':'matrix(const string,const int,const int,const float)'})
call add(f,{'word':'choplocalt','kind':'f','menu':'matrix(const string,const string,const float,const float)'})
call add(f,{'word':'choplocalt','kind':'f','menu':'matrix(const string,const string,const int,const float)'})
let c['choplocalt'] = f
let f = []
call add(f,{'word':'chopt','kind':'f','menu':'matrix(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'matrix(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'matrix(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'matrix(const string,const string,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'float(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'float(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'float(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'float(const string,const string,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector4(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector4(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector4(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector4(const string,const string,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector2(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector2(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector2(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector2(const string,const string,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector(const string,const int,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector(const string,const int,const int,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector(const string,const string,const float,const float)'})
call add(f,{'word':'chopt','kind':'f','menu':'vector(const string,const string,const int,const float)'})
let c['chopt'] = f
let f = []
call add(f,{'word':'chp','kind':'f','menu':'vector4(const string)'})
call add(f,{'word':'chp','kind':'f','menu':'vector4(const string,const float)'})
let c['chp'] = f
let f = []
call add(f,{'word':'chr','kind':'f','menu':'string(const int)'})
let c['chr'] = f
let f = []
call add(f,{'word':'chramp','kind':'f','menu':'float(const string,const float)'})
call add(f,{'word':'chramp','kind':'f','menu':'float(const string,const float,const float)'})
call add(f,{'word':'chramp','kind':'f','menu':'vector(const string,const float)'})
call add(f,{'word':'chramp','kind':'f','menu':'vector(const string,const float,const float)'})
let c['chramp'] = f
let f = []
call add(f,{'word':'chs','kind':'f','menu':'string(const string)'})
call add(f,{'word':'chs','kind':'f','menu':'string(const string,const float)'})
let c['chs'] = f
let f = []
call add(f,{'word':'chsraw','kind':'f','menu':'string(const string)'})
let c['chsraw'] = f
let f = []
call add(f,{'word':'chu','kind':'f','menu':'vector2(const string)'})
call add(f,{'word':'chu','kind':'f','menu':'vector2(const string,const float)'})
let c['chu'] = f
let f = []
call add(f,{'word':'chv','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'chv','kind':'f','menu':'vector(const int,const int,const float)'})
call add(f,{'word':'chv','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'chv','kind':'f','menu':'vector(const string,const float)'})
let c['chv'] = f
let f = []
call add(f,{'word':'ckspline','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'ckspline','kind':'f','menu':'vector4(const float,const vector4,const float)'})
call add(f,{'word':'ckspline','kind':'f','menu':'vector(const float,const vector,const float)'})
let c['ckspline'] = f
let f = []
call add(f,{'word':'clamp','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'clamp','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'clamp','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'clamp','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'clamp','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['clamp'] = f
let f = []
call add(f,{'word':'clip','kind':'f','menu':'void(int,export vector,export vector,const vector4)'})
call add(f,{'word':'clip','kind':'f','menu':'int(export vector,export vector,const vector4)'})
call add(f,{'word':'clip','kind':'f','menu':'void(int,export vector,export vector,const vector,const vector)'})
call add(f,{'word':'clip','kind':'f','menu':'int(export vector,export vector,const vector,const vector)'})
let c['clip'] = f
let f = []
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const float,const float)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const float,const float,const float,const float,const float,const float,const float,const float,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const vector)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const float,const float)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const float,const float,const float,const float,const float,const float,const float,const float,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const int)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'colormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector,const int)'})
let c['colormap'] = f
let f = []
call add(f,{'word':'computenormal','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'computenormal','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['computenormal'] = f
let f = []
call add(f,{'word':'concat','kind':'f','menu':'string(const string,const string)'})
let c['concat'] = f
let f = []
call add(f,{'word':'cone','kind':'f','menu':'bsdf(const vector,const vector,const float)'})
let c['cone'] = f
let f = []
call add(f,{'word':'cos','kind':'f','menu':'float(const float)'})
call add(f,{'word':'cos','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'cos','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'cos','kind':'f','menu':'vector(const vector)'})
let c['cos'] = f
let f = []
call add(f,{'word':'cosh','kind':'f','menu':'float(const float)'})
call add(f,{'word':'cosh','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'cosh','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'cosh','kind':'f','menu':'vector(const vector)'})
let c['cosh'] = f
let f = []
call add(f,{'word':'cout','kind':'f','menu':'void()'})
let c['cout'] = f
let f = []
call add(f,{'word':'cracktransform','kind':'f','menu':'void(const int,const int,const vector,const matrix,vector,vector,vector)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'vector(const int,const int,const vector,const matrix,vector,vector)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'void(const int,const int,const vector,const vector,const matrix,vector,vector,vector,vector)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'vector(const int,const int,const vector,const vector,const matrix,vector,vector,vector)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'vector(const int,const int,const int,const vector,const matrix)'})
call add(f,{'word':'cracktransform','kind':'f','menu':'vector(const int,const int,const int,const vector,const vector,const matrix)'})
let c['cracktransform'] = f
let f = []
call add(f,{'word':'create_cdf','kind':'f','menu':'float[](const float[])'})
let c['create_cdf'] = f
let f = []
call add(f,{'word':'create_pdf','kind':'f','menu':'float[](const float[])'})
let c['create_pdf'] = f
let f = []
call add(f,{'word':'cross','kind':'f','menu':'vector(const vector,const vector)'})
let c['cross'] = f
let f = []
call add(f,{'word':'cspline','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'cspline','kind':'f','menu':'vector4(const float,const vector4)'})
call add(f,{'word':'cspline','kind':'f','menu':'vector(const float,const vector)'})
let c['cspline'] = f
let f = []
call add(f,{'word':'ctransform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'ctransform','kind':'f','menu':'vector(const string,const vector)'})
let c['ctransform'] = f
let f = []
call add(f,{'word':'curlnoise','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'curlnoise','kind':'f','menu':'vector(const vector)'})
let c['curlnoise'] = f
let f = []
call add(f,{'word':'curlnoise2d','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'curlnoise2d','kind':'f','menu':'vector(const vector)'})
let c['curlnoise2d'] = f
let f = []
call add(f,{'word':'curlxnoise','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'curlxnoise','kind':'f','menu':'vector(const vector)'})
let c['curlxnoise'] = f
let f = []
call add(f,{'word':'curlxnoise2d','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'curlxnoise2d','kind':'f','menu':'vector(const vector)'})
let c['curlxnoise2d'] = f
let f = []
call add(f,{'word':'cvex_bsdf','kind':'f','menu':'bsdf(const string,const string)'})
let c['cvex_bsdf'] = f
let f = []
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,const float,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,const float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,const float,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,const float,float,float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,const float,int,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,const float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,int,float,float,float,float,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,float,float,float,float,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const float,int,float,float,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const float,float,float,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector4,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector4,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector4,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector4,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector4,int,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector4,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector2,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector2,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector2,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector2,float,float,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector2,int,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector2,float,float,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector,int,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector,int,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector,float,float,float,float)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector,int,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'void(const vector,int,float,float,const int,const int,const int)'})
call add(f,{'word':'cwnoise','kind':'f','menu':'int(const vector,float,float,const int,const int,const int)'})
let c['cwnoise'] = f
let f = []
call add(f,{'word':'decode','kind':'f','menu':'string(const string)'})
let c['decode'] = f
let f = []
call add(f,{'word':'degrees','kind':'f','menu':'float(const float)'})
call add(f,{'word':'degrees','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'degrees','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'degrees','kind':'f','menu':'vector(const vector)'})
let c['degrees'] = f
let f = []
call add(f,{'word':'depthmap','kind':'f','menu':'float(const string,const float,const float)'})
call add(f,{'word':'depthmap','kind':'f','menu':'float(const string,const vector)'})
let c['depthmap'] = f
let f = []
call add(f,{'word':'detail','kind':'f','menu':'matrix2(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'float(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'float(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'int(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'string(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector(const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'float[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'float[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'int[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector[](const int,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'detail','kind':'f','menu':'vector[](const string,const string)'})
call add(f,{'word':'detail','kind':'f','menu':'vector[](const string,const string,const int)'})
let c['detail'] = f
let f = []
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix2(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix2(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix3(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix3(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'float(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'float(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'int(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'int(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector4(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector4(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'string(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'string(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector2(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector2(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector(const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector(const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix2[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix2[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix3[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix3[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'matrix[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'float[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'float[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'int[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'int[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector4[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector4[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'string[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'string[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector2[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector2[](const string,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector[](const int,const string,const int,int)'})
call add(f,{'word':'detailattrib','kind':'f','menu':'vector[](const string,const string,const int,int)'})
let c['detailattrib'] = f
let f = []
call add(f,{'word':'detailattribsize','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'detailattribsize','kind':'f','menu':'int(const string,const string)'})
let c['detailattribsize'] = f
let f = []
call add(f,{'word':'detailattribtype','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'detailattribtype','kind':'f','menu':'int(const string,const string)'})
let c['detailattribtype'] = f
let f = []
call add(f,{'word':'detailattribtypeinfo','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'detailattribtypeinfo','kind':'f','menu':'string(const string,const string)'})
let c['detailattribtypeinfo'] = f
let f = []
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix2(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix2(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix3(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix3(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'float(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'float(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'int(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector4(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector4(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'string(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector2(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector2(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector(const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix2[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix2[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix3[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix3[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'matrix[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'float[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'float[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'int[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector4[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector4[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector2[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector2[](const string,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector[](const int,const string)'})
call add(f,{'word':'detailintrinsic','kind':'f','menu':'vector[](const string,const string)'})
let c['detailintrinsic'] = f
let f = []
call add(f,{'word':'determinant','kind':'f','menu':'float(const matrix2)'})
call add(f,{'word':'determinant','kind':'f','menu':'float(const matrix3)'})
call add(f,{'word':'determinant','kind':'f','menu':'float(const matrix)'})
let c['determinant'] = f
let f = []
call add(f,{'word':'diagonalizesymmetric','kind':'f','menu':'matrix3(const matrix3,vector)'})
let c['diagonalizesymmetric'] = f
let f = []
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf(const vector,const float)'})
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf(const vector,const vector,const float)'})
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf(const vector,const vector)'})
call add(f,{'word':'diffuse','kind':'f','menu':'bsdf(const vector)'})
let c['diffuse'] = f
let f = []
call add(f,{'word':'diffuseBRDF','kind':'f','menu':'float(const vector,const vector)'})
call add(f,{'word':'diffuseBRDF','kind':'f','menu':'float(const vector,const vector,const vector,const float)'})
let c['diffuseBRDF'] = f
let f = []
call add(f,{'word':'dihedral','kind':'f','menu':'matrix3(const vector,const vector)'})
call add(f,{'word':'dihedral','kind':'f','menu':'vector4(const vector,const vector)'})
let c['dihedral'] = f
let f = []
call add(f,{'word':'distance','kind':'f','menu':'float(const vector4,const vector4)'})
call add(f,{'word':'distance','kind':'f','menu':'float(const vector2,const vector2)'})
call add(f,{'word':'distance','kind':'f','menu':'float(const vector,const vector)'})
let c['distance'] = f
let f = []
call add(f,{'word':'distance2','kind':'f','menu':'float(const vector4,const vector4)'})
call add(f,{'word':'distance2','kind':'f','menu':'float(const vector2,const vector2)'})
call add(f,{'word':'distance2','kind':'f','menu':'float(const vector,const vector)'})
let c['distance2'] = f
let f = []
let c['div'] = f
let f = []
call add(f,{'word':'dot','kind':'f','menu':'float(const vector4,const vector4)'})
call add(f,{'word':'dot','kind':'f','menu':'float(const vector4,const vector)'})
call add(f,{'word':'dot','kind':'f','menu':'float(const vector2,const vector2)'})
call add(f,{'word':'dot','kind':'f','menu':'float(const vector,const vector4)'})
call add(f,{'word':'dot','kind':'f','menu':'float(const vector,const vector)'})
let c['dot'] = f
let f = []
call add(f,{'word':'dsmpixel','kind':'f','menu':'int(const string,const string,const int,const int,float[])'})
call add(f,{'word':'dsmpixel','kind':'f','menu':'int(const string,const string,const int,const int,vector4[])'})
call add(f,{'word':'dsmpixel','kind':'f','menu':'int(const string,const string,const int,const int,vector[])'})
let c['dsmpixel'] = f
let f = []
call add(f,{'word':'efit','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
call add(f,{'word':'efit','kind':'f','menu':'vector4(const vector4,const vector4,const vector4,const float,const float)'})
call add(f,{'word':'efit','kind':'f','menu':'vector4(const vector4,const vector4,const vector4,const vector4,const vector4)'})
call add(f,{'word':'efit','kind':'f','menu':'vector2(const vector2,const vector2,const vector2,const float,const float)'})
call add(f,{'word':'efit','kind':'f','menu':'vector2(const vector2,const vector2,const vector2,const vector2,const vector2)'})
call add(f,{'word':'efit','kind':'f','menu':'vector(const vector,const vector,const vector,const float,const float)'})
call add(f,{'word':'efit','kind':'f','menu':'vector(const vector,const vector,const vector,const vector,const vector)'})
let c['efit'] = f
let f = []
call add(f,{'word':'eigenvalues','kind':'f','menu':'void(int,const matrix3,vector,vector)'})
call add(f,{'word':'eigenvalues','kind':'f','menu':'int(const matrix3,vector,vector)'})
let c['eigenvalues'] = f
let f = []
let c['else'] = f
let f = []
call add(f,{'word':'encode','kind':'f','menu':'string(const string)'})
let c['encode'] = f
let f = []
let c['endel'] = f
let f = []
let c['endif'] = f
let f = []
let c['endnotif'] = f
let f = []
call add(f,{'word':'endswith','kind':'f','menu':'int(const string,const string)'})
let c['endswith'] = f
let f = []
call add(f,{'word':'environment','kind':'f','menu':'vector4(const string,const vector)'})
call add(f,{'word':'environment','kind':'f','menu':'vector4(const string,const vector,const float)'})
call add(f,{'word':'environment','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'environment','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'environment','kind':'f','menu':'vector(const string,const vector,const float)'})
call add(f,{'word':'environment','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector)'})
let c['environment'] = f
let f = []
let c['eq'] = f
let f = []
call add(f,{'word':'erf','kind':'f','menu':'float(const float)'})
call add(f,{'word':'erf','kind':'f','menu':'vector2(const vector2)'})
let c['erf'] = f
let f = []
call add(f,{'word':'erf_inv','kind':'f','menu':'float(const float)'})
let c['erf_inv'] = f
let f = []
call add(f,{'word':'erfc','kind':'f','menu':'float(const float)'})
let c['erfc'] = f
let f = []
call add(f,{'word':'error','kind':'f','menu':'void(const string)'})
let c['error'] = f
let f = []
call add(f,{'word':'eulertoquaternion','kind':'f','menu':'vector4(const vector,const int)'})
let c['eulertoquaternion'] = f
let f = []
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,float,const int)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,const int)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,const vector,float,const int)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,const vector,const int)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector,const vector)'})
call add(f,{'word':'eval_bsdf','kind':'f','menu':'vector(const bsdf,const vector,const vector)'})
let c['eval_bsdf'] = f
let f = []
call add(f,{'word':'exp','kind':'f','menu':'float(const float)'})
call add(f,{'word':'exp','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'exp','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'exp','kind':'f','menu':'vector(const vector)'})
let c['exp'] = f
let f = []
call add(f,{'word':'expand_udim','kind':'f','menu':'string(const float,const float,const string)'})
let c['expand_udim'] = f
let f = []
call add(f,{'word':'expandedgegroup','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'expandedgegroup','kind':'f','menu':'int[](const string,const string)'})
let c['expandedgegroup'] = f
let f = []
call add(f,{'word':'expandpointgroup','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'expandpointgroup','kind':'f','menu':'int[](const string,const string)'})
let c['expandpointgroup'] = f
let f = []
call add(f,{'word':'expandprimgroup','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'expandprimgroup','kind':'f','menu':'int[](const string,const string)'})
let c['expandprimgroup'] = f
let f = []
call add(f,{'word':'expandvertexgroup','kind':'f','menu':'int[](const int,const string)'})
call add(f,{'word':'expandvertexgroup','kind':'f','menu':'int[](const string,const string)'})
let c['expandvertexgroup'] = f
let f = []
call add(f,{'word':'filamentsample','kind':'f','menu':'vector(const int,const vector)'})
call add(f,{'word':'filamentsample','kind':'f','menu':'vector(const string,const vector)'})
let c['filamentsample'] = f
let f = []
call add(f,{'word':'file_stat','kind':'f','menu':'int(const string,int[])'})
let c['file_stat'] = f
let f = []
call add(f,{'word':'filterstep','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'filterstep','kind':'f','menu':'float(const float,const float,const float)'})
let c['filterstep'] = f
let f = []
call add(f,{'word':'find','kind':'f','menu':'int(const string,const string)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string,const string,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix2[],const matrix2)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix2[],const matrix2,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix2[],const matrix2,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix3[],const matrix3)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix3[],const matrix3,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix3[],const matrix3,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix[],const matrix)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix[],const matrix,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const matrix[],const matrix,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const float[],const float)'})
call add(f,{'word':'find','kind':'f','menu':'int(const float[],const float,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const float[],const float,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const int[],const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const int[],const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const int[],const int,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector4[],const vector4)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector4[],const vector4,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector4[],const vector4,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string[],const string)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string[],const string,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const string[],const string,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector2[],const vector2)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector2[],const vector2,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector2[],const vector2,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector[],const vector)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector[],const vector,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int(const vector[],const vector,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string,const string)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string,const string,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix2[],const matrix2)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix2[],const matrix2,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix2[],const matrix2,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix3[],const matrix3)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix3[],const matrix3,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix3[],const matrix3,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix[],const matrix)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix[],const matrix,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const matrix[],const matrix,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const float[],const float)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const float[],const float,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const float[],const float,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const int[],const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const int[],const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const int[],const int,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector4[],const vector4)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector4[],const vector4,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector4[],const vector4,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string[],const string)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string[],const string,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const string[],const string,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector2[],const vector2)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector2[],const vector2,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector2[],const vector2,const int,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector[],const vector)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector[],const vector,const int)'})
call add(f,{'word':'find','kind':'f','menu':'int[](const vector[],const vector,const int,const int)'})
let c['find'] = f
let f = []
call add(f,{'word':'findattribval','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const int,const string,const string,const int,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const int,const string,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const string,const string,const string,const int,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const string,const string,const string,const string)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int(const string,const string,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int[](const int,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int[](const int,const string,const string,const string)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int[](const string,const string,const string,const int)'})
call add(f,{'word':'findattribval','kind':'f','menu':'int[](const string,const string,const string,const string)'})
let c['findattribval'] = f
let f = []
call add(f,{'word':'findattribvalcount','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'findattribvalcount','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'findattribvalcount','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'findattribvalcount','kind':'f','menu':'int(const string,const string,const string,const string)'})
let c['findattribvalcount'] = f
let f = []
call add(f,{'word':'fit','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
call add(f,{'word':'fit','kind':'f','menu':'vector4(const vector4,const vector4,const vector4,const vector4,const vector4)'})
call add(f,{'word':'fit','kind':'f','menu':'vector2(const vector2,const vector2,const vector2,const vector2,const vector2)'})
call add(f,{'word':'fit','kind':'f','menu':'vector(const vector,const vector,const vector,const vector,const vector)'})
let c['fit'] = f
let f = []
call add(f,{'word':'fit01','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'fit01','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'fit01','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'fit01','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['fit01'] = f
let f = []
call add(f,{'word':'fit10','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'fit10','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'fit10','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'fit10','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['fit10'] = f
let f = []
call add(f,{'word':'fit11','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'fit11','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'fit11','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'fit11','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['fit11'] = f
let f = []
call add(f,{'word':'floor','kind':'f','menu':'float(const float)'})
call add(f,{'word':'floor','kind':'f','menu':'int(const float)'})
call add(f,{'word':'floor','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'floor','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'floor','kind':'f','menu':'vector(const vector)'})
let c['floor'] = f
let f = []
call add(f,{'word':'flownoise','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'float(const vector4,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'float(const vector,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'vector(const float,const float,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'vector(const vector4,const float)'})
call add(f,{'word':'flownoise','kind':'f','menu':'vector(const vector,const float)'})
let c['flownoise'] = f
let f = []
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const float,const float,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const vector4,const int,const int,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const vector4,const vector4,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const vector,const int,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'float(const vector,const vector,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const float,const float,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const vector4,const int,const int,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const vector4,const vector4,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const vector,const int,const int,const int,const float)'})
call add(f,{'word':'flowpnoise','kind':'f','menu':'vector(const vector,const vector,const float)'})
let c['flowpnoise'] = f
let f = []
call add(f,{'word':'frac','kind':'f','menu':'float(const float)'})
call add(f,{'word':'frac','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'frac','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'frac','kind':'f','menu':'vector(const vector)'})
let c['frac'] = f
let f = []
call add(f,{'word':'fresnel','kind':'f','menu':'void(const vector,const vector,const float,float,float)'})
call add(f,{'word':'fresnel','kind':'f','menu':'float(const vector,const vector,const float,float)'})
call add(f,{'word':'fresnel','kind':'f','menu':'void(const vector,const vector,const float,float,float,vector,vector)'})
call add(f,{'word':'fresnel','kind':'f','menu':'float(const vector,const vector,const float,float,vector,vector)'})
let c['fresnel'] = f
let f = []
call add(f,{'word':'fromNDC','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'fromNDC','kind':'f','menu':'vector(const vector)'})
let c['fromNDC'] = f
let f = []
call add(f,{'word':'frontface','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['frontface'] = f
let f = []
call add(f,{'word':'fuzzify','kind':'f','menu':'float(const string[],const float[],const float[],const float,const float,const float)'})
let c['fuzzify'] = f
let f = []
call add(f,{'word':'fuzzy_and','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_and','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_and'] = f
let f = []
call add(f,{'word':'fuzzy_defuzz_centroid','kind':'f','menu':'float(const float[],const float,const float)'})
let c['fuzzy_defuzz_centroid'] = f
let f = []
call add(f,{'word':'fuzzy_nand','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_nand','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_nand'] = f
let f = []
call add(f,{'word':'fuzzy_nor','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_nor','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_nor'] = f
let f = []
call add(f,{'word':'fuzzy_not','kind':'f','menu':'float(const float)'})
call add(f,{'word':'fuzzy_not','kind':'f','menu':'int(const int)'})
let c['fuzzy_not'] = f
let f = []
call add(f,{'word':'fuzzy_nxor','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_nxor','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_nxor'] = f
let f = []
call add(f,{'word':'fuzzy_or','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_or','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_or'] = f
let f = []
call add(f,{'word':'fuzzy_xor','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'fuzzy_xor','kind':'f','menu':'int(const int,const int)'})
let c['fuzzy_xor'] = f
let f = []
let c['ge'] = f
let f = []
call add(f,{'word':'geoself','kind':'f','menu':'int()'})
let c['geoself'] = f
let f = []
call add(f,{'word':'geounwrap','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'geounwrap','kind':'f','menu':'string(const string,const string)'})
let c['geounwrap'] = f
let f = []
call add(f,{'word':'getattrib','kind':'f','menu':'matrix2(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix2(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix3(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix3(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'float(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'float(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'int(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'int(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector4(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector4(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'string(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'string(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector2(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector2(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector(const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector(const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix2[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix2[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix3[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix3[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'matrix[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'float[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'float[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'int[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'int[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector4[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector4[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'string[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'string[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector2[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector2[](const string,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector[](const int,const string,const string,const int,int)'})
call add(f,{'word':'getattrib','kind':'f','menu':'vector[](const string,const string,const string,const int,int)'})
let c['getattrib'] = f
let f = []
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,matrix3,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,matrix,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,float,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,int,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,vector4,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,string,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,vector,const string,const string,const int,const int)'})
call add(f,{'word':'getattribute','kind':'f','menu':'int(const string,float[],const string,const string,const int,const int)'})
let c['getattribute'] = f
let f = []
call add(f,{'word':'getbbox','kind':'f','menu':'void(const int,const string,vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(const int,const string,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'void(const int,vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(const int,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'void(const string,const string,vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(const string,const string,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'void(const string,vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(const string,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'void(vector,vector)'})
call add(f,{'word':'getbbox','kind':'f','menu':'vector(vector)'})
let c['getbbox'] = f
let f = []
call add(f,{'word':'getbbox_center','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getbbox_center','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getbbox_center','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getbbox_center','kind':'f','menu':'vector(const string,const string)'})
let c['getbbox_center'] = f
let f = []
call add(f,{'word':'getbbox_max','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getbbox_max','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getbbox_max','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getbbox_max','kind':'f','menu':'vector(const string,const string)'})
let c['getbbox_max'] = f
let f = []
call add(f,{'word':'getbbox_min','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getbbox_min','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getbbox_min','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getbbox_min','kind':'f','menu':'vector(const string,const string)'})
let c['getbbox_min'] = f
let f = []
call add(f,{'word':'getbbox_size','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getbbox_size','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getbbox_size','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getbbox_size','kind':'f','menu':'vector(const string,const string)'})
let c['getbbox_size'] = f
let f = []
call add(f,{'word':'getbounces','kind':'f','menu':'int(const bsdf)'})
let c['getbounces'] = f
let f = []
call add(f,{'word':'getbounds','kind':'f','menu':'int(const string,const string,vector,vector)'})
call add(f,{'word':'getbounds','kind':'f','menu':'int(const string,vector,vector)'})
let c['getbounds'] = f
let f = []
call add(f,{'word':'getcomp','kind':'f','menu':'matrix2(const matrix2[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'matrix3(const matrix3[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'matrix(const matrix[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'bsdf(const bsdf[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const matrix2,const int,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const matrix3,const int,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const matrix,const int,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const vector4,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const vector2,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const vector,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'float(const float[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'int(const int[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'vector4(const vector4[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'string(const string,const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'string(const string[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'vector2(const vector2[],const int)'})
call add(f,{'word':'getcomp','kind':'f','menu':'vector(const vector[],const int)'})
let c['getcomp'] = f
let f = []
let c['getelem'] = f
let f = []
call add(f,{'word':'getpackedtransform','kind':'f','menu':'matrix(const int,const int)'})
let c['getpackedtransform'] = f
let f = []
call add(f,{'word':'getpointbbox','kind':'f','menu':'void(const int,const string,vector,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'vector(const int,const string,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'void(const int,vector,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'vector(const int,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'void(const string,const string,vector,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'vector(const string,const string,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'void(const string,vector,vector)'})
call add(f,{'word':'getpointbbox','kind':'f','menu':'vector(const string,vector)'})
let c['getpointbbox'] = f
let f = []
call add(f,{'word':'getpointbbox_center','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getpointbbox_center','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getpointbbox_center','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getpointbbox_center','kind':'f','menu':'vector(const string,const string)'})
let c['getpointbbox_center'] = f
let f = []
call add(f,{'word':'getpointbbox_max','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getpointbbox_max','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getpointbbox_max','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getpointbbox_max','kind':'f','menu':'vector(const string,const string)'})
let c['getpointbbox_max'] = f
let f = []
call add(f,{'word':'getpointbbox_min','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getpointbbox_min','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getpointbbox_min','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getpointbbox_min','kind':'f','menu':'vector(const string,const string)'})
let c['getpointbbox_min'] = f
let f = []
call add(f,{'word':'getpointbbox_size','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'getpointbbox_size','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'getpointbbox_size','kind':'f','menu':'vector(const string)'})
call add(f,{'word':'getpointbbox_size','kind':'f','menu':'vector(const string,const string)'})
let c['getpointbbox_size'] = f
let f = []
call add(f,{'word':'getspace','kind':'f','menu':'matrix(const string,const string)'})
let c['getspace'] = f
let f = []
call add(f,{'word':'gradient','kind':'f','menu':'vector(const vector,const float)'})
let c['gradient'] = f
let f = []
call add(f,{'word':'gradient3d','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['gradient3d'] = f
let f = []
let c['gt'] = f
let f = []
call add(f,{'word':'hair','kind':'f','menu':'bsdf(const vector,const vector,const float,const float,const float,const float,const float)'})
call add(f,{'word':'hair','kind':'f','menu':'bsdf(const vector,const vector,const float,const float,const float)'})
call add(f,{'word':'hair','kind':'f','menu':'bsdf(const vector,const vector,const float,const float)'})
let c['hair'] = f
let f = []
call add(f,{'word':'has_udim','kind':'f','menu':'int(const string)'})
let c['has_udim'] = f
let f = []
call add(f,{'word':'hasattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'hasattrib','kind':'f','menu':'int(const string,const string,const string)'})
let c['hasattrib'] = f
let f = []
call add(f,{'word':'hasdetailattrib','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'hasdetailattrib','kind':'f','menu':'int(const string,const string)'})
let c['hasdetailattrib'] = f
let f = []
call add(f,{'word':'haspointattrib','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'haspointattrib','kind':'f','menu':'int(const string,const string)'})
let c['haspointattrib'] = f
let f = []
call add(f,{'word':'hasprimattrib','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'hasprimattrib','kind':'f','menu':'int(const string,const string)'})
let c['hasprimattrib'] = f
let f = []
call add(f,{'word':'hasvertexattrib','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'hasvertexattrib','kind':'f','menu':'int(const string,const string)'})
let c['hasvertexattrib'] = f
let f = []
call add(f,{'word':'hedge_dstpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_dstpoint','kind':'f','menu':'int(const string,const int)'})
let c['hedge_dstpoint'] = f
let f = []
call add(f,{'word':'hedge_dstvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_dstvertex','kind':'f','menu':'int(const string,const int)'})
let c['hedge_dstvertex'] = f
let f = []
call add(f,{'word':'hedge_equivcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_equivcount','kind':'f','menu':'int(const string,const int)'})
let c['hedge_equivcount'] = f
let f = []
call add(f,{'word':'hedge_isequiv','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'hedge_isequiv','kind':'f','menu':'int(const string,const int,const int)'})
let c['hedge_isequiv'] = f
let f = []
call add(f,{'word':'hedge_isprimary','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_isprimary','kind':'f','menu':'int(const string,const int)'})
let c['hedge_isprimary'] = f
let f = []
call add(f,{'word':'hedge_isvalid','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_isvalid','kind':'f','menu':'int(const string,const int)'})
let c['hedge_isvalid'] = f
let f = []
call add(f,{'word':'hedge_next','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_next','kind':'f','menu':'int(const string,const int)'})
let c['hedge_next'] = f
let f = []
call add(f,{'word':'hedge_nextequiv','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_nextequiv','kind':'f','menu':'int(const string,const int)'})
let c['hedge_nextequiv'] = f
let f = []
call add(f,{'word':'hedge_postdstpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_postdstpoint','kind':'f','menu':'int(const string,const int)'})
let c['hedge_postdstpoint'] = f
let f = []
call add(f,{'word':'hedge_postdstvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_postdstvertex','kind':'f','menu':'int(const string,const int)'})
let c['hedge_postdstvertex'] = f
let f = []
call add(f,{'word':'hedge_presrcpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_presrcpoint','kind':'f','menu':'int(const string,const int)'})
let c['hedge_presrcpoint'] = f
let f = []
call add(f,{'word':'hedge_presrcvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_presrcvertex','kind':'f','menu':'int(const string,const int)'})
let c['hedge_presrcvertex'] = f
let f = []
call add(f,{'word':'hedge_prev','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_prev','kind':'f','menu':'int(const string,const int)'})
let c['hedge_prev'] = f
let f = []
call add(f,{'word':'hedge_prim','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_prim','kind':'f','menu':'int(const string,const int)'})
let c['hedge_prim'] = f
let f = []
call add(f,{'word':'hedge_primary','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_primary','kind':'f','menu':'int(const string,const int)'})
let c['hedge_primary'] = f
let f = []
call add(f,{'word':'hedge_srcpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_srcpoint','kind':'f','menu':'int(const string,const int)'})
let c['hedge_srcpoint'] = f
let f = []
call add(f,{'word':'hedge_srcvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'hedge_srcvertex','kind':'f','menu':'int(const string,const int)'})
let c['hedge_srcvertex'] = f
let f = []
call add(f,{'word':'henyeygreenstein','kind':'f','menu':'bsdf(const float)'})
let c['henyeygreenstein'] = f
let f = []
call add(f,{'word':'hscript_noise','kind':'f','menu':'float(const vector)'})
let c['hscript_noise'] = f
let f = []
call add(f,{'word':'hscript_rand','kind':'f','menu':'float(const float)'})
call add(f,{'word':'hscript_rand','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'hscript_rand','kind':'f','menu':'vector(const float)'})
let c['hscript_rand'] = f
let f = []
call add(f,{'word':'hscript_snoise','kind':'f','menu':'float(const vector)'})
let c['hscript_snoise'] = f
let f = []
call add(f,{'word':'hscript_sturb','kind':'f','menu':'float(const vector,const int)'})
let c['hscript_sturb'] = f
let f = []
call add(f,{'word':'hscript_turb','kind':'f','menu':'float(const vector,const int)'})
let c['hscript_turb'] = f
let f = []
call add(f,{'word':'hsvtorgb','kind':'f','menu':'vector(const float,const float,const float)'})
call add(f,{'word':'hsvtorgb','kind':'f','menu':'vector(const vector)'})
let c['hsvtorgb'] = f
let f = []
call add(f,{'word':'ident','kind':'f','menu':'matrix2()'})
call add(f,{'word':'ident','kind':'f','menu':'matrix3()'})
call add(f,{'word':'ident','kind':'f','menu':'matrix()'})
let c['ident'] = f
let f = []
call add(f,{'word':'idtopoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'idtopoint','kind':'f','menu':'int(const string,const int)'})
let c['idtopoint'] = f
let f = []
call add(f,{'word':'idtoprim','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'idtoprim','kind':'f','menu':'int(const string,const int)'})
let c['idtoprim'] = f
let f = []
let c['if'] = f
let f = []
call add(f,{'word':'inedgegroup','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'inedgegroup','kind':'f','menu':'int(const string,const string,const int,const int)'})
let c['inedgegroup'] = f
let f = []
call add(f,{'word':'inpointgroup','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'inpointgroup','kind':'f','menu':'int(const string,const string,const int)'})
let c['inpointgroup'] = f
let f = []
call add(f,{'word':'inprimgroup','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'inprimgroup','kind':'f','menu':'int(const string,const string,const int)'})
let c['inprimgroup'] = f
let f = []
call add(f,{'word':'insert','kind':'f','menu':'void(export string,const int,const string)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix2[],const int,const matrix2)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix2[],const int,const matrix2[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix3[],const int,const matrix3)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix3[],const int,const matrix3[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix[],const int,const matrix)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export matrix[],const int,const matrix[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export float[],const int,const float)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export float[],const int,const float[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export int[],const int,const int)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export int[],const int,const int[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector4[],const int,const vector4)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector4[],const int,const vector4[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export string[],const int,const string)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export string[],const int,const string[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector2[],const int,const vector2)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector2[],const int,const vector2[])'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector[],const int,const vector)'})
call add(f,{'word':'insert','kind':'f','menu':'void(export vector[],const int,const vector[])'})
let c['insert'] = f
let f = []
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector4,const vector4)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector4,const vector4,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector4,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector4,const vector,const vector)'})
call add(f,{'word':'instance','kind':'f','menu':'matrix(const vector,const vector,const vector,const vector)'})
let c['instance'] = f
let f = []
call add(f,{'word':'integrate3d','kind':'f','menu':'float(const string,const string,const vector,const vector)'})
call add(f,{'word':'integrate3d','kind':'f','menu':'vector4(const string,const string,const vector,const vector)'})
call add(f,{'word':'integrate3d','kind':'f','menu':'vector(const string,const string,const vector,const vector)'})
let c['integrate3d'] = f
let f = []
call add(f,{'word':'integrate3dClip','kind':'f','menu':'int(const string,const string,export vector,export vector,const float)'})
let c['integrate3dClip'] = f
let f = []
call add(f,{'word':'interpolate','kind':'f','menu':'bsdf(const bsdf,const float,const float)'})
call add(f,{'word':'interpolate','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'interpolate','kind':'f','menu':'vector4(const vector4,const float,const float)'})
call add(f,{'word':'interpolate','kind':'f','menu':'vector(const vector,const float,const float)'})
let c['interpolate'] = f
let f = []
call add(f,{'word':'intersect','kind':'f','menu':'int(const int,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const int,const vector,const vector,vector,float,float)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const int,const vector,const vector,vector,vector)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const string,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const string,const vector,const vector,vector,float,float)'})
call add(f,{'word':'intersect','kind':'f','menu':'int(const string,const vector,const vector,vector,vector)'})
let c['intersect'] = f
let f = []
call add(f,{'word':'intersect3d','kind':'f','menu':'int(const string,const string,const vector,const vector,const float)'})
let c['intersect3d'] = f
let f = []
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const int,const string,const vector,const vector,vector[],int[],vector[])'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const int,const string,const vector,const vector,vector[],int[],vector[],const float,const float)'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const int,const vector,const vector,vector[],int[],vector[])'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const int,const vector,const vector,vector[],int[],vector[],const float,const float)'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const string,const string,const vector,const vector,vector[],int[],vector[])'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const string,const string,const vector,const vector,vector[],int[],vector[],const float,const float)'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const string,const vector,const vector,vector[],int[],vector[])'})
call add(f,{'word':'intersect_all','kind':'f','menu':'int(const string,const vector,const vector,vector[],int[],vector[],const float,const float)'})
let c['intersect_all'] = f
let f = []
call add(f,{'word':'invert','kind':'f','menu':'matrix2(const matrix2)'})
call add(f,{'word':'invert','kind':'f','menu':'matrix3(const matrix3)'})
call add(f,{'word':'invert','kind':'f','menu':'matrix(const matrix)'})
let c['invert'] = f
let f = []
call add(f,{'word':'invertexgroup','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'invertexgroup','kind':'f','menu':'int(const string,const string,const int)'})
let c['invertexgroup'] = f
let f = []
call add(f,{'word':'isalpha','kind':'f','menu':'int(const string)'})
let c['isalpha'] = f
let f = []
call add(f,{'word':'isbound','kind':'f','menu':'int(const string)'})
let c['isbound'] = f
let f = []
call add(f,{'word':'isdigit','kind':'f','menu':'int(const string)'})
let c['isdigit'] = f
let f = []
call add(f,{'word':'isfinite','kind':'f','menu':'int(const float)'})
let c['isfinite'] = f
let f = []
call add(f,{'word':'isnan','kind':'f','menu':'int(const float)'})
let c['isnan'] = f
let f = []
call add(f,{'word':'isotropic','kind':'f','menu':'bsdf()'})
let c['isotropic'] = f
let f = []
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(const string,const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export matrix2[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export matrix3[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export matrix[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export float[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export int[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export vector4[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export string[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export vector2[],const int)'})
call add(f,{'word':'isvalidindex','kind':'f','menu':'int(export vector[],const int)'})
let c['isvalidindex'] = f
let f = []
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix2)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix3)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const bsdf)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const float)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const int)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector4)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const string)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector2)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector)'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix2[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix3[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const matrix[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const bsdf[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const float[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector4[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const string[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector2[])'})
call add(f,{'word':'isvarying','kind':'f','menu':'int(const vector[])'})
let c['isvarying'] = f
let f = []
call add(f,{'word':'itoa','kind':'f','menu':'string(const int)'})
let c['itoa'] = f
let f = []
call add(f,{'word':'join','kind':'f','menu':'string(const string[],const string)'})
let c['join'] = f
let f = []
let c['jump'] = f
let f = []
call add(f,{'word':'kspline','kind':'f','menu':'float(const string,const float,const float,const float)'})
call add(f,{'word':'kspline','kind':'f','menu':'vector4(const string,const float,const vector4,const float)'})
call add(f,{'word':'kspline','kind':'f','menu':'vector(const string,const float,const vector,const float)'})
let c['kspline'] = f
let f = []
let c['le'] = f
let f = []
call add(f,{'word':'len','kind':'f','menu':'int(const matrix2)'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix3)'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix)'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector4)'})
call add(f,{'word':'len','kind':'f','menu':'int(const string)'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector2)'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector)'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix2[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix3[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const matrix[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const bsdf[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const float[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector4[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const string[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector2[])'})
call add(f,{'word':'len','kind':'f','menu':'int(const vector[])'})
let c['len'] = f
let f = []
call add(f,{'word':'length','kind':'f','menu':'float(const float)'})
call add(f,{'word':'length','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'length','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'length','kind':'f','menu':'float(const vector)'})
let c['length'] = f
let f = []
call add(f,{'word':'length2','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'length2','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'length2','kind':'f','menu':'float(const vector)'})
let c['length2'] = f
let f = []
call add(f,{'word':'lerp','kind':'f','menu':'bsdf(const bsdf,const bsdf,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector4(const vector4,const vector4,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector4(const vector4,const vector4,const vector4)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector2(const vector2,const vector2,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector2(const vector2,const vector2,const vector2)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector(const vector,const vector,const float)'})
call add(f,{'word':'lerp','kind':'f','menu':'vector(const vector,const vector,const vector)'})
let c['lerp'] = f
let f = []
call add(f,{'word':'limit_sample_space','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'limit_sample_space','kind':'f','menu':'float(const float,const float,const float)'})
let c['limit_sample_space'] = f
let f = []
call add(f,{'word':'lkspline','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'lkspline','kind':'f','menu':'vector4(const float,const vector4,const float)'})
call add(f,{'word':'lkspline','kind':'f','menu':'vector(const float,const vector,const float)'})
let c['lkspline'] = f
let f = []
call add(f,{'word':'log','kind':'f','menu':'float(const float)'})
call add(f,{'word':'log','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'log','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'log','kind':'f','menu':'vector(const vector)'})
let c['log'] = f
let f = []
call add(f,{'word':'log10','kind':'f','menu':'float(const float)'})
call add(f,{'word':'log10','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'log10','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'log10','kind':'f','menu':'vector(const vector)'})
let c['log10'] = f
let f = []
call add(f,{'word':'lookat','kind':'f','menu':'matrix3(const vector,const vector)'})
call add(f,{'word':'lookat','kind':'f','menu':'matrix3(const vector,const vector,const float)'})
call add(f,{'word':'lookat','kind':'f','menu':'matrix3(const vector,const vector,const vector)'})
call add(f,{'word':'lookat','kind':'f','menu':'vector(const vector,const vector,const float,const int)'})
call add(f,{'word':'lookat','kind':'f','menu':'vector(const vector,const vector,const vector,const int)'})
let c['lookat'] = f
let f = []
let c['loop'] = f
let f = []
call add(f,{'word':'lspline','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'lspline','kind':'f','menu':'vector4(const float,const vector4)'})
call add(f,{'word':'lspline','kind':'f','menu':'vector(const float,const vector)'})
let c['lspline'] = f
let f = []
call add(f,{'word':'lstrip','kind':'f','menu':'string(const string)'})
call add(f,{'word':'lstrip','kind':'f','menu':'string(const string,const string)'})
let c['lstrip'] = f
let f = []
let c['lt'] = f
let f = []
call add(f,{'word':'luminance','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'luminance','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'luminance','kind':'f','menu':'float(const vector)'})
let c['luminance'] = f
let f = []
call add(f,{'word':'makebasis','kind':'f','menu':'void(vector,vector,const vector)'})
call add(f,{'word':'makebasis','kind':'f','menu':'vector(vector,const vector)'})
call add(f,{'word':'makebasis','kind':'f','menu':'void(export vector,export vector,const vector,const vector)'})
let c['makebasis'] = f
let f = []
call add(f,{'word':'maketransform','kind':'f','menu':'matrix3(const int,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix3(const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const int,const int,const vector,const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const int,const int,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const int,const int,const vector,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const int,const int,const vector,const vector,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'maketransform','kind':'f','menu':'matrix(const vector,const vector,const vector)'})
let c['maketransform'] = f
let f = []
call add(f,{'word':'mask_bsdf','kind':'f','menu':'bsdf(const bsdf,const int)'})
let c['mask_bsdf'] = f
let f = []
call add(f,{'word':'match','kind':'f','menu':'int(const string,const string)'})
let c['match'] = f
let f = []
call add(f,{'word':'matchvex_blinn','kind':'f','menu':'bsdf(const vector,const float)'})
let c['matchvex_blinn'] = f
let f = []
call add(f,{'word':'matchvex_specular','kind':'f','menu':'bsdf(const vector,const float)'})
let c['matchvex_specular'] = f
let f = []
call add(f,{'word':'max','kind':'f','menu':'float(const float)'})
call add(f,{'word':'max','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'max','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'max','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'max','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'max','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'max','kind':'f','menu':'int(const int)'})
call add(f,{'word':'max','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'max','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'max','kind':'f','menu':'vector4(const vector4,const vector4)'})
call add(f,{'word':'max','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'max','kind':'f','menu':'vector2(const vector2,const vector2)'})
call add(f,{'word':'max','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'max','kind':'f','menu':'vector(const vector,const vector)'})
call add(f,{'word':'max','kind':'f','menu':'vector(const vector[])'})
let c['max'] = f
let f = []
let c['measured'] = f
let f = []
let c['merge'] = f
let f = []
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,matrix2)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,matrix3)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,matrix)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,float)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,int)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,vector4)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,vector2)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int(const int,const string,const vector,vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'matrix3[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'matrix[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'float[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'int[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'vector4[](const string,const string,const vector)'})
call add(f,{'word':'metaimport','kind':'f','menu':'vector[](const string,const string,const vector)'})
let c['metaimport'] = f
let f = []
call add(f,{'word':'metamarch','kind':'f','menu':'int(export int,const string,export vector,export vector,const float)'})
let c['metamarch'] = f
let f = []
call add(f,{'word':'metanext','kind':'f','menu':'int(const int)'})
let c['metanext'] = f
let f = []
call add(f,{'word':'metastart','kind':'f','menu':'int(const string,const vector)'})
let c['metastart'] = f
let f = []
call add(f,{'word':'metaweight','kind':'f','menu':'float(const string,const vector)'})
let c['metaweight'] = f
let f = []
call add(f,{'word':'min','kind':'f','menu':'float(const float)'})
call add(f,{'word':'min','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'min','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'min','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'min','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'min','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'min','kind':'f','menu':'int(const int)'})
call add(f,{'word':'min','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'min','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'min','kind':'f','menu':'vector4(const vector4,const vector4)'})
call add(f,{'word':'min','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'min','kind':'f','menu':'vector2(const vector2,const vector2)'})
call add(f,{'word':'min','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'min','kind':'f','menu':'vector(const vector,const vector)'})
call add(f,{'word':'min','kind':'f','menu':'vector(const vector[])'})
let c['min'] = f
let f = []
call add(f,{'word':'minpos','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const int,const string,const vector,const float)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const int,const vector)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const int,const vector,const float)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const string,const string,const vector,const float)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'minpos','kind':'f','menu':'vector(const string,const vector,const float)'})
let c['minpos'] = f
let f = []
let c['mod'] = f
let f = []
let c['mul'] = f
let f = []
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,const float,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,const float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,const float,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,const float,float,float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,const float,int,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,const float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,int,float,float,float,float,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,float,float,float,float,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const float,int,float,float,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const float,float,float,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector4,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector4,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector4,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector4,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector4,int,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector4,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector2,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector2,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector2,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector2,float,float,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector2,int,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector2,float,float,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector,int,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector,int,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector,float,float,float,float)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector,int,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'void(const vector,int,float,float,const int,const int,const int)'})
call add(f,{'word':'mwnoise','kind':'f','menu':'int(const vector,float,float,const int,const int,const int)'})
let c['mwnoise'] = f
let f = []
call add(f,{'word':'nametopoint','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nametopoint','kind':'f','menu':'int(const string,const string)'})
let c['nametopoint'] = f
let f = []
call add(f,{'word':'nametoprim','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nametoprim','kind':'f','menu':'int(const string,const string)'})
let c['nametoprim'] = f
let f = []
call add(f,{'word':'nbouncetypes','kind':'f','menu':'int()'})
let c['nbouncetypes'] = f
let f = []
let c['ne'] = f
let f = []
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const int,const string,const vector,const float)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const int,const vector)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const int,const vector,const float)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const string,const string,const vector)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const string,const string,const vector,const float)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const string,const vector)'})
call add(f,{'word':'nearpoint','kind':'f','menu':'int(const string,const vector,const float)'})
let c['nearpoint'] = f
let f = []
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const int,const string,const vector,const float)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const int,const string,const vector,const float,const int)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const int,const vector,const float)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const int,const vector,const float,const int)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const string,const string,const vector,const float)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const string,const string,const vector,const float,const int)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const string,const vector,const float)'})
call add(f,{'word':'nearpoints','kind':'f','menu':'int[](const string,const vector,const float,const int)'})
let c['nearpoints'] = f
let f = []
call add(f,{'word':'nedgesgroup','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nedgesgroup','kind':'f','menu':'int(const string,const string)'})
let c['nedgesgroup'] = f
let f = []
let c['neg'] = f
let f = []
call add(f,{'word':'neighbour','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'neighbour','kind':'f','menu':'int(const string,const int,const int)'})
let c['neighbour'] = f
let f = []
call add(f,{'word':'neighbourcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'neighbourcount','kind':'f','menu':'int(const string,const int)'})
let c['neighbourcount'] = f
let f = []
call add(f,{'word':'neighbours','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'neighbours','kind':'f','menu':'int[](const string,const int)'})
let c['neighbours'] = f
let f = []
call add(f,{'word':'noise','kind':'f','menu':'float(const float)'})
call add(f,{'word':'noise','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'noise','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'noise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'noise','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'noise','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'noise','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'noise','kind':'f','menu':'vector(const vector)'})
let c['noise'] = f
let f = []
call add(f,{'word':'noised','kind':'f','menu':'void(const float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'float(const float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const float,const float,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'float(const float,const float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const float,const float,vector,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'vector(const float,const float,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const float,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'vector(const float,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const vector4,float,float,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'float(const vector4,float,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const vector4,vector,vector,vector,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'vector(const vector4,vector,vector,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const vector,float,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'float(const vector,float,float,float)'})
call add(f,{'word':'noised','kind':'f','menu':'void(const vector,vector,vector,vector,vector)'})
call add(f,{'word':'noised','kind':'f','menu':'vector(const vector,vector,vector,vector)'})
let c['noised'] = f
let f = []
let c['nop'] = f
let f = []
call add(f,{'word':'normal_bsdf','kind':'f','menu':'vector(const bsdf)'})
let c['normal_bsdf'] = f
let f = []
call add(f,{'word':'normalize','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'normalize','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'normalize','kind':'f','menu':'vector(const vector)'})
let c['normalize'] = f
let f = []
let c['not'] = f
let f = []
let c['notif'] = f
let f = []
call add(f,{'word':'npoints','kind':'f','menu':'int(const int)'})
call add(f,{'word':'npoints','kind':'f','menu':'int(const string)'})
let c['npoints'] = f
let f = []
call add(f,{'word':'npointsgroup','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'npointsgroup','kind':'f','menu':'int(const string,const string)'})
let c['npointsgroup'] = f
let f = []
call add(f,{'word':'nprimitives','kind':'f','menu':'int(const int)'})
call add(f,{'word':'nprimitives','kind':'f','menu':'int(const string)'})
let c['nprimitives'] = f
let f = []
call add(f,{'word':'nprimitivesgroup','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nprimitivesgroup','kind':'f','menu':'int(const string,const string)'})
let c['nprimitivesgroup'] = f
let f = []
call add(f,{'word':'nrandom','kind':'f','menu':'float()'})
call add(f,{'word':'nrandom','kind':'f','menu':'void(float,float)'})
call add(f,{'word':'nrandom','kind':'f','menu':'float(float)'})
call add(f,{'word':'nrandom','kind':'f','menu':'vector4()'})
call add(f,{'word':'nrandom','kind':'f','menu':'vector()'})
let c['nrandom'] = f
let f = []
call add(f,{'word':'ntransform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'ntransform','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'ntransform','kind':'f','menu':'vector(const vector,const matrix)'})
let c['ntransform'] = f
let f = []
call add(f,{'word':'nuniqueval','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'nuniqueval','kind':'f','menu':'int(const string,const string,const string)'})
let c['nuniqueval'] = f
let f = []
call add(f,{'word':'nvertices','kind':'f','menu':'int(const int)'})
call add(f,{'word':'nvertices','kind':'f','menu':'int(const string)'})
let c['nvertices'] = f
let f = []
call add(f,{'word':'nverticesgroup','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'nverticesgroup','kind':'f','menu':'int(const string,const string)'})
let c['nverticesgroup'] = f
let f = []
call add(f,{'word':'ocean_sample','kind':'f','menu':'vector(const string,const int,const int,const int,const float,const float,const int,const int,const vector)'})
let c['ocean_sample'] = f
let f = []
call add(f,{'word':'ocio_activedisplays','kind':'f','menu':'string[]()'})
let c['ocio_activedisplays'] = f
let f = []
call add(f,{'word':'ocio_activeviews','kind':'f','menu':'string[]()'})
let c['ocio_activeviews'] = f
let f = []
call add(f,{'word':'ocio_import','kind':'f','menu':'int(const string,const string,int)'})
call add(f,{'word':'ocio_import','kind':'f','menu':'int(const string,const string,string)'})
call add(f,{'word':'ocio_import','kind':'f','menu':'int(const string,const string,vector)'})
let c['ocio_import'] = f
let f = []
call add(f,{'word':'ocio_roles','kind':'f','menu':'string[]()'})
let c['ocio_roles'] = f
let f = []
call add(f,{'word':'ocio_spaces','kind':'f','menu':'string[]()'})
let c['ocio_spaces'] = f
let f = []
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector4(const string,const vector4)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector4(const string,const string,const vector4)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector4(const string,const string,const string,const vector4)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector(const string,const string,const string,const vector)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'ocio_transform','kind':'f','menu':'vector(const string,const vector)'})
let c['ocio_transform'] = f
let f = []
call add(f,{'word':'onoise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'onoise','kind':'f','menu':'float(const vector,const int,const float,const float)'})
call add(f,{'word':'onoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'onoise','kind':'f','menu':'float(const vector,const int,const int,const int,const int,const float,const float)'})
call add(f,{'word':'onoise','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'onoise','kind':'f','menu':'vector(const vector,const int,const float,const float)'})
call add(f,{'word':'onoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
call add(f,{'word':'onoise','kind':'f','menu':'vector(const vector,const int,const int,const int,const int,const float,const float)'})
let c['onoise'] = f
let f = []
call add(f,{'word':'opdigits','kind':'f','menu':'int()'})
call add(f,{'word':'opdigits','kind':'f','menu':'int(const string)'})
let c['opdigits'] = f
let f = []
call add(f,{'word':'opfullpath','kind':'f','menu':'string(const string)'})
let c['opfullpath'] = f
let f = []
call add(f,{'word':'opid','kind':'f','menu':'int(const int)'})
call add(f,{'word':'opid','kind':'f','menu':'int(const string)'})
let c['opid'] = f
let f = []
call add(f,{'word':'opparentbonetransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'opparentbonetransform','kind':'f','menu':'matrix(const string,const float)'})
let c['opparentbonetransform'] = f
let f = []
call add(f,{'word':'opparenttransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'opparenttransform','kind':'f','menu':'matrix(const string,const float)'})
let c['opparenttransform'] = f
let f = []
call add(f,{'word':'opparmtransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'opparmtransform','kind':'f','menu':'matrix(const string,const float)'})
let c['opparmtransform'] = f
let f = []
call add(f,{'word':'oppreconstrainttransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'oppreconstrainttransform','kind':'f','menu':'matrix(const string,const float)'})
let c['oppreconstrainttransform'] = f
let f = []
call add(f,{'word':'oppretransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'oppretransform','kind':'f','menu':'matrix(const string,const float)'})
let c['oppretransform'] = f
let f = []
call add(f,{'word':'optransform','kind':'f','menu':'matrix(const int)'})
call add(f,{'word':'optransform','kind':'f','menu':'matrix(const string)'})
call add(f,{'word':'optransform','kind':'f','menu':'matrix(const string,const float)'})
let c['optransform'] = f
let f = []
let c['or'] = f
let f = []
call add(f,{'word':'ord','kind':'f','menu':'int(const string)'})
let c['ord'] = f
let f = []
call add(f,{'word':'orthographic','kind':'f','menu':'matrix(const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'orthographic','kind':'f','menu':'matrix(const float,const float,const float,const float,const float,const float,const vector4)'})
let c['orthographic'] = f
let f = []
call add(f,{'word':'osd_facecount','kind':'f','menu':'int(const int)'})
call add(f,{'word':'osd_facecount','kind':'f','menu':'int(const string)'})
let c['osd_facecount'] = f
let f = []
call add(f,{'word':'osd_firstpatch','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'osd_firstpatch','kind':'f','menu':'int(const string,const int)'})
let c['osd_firstpatch'] = f
let f = []
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix2)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix3)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,float)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector4)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector2)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const int,const string,const int,const float,const float,float[])'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix2)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix3)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,float)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector4)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector2)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector)'})
call add(f,{'word':'osd_limitsurface','kind':'f','menu':'int(const string,const string,const int,const float,const float,float[])'})
let c['osd_limitsurface'] = f
let f = []
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix2)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix3)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,matrix)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,float)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector4)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector2)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,vector)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const int,const string,const int,const float,const float,float[])'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix2)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix3)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,matrix)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,float)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector4)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector2)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,vector)'})
call add(f,{'word':'osd_limitsurfacevertex','kind':'f','menu':'int(const string,const string,const int,const float,const float,float[])'})
let c['osd_limitsurfacevertex'] = f
let f = []
call add(f,{'word':'osd_lookupface','kind':'f','menu':'int(const int,const int,const float,const float,int,float,float)'})
call add(f,{'word':'osd_lookupface','kind':'f','menu':'int(const int,const int,const float,const float,int,float,float,const string)'})
call add(f,{'word':'osd_lookupface','kind':'f','menu':'int(const string,const int,const float,const float,int,float,float)'})
call add(f,{'word':'osd_lookupface','kind':'f','menu':'int(const string,const int,const float,const float,int,float,float,const string)'})
let c['osd_lookupface'] = f
let f = []
call add(f,{'word':'osd_lookuppatch','kind':'f','menu':'int(const int,const int,const float,const float,int,float,float)'})
call add(f,{'word':'osd_lookuppatch','kind':'f','menu':'int(const int,const int,const float,const float,int,float,float,const string)'})
call add(f,{'word':'osd_lookuppatch','kind':'f','menu':'int(const string,const int,const float,const float,int,float,float)'})
call add(f,{'word':'osd_lookuppatch','kind':'f','menu':'int(const string,const int,const float,const float,int,float,float,const string)'})
let c['osd_lookuppatch'] = f
let f = []
call add(f,{'word':'osd_patchcount','kind':'f','menu':'int(const int)'})
call add(f,{'word':'osd_patchcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'osd_patchcount','kind':'f','menu':'int(const string)'})
call add(f,{'word':'osd_patchcount','kind':'f','menu':'int(const string,const int)'})
let c['osd_patchcount'] = f
let f = []
call add(f,{'word':'osd_patches','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'osd_patches','kind':'f','menu':'int[](const string,const int)'})
let c['osd_patches'] = f
let f = []
call add(f,{'word':'outerproduct','kind':'f','menu':'matrix2(const vector2,const vector2)'})
call add(f,{'word':'outerproduct','kind':'f','menu':'matrix3(const vector,const vector)'})
call add(f,{'word':'outerproduct','kind':'f','menu':'matrix(const vector4,const vector4)'})
let c['outerproduct'] = f
let f = []
call add(f,{'word':'ow_nspace','kind':'f','menu':'vector(const vector)'})
let c['ow_nspace'] = f
let f = []
call add(f,{'word':'ow_space','kind':'f','menu':'matrix()'})
call add(f,{'word':'ow_space','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'ow_space','kind':'f','menu':'vector(const vector)'})
let c['ow_space'] = f
let f = []
call add(f,{'word':'ow_vspace','kind':'f','menu':'vector(const vector)'})
let c['ow_vspace'] = f
let f = []
call add(f,{'word':'pack_inttosafefloat','kind':'f','menu':'float(const int)'})
let c['pack_inttosafefloat'] = f
let f = []
call add(f,{'word':'packedtransform','kind':'f','menu':'void(const int,const int,const matrix)'})
let c['packedtransform'] = f
let f = []
call add(f,{'word':'pcclose','kind':'f','menu':'void(export int)'})
let c['pcclose'] = f
let f = []
call add(f,{'word':'pcconvex','kind':'f','menu':'float(const int,const string,const vector)'})
let c['pcconvex'] = f
let f = []
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'pcexport','kind':'f','menu':'int(const int,const string,const vector,const float)'})
let c['pcexport'] = f
let f = []
call add(f,{'word':'pcfarthest','kind':'f','menu':'float(const int)'})
let c['pcfarthest'] = f
let f = []
call add(f,{'word':'pcfilter','kind':'f','menu':'matrix3(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'float(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'vector4(const int,const string)'})
call add(f,{'word':'pcfilter','kind':'f','menu':'vector(const int,const string)'})
let c['pcfilter'] = f
let f = []
call add(f,{'word':'pcfind','kind':'f','menu':'int[](const int,const string,const string,const vector,const float,const int)'})
call add(f,{'word':'pcfind','kind':'f','menu':'int[](const int,const string,const vector,const float,const int)'})
call add(f,{'word':'pcfind','kind':'f','menu':'int[](const string,const string,const string,const vector,const float,const int)'})
call add(f,{'word':'pcfind','kind':'f','menu':'int[](const string,const string,const vector,const float,const int)'})
let c['pcfind'] = f
let f = []
call add(f,{'word':'pcfind_radius','kind':'f','menu':'int[](const int,const string,const string,const float,const vector,const float,const int)'})
call add(f,{'word':'pcfind_radius','kind':'f','menu':'int[](const int,const string,const string,const string,const float,const vector,const float,const int)'})
call add(f,{'word':'pcfind_radius','kind':'f','menu':'int[](const string,const string,const string,const float,const vector,const float,const int)'})
call add(f,{'word':'pcfind_radius','kind':'f','menu':'int[](const string,const string,const string,const string,const float,const vector,const float,const int)'})
let c['pcfind_radius'] = f
let f = []
call add(f,{'word':'pcgenerate','kind':'f','menu':'int(const string,const int)'})
let c['pcgenerate'] = f
let f = []
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,matrix3)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,matrix)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,float)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,int)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,vector4)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,string)'})
call add(f,{'word':'pcimport','kind':'f','menu':'int(const int,const string,vector)'})
let c['pcimport'] = f
let f = []
call add(f,{'word':'pcimportbyidx3','kind':'f','menu':'matrix3(const int,const string,const int)'})
let c['pcimportbyidx3'] = f
let f = []
call add(f,{'word':'pcimportbyidx4','kind':'f','menu':'matrix(const int,const string,const int)'})
let c['pcimportbyidx4'] = f
let f = []
call add(f,{'word':'pcimportbyidxf','kind':'f','menu':'float(const int,const string,const int)'})
let c['pcimportbyidxf'] = f
let f = []
call add(f,{'word':'pcimportbyidxi','kind':'f','menu':'int(const int,const string,const int)'})
let c['pcimportbyidxi'] = f
let f = []
call add(f,{'word':'pcimportbyidxp','kind':'f','menu':'vector4(const int,const string,const int)'})
let c['pcimportbyidxp'] = f
let f = []
call add(f,{'word':'pcimportbyidxs','kind':'f','menu':'string(const int,const string,const int)'})
let c['pcimportbyidxs'] = f
let f = []
call add(f,{'word':'pcimportbyidxv','kind':'f','menu':'vector(const int,const string,const int)'})
let c['pcimportbyidxv'] = f
let f = []
call add(f,{'word':'pciterate','kind':'f','menu':'int(const int)'})
let c['pciterate'] = f
let f = []
call add(f,{'word':'pcnumfound','kind':'f','menu':'int(const int)'})
let c['pcnumfound'] = f
let f = []
call add(f,{'word':'pcopen','kind':'f','menu':'int(const int,const string,const vector,const float,const int)'})
call add(f,{'word':'pcopen','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'pcopen','kind':'f','menu':'int(const string,const string,const vector,const float,const int)'})
call add(f,{'word':'pcopen','kind':'f','menu':'int(const string,const string,const vector,const string,const vector,const float,const int)'})
let c['pcopen'] = f
let f = []
call add(f,{'word':'pcopenlod','kind':'f','menu':'int(const string,const string,const vector,const int)'})
let c['pcopenlod'] = f
let f = []
call add(f,{'word':'pcsampleleaf','kind':'f','menu':'void(const int,const float)'})
let c['pcsampleleaf'] = f
let f = []
call add(f,{'word':'pcsize','kind':'f','menu':'int(const int)'})
let c['pcsize'] = f
let f = []
call add(f,{'word':'pcunshaded','kind':'f','menu':'int(const int,const string)'})
let c['pcunshaded'] = f
let f = []
call add(f,{'word':'pcwrite','kind':'f','menu':'int(const string)'})
let c['pcwrite'] = f
let f = []
call add(f,{'word':'perspective','kind':'f','menu':'matrix(const float,const float,const float,const float,const float)'})
call add(f,{'word':'perspective','kind':'f','menu':'matrix(const float,const float,const float,const float,const float,const vector4)'})
let c['perspective'] = f
let f = []
call add(f,{'word':'pgfind','kind':'f','menu':'int[](const int,const string,const vector,const float,const int,const float)'})
call add(f,{'word':'pgfind','kind':'f','menu':'int[](const int,const vector,const float,const int,const float)'})
call add(f,{'word':'pgfind','kind':'f','menu':'int[](const string,const string,const vector,const float,const int,const float)'})
call add(f,{'word':'pgfind','kind':'f','menu':'int[](const string,const vector,const float,const int,const float)'})
let c['pgfind'] = f
let f = []
call add(f,{'word':'phongBRDF','kind':'f','menu':'float(const vector,const vector,const vector,const float)'})
let c['phongBRDF'] = f
let f = []
call add(f,{'word':'phonglobe','kind':'f','menu':'bsdf(const vector,const vector,const float,const float,const vector,const vector)'})
call add(f,{'word':'phonglobe','kind':'f','menu':'bsdf(const vector,const vector,const float)'})
let c['phonglobe'] = f
let f = []
call add(f,{'word':'photonmap','kind':'f','menu':'vector(const string,const vector,const vector)'})
call add(f,{'word':'photonmap','kind':'f','menu':'void(const string,const vector,const vector,vector,float)'})
call add(f,{'word':'photonmap','kind':'f','menu':'vector(const string,const vector,const vector,float)'})
let c['photonmap'] = f
let f = []
call add(f,{'word':'planepointdistance','kind':'f','menu':'float(const vector,const vector,const vector,vector)'})
let c['planepointdistance'] = f
let f = []
call add(f,{'word':'planesphereintersect','kind':'f','menu':'int(const vector,const vector,const vector,const float,vector,float,float)'})
let c['planesphereintersect'] = f
let f = []
call add(f,{'word':'pluralize','kind':'f','menu':'string(const string)'})
let c['pluralize'] = f
let f = []
call add(f,{'word':'pnoise','kind':'f','menu':'float(const float,const float,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const float,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const vector4,const vector4)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'float(const vector,const vector)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const float,const float,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const float,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const vector4,const vector4)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
call add(f,{'word':'pnoise','kind':'f','menu':'vector(const vector,const vector)'})
let c['pnoise'] = f
let f = []
call add(f,{'word':'point','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'point','kind':'f','menu':'vector[](const string,const string,const int)'})
let c['point'] = f
let f = []
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix2(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix2(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix3(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix3(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'float(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'float(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'int(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'int(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector4(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector4(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'string(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'string(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector2(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector2(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector(const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector(const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix2[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix2[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix3[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix3[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'matrix[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'float[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'float[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'int[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'int[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector4[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector4[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'string[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'string[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector2[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector2[](const string,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector[](const int,const string,const int,int)'})
call add(f,{'word':'pointattrib','kind':'f','menu':'vector[](const string,const string,const int,int)'})
let c['pointattrib'] = f
let f = []
call add(f,{'word':'pointattribsize','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'pointattribsize','kind':'f','menu':'int(const string,const string)'})
let c['pointattribsize'] = f
let f = []
call add(f,{'word':'pointattribtype','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'pointattribtype','kind':'f','menu':'int(const string,const string)'})
let c['pointattribtype'] = f
let f = []
call add(f,{'word':'pointattribtypeinfo','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'pointattribtypeinfo','kind':'f','menu':'string(const string,const string)'})
let c['pointattribtypeinfo'] = f
let f = []
call add(f,{'word':'pointedge','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'pointedge','kind':'f','menu':'int(const string,const int,const int)'})
let c['pointedge'] = f
let f = []
call add(f,{'word':'pointhedge','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'pointhedge','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'pointhedge','kind':'f','menu':'int(const string,const int)'})
call add(f,{'word':'pointhedge','kind':'f','menu':'int(const string,const int,const int)'})
let c['pointhedge'] = f
let f = []
call add(f,{'word':'pointhedgenext','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'pointhedgenext','kind':'f','menu':'int(const string,const int)'})
let c['pointhedgenext'] = f
let f = []
call add(f,{'word':'pointprims','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'pointprims','kind':'f','menu':'int[](const string,const int)'})
let c['pointprims'] = f
let f = []
call add(f,{'word':'pointvertex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'pointvertex','kind':'f','menu':'int(const string,const int)'})
let c['pointvertex'] = f
let f = []
call add(f,{'word':'pointvertices','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'pointvertices','kind':'f','menu':'int[](const string,const int)'})
let c['pointvertices'] = f
let f = []
call add(f,{'word':'polardecomp','kind':'f','menu':'matrix3(const matrix3)'})
let c['polardecomp'] = f
let f = []
call add(f,{'word':'polyneighbours','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'polyneighbours','kind':'f','menu':'int[](const string,const int)'})
let c['polyneighbours'] = f
let f = []
call add(f,{'word':'pop','kind':'f','menu':'matrix2(export matrix2[])'})
call add(f,{'word':'pop','kind':'f','menu':'matrix2(export matrix2[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'matrix3(export matrix3[])'})
call add(f,{'word':'pop','kind':'f','menu':'matrix3(export matrix3[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'matrix(export matrix[])'})
call add(f,{'word':'pop','kind':'f','menu':'matrix(export matrix[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'bsdf(export bsdf[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'bsdf(export bsdf[])'})
call add(f,{'word':'pop','kind':'f','menu':'float(export float[])'})
call add(f,{'word':'pop','kind':'f','menu':'float(export float[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'int(export int[])'})
call add(f,{'word':'pop','kind':'f','menu':'int(export int[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'vector4(export vector4[])'})
call add(f,{'word':'pop','kind':'f','menu':'vector4(export vector4[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'string(export string[])'})
call add(f,{'word':'pop','kind':'f','menu':'string(export string[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'vector2(export vector2[])'})
call add(f,{'word':'pop','kind':'f','menu':'vector2(export vector2[],const int)'})
call add(f,{'word':'pop','kind':'f','menu':'vector(export vector[])'})
call add(f,{'word':'pop','kind':'f','menu':'vector(export vector[],const int)'})
let c['pop'] = f
let f = []
let c['popinline'] = f
let f = []
call add(f,{'word':'pow','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'pow','kind':'f','menu':'vector4(const vector4,const float)'})
call add(f,{'word':'pow','kind':'f','menu':'vector2(const vector2,const float)'})
call add(f,{'word':'pow','kind':'f','menu':'vector(const vector,const float)'})
let c['pow'] = f
let f = []
call add(f,{'word':'predicate_incircle','kind':'f','menu':'float(const vector2,const vector2,const vector2,const vector2)'})
let c['predicate_incircle'] = f
let f = []
call add(f,{'word':'predicate_insphere','kind':'f','menu':'float(const vector,const vector,const vector,const vector,const vector)'})
let c['predicate_insphere'] = f
let f = []
call add(f,{'word':'predicate_orient2d','kind':'f','menu':'float(const vector2,const vector2,const vector2)'})
let c['predicate_orient2d'] = f
let f = []
call add(f,{'word':'predicate_orient3d','kind':'f','menu':'float(const vector,const vector,const vector,const vector)'})
let c['predicate_orient3d'] = f
let f = []
call add(f,{'word':'prerotate','kind':'f','menu':'void(export matrix3,const float,const vector)'})
call add(f,{'word':'prerotate','kind':'f','menu':'void(export matrix3,const vector,const int)'})
call add(f,{'word':'prerotate','kind':'f','menu':'void(export matrix,const float,const vector)'})
call add(f,{'word':'prerotate','kind':'f','menu':'void(export matrix,const vector,const int)'})
let c['prerotate'] = f
let f = []
call add(f,{'word':'prescale','kind':'f','menu':'void(export matrix3,const vector)'})
call add(f,{'word':'prescale','kind':'f','menu':'void(export matrix,const vector)'})
let c['prescale'] = f
let f = []
call add(f,{'word':'pretranslate','kind':'f','menu':'void(export matrix,const vector)'})
let c['pretranslate'] = f
let f = []
call add(f,{'word':'prim','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'prim','kind':'f','menu':'vector[](const string,const string,const int)'})
let c['prim'] = f
let f = []
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix2,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix3,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix3,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,float,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,float,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,int,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,int,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector4,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector4,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector2,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector,const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector,const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix2[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix3[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,matrix[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,float[],const string,const int,const float,const float)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,float[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,int[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector4[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector2[],const string,const int,const vector)'})
call add(f,{'word':'prim_attribute','kind':'f','menu':'int(const string,vector[],const string,const int,const vector)'})
let c['prim_attribute'] = f
let f = []
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const int,const int,const float,const float)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const int,const int,const float,const float,const float)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const string,const int,const float,const float)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const string,const int,const float,const float,const float)'})
call add(f,{'word':'prim_normal','kind':'f','menu':'vector(const string,const int,const vector)'})
let c['prim_normal'] = f
let f = []
call add(f,{'word':'primarclen','kind':'f','menu':'float(const string,const vector2,const vector2,const int)'})
call add(f,{'word':'primarclen','kind':'f','menu':'float(const string,const vector2,const vector2,const int,const int)'})
let c['primarclen'] = f
let f = []
call add(f,{'word':'primattrib','kind':'f','menu':'matrix2(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix2(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix3(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix3(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'float(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'float(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'int(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'int(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector4(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector4(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'string(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'string(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector2(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector2(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector(const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector(const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix2[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix2[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix3[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix3[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'matrix[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'float[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'float[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'int[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'int[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector4[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector4[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'string[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'string[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector2[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector2[](const string,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector[](const int,const string,const int,int)'})
call add(f,{'word':'primattrib','kind':'f','menu':'vector[](const string,const string,const int,int)'})
let c['primattrib'] = f
let f = []
call add(f,{'word':'primattribsize','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'primattribsize','kind':'f','menu':'int(const string,const string)'})
let c['primattribsize'] = f
let f = []
call add(f,{'word':'primattribtype','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'primattribtype','kind':'f','menu':'int(const string,const string)'})
let c['primattribtype'] = f
let f = []
call add(f,{'word':'primattribtypeinfo','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'primattribtypeinfo','kind':'f','menu':'string(const string,const string)'})
let c['primattribtypeinfo'] = f
let f = []
call add(f,{'word':'primduv','kind':'f','menu':'vector(const string,const int,const vector2,const int,const int)'})
let c['primduv'] = f
let f = []
call add(f,{'word':'primfind','kind':'f','menu':'int[](const int,const string,const vector,const vector)'})
call add(f,{'word':'primfind','kind':'f','menu':'int[](const int,const vector,const vector)'})
call add(f,{'word':'primfind','kind':'f','menu':'int[](const string,const string,const vector,const vector)'})
call add(f,{'word':'primfind','kind':'f','menu':'int[](const string,const vector,const vector)'})
let c['primfind'] = f
let f = []
call add(f,{'word':'primhedge','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'primhedge','kind':'f','menu':'int(const string,const int)'})
let c['primhedge'] = f
let f = []
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'primintrinsic','kind':'f','menu':'vector[](const string,const string,const int)'})
let c['primintrinsic'] = f
let f = []
call add(f,{'word':'primpoint','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'primpoint','kind':'f','menu':'int(const string,const int,const int)'})
let c['primpoint'] = f
let f = []
call add(f,{'word':'primpoints','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'primpoints','kind':'f','menu':'int[](const string,const int)'})
let c['primpoints'] = f
let f = []
call add(f,{'word':'primuv','kind':'f','menu':'matrix2(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix2(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix3(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix3(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'float(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'float(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'int(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'int(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector4(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector4(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector2(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector2(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector(const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector(const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix2[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix2[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix3[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix3[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'matrix[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'float[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'float[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'int[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'int[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector4[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector4[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector2[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector2[](const string,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector[](const int,const string,const int,const vector)'})
call add(f,{'word':'primuv','kind':'f','menu':'vector[](const string,const string,const int,const vector)'})
let c['primuv'] = f
let f = []
call add(f,{'word':'primuvconvert','kind':'f','menu':'vector2(const string,const vector2,const int,const int)'})
call add(f,{'word':'primuvconvert','kind':'f','menu':'vector2(const string,const vector2,const int,const int,const float)'})
let c['primuvconvert'] = f
let f = []
call add(f,{'word':'primvertex','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'primvertex','kind':'f','menu':'int(const string,const int,const int)'})
let c['primvertex'] = f
let f = []
call add(f,{'word':'primvertexcount','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'primvertexcount','kind':'f','menu':'int(const string,const int)'})
let c['primvertexcount'] = f
let f = []
call add(f,{'word':'primvertices','kind':'f','menu':'int[](const int,const int)'})
call add(f,{'word':'primvertices','kind':'f','menu':'int[](const string,const int)'})
let c['primvertices'] = f
let f = []
call add(f,{'word':'print_once','kind':'f','menu':'void(const string)'})
let c['print_once'] = f
let f = []
call add(f,{'word':'printf','kind':'f','menu':'void(const string)'})
let c['printf'] = f
let f = []
call add(f,{'word':'product','kind':'f','menu':'float(const float)'})
call add(f,{'word':'product','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'product','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'product','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'product','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'product','kind':'f','menu':'int(const int)'})
call add(f,{'word':'product','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'product','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'product','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'product','kind':'f','menu':'vector(const vector[])'})
let c['product'] = f
let f = []
call add(f,{'word':'ptexture','kind':'f','menu':'matrix3(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'matrix3(const string,const int,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'matrix(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'matrix(const string,const int,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'float(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'float(const string,const int,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector4(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector4(const string,const int,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector(const string,const int,const float,const float)'})
call add(f,{'word':'ptexture','kind':'f','menu':'vector(const string,const int,const float,const float,const float,const float,const float,const float)'})
let c['ptexture'] = f
let f = []
call add(f,{'word':'ptlined','kind':'f','menu':'float(const vector,const vector,const vector)'})
let c['ptlined'] = f
let f = []
call add(f,{'word':'ptransform','kind':'f','menu':'vector4(const vector4,const matrix)'})
call add(f,{'word':'ptransform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'ptransform','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'ptransform','kind':'f','menu':'vector(const vector,const matrix)'})
let c['ptransform'] = f
let f = []
call add(f,{'word':'push','kind':'f','menu':'void(export matrix2[],const matrix2)'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix2[],const matrix2[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix3[],const matrix3)'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix3[],const matrix3[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix[],const matrix)'})
call add(f,{'word':'push','kind':'f','menu':'void(export matrix[],const matrix[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export bsdf[],const bsdf)'})
call add(f,{'word':'push','kind':'f','menu':'void(export bsdf[],const bsdf[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export float[],const float)'})
call add(f,{'word':'push','kind':'f','menu':'void(export float[],const float[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export int[],const int)'})
call add(f,{'word':'push','kind':'f','menu':'void(export int[],const int[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector4[],const vector4)'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector4[],const vector4[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export string[],const string)'})
call add(f,{'word':'push','kind':'f','menu':'void(export string[],const string[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector2[],const vector2)'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector2[],const vector2[])'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector[],const vector)'})
call add(f,{'word':'push','kind':'f','menu':'void(export vector[],const vector[])'})
let c['push'] = f
let f = []
let c['pushinline'] = f
let f = []
call add(f,{'word':'pxnoise','kind':'f','menu':'float(const float,const float,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'float(const float,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'float(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'vector(const float,const float,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'vector(const float,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'vector(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'pxnoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
let c['pxnoise'] = f
let f = []
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const float,const float,const int,const int,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'float(const float,const float,const int,const int,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const float,const float,const int,const int,vector,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'vector(const float,const float,const int,const int,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const float,const int,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'float(const float,const int,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const float,const int,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'vector(const float,const int,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const vector4,const int,const int,const int,const int,float,float,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'float(const vector4,const int,const int,const int,const int,float,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const vector4,const int,const int,const int,const int,vector,vector,vector,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'vector(const vector4,const int,const int,const int,const int,vector,vector,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const vector,const int,const int,const int,float,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'float(const vector,const int,const int,const int,float,float,float)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'void(const vector,const int,const int,const int,vector,vector,vector,vector)'})
call add(f,{'word':'pxnoised','kind':'f','menu':'vector(const vector,const int,const int,const int,vector,vector,vector)'})
let c['pxnoised'] = f
let f = []
call add(f,{'word':'qconvert','kind':'f','menu':'matrix3(const vector4)'})
call add(f,{'word':'qconvert','kind':'f','menu':'vector(const vector4)'})
let c['qconvert'] = f
let f = []
call add(f,{'word':'qdistance','kind':'f','menu':'float(const vector4,const vector4)'})
let c['qdistance'] = f
let f = []
call add(f,{'word':'qinvert','kind':'f','menu':'vector4(const vector4)'})
let c['qinvert'] = f
let f = []
call add(f,{'word':'qmultiply','kind':'f','menu':'vector4(const vector4,const vector4)'})
let c['qmultiply'] = f
let f = []
call add(f,{'word':'qrotate','kind':'f','menu':'vector(const vector4,const vector)'})
let c['qrotate'] = f
let f = []
call add(f,{'word':'quaternion','kind':'f','menu':'vector4(const matrix3)'})
call add(f,{'word':'quaternion','kind':'f','menu':'vector4(const float,const vector)'})
call add(f,{'word':'quaternion','kind':'f','menu':'vector4(const vector)'})
let c['quaternion'] = f
let f = []
call add(f,{'word':'quaterniontoeuler','kind':'f','menu':'vector(const vector4,const int)'})
let c['quaterniontoeuler'] = f
let f = []
call add(f,{'word':'radians','kind':'f','menu':'float(const float)'})
call add(f,{'word':'radians','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'radians','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'radians','kind':'f','menu':'vector(const vector)'})
let c['radians'] = f
let f = []
call add(f,{'word':'rand','kind':'f','menu':'float(const float)'})
call add(f,{'word':'rand','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'rand','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'rand','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'rand','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const float,const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const vector2)'})
call add(f,{'word':'rand','kind':'f','menu':'vector4(const vector)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const float,const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const vector4)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'rand','kind':'f','menu':'vector2(const vector)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const vector2)'})
call add(f,{'word':'rand','kind':'f','menu':'vector(const vector)'})
let c['rand'] = f
let f = []
call add(f,{'word':'random','kind':'f','menu':'float(const float)'})
call add(f,{'word':'random','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'random','kind':'f','menu':'float(const int)'})
call add(f,{'word':'random','kind':'f','menu':'float(const int,const int)'})
call add(f,{'word':'random','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'random','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const float,const float)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const int,const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'random','kind':'f','menu':'vector4(const vector)'})
call add(f,{'word':'random','kind':'f','menu':'vector2(const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'random','kind':'f','menu':'vector(const vector)'})
let c['random'] = f
let f = []
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const float)'})
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const float,const float)'})
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const vector4)'})
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const vector2)'})
call add(f,{'word':'random_fhash','kind':'f','menu':'int(const vector)'})
let c['random_fhash'] = f
let f = []
let c['random_hash'] = f
let f = []
call add(f,{'word':'random_ihash','kind':'f','menu':'int(const int)'})
let c['random_ihash'] = f
let f = []
call add(f,{'word':'random_poisson','kind':'f','menu':'int(const int,const float)'})
call add(f,{'word':'random_poisson','kind':'f','menu':'int(const int,const float,const int,const int)'})
let c['random_poisson'] = f
let f = []
call add(f,{'word':'random_shash','kind':'f','menu':'int(const string)'})
let c['random_shash'] = f
let f = []
call add(f,{'word':'random_sobol','kind':'f','menu':'float(const float,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'float(const int,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'float(const vector4,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'float(const vector,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector4(const float,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector4(const int,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector4(const vector4,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector4(const vector,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector(const float,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector(const vector4,const int)'})
call add(f,{'word':'random_sobol','kind':'f','menu':'vector(const vector,const int)'})
let c['random_sobol'] = f
let f = []
call add(f,{'word':'randomf','kind':'f','menu':'float(const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'randomf','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector4(const float,const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector4(const vector)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'randomf','kind':'f','menu':'vector(const vector)'})
let c['randomf'] = f
let f = []
call add(f,{'word':'rawbumpmap','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmap','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmap','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmap','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmap'] = f
let f = []
call add(f,{'word':'rawbumpmapA','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapA','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapA','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapA','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapA'] = f
let f = []
call add(f,{'word':'rawbumpmapB','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapB','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapB','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapB','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapB'] = f
let f = []
call add(f,{'word':'rawbumpmapG','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapG','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapG','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapG','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapG'] = f
let f = []
call add(f,{'word':'rawbumpmapL','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapL','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapL','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapL','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapL'] = f
let f = []
call add(f,{'word':'rawbumpmapR','kind':'f','menu':'void(const string,float,float,const float,const float)'})
call add(f,{'word':'rawbumpmapR','kind':'f','menu':'float(const string,float,const float,const float)'})
call add(f,{'word':'rawbumpmapR','kind':'f','menu':'void(const string,float,float,const vector)'})
call add(f,{'word':'rawbumpmapR','kind':'f','menu':'float(const string,float,const vector)'})
let c['rawbumpmapR'] = f
let f = []
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const float,const float)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const float,const float,const float,const float,const float,const float,const float,const float,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const vector)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector4(const string,const vector,const vector,const vector,const vector,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const float,const float)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const float,const float,const float,const float,const float,const float,const float,const float,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const int)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector)'})
call add(f,{'word':'rawcolormap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector,const int)'})
let c['rawcolormap'] = f
let f = []
call add(f,{'word':'re_find','kind':'f','menu':'int(const string,const string)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(const string,const string,const int,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(int[],int[],const string,const string)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(int[],int[],const string,const string,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'int(int[],int[],const string,const string,const int,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'string(const string,const string)'})
call add(f,{'word':'re_find','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'string(const string,const string,const int,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'re_find','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'re_find','kind':'f','menu':'string[](const string,const string,const int,const int)'})
let c['re_find'] = f
let f = []
call add(f,{'word':'re_findall','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'re_findall','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'re_findall','kind':'f','menu':'string[](const string,const string,const int,const int)'})
let c['re_findall'] = f
let f = []
call add(f,{'word':'re_match','kind':'f','menu':'int(const string,const string)'})
let c['re_match'] = f
let f = []
call add(f,{'word':'re_replace','kind':'f','menu':'string(const string,const string,const string)'})
call add(f,{'word':'re_replace','kind':'f','menu':'string(const string,const string,const string,const int)'})
let c['re_replace'] = f
let f = []
call add(f,{'word':'re_split','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'re_split','kind':'f','menu':'string[](const string,const string,const int)'})
let c['re_split'] = f
let f = []
call add(f,{'word':'reflect','kind':'f','menu':'vector(const vector,const vector)'})
let c['reflect'] = f
let f = []
call add(f,{'word':'refract','kind':'f','menu':'vector(const vector,const vector,const float)'})
let c['refract'] = f
let f = []
call add(f,{'word':'relativepath','kind':'f','menu':'string(const string,const string)'})
let c['relativepath'] = f
let f = []
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const int,const vector)'})
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'relbbox','kind':'f','menu':'vector(const vector)'})
let c['relbbox'] = f
let f = []
call add(f,{'word':'relpointbbox','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'relpointbbox','kind':'f','menu':'vector(const int,const vector)'})
call add(f,{'word':'relpointbbox','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'relpointbbox','kind':'f','menu':'vector(const string,const vector)'})
let c['relpointbbox'] = f
let f = []
call add(f,{'word':'removeindex','kind':'f','menu':'matrix2(export matrix2[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'matrix3(export matrix3[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'matrix(export matrix[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'float(export float[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'int(export int[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'vector4(export vector4[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'string(export string[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'vector2(export vector2[],const int)'})
call add(f,{'word':'removeindex','kind':'f','menu':'vector(export vector[],const int)'})
let c['removeindex'] = f
let f = []
call add(f,{'word':'removepoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'removepoint','kind':'f','menu':'int(const int,const int,const int)'})
let c['removepoint'] = f
let f = []
call add(f,{'word':'removeprim','kind':'f','menu':'int(const int,const int,const int)'})
let c['removeprim'] = f
let f = []
call add(f,{'word':'removevalue','kind':'f','menu':'int(export matrix2[],const matrix2)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export matrix3[],const matrix3)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export matrix[],const matrix)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export float[],const float)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export int[],const int)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export vector4[],const vector4)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export string[],const string)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export vector2[],const vector2)'})
call add(f,{'word':'removevalue','kind':'f','menu':'int(export vector[],const vector)'})
let c['removevalue'] = f
let f = []
call add(f,{'word':'reorder','kind':'f','menu':'string(const string,const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'matrix2[](const matrix2[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'matrix3[](const matrix3[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'matrix[](const matrix[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'float[](const float[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'int[](const int[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'vector4[](const vector4[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'string[](const string[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'vector2[](const vector2[],const int[])'})
call add(f,{'word':'reorder','kind':'f','menu':'vector[](const vector[],const int[])'})
let c['reorder'] = f
let f = []
call add(f,{'word':'resample_linear','kind':'f','menu':'float[](const float[],const int)'})
call add(f,{'word':'resample_linear','kind':'f','menu':'vector4[](const vector4[],const int)'})
call add(f,{'word':'resample_linear','kind':'f','menu':'vector2[](const vector2[],const int)'})
call add(f,{'word':'resample_linear','kind':'f','menu':'vector[](const vector[],const int)'})
let c['resample_linear'] = f
let f = []
call add(f,{'word':'resize','kind':'f','menu':'void(export matrix2[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export matrix3[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export matrix[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export bsdf[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export float[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export int[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export vector4[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export string[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export vector2[],const int)'})
call add(f,{'word':'resize','kind':'f','menu':'void(export vector[],const int)'})
let c['resize'] = f
let f = []
let c['returninline'] = f
let f = []
call add(f,{'word':'reverse','kind':'f','menu':'string(const string)'})
call add(f,{'word':'reverse','kind':'f','menu':'matrix2[](const matrix2[])'})
call add(f,{'word':'reverse','kind':'f','menu':'matrix3[](const matrix3[])'})
call add(f,{'word':'reverse','kind':'f','menu':'matrix[](const matrix[])'})
call add(f,{'word':'reverse','kind':'f','menu':'float[](const float[])'})
call add(f,{'word':'reverse','kind':'f','menu':'int[](const int[])'})
call add(f,{'word':'reverse','kind':'f','menu':'vector4[](const vector4[])'})
call add(f,{'word':'reverse','kind':'f','menu':'string[](const string[])'})
call add(f,{'word':'reverse','kind':'f','menu':'vector2[](const vector2[])'})
call add(f,{'word':'reverse','kind':'f','menu':'vector[](const vector[])'})
let c['reverse'] = f
let f = []
call add(f,{'word':'rgbtohsv','kind':'f','menu':'vector(const float,const float,const float)'})
call add(f,{'word':'rgbtohsv','kind':'f','menu':'vector(const vector)'})
let c['rgbtohsv'] = f
let f = []
call add(f,{'word':'rgbtoxyz','kind':'f','menu':'vector(const vector)'})
let c['rgbtoxyz'] = f
let f = []
call add(f,{'word':'rint','kind':'f','menu':'float(const float)'})
call add(f,{'word':'rint','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'rint','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'rint','kind':'f','menu':'vector(const vector)'})
let c['rint'] = f
let f = []
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix2,const float)'})
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix3,const float,const vector)'})
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix3,const vector,const int)'})
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix,const float,const vector)'})
call add(f,{'word':'rotate','kind':'f','menu':'void(export matrix,const vector,const int)'})
let c['rotate'] = f
let f = []
call add(f,{'word':'rotate_x_to','kind':'f','menu':'vector4(const vector4,const vector4)'})
call add(f,{'word':'rotate_x_to','kind':'f','menu':'vector2(const vector2,const vector2)'})
call add(f,{'word':'rotate_x_to','kind':'f','menu':'vector(const vector,const vector)'})
let c['rotate_x_to'] = f
let f = []
call add(f,{'word':'rstrip','kind':'f','menu':'string(const string)'})
call add(f,{'word':'rstrip','kind':'f','menu':'string(const string,const string)'})
let c['rstrip'] = f
let f = []
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,const vector,int,vector,vector,float,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'int(const bsdf,const vector,const vector,vector,vector,float,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,vector,vector,float,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'vector(const bsdf,const vector,vector,float,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,vector,vector,float,int,const float,const float)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'vector(const bsdf,const vector,vector,float,int,const float,const float)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,vector,vector,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'vector(const bsdf,const vector,vector,int,const float,const float,const int)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'void(const bsdf,const vector,vector,vector,int,const float,const float)'})
call add(f,{'word':'sample_bsdf','kind':'f','menu':'vector(const bsdf,const vector,vector,int,const float,const float)'})
let c['sample_bsdf'] = f
let f = []
call add(f,{'word':'sample_cauchy','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'float(const float,const float,const float,const float)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'vector2(const float,const vector2)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sample_cauchy','kind':'f','menu':'vector(const vector)'})
let c['sample_cauchy'] = f
let f = []
call add(f,{'word':'sample_cdf','kind':'f','menu':'int(const float[],const float)'})
call add(f,{'word':'sample_cdf','kind':'f','menu':'void(const float[],const float,int,float)'})
call add(f,{'word':'sample_cdf','kind':'f','menu':'int(const float[],const float,float)'})
call add(f,{'word':'sample_cdf','kind':'f','menu':'void(const float[],const float,int,float,float)'})
call add(f,{'word':'sample_cdf','kind':'f','menu':'int(const float[],const float,float,float)'})
let c['sample_cdf'] = f
let f = []
call add(f,{'word':'sample_circle_arc','kind':'f','menu':'vector2(const vector2,const float,const float)'})
let c['sample_circle_arc'] = f
let f = []
call add(f,{'word':'sample_circle_edge_uniform','kind':'f','menu':'vector2(const float)'})
let c['sample_circle_edge_uniform'] = f
let f = []
call add(f,{'word':'sample_circle_ring_uniform','kind':'f','menu':'vector2(const vector2,const float)'})
let c['sample_circle_ring_uniform'] = f
let f = []
call add(f,{'word':'sample_circle_slice','kind':'f','menu':'vector2(const vector2,const float,const vector2)'})
let c['sample_circle_slice'] = f
let f = []
call add(f,{'word':'sample_circle_uniform','kind':'f','menu':'vector2(const vector2)'})
let c['sample_circle_uniform'] = f
let f = []
call add(f,{'word':'sample_direction_cone','kind':'f','menu':'vector(const vector,const float,const vector2)'})
let c['sample_direction_cone'] = f
let f = []
call add(f,{'word':'sample_direction_uniform','kind':'f','menu':'vector(const vector2)'})
let c['sample_direction_uniform'] = f
let f = []
call add(f,{'word':'sample_discrete','kind':'f','menu':'int(const int,const float)'})
call add(f,{'word':'sample_discrete','kind':'f','menu':'int(const float[],const float)'})
let c['sample_discrete'] = f
let f = []
call add(f,{'word':'sample_exponential','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sample_exponential','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'sample_exponential','kind':'f','menu':'float(const float,const float,const float)'})
let c['sample_exponential'] = f
let f = []
call add(f,{'word':'sample_hemisphere','kind':'f','menu':'vector(const float,const vector2)'})
call add(f,{'word':'sample_hemisphere','kind':'f','menu':'vector(const vector2)'})
call add(f,{'word':'sample_hemisphere','kind':'f','menu':'vector(const vector,const float,const vector2)'})
call add(f,{'word':'sample_hemisphere','kind':'f','menu':'vector(const vector,const vector2)'})
let c['sample_hemisphere'] = f
let f = []
call add(f,{'word':'sample_hypersphere_cone','kind':'f','menu':'vector4(const vector4,const float,const vector4)'})
let c['sample_hypersphere_cone'] = f
let f = []
call add(f,{'word':'sample_hypersphere_uniform','kind':'f','menu':'vector4(const vector4)'})
let c['sample_hypersphere_uniform'] = f
let f = []
call add(f,{'word':'sample_lognormal','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'sample_lognormal','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
let c['sample_lognormal'] = f
let f = []
call add(f,{'word':'sample_lognormal_by_median','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'sample_lognormal_by_median','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
let c['sample_lognormal_by_median'] = f
let f = []
call add(f,{'word':'sample_normal','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'float(const float,const float,const float,const float,const float)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sample_normal','kind':'f','menu':'vector(const vector)'})
let c['sample_normal'] = f
let f = []
call add(f,{'word':'sample_orientation_cone','kind':'f','menu':'vector4(const vector4,const float,const vector)'})
let c['sample_orientation_cone'] = f
let f = []
call add(f,{'word':'sample_orientation_uniform','kind':'f','menu':'vector4(const vector)'})
let c['sample_orientation_uniform'] = f
let f = []
call add(f,{'word':'sample_sphere_cone','kind':'f','menu':'vector(const vector,const float,const vector)'})
let c['sample_sphere_cone'] = f
let f = []
call add(f,{'word':'sample_sphere_shell_uniform','kind':'f','menu':'vector(const vector,const float)'})
let c['sample_sphere_shell_uniform'] = f
let f = []
call add(f,{'word':'sample_sphere_uniform','kind':'f','menu':'vector(const vector)'})
let c['sample_sphere_uniform'] = f
let f = []
call add(f,{'word':'sampledisk','kind':'f','menu':'void(float,float,const float,const float)'})
call add(f,{'word':'sampledisk','kind':'f','menu':'float(float,const float,const float)'})
let c['sampledisk'] = f
let f = []
call add(f,{'word':'scale','kind':'f','menu':'void(export matrix2,const vector2)'})
call add(f,{'word':'scale','kind':'f','menu':'void(export matrix3,const vector)'})
call add(f,{'word':'scale','kind':'f','menu':'void(export matrix,const vector)'})
let c['scale'] = f
let f = []
call add(f,{'word':'select','kind':'f','menu':'matrix2(const int,const matrix2,const matrix2)'})
call add(f,{'word':'select','kind':'f','menu':'matrix3(const int,const matrix3,const matrix3)'})
call add(f,{'word':'select','kind':'f','menu':'matrix(const int,const matrix,const matrix)'})
call add(f,{'word':'select','kind':'f','menu':'bsdf(const int,const bsdf,const bsdf)'})
call add(f,{'word':'select','kind':'f','menu':'float(const int,const float,const float)'})
call add(f,{'word':'select','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'select','kind':'f','menu':'vector4(const int,const vector4,const vector4)'})
call add(f,{'word':'select','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'select','kind':'f','menu':'vector2(const int,const vector2,const vector2)'})
call add(f,{'word':'select','kind':'f','menu':'vector(const int,const vector,const vector)'})
call add(f,{'word':'select','kind':'f','menu':'matrix2[](const int,const matrix2[],const matrix2[])'})
call add(f,{'word':'select','kind':'f','menu':'matrix3[](const int,const matrix3[],const matrix3[])'})
call add(f,{'word':'select','kind':'f','menu':'matrix[](const int,const matrix[],const matrix[])'})
call add(f,{'word':'select','kind':'f','menu':'bsdf[](const int,const bsdf[],const bsdf[])'})
call add(f,{'word':'select','kind':'f','menu':'float[](const int,const float[],const float[])'})
call add(f,{'word':'select','kind':'f','menu':'int[](const int,const int[],const int[])'})
call add(f,{'word':'select','kind':'f','menu':'vector4[](const int,const vector4[],const vector4[])'})
call add(f,{'word':'select','kind':'f','menu':'string[](const int,const string[],const string[])'})
call add(f,{'word':'select','kind':'f','menu':'vector2[](const int,const vector2[],const vector2[])'})
call add(f,{'word':'select','kind':'f','menu':'vector[](const int,const vector[],const vector[])'})
let c['select'] = f
let f = []
call add(f,{'word':'sensor_panorama_create','kind':'f','menu':'int(const float,const vector,const int,const float,const float,const string,const string,const string,const int)'})
let c['sensor_panorama_create'] = f
let f = []
call add(f,{'word':'sensor_panorama_getcolor','kind':'f','menu':'vector(const int,const vector)'})
let c['sensor_panorama_getcolor'] = f
let f = []
call add(f,{'word':'sensor_panorama_getcone','kind':'f','menu':'void(const int,const vector,const float,const vector,const vector,const float,const float,float,vector,vector,float)'})
call add(f,{'word':'sensor_panorama_getcone','kind':'f','menu':'float(const int,const vector,const float,const vector,const vector,const float,const float,vector,vector,float)'})
let c['sensor_panorama_getcone'] = f
let f = []
call add(f,{'word':'sensor_panorama_getdepth','kind':'f','menu':'float(const int,const vector)'})
let c['sensor_panorama_getdepth'] = f
let f = []
call add(f,{'word':'sensor_save','kind':'f','menu':'int(const int,const string,const string)'})
let c['sensor_save'] = f
let f = []
call add(f,{'word':'serialize','kind':'f','menu':'float[](const matrix2[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const matrix3[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const matrix[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const vector4[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const vector2[])'})
call add(f,{'word':'serialize','kind':'f','menu':'float[](const vector[])'})
let c['serialize'] = f
let f = []
call add(f,{'word':'set','kind':'f','menu':'matrix2(const matrix2)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const float,const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const int)'})
call add(f,{'word':'set','kind':'f','menu':'matrix2(const vector2,const vector2)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const matrix2)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const float,const float,const float,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const int)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const vector,const vector,const vector)'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix3(const vector[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const matrix2)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const int)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const vector4,const vector4,const vector4,const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix(const vector4[])'})
call add(f,{'word':'set','kind':'f','menu':'bsdf(const bsdf)'})
call add(f,{'word':'set','kind':'f','menu':'float(const float)'})
call add(f,{'word':'set','kind':'f','menu':'float(const int)'})
call add(f,{'word':'set','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'set','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'int(const float)'})
call add(f,{'word':'set','kind':'f','menu':'int(const int)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const float,const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const int)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const vector2)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const vector)'})
call add(f,{'word':'set','kind':'f','menu':'vector4(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'string(const string)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const int)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'set','kind':'f','menu':'vector2(const vector)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const float,const float,const float)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const int)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const vector2)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'set','kind':'f','menu':'vector(const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix2[](const matrix2[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix2[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix3[](const matrix3[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix3[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix[](const matrix[])'})
call add(f,{'word':'set','kind':'f','menu':'matrix[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'bsdf[](const bsdf[])'})
call add(f,{'word':'set','kind':'f','menu':'float[](const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const float)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const vector4)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const vector)'})
call add(f,{'word':'set','kind':'f','menu':'float[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'float[](const int[])'})
call add(f,{'word':'set','kind':'f','menu':'int[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'int[](const int[])'})
call add(f,{'word':'set','kind':'f','menu':'vector4[](const matrix)'})
call add(f,{'word':'set','kind':'f','menu':'vector4[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'vector4[](const vector4[])'})
call add(f,{'word':'set','kind':'f','menu':'string[](const string[])'})
call add(f,{'word':'set','kind':'f','menu':'vector2[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'vector2[](const vector2[])'})
call add(f,{'word':'set','kind':'f','menu':'vector[](const matrix3)'})
call add(f,{'word':'set','kind':'f','menu':'vector[](const float[])'})
call add(f,{'word':'set','kind':'f','menu':'vector[](const vector[])'})
let c['set'] = f
let f = []
call add(f,{'word':'setagentclipnames','kind':'f','menu':'void(const int,const int,const string[])'})
let c['setagentclipnames'] = f
let f = []
call add(f,{'word':'setagentclips','kind':'f','menu':'int(const int,const int,const string[],const float[],const float[],const string[],const int[],const int[],const float[],const int[])'})
let c['setagentclips'] = f
let f = []
call add(f,{'word':'setagentcliptimes','kind':'f','menu':'void(const int,const int,const float[])'})
let c['setagentcliptimes'] = f
let f = []
call add(f,{'word':'setagentclipweights','kind':'f','menu':'void(const int,const int,const float[])'})
let c['setagentclipweights'] = f
let f = []
call add(f,{'word':'setagentcollisionlayer','kind':'f','menu':'void(const int,const int,const string)'})
let c['setagentcollisionlayer'] = f
let f = []
call add(f,{'word':'setagentcurrentlayer','kind':'f','menu':'void(const int,const int,const string)'})
let c['setagentcurrentlayer'] = f
let f = []
call add(f,{'word':'setagentlocaltransform','kind':'f','menu':'int(const int,const int,const matrix,const int)'})
let c['setagentlocaltransform'] = f
let f = []
call add(f,{'word':'setagentlocaltransforms','kind':'f','menu':'void(const int,const int,const matrix[])'})
let c['setagentlocaltransforms'] = f
let f = []
call add(f,{'word':'setagentworldtransform','kind':'f','menu':'int(const int,const int,const matrix,const int)'})
let c['setagentworldtransform'] = f
let f = []
call add(f,{'word':'setagentworldtransforms','kind':'f','menu':'void(const int,const int,const matrix[])'})
let c['setagentworldtransforms'] = f
let f = []
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix2)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix2,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix3)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix3,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const float)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const float,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const int)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const int,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector4)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector4,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const string,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector2)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector2,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector,const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix2[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix2[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix3[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix3[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const matrix[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const float[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const float[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const int[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const int[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector4[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector4[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const string[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const string[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector2[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector2[],const string)'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector[])'})
call add(f,{'word':'setattrib','kind':'f','menu':'int(const int,const string,const string,const int,const int,const vector[],const string)'})
let c['setattrib'] = f
let f = []
call add(f,{'word':'setattribtypeinfo','kind':'f','menu':'int(const int,const string,const string,const string)'})
let c['setattribtypeinfo'] = f
let f = []
call add(f,{'word':'setcomp','kind':'f','menu':'void(export matrix2,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'matrix2(export matrix2[],const matrix2,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export matrix3,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'matrix3(export matrix3[],const matrix3,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export matrix,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'matrix(export matrix[],const matrix,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'bsdf(export bsdf[],const bsdf,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export matrix2,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export matrix3,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export matrix,const float,const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export vector4,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export vector2,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export vector,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'float(export float[],const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'int(export int[],const int,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export vector4,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'vector4(export vector4[],const vector4,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'string(export string[],const string,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export vector2,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'vector2(export vector2[],const vector2,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'void(export vector,const float,const int)'})
call add(f,{'word':'setcomp','kind':'f','menu':'vector(export vector[],const vector,const int)'})
let c['setcomp'] = f
let f = []
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix2)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix2,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix3)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix3,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const float)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const float,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector4)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector4,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector2)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector2,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector,const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix2[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix2[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix3[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix3[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const matrix[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const float[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const float[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const int[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const int[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector4[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector4[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const string[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const string[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector2[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector2[],const string)'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector[])'})
call add(f,{'word':'setdetailattrib','kind':'f','menu':'int(const int,const string,const vector[],const string)'})
let c['setdetailattrib'] = f
let f = []
call add(f,{'word':'setedgegroup','kind':'f','menu':'int(const int,const string,const int,const int,const int)'})
let c['setedgegroup'] = f
let f = []
let c['setelem'] = f
let f = []
call add(f,{'word':'setpackedtransform','kind':'f','menu':'void(const int,const int,const matrix)'})
let c['setpackedtransform'] = f
let f = []
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const float)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const float,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector4)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector4,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const string,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector2)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector2,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector,const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const matrix[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const float[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const float[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const int[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const int[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector4[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector4[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const string[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const string[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector2[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector2[],const string)'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector[])'})
call add(f,{'word':'setpointattrib','kind':'f','menu':'int(const int,const string,const int,const vector[],const string)'})
let c['setpointattrib'] = f
let f = []
call add(f,{'word':'setpointgroup','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setpointgroup','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
let c['setpointgroup'] = f
let f = []
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const float)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const float,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector4)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector4,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const string,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector2)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector2,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector,const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix2[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix3[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const matrix[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const float[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const float[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const int[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const int[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector4[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector4[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const string[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const string[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector2[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector2[],const string)'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector[])'})
call add(f,{'word':'setprimattrib','kind':'f','menu':'int(const int,const string,const int,const vector[],const string)'})
let c['setprimattrib'] = f
let f = []
call add(f,{'word':'setprimgroup','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setprimgroup','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
let c['setprimgroup'] = f
let f = []
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix2)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix2,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix3)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix3,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const float)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const float,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector4)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector4,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const string,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector2)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector2,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector,const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix2[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix2[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix3[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix3[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const matrix[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const float[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const float[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const int[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const int[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector4[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector4[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const string[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const string[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector2[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector2[],const string)'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector[])'})
call add(f,{'word':'setprimintrinsic','kind':'f','menu':'int(const int,const string,const int,const vector[],const string)'})
let c['setprimintrinsic'] = f
let f = []
call add(f,{'word':'setprimvertex','kind':'f','menu':'int(const int,const int,const int,const int)'})
let c['setprimvertex'] = f
let f = []
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix2)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix2,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix3)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix3,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const float)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const float,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const int)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const int,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector4)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector4,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector2)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector2,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector,const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix2[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix2[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix3[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix3[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const matrix[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const float[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const float[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const int[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const int[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector4[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector4[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const string[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector2[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector2[],const string)'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector[])'})
call add(f,{'word':'setvertexattrib','kind':'f','menu':'int(const int,const string,const int,const int,const vector[],const string)'})
let c['setvertexattrib'] = f
let f = []
call add(f,{'word':'setvertexgroup','kind':'f','menu':'int(const int,const string,const int,const int,const int)'})
call add(f,{'word':'setvertexgroup','kind':'f','menu':'int(const int,const string,const int,const int,const int,const string)'})
let c['setvertexgroup'] = f
let f = []
call add(f,{'word':'setvertexpoint','kind':'f','menu':'int(const int,const int,const int,const int)'})
let c['setvertexpoint'] = f
let f = []
call add(f,{'word':'shadowmap','kind':'f','menu':'float(const string,const vector,const float,const float,const float)'})
call add(f,{'word':'shadowmap','kind':'f','menu':'vector(const string,const vector,const float,const float,const float)'})
call add(f,{'word':'shadowmap','kind':'f','menu':'vector(const string,const vector,const vector,const vector,const vector,const float,const float,const float)'})
let c['shadowmap'] = f
let f = []
call add(f,{'word':'shl','kind':'f','menu':'int(const int,const int)'})
let c['shl'] = f
let f = []
call add(f,{'word':'shr','kind':'f','menu':'int(const int,const int)'})
let c['shr'] = f
let f = []
call add(f,{'word':'shrz','kind':'f','menu':'int(const int,const int)'})
let c['shrz'] = f
let f = []
call add(f,{'word':'sign','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sign','kind':'f','menu':'int(const int)'})
call add(f,{'word':'sign','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sign','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sign','kind':'f','menu':'vector(const vector)'})
let c['sign'] = f
let f = []
call add(f,{'word':'sin','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sin','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sin','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sin','kind':'f','menu':'vector(const vector)'})
let c['sin'] = f
let f = []
call add(f,{'word':'sinh','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sinh','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sinh','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sinh','kind':'f','menu':'vector(const vector)'})
let c['sinh'] = f
let f = []
call add(f,{'word':'sleep','kind':'f','menu':'void(const int)'})
let c['sleep'] = f
let f = []
call add(f,{'word':'slerp','kind':'f','menu':'vector4(const vector4,const vector4,const float)'})
call add(f,{'word':'slerp','kind':'f','menu':'vector4(const vector4[],const float[])'})
let c['slerp'] = f
let f = []
call add(f,{'word':'slice','kind':'f','menu':'string(const string,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string(const string,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string(const string,const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix2[](const matrix2[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix2[](const matrix2[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix2[](const matrix2[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix3[](const matrix3[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix3[](const matrix3[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix3[](const matrix3[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix[](const matrix[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix[](const matrix[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'matrix[](const matrix[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'float[](const float[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'float[](const float[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'float[](const float[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'int[](const int[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'int[](const int[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'int[](const int[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector4[](const vector4[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector4[](const vector4[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector4[](const vector4[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string[](const string[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string[](const string[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'string[](const string[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector2[](const vector2[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector2[](const vector2[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector2[](const vector2[],const int,const int,const int,const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector[](const vector[],const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector[](const vector[],const int,const int,const int)'})
call add(f,{'word':'slice','kind':'f','menu':'vector[](const vector[],const int,const int,const int,const int,const int,const int)'})
let c['slice'] = f
let f = []
call add(f,{'word':'slideframe','kind':'f','menu':'vector(const vector,const vector,const vector,const vector,const vector)'})
let c['slideframe'] = f
let f = []
call add(f,{'word':'smooth','kind':'f','menu':'float(const float,const float,const float)'})
call add(f,{'word':'smooth','kind':'f','menu':'float(const float,const float,const float,const float)'})
let c['smooth'] = f
let f = []
call add(f,{'word':'smoothrotation','kind':'f','menu':'vector(const int,const vector,const vector)'})
let c['smoothrotation'] = f
let f = []
call add(f,{'word':'snoise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'snoise','kind':'f','menu':'float(const vector,const int,const float,const float)'})
call add(f,{'word':'snoise','kind':'f','menu':'float(const vector,const int,const int,const int)'})
call add(f,{'word':'snoise','kind':'f','menu':'float(const vector,const int,const int,const int,const int,const float,const float)'})
call add(f,{'word':'snoise','kind':'f','menu':'vector(const vector)'})
call add(f,{'word':'snoise','kind':'f','menu':'vector(const vector,const int,const float,const float)'})
call add(f,{'word':'snoise','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
call add(f,{'word':'snoise','kind':'f','menu':'vector(const vector,const int,const int,const int,const int,const float,const float)'})
let c['snoise'] = f
let f = []
call add(f,{'word':'solid_angle','kind':'f','menu':'float(const bsdf,const int)'})
let c['solid_angle'] = f
let f = []
call add(f,{'word':'solveconstraint','kind':'f','menu':'vector[](const float[],const vector,const float,const matrix,const vector[])'})
let c['solveconstraint'] = f
let f = []
call add(f,{'word':'solvecubic','kind':'f','menu':'int(const float,const float,const float,const float,float,float,float)'})
call add(f,{'word':'solvecubic','kind':'f','menu':'int(const float,const float,const float,const float,vector2,vector2,vector2)'})
let c['solvecubic'] = f
let f = []
call add(f,{'word':'solvecurve','kind':'f','menu':'vector[](const string,const float[],const int,const int,const vector,const int,const matrix)'})
call add(f,{'word':'solvecurve','kind':'f','menu':'vector[](const float[],const int,const int,const vector,const vector[],const vector[])'})
let c['solvecurve'] = f
let f = []
call add(f,{'word':'solvefbik','kind':'f','menu':'matrix[](const matrix[],const int[],const int[],const matrix[],const int)'})
call add(f,{'word':'solvefbik','kind':'f','menu':'matrix[](const matrix[],const int[],const int[],const matrix[],const int,const float,const int)'})
call add(f,{'word':'solvefbik','kind':'f','menu':'matrix[](const matrix[],const int[],const int[],const matrix[],const int,const float,const int,const float[],const int[],const int[])'})
call add(f,{'word':'solvefbik','kind':'f','menu':'matrix[](const matrix[],const int[],const int[],const matrix[],const int,const float,const int,const float[],const int[],const int[],const matrix[],const vector4[],const vector[])'})
let c['solvefbik'] = f
let f = []
call add(f,{'word':'solveik','kind':'f','menu':'vector[](const float[],const vector,const vector,const float,const int,const float,const int,const float,const matrix,const vector[])'})
let c['solveik'] = f
let f = []
call add(f,{'word':'solvepoly','kind':'f','menu':'int(const float[],float[])'})
call add(f,{'word':'solvepoly','kind':'f','menu':'int(const float[],float[],const int)'})
let c['solvepoly'] = f
let f = []
call add(f,{'word':'solvequadratic','kind':'f','menu':'int(const float,const float,const float,float,float)'})
call add(f,{'word':'solvequadratic','kind':'f','menu':'int(const float,const float,const float,vector2,vector2)'})
let c['solvequadratic'] = f
let f = []
call add(f,{'word':'sort','kind':'f','menu':'float[](const float[])'})
call add(f,{'word':'sort','kind':'f','menu':'int[](const int[])'})
call add(f,{'word':'sort','kind':'f','menu':'string[](const string[])'})
let c['sort'] = f
let f = []
call add(f,{'word':'specular','kind':'f','menu':'bsdf(const vector)'})
let c['specular'] = f
let f = []
call add(f,{'word':'specularBRDF','kind':'f','menu':'float(const vector,const vector,const vector,const float)'})
let c['specularBRDF'] = f
let f = []
call add(f,{'word':'spline','kind':'f','menu':'float(const string,const float,const float)'})
call add(f,{'word':'spline','kind':'f','menu':'float(const string,const float,const float[])'})
call add(f,{'word':'spline','kind':'f','menu':'float(const string[],const float,const float[])'})
call add(f,{'word':'spline','kind':'f','menu':'float(const string[],const float,const float[],const float[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector4(const string,const float,const vector4)'})
call add(f,{'word':'spline','kind':'f','menu':'vector4(const string,const float,const vector4[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector4(const string[],const float,const vector4[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector4(const string[],const float,const vector4[],const float[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector(const string,const float,const vector)'})
call add(f,{'word':'spline','kind':'f','menu':'vector(const string,const float,const vector[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector(const string[],const float,const vector[])'})
call add(f,{'word':'spline','kind':'f','menu':'vector(const string[],const float,const vector[],const float[])'})
let c['spline'] = f
let f = []
call add(f,{'word':'split','kind':'f','menu':'string[](const string)'})
call add(f,{'word':'split','kind':'f','menu':'string[](const string,const string)'})
call add(f,{'word':'split','kind':'f','menu':'string[](const string,const string,const int)'})
let c['split'] = f
let f = []
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[],const int,const int,const float,const float[])'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[],const int,const int,const float,const float[])'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[],const int,const int,const float)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[],const int,const int,const float)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[],const int,const int)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[],const int,const int)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[],const int)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[],const int)'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'void(bsdf[],const bsdf,float[])'})
call add(f,{'word':'split_bsdf','kind':'f','menu':'bsdf[](const bsdf,float[])'})
let c['split_bsdf'] = f
let f = []
call add(f,{'word':'splitpath','kind':'f','menu':'void(const string,string,string)'})
call add(f,{'word':'splitpath','kind':'f','menu':'string(const string,string)'})
let c['splitpath'] = f
let f = []
call add(f,{'word':'sprintf','kind':'f','menu':'string(const string)'})
let c['sprintf'] = f
let f = []
call add(f,{'word':'sqrt','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sqrt','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'sqrt','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'sqrt','kind':'f','menu':'vector(const vector)'})
let c['sqrt'] = f
let f = []
call add(f,{'word':'sssapprox','kind':'f','menu':'bsdf(const vector,const float,const float,const float)'})
let c['sssapprox'] = f
let f = []
call add(f,{'word':'startswith','kind':'f','menu':'int(const string,const string)'})
let c['startswith'] = f
let f = []
call add(f,{'word':'strip','kind':'f','menu':'string(const string)'})
call add(f,{'word':'strip','kind':'f','menu':'string(const string,const string)'})
let c['strip'] = f
let f = []
call add(f,{'word':'strlen','kind':'f','menu':'int(const string)'})
let c['strlen'] = f
let f = []
let c['struct'] = f
let f = []
let c['sub'] = f
let f = []
call add(f,{'word':'sum','kind':'f','menu':'float(const float)'})
call add(f,{'word':'sum','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'sum','kind':'f','menu':'float(const vector2)'})
call add(f,{'word':'sum','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'sum','kind':'f','menu':'float(const float[])'})
call add(f,{'word':'sum','kind':'f','menu':'int(const int)'})
call add(f,{'word':'sum','kind':'f','menu':'int(const int[])'})
call add(f,{'word':'sum','kind':'f','menu':'vector4(const vector4[])'})
call add(f,{'word':'sum','kind':'f','menu':'vector2(const vector2[])'})
call add(f,{'word':'sum','kind':'f','menu':'vector(const vector[])'})
let c['sum'] = f
let f = []
call add(f,{'word':'surfacedist','kind':'f','menu':'float(const int,const string,const string,const int,const float,int,const string)'})
call add(f,{'word':'surfacedist','kind':'f','menu':'float(const string,const string,const string,const int,const float,int,const string)'})
let c['surfacedist'] = f
let f = []
let c['swap'] = f
let f = []
call add(f,{'word':'switch','kind':'f','menu':'bsdf(const bsdf,const bsdf)'})
let c['switch'] = f
let f = []
call add(f,{'word':'swizzle','kind':'f','menu':'vector4(const vector4,const int,const int,const int,const int)'})
call add(f,{'word':'swizzle','kind':'f','menu':'vector2(const vector2,const int,const int)'})
call add(f,{'word':'swizzle','kind':'f','menu':'vector(const vector,const int,const int,const int)'})
let c['swizzle'] = f
let f = []
call add(f,{'word':'tan','kind':'f','menu':'float(const float)'})
call add(f,{'word':'tan','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'tan','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'tan','kind':'f','menu':'vector(const vector)'})
let c['tan'] = f
let f = []
call add(f,{'word':'tanh','kind':'f','menu':'float(const float)'})
call add(f,{'word':'tanh','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'tanh','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'tanh','kind':'f','menu':'vector(const vector)'})
let c['tanh'] = f
let f = []
call add(f,{'word':'tet_adjacent','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'tet_adjacent','kind':'f','menu':'int(const string,const int,const int)'})
let c['tet_adjacent'] = f
let f = []
call add(f,{'word':'tet_faceindex','kind':'f','menu':'int(const int,const int)'})
let c['tet_faceindex'] = f
let f = []
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export matrix3)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export matrix)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export float)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export int)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export vector4)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export string)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export vector)'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export int[])'})
call add(f,{'word':'teximport','kind':'f','menu':'int(const string,const string,export string[])'})
let c['teximport'] = f
let f = []
call add(f,{'word':'texprintf','kind':'f','menu':'string(const float,const float,const string)'})
let c['texprintf'] = f
let f = []
call add(f,{'word':'texture','kind':'f','menu':'vector4(const string,const float,const float)'})
call add(f,{'word':'texture','kind':'f','menu':'vector4(const string,const float,const float,const float,const float,const float,const float,const float,const float)'})
call add(f,{'word':'texture','kind':'f','menu':'vector(const string,const float,const float)'})
call add(f,{'word':'texture','kind':'f','menu':'vector(const string,const float,const float,const float,const float,const float,const float,const float,const float)'})
let c['texture'] = f
let f = []
call add(f,{'word':'texture3d','kind':'f','menu':'matrix3(const string,const string,const vector)'})
call add(f,{'word':'texture3d','kind':'f','menu':'matrix(const string,const string,const vector)'})
call add(f,{'word':'texture3d','kind':'f','menu':'float(const string,const string,const vector)'})
call add(f,{'word':'texture3d','kind':'f','menu':'vector4(const string,const string,const vector)'})
call add(f,{'word':'texture3d','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['texture3d'] = f
let f = []
call add(f,{'word':'texture3dBox','kind':'f','menu':'void(const string,const string,vector,vector)'})
call add(f,{'word':'texture3dBox','kind':'f','menu':'vector(const string,const string,vector)'})
let c['texture3dBox'] = f
let f = []
call add(f,{'word':'titlecase','kind':'f','menu':'string(const string)'})
let c['titlecase'] = f
let f = []
call add(f,{'word':'toNDC','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'toNDC','kind':'f','menu':'vector(const vector)'})
let c['toNDC'] = f
let f = []
call add(f,{'word':'tolower','kind':'f','menu':'string(const string)'})
let c['tolower'] = f
let f = []
call add(f,{'word':'toupper','kind':'f','menu':'string(const string)'})
let c['toupper'] = f
let f = []
call add(f,{'word':'translate','kind':'f','menu':'void(export matrix,const vector4)'})
call add(f,{'word':'translate','kind':'f','menu':'void(export matrix,const vector)'})
let c['translate'] = f
let f = []
call add(f,{'word':'translucent','kind':'f','menu':'bsdf(const vector,const vector)'})
let c['translucent'] = f
let f = []
call add(f,{'word':'transpose','kind':'f','menu':'void(export matrix2)'})
call add(f,{'word':'transpose','kind':'f','menu':'matrix2(const matrix2)'})
call add(f,{'word':'transpose','kind':'f','menu':'void(export matrix3)'})
call add(f,{'word':'transpose','kind':'f','menu':'matrix3(const matrix3)'})
call add(f,{'word':'transpose','kind':'f','menu':'void(export matrix)'})
call add(f,{'word':'transpose','kind':'f','menu':'matrix(const matrix)'})
let c['transpose'] = f
let f = []
call add(f,{'word':'trunc','kind':'f','menu':'float(const float)'})
call add(f,{'word':'trunc','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'trunc','kind':'f','menu':'vector2(const vector2)'})
call add(f,{'word':'trunc','kind':'f','menu':'vector(const vector)'})
let c['trunc'] = f
let f = []
call add(f,{'word':'tw_nspace','kind':'f','menu':'vector(const vector)'})
let c['tw_nspace'] = f
let f = []
call add(f,{'word':'tw_space','kind':'f','menu':'matrix()'})
call add(f,{'word':'tw_space','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'tw_space','kind':'f','menu':'vector(const vector)'})
let c['tw_space'] = f
let f = []
call add(f,{'word':'tw_vspace','kind':'f','menu':'vector(const vector)'})
let c['tw_vspace'] = f
let f = []
call add(f,{'word':'uniqueval','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'uniqueval','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'uniqueval','kind':'f','menu':'string(const int,const string,const string,const int)'})
call add(f,{'word':'uniqueval','kind':'f','menu':'string(const string,const string,const string,const int)'})
let c['uniqueval'] = f
let f = []
call add(f,{'word':'uniquevals','kind':'f','menu':'int[](const int,const string,const string)'})
call add(f,{'word':'uniquevals','kind':'f','menu':'int[](const string,const string,const string)'})
call add(f,{'word':'uniquevals','kind':'f','menu':'string[](const int,const string,const string)'})
call add(f,{'word':'uniquevals','kind':'f','menu':'string[](const string,const string,const string)'})
let c['uniquevals'] = f
let f = []
call add(f,{'word':'unpack_intfromsafefloat','kind':'f','menu':'int(const float)'})
let c['unpack_intfromsafefloat'] = f
let f = []
call add(f,{'word':'unserialize','kind':'f','menu':'matrix2[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'matrix3[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'matrix[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'vector4[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'vector2[](const float[])'})
call add(f,{'word':'unserialize','kind':'f','menu':'vector[](const float[])'})
let c['unserialize'] = f
let f = []
call add(f,{'word':'upush','kind':'f','menu':'void(export matrix2[],const matrix2)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export matrix3[],const matrix3)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export matrix[],const matrix)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export bsdf[],const bsdf)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export float[],const float)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export int[],const int)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export vector4[],const vector4)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export string[],const string)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export vector2[],const vector2)'})
call add(f,{'word':'upush','kind':'f','menu':'void(export vector[],const vector)'})
let c['upush'] = f
let f = []
let c['urandom'] = f
let f = []
call add(f,{'word':'usd_addtransform','kind':'f','menu':'int(const int,const string,const string,const matrix)'})
let c['usd_addtransform'] = f
let f = []
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector(const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector(const int,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector(const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector(const string,const string,const string,const int)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix2[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix3[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'matrix[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'float[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'int[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector4[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'string[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector2[](const string,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector[](const int,const string,const string)'})
call add(f,{'word':'usd_attrib','kind':'f','menu':'vector[](const string,const string,const string)'})
let c['usd_attrib'] = f
let f = []
call add(f,{'word':'usd_attriblen','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_attriblen','kind':'f','menu':'int(const string,const string,const string)'})
let c['usd_attriblen'] = f
let f = []
call add(f,{'word':'usd_attribnames','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'usd_attribnames','kind':'f','menu':'string[](const string,const string)'})
let c['usd_attribnames'] = f
let f = []
call add(f,{'word':'usd_attribsize','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_attribsize','kind':'f','menu':'int(const string,const string,const string)'})
let c['usd_attribsize'] = f
let f = []
call add(f,{'word':'usd_attribtypename','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'usd_attribtypename','kind':'f','menu':'string(const string,const string,const string)'})
let c['usd_attribtypename'] = f
let f = []
call add(f,{'word':'usd_cleartransformorder','kind':'f','menu':'int(const int,const string)'})
let c['usd_cleartransformorder'] = f
let f = []
call add(f,{'word':'usd_drawmode','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_drawmode','kind':'f','menu':'string(const string,const string)'})
let c['usd_drawmode'] = f
let f = []
call add(f,{'word':'usd_isactive','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'usd_isactive','kind':'f','menu':'int(const string,const string)'})
let c['usd_isactive'] = f
let f = []
call add(f,{'word':'usd_isarray','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_isarray','kind':'f','menu':'int(const string,const string,const string)'})
let c['usd_isarray'] = f
let f = []
call add(f,{'word':'usd_isattrib','kind':'f','menu':'int(const int,const string,const string)'})
call add(f,{'word':'usd_isattrib','kind':'f','menu':'int(const string,const string,const string)'})
let c['usd_isattrib'] = f
let f = []
call add(f,{'word':'usd_isprim','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'usd_isprim','kind':'f','menu':'int(const string,const string)'})
let c['usd_isprim'] = f
let f = []
call add(f,{'word':'usd_isstage','kind':'f','menu':'int(const int)'})
call add(f,{'word':'usd_isstage','kind':'f','menu':'int(const string)'})
let c['usd_isstage'] = f
let f = []
call add(f,{'word':'usd_istransformreset','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'usd_istransformreset','kind':'f','menu':'int(const string,const string)'})
let c['usd_istransformreset'] = f
let f = []
call add(f,{'word':'usd_isvisible','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'usd_isvisible','kind':'f','menu':'int(const string,const string)'})
let c['usd_isvisible'] = f
let f = []
call add(f,{'word':'usd_kind','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_kind','kind':'f','menu':'string(const string,const string)'})
let c['usd_kind'] = f
let f = []
call add(f,{'word':'usd_localtransform','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'usd_localtransform','kind':'f','menu':'matrix(const string,const string)'})
let c['usd_localtransform'] = f
let f = []
call add(f,{'word':'usd_name','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_name','kind':'f','menu':'string(const string,const string)'})
let c['usd_name'] = f
let f = []
call add(f,{'word':'usd_parentpath','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_parentpath','kind':'f','menu':'string(const string,const string)'})
let c['usd_parentpath'] = f
let f = []
call add(f,{'word':'usd_purpose','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_purpose','kind':'f','menu':'string(const string,const string)'})
let c['usd_purpose'] = f
let f = []
call add(f,{'word':'usd_setactive','kind':'f','menu':'int(const int,const string,const int)'})
let c['usd_setactive'] = f
let f = []
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix2)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix3)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const float)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const int)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector4)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const string)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector2)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector)'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix2[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix3[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const matrix[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const float[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const int[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector4[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const string[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector2[])'})
call add(f,{'word':'usd_setattrib','kind':'f','menu':'int(const int,const string,const string,const vector[])'})
let c['usd_setattrib'] = f
let f = []
call add(f,{'word':'usd_setdrawmode','kind':'f','menu':'int(const int,const string,const string)'})
let c['usd_setdrawmode'] = f
let f = []
call add(f,{'word':'usd_setkind','kind':'f','menu':'int(const int,const string,const string)'})
let c['usd_setkind'] = f
let f = []
call add(f,{'word':'usd_setpurpose','kind':'f','menu':'int(const int,const string,const string)'})
let c['usd_setpurpose'] = f
let f = []
call add(f,{'word':'usd_setvariantselection','kind':'f','menu':'int(const int,const string,const string,const string)'})
let c['usd_setvariantselection'] = f
let f = []
call add(f,{'word':'usd_setvisible','kind':'f','menu':'int(const int,const string,const int)'})
let c['usd_setvisible'] = f
let f = []
call add(f,{'word':'usd_transformorder','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'usd_transformorder','kind':'f','menu':'string[](const string,const string)'})
let c['usd_transformorder'] = f
let f = []
call add(f,{'word':'usd_typename','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'usd_typename','kind':'f','menu':'string(const string,const string)'})
let c['usd_typename'] = f
let f = []
call add(f,{'word':'usd_variants','kind':'f','menu':'string[](const int,const string,const string)'})
call add(f,{'word':'usd_variants','kind':'f','menu':'string[](const string,const string,const string)'})
let c['usd_variants'] = f
let f = []
call add(f,{'word':'usd_variantselection','kind':'f','menu':'string(const int,const string,const string)'})
call add(f,{'word':'usd_variantselection','kind':'f','menu':'string(const string,const string,const string)'})
let c['usd_variantselection'] = f
let f = []
call add(f,{'word':'usd_variantsets','kind':'f','menu':'string[](const int,const string)'})
call add(f,{'word':'usd_variantsets','kind':'f','menu':'string[](const string,const string)'})
let c['usd_variantsets'] = f
let f = []
call add(f,{'word':'usd_worldtransform','kind':'f','menu':'matrix(const int,const string)'})
call add(f,{'word':'usd_worldtransform','kind':'f','menu':'matrix(const string,const string)'})
let c['usd_worldtransform'] = f
let f = []
call add(f,{'word':'uvdist','kind':'f','menu':'float(const int,const string,const string,const vector,int,vector)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const int,const string,const string,const vector,int,vector,const float)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const int,const string,const vector,int,vector)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const int,const string,const vector,int,vector,const float)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const string,const string,const string,const vector,int,vector)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const string,const string,const string,const vector,int,vector,const float)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const string,const string,const vector,int,vector)'})
call add(f,{'word':'uvdist','kind':'f','menu':'float(const string,const string,const vector,int,vector,const float)'})
let c['uvdist'] = f
let f = []
call add(f,{'word':'uvintersect','kind':'f','menu':'int(const int,const string,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'uvintersect','kind':'f','menu':'int(const int,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'uvintersect','kind':'f','menu':'int(const string,const string,const string,const vector,const vector,vector,vector)'})
call add(f,{'word':'uvintersect','kind':'f','menu':'int(const string,const string,const vector,const vector,vector,vector)'})
let c['uvintersect'] = f
let f = []
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector(const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector(const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector(const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector(const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix2[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix3[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'matrix[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'float[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'int[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector4[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector2[](const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector[](const int,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector[](const int,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector[](const string,const string,const string,const string,const vector)'})
call add(f,{'word':'uvsample','kind':'f','menu':'vector[](const string,const string,const string,const vector)'})
let c['uvsample'] = f
let f = []
call add(f,{'word':'uvunwrap','kind':'f','menu':'int(const string,const float,const float,const float,vector,vector)'})
call add(f,{'word':'uvunwrap','kind':'f','menu':'int(const string,const float,const float,const float,vector,vector,vector,vector)'})
let c['uvunwrap'] = f
let f = []
call add(f,{'word':'variance','kind':'f','menu':'float(const float,float,int)'})
let c['variance'] = f
let f = []
call add(f,{'word':'vertex','kind':'f','menu':'matrix2(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector(const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector(const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector(const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector(const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix2[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix3[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'matrix[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'float[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'int[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector4[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'string[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector2[](const string,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector[](const int,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector[](const int,const string,const int,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector[](const string,const string,const int)'})
call add(f,{'word':'vertex','kind':'f','menu':'vector[](const string,const string,const int,const int)'})
let c['vertex'] = f
let f = []
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix2(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix2(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix3(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix3(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'float(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'float(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'int(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'int(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector4(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector4(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'string(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'string(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector2(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector2(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector(const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector(const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix2[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix2[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix3[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix3[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'matrix[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'float[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'float[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'int[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'int[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector4[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector4[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'string[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'string[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector2[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector2[](const string,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector[](const int,const string,const int,int)'})
call add(f,{'word':'vertexattrib','kind':'f','menu':'vector[](const string,const string,const int,int)'})
let c['vertexattrib'] = f
let f = []
call add(f,{'word':'vertexattribsize','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'vertexattribsize','kind':'f','menu':'int(const string,const string)'})
let c['vertexattribsize'] = f
let f = []
call add(f,{'word':'vertexattribtype','kind':'f','menu':'int(const int,const string)'})
call add(f,{'word':'vertexattribtype','kind':'f','menu':'int(const string,const string)'})
let c['vertexattribtype'] = f
let f = []
call add(f,{'word':'vertexattribtypeinfo','kind':'f','menu':'string(const int,const string)'})
call add(f,{'word':'vertexattribtypeinfo','kind':'f','menu':'string(const string,const string)'})
let c['vertexattribtypeinfo'] = f
let f = []
call add(f,{'word':'vertexhedge','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexhedge','kind':'f','menu':'int(const string,const int)'})
let c['vertexhedge'] = f
let f = []
call add(f,{'word':'vertexindex','kind':'f','menu':'int(const int,const int,const int)'})
call add(f,{'word':'vertexindex','kind':'f','menu':'int(const string,const int,const int)'})
let c['vertexindex'] = f
let f = []
call add(f,{'word':'vertexnext','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexnext','kind':'f','menu':'int(const string,const int)'})
let c['vertexnext'] = f
let f = []
call add(f,{'word':'vertexpoint','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexpoint','kind':'f','menu':'int(const string,const int)'})
let c['vertexpoint'] = f
let f = []
call add(f,{'word':'vertexprev','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexprev','kind':'f','menu':'int(const string,const int)'})
let c['vertexprev'] = f
let f = []
call add(f,{'word':'vertexprim','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexprim','kind':'f','menu':'int(const string,const int)'})
let c['vertexprim'] = f
let f = []
call add(f,{'word':'vertexprimindex','kind':'f','menu':'int(const int,const int)'})
call add(f,{'word':'vertexprimindex','kind':'f','menu':'int(const string,const int)'})
let c['vertexprimindex'] = f
let f = []
call add(f,{'word':'vnoise','kind':'f','menu':'void(const float,const float,const float,const float,int,float,float,float,float,float,float)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const float,const float,const float,const float,float,float,float,float,float,float)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const float,const float,const float,const float,int,float,float,float,float,float,float,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const float,const float,const float,const float,float,float,float,float,float,float,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const float,const float,float,float,float,float)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const float,const float,float,float,float,float,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector4,const vector4,int,float,float,vector4,vector4)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector4,const vector4,float,float,vector4,vector4)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector4,const vector4,int,float,float,vector4,vector4,const int,const int,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector4,const vector4,float,float,vector4,vector4,const int,const int,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector4,const vector4,int,float,float,vector4,vector4,const vector4)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector4,const vector4,float,float,vector4,vector4,const vector4)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector,const vector,int,float,float,vector,vector)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector,const vector,float,float,vector,vector)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector,const vector,int,float,float,vector,vector,const int,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector,const vector,float,float,vector,vector,const int,const int,const int)'})
call add(f,{'word':'vnoise','kind':'f','menu':'void(const vector,const vector,int,float,float,vector,vector,const vector)'})
call add(f,{'word':'vnoise','kind':'f','menu':'int(const vector,const vector,float,float,vector,vector,const vector)'})
let c['vnoise'] = f
let f = []
call add(f,{'word':'volume','kind':'f','menu':'float(const vector)'})
let c['volume'] = f
let f = []
call add(f,{'word':'volumegradient','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumegradient','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumegradient','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumegradient','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumegradient'] = f
let f = []
call add(f,{'word':'volumeindex','kind':'f','menu':'float(const int,const int,const vector)'})
call add(f,{'word':'volumeindex','kind':'f','menu':'float(const int,const string,const vector)'})
call add(f,{'word':'volumeindex','kind':'f','menu':'float(const string,const int,const vector)'})
call add(f,{'word':'volumeindex','kind':'f','menu':'float(const string,const string,const vector)'})
let c['volumeindex'] = f
let f = []
call add(f,{'word':'volumeindexactive','kind':'f','menu':'int(const int,const int,const vector)'})
call add(f,{'word':'volumeindexactive','kind':'f','menu':'int(const int,const string,const vector)'})
call add(f,{'word':'volumeindexactive','kind':'f','menu':'int(const string,const int,const vector)'})
call add(f,{'word':'volumeindexactive','kind':'f','menu':'int(const string,const string,const vector)'})
let c['volumeindexactive'] = f
let f = []
call add(f,{'word':'volumeindexorigin','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'volumeindexorigin','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'volumeindexorigin','kind':'f','menu':'vector(const string,const int)'})
call add(f,{'word':'volumeindexorigin','kind':'f','menu':'vector(const string,const string)'})
let c['volumeindexorigin'] = f
let f = []
call add(f,{'word':'volumeindextopos','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumeindextopos','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumeindextopos','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumeindextopos','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumeindextopos'] = f
let f = []
call add(f,{'word':'volumeindexv','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumeindexv','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumeindexv','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumeindexv','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumeindexv'] = f
let f = []
call add(f,{'word':'volumepostoindex','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumepostoindex','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumepostoindex','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumepostoindex','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumepostoindex'] = f
let f = []
call add(f,{'word':'volumeres','kind':'f','menu':'vector(const int,const int)'})
call add(f,{'word':'volumeres','kind':'f','menu':'vector(const int,const string)'})
call add(f,{'word':'volumeres','kind':'f','menu':'vector(const string,const int)'})
call add(f,{'word':'volumeres','kind':'f','menu':'vector(const string,const string)'})
let c['volumeres'] = f
let f = []
call add(f,{'word':'volumesample','kind':'f','menu':'float(const int,const int,const vector)'})
call add(f,{'word':'volumesample','kind':'f','menu':'float(const int,const string,const vector)'})
call add(f,{'word':'volumesample','kind':'f','menu':'float(const string,const int,const vector)'})
call add(f,{'word':'volumesample','kind':'f','menu':'float(const string,const string,const vector)'})
let c['volumesample'] = f
let f = []
call add(f,{'word':'volumesamplev','kind':'f','menu':'vector(const int,const int,const vector)'})
call add(f,{'word':'volumesamplev','kind':'f','menu':'vector(const int,const string,const vector)'})
call add(f,{'word':'volumesamplev','kind':'f','menu':'vector(const string,const int,const vector)'})
call add(f,{'word':'volumesamplev','kind':'f','menu':'vector(const string,const string,const vector)'})
let c['volumesamplev'] = f
let f = []
call add(f,{'word':'volumevoxeldiameter','kind':'f','menu':'float(const int,const int)'})
call add(f,{'word':'volumevoxeldiameter','kind':'f','menu':'float(const int,const string)'})
call add(f,{'word':'volumevoxeldiameter','kind':'f','menu':'float(const string,const int)'})
call add(f,{'word':'volumevoxeldiameter','kind':'f','menu':'float(const string,const string)'})
let c['volumevoxeldiameter'] = f
let f = []
call add(f,{'word':'vtransform','kind':'f','menu':'vector(const string,const string,const vector)'})
call add(f,{'word':'vtransform','kind':'f','menu':'vector(const string,const vector)'})
call add(f,{'word':'vtransform','kind':'f','menu':'vector(const vector,const matrix)'})
let c['vtransform'] = f
let f = []
call add(f,{'word':'warning','kind':'f','menu':'void(const string)'})
let c['warning'] = f
let f = []
let c['while'] = f
let f = []
call add(f,{'word':'wireblinn','kind':'f','menu':'bsdf(const vector,const float)'})
let c['wireblinn'] = f
let f = []
call add(f,{'word':'wirediffuse','kind':'f','menu':'bsdf(const vector)'})
let c['wirediffuse'] = f
let f = []
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,const float,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,const float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,const float,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,const float,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,const float,float,float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,const float,int,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,const float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,int,float,float,float,float,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,float,float,float,float,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const float,int,float,float,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const float,float,float,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector4,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector4,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector4,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector4,int,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector4,float,float,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector4,int,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector4,float,float,const int,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector2,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector2,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector2,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector2,int,float,float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector2,float,float,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector2,int,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector2,float,float,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector,int,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector,int,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector,float,float,float,float)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector,int,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector,float,float,float,float,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'void(const vector,int,float,float,const int,const int,const int)'})
call add(f,{'word':'wnoise','kind':'f','menu':'int(const vector,float,float,const int,const int,const int)'})
let c['wnoise'] = f
let f = []
call add(f,{'word':'wo_nspace','kind':'f','menu':'vector(const vector)'})
let c['wo_nspace'] = f
let f = []
call add(f,{'word':'wo_space','kind':'f','menu':'matrix()'})
call add(f,{'word':'wo_space','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'wo_space','kind':'f','menu':'vector(const vector)'})
let c['wo_space'] = f
let f = []
call add(f,{'word':'wo_vspace','kind':'f','menu':'vector(const vector)'})
let c['wo_vspace'] = f
let f = []
call add(f,{'word':'wt_nspace','kind':'f','menu':'vector(const vector)'})
let c['wt_nspace'] = f
let f = []
call add(f,{'word':'wt_space','kind':'f','menu':'matrix()'})
call add(f,{'word':'wt_space','kind':'f','menu':'vector4(const vector4)'})
call add(f,{'word':'wt_space','kind':'f','menu':'vector(const vector)'})
let c['wt_space'] = f
let f = []
call add(f,{'word':'wt_vspace','kind':'f','menu':'vector(const vector)'})
let c['wt_vspace'] = f
let f = []
call add(f,{'word':'xnoise','kind':'f','menu':'float(const float)'})
call add(f,{'word':'xnoise','kind':'f','menu':'float(const float,const float)'})
call add(f,{'word':'xnoise','kind':'f','menu':'float(const vector4)'})
call add(f,{'word':'xnoise','kind':'f','menu':'float(const vector)'})
call add(f,{'word':'xnoise','kind':'f','menu':'vector(const float)'})
call add(f,{'word':'xnoise','kind':'f','menu':'vector(const float,const float)'})
call add(f,{'word':'xnoise','kind':'f','menu':'vector(const vector4)'})
call add(f,{'word':'xnoise','kind':'f','menu':'vector(const vector)'})
let c['xnoise'] = f
let f = []
call add(f,{'word':'xnoised','kind':'f','menu':'void(const float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'float(const float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const float,const float,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'float(const float,const float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const float,const float,vector,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'vector(const float,const float,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const float,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'vector(const float,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const vector4,float,float,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'float(const vector4,float,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const vector4,vector,vector,vector,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'vector(const vector4,vector,vector,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const vector,float,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'float(const vector,float,float,float)'})
call add(f,{'word':'xnoised','kind':'f','menu':'void(const vector,vector,vector,vector,vector)'})
call add(f,{'word':'xnoised','kind':'f','menu':'vector(const vector,vector,vector,vector)'})
let c['xnoised'] = f
let f = []
let c['xor'] = f
let f = []
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const string,const vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const string,const vector,int,vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const string,const vector,int,vector,const float)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const vector,int,vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const int,const vector,int,vector,const float)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const string,const vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const string,const vector,int,vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const string,const vector,int,vector,const float)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const vector,int,vector)'})
call add(f,{'word':'xyzdist','kind':'f','menu':'float(const string,const vector,int,vector,const float)'})
let c['xyzdist'] = f
let f = []
call add(f,{'word':'xyztorgb','kind':'f','menu':'vector(const vector)'})
let c['xyztorgb'] = f
let contexts['cvex'] = c

return contexts
endfun
